<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo | Infinitos Contrastes</title>
    <link>https://imalexissaez.github.io/tags/hugo/</link>
      <atom:link href="https://imalexissaez.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <description>Hugo</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Alexis Sáez ©2020</copyright><lastBuildDate>Tue, 02 Jul 2019 00:00:01 +0100</lastBuildDate>
    <image>
      <url>https://imalexissaez.github.io/img/sharing.jpg</url>
      <title>Hugo</title>
      <link>https://imalexissaez.github.io/tags/hugo/</link>
    </image>
    
    <item>
      <title>Migrando al tema Academic</title>
      <link>https://imalexissaez.github.io/2019/07/02/migrando-al-tema-academic/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/2019/07/02/migrando-al-tema-academic/</guid>
      <description>&lt;p&gt;Aunque hace unos días publiqué un &lt;a href=&#34;https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/&#34;&gt;artículo&lt;/a&gt; que trataba sobre la configuración de ciertos aspectos de las hojas de estilos CSS del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, sí que es cierto que &lt;em&gt;Infinitos Contrastes&lt;/em&gt; lleva ya unas cuantas semanas bajo los auspicios del tema &lt;a href=&#34;https://sourcethemes.com/academic/&#34;&gt;&lt;em&gt;Academic&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;De vez en cuando, me gusta echar un vistazo a la &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;lista oficial&lt;/a&gt; de temas de la web oficial de &lt;em&gt;Hugo&lt;/em&gt;, sobre todo cuando siento que la organización de los contenidos no me termina de convencer. En uno de esos paseos, descubrí el tema &lt;em&gt;Academic&lt;/em&gt; y tres de sus aspectos enseguida captaron poderosamente mi atención:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En primer lugar, la construcción de la página inicial del sitio a través de diferentes &lt;em&gt;widgets&lt;/em&gt;. En &lt;em&gt;Infinitos Contrastes&lt;/em&gt; apenas uso unos pocos de ellos, pero en la página web de &lt;a href=&#34;https://academic-demo.netlify.com/&#34;&gt;ejemplo&lt;/a&gt; del tema aparecen casi todos y nos permiten hacernos una idea de su enorme potencial.&lt;/li&gt;
&lt;li&gt;En segundo lugar, la sección dedicada a los proyectos personales, con la posibilidad incorporada de filtrar por etiquetas, es una funcionalidad maravillosa en mi opinión. Ahora mismo, estoy experimentando con ella para organizar los &lt;a href=&#34;https://imalexissaez.github.io/proyecto/problemas/&#34;&gt;Problemas&lt;/a&gt; e información sobre la &lt;a href=&#34;https://imalexissaez.github.io/proyecto/capacitacion/&#34;&gt;Capacitación en Valenciano&lt;/a&gt;, por ejemplo.&lt;/li&gt;
&lt;li&gt;Finalmente, aunque no por ello menos impactante, la plantilla &lt;code&gt;docs&lt;/code&gt;, diseñada para elaborar documentación, pero cuya flexibilidad permite organizar fácilmente los apuntes de un curso o un proyecto de extensión considerable. Precisamente ha sido mi elección para recopilar una serie de notas personales de un &lt;a href=&#34;https://imalexissaez.github.io/courses/python-basic/&#34;&gt;curso de Python&lt;/a&gt; que recientemente he finalizado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además, una vez metido de lleno en los entresijos de este tema, no puedo más que destacar la excelente &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34;&gt;documentación&lt;/a&gt; del mismo. Con &lt;em&gt;Beautiful Hugo&lt;/em&gt; me animé a escribir una serie de artículos donde explicaba cómo tratar ciertos aspectos (aquel primer proyecto, &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Metablog&lt;/a&gt;), pero con &lt;em&gt;Academic&lt;/em&gt; es a todas luces innecesario, ya que han puesto a nuestra disposición toda una serie de detalladas explicaciones.&lt;/p&gt;
&lt;p&gt;Por otro lado, el nivel de actualizaciones sigue un elevado ritmo y la resolución de &lt;em&gt;bugs&lt;/em&gt; (una vez notificados en &lt;em&gt;GitHub&lt;/em&gt; abriendo &lt;em&gt;issues&lt;/em&gt;) es casi instantánea. Cada pocos días aparece un nuevo &lt;em&gt;commit&lt;/em&gt; que puede interesarnos y el proceso de actualización, localmente vía &lt;em&gt;script&lt;/em&gt; o automáticamente mediante &lt;em&gt;Netlify&lt;/em&gt;, es muy sencillo.&lt;/p&gt;
&lt;p&gt;Sin embargo, evidentemente, no todo han sido luces durante la migración. Las peculiaridades de este tema han provocado que haya tenido que revisar, una por una, todas las páginas generadas hasta el momento. Si bien es cierto que principalmente el trabajo se ha reducido a la edición de las cabeceras de los documentos, todavía quedan ciertos detalles a ajustar que, poco a poco, iré abordando en los próximos meses. En esta línea, también me gustaría comentar que no es un tema que recomendaría a alguien que se iniciase en el desarrollo web con &lt;em&gt;Hugo&lt;/em&gt;, puesto que la cantidad de opciones disponibles y decisiones a tomar puede resultar abrumadora.&lt;/p&gt;
&lt;p&gt;En resumen, &lt;em&gt;Academic&lt;/em&gt; es un tema excelente para aquellas personas que deseen ir &amp;lsquo;&amp;lsquo;un paso más allá&amp;rsquo;&amp;rsquo; en sus blogs y estén dispuestas a invertir unas cuantas horas entre la experimentación y la lectura de la extensa documentación.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unos cambios rápidos a las plantillas</title>
      <link>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</link>
      <pubDate>Sat, 01 Jun 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</guid>
      <description>&lt;p&gt;En esta entrada recojo el código necesario para localizar a español ciertas secciones de la página web, incluyendo un experimento que al final no terminó de convencerme, pero que comparto por si sirviera de inspiración a la creatividad ajena.&lt;/p&gt;
&lt;p&gt;Al final de cada una de las entradas del blog aparece un apartado de &lt;em&gt;etiquetas&lt;/em&gt;, que permite agrupar fácilmente contenidos relacionados. Cambiemos la cabecera de esta sección de &lt;code&gt;Tags:&lt;/code&gt; a &lt;code&gt;Etiquetas:&lt;/code&gt;. Para ello, editamos con &lt;em&gt;Sublime Text 3&lt;/em&gt; el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) y buscamos el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Tags: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acto seguido, modificamos el valor del atributo &lt;code&gt;content&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Etiquetas: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y guardamos los cambios realizados.&lt;/p&gt;
&lt;p&gt;Siguiendo con esta misma filosofía, traduzcamos ese &lt;code&gt;View all&lt;/code&gt; que aparece en las páginas de índice que agrupan contenidos por taxonomías. Para ello, editamos el archivo &lt;code&gt;terms.html&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y, utilizando el buscador de &lt;em&gt;Sublime Text 3&lt;/em&gt;, nos situamos donde aparece la mencionada cadena de caracteres y la sustituimos, por ejemplo, por &lt;code&gt;Ver todos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Todavía podemos mejorar un tanto la localización a español del tema a través de las taxonomías. Con tal objetivo en mente, modifiquemos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) como sigue, de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  project  = &amp;quot;projects&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, editamos la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y sustituimos el bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que aparezca en las entradas del blog información sobre el apartado o proyecto al que pertenecen, no tendríamos más que incorporar dos nuevos bloques a continuación, utilizando el anterior como guía y llevando a cabo las adaptaciones pertinentes. Por otro lado, sería más que recomendable crear en el archivo de estilos &lt;em&gt;css&lt;/em&gt; las clases &lt;code&gt;blog-etiquetas&lt;/code&gt;, &lt;code&gt;blog-apartados&lt;/code&gt; y &lt;code&gt;blog-proyectos&lt;/code&gt;, para mejorar el mantenimiento de la localización del tema en un futuro.&lt;/p&gt;
&lt;p&gt;A continuación, hemos de editar las plantillas &lt;code&gt;list.html&lt;/code&gt; e &lt;code&gt;index.html&lt;/code&gt; (ubicadas ambas en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;), substituyendo los bloques de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Añadiendo, acto seguido, bloques análogos para &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; si lo hemos considerado oportuno.&lt;/p&gt;
&lt;p&gt;Este cambio nos obliga a actualizar la ruta de acceso a la página de etiquetas, por lo que debemos editar el archivo &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) de manera que el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pase a ser&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;etiquetas&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, nos queda modificar el estilo de la cabecera de la página de etiquetas. Para ello editamos el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) buscando el término &lt;code&gt;header&lt;/code&gt; y añadiendo la cadena correspondiente a etiquetas. Por ejemplo, para el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;la modificación quedaría como sigue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .etiquetas-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En total, hemos de proceder de esta manera en tres ocasiones.&lt;/p&gt;
&lt;p&gt;Y ya que estamos con las manos en la masa, creemos las clases de estilos para &lt;code&gt;etiquetas&lt;/code&gt;, &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; trabajando sobre los bloques de código originales que aparecen tras el comentario &lt;code&gt;/* --- Tags --- */&lt;/code&gt; (recordemos que cualquier modificación puede implicar después que hayamos de editar la cabeceras de las páginas tal y como hicimos hace un instante). Así pues, nos van a quedar bloques como el que aparece a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags,
.blog-apartados,
.blog-etiquetas,
.blog-proyectos {
  font-family: &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;
  color: #999;
  font-size: 15px;
  margin-bottom: 30px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquellos en los que aparece el atributo &lt;code&gt;before&lt;/code&gt; no los podemos agrupar tan fácilmente. No obstante, no deja de ser trabajo de &lt;em&gt;copy&amp;amp;paste&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como he comentado arriba, no debemos olvidar añadir a las clases de las cabeceras las líneas correspondientes, de forma que nos aparezcan bloques como el que figura acto seguido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .apartados-heading,
.intro-header .etiquetas-heading,
.intro-header .proyectos-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, hacemos una nueva modificación sobre el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y cambiamos el nombre del menú principal &lt;em&gt;Blog&lt;/em&gt; por &lt;em&gt;Inicio&lt;/em&gt;. Así, el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pasa a ser&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Inicio&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acto seguido, en la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;) añado, en la ubicación donde aparecen las etiquetas, información sobre el apartado y el proyecto al que pertenece una entrada en particular. Por tanto, el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.apartados }}
  &amp;lt;div class=&amp;quot;blog-apartados&amp;quot;&amp;gt;
    {{ range .Params.apartados }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/apartados/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.proyectos }}
  &amp;lt;div class=&amp;quot;blog-proyectos&amp;quot;&amp;gt;
    {{ range .Params.proyectos }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/proyectos/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo, aunque es una opción razonable, no me convence cómo queda, por lo que, en mi caso, voy a dejarlo como estaba. No obstante, comparto el código fuente por si alguien tiene interés en realizar esta modificación.&lt;/p&gt;
&lt;p&gt;Por último, quizá quede todo un poco mejor si damos acceso a las diferentes secciones desde el menú superior derecho, con un desplegable. Para ello, modificamos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y dejamos la sección dedicada al menú como figura a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del menú superior derecho
#
[[menu.main]]
    identifier = &amp;quot;menu&amp;quot;
    name       = &amp;quot;Menú&amp;quot;
    weight     = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Apartados&amp;quot;
    url    = &amp;quot;apartados/&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Etiquetas&amp;quot;
    url    = &amp;quot;etiquetas/&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Proyectos&amp;quot;
    url    = &amp;quot;proyectos/&amp;quot;
    weight = 3

[[menu.main]]
    name   = &amp;quot;Acerca de&amp;quot;
    url    = &amp;quot;page/about/&amp;quot;
    weight = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concluyo aquí esta extensa entrada, dejando el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto MetaBlog&lt;/a&gt; en espera, pues en estos momentos estoy más centrado en la generación de contenido para la página web, que en la edición de la misma.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mejorando la estética de los bloques de código</title>
      <link>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</link>
      <pubDate>Thu, 20 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</guid>
      <description>&lt;p&gt;Por uno de esos casuales de la vida, me ha dado por revisar el sitio web con el móvil y ha sido entonces cuando he presenciado un horror sin parangón: ¿por qué se ven así mis bloques de código?&lt;/p&gt;
&lt;p&gt;Al parecer, me caracterizo por ser un animal de costumbres y cualquier desviación que me lleve mucho más allá de mi zona de confort me produce hasta angustia. Habitualmente, con los temas para páginas web con los que he trabajado, los bloques de código tienen habilitada la aparición de una barra de desplazamiento horizontal cuando figuran instrucciones de longitud considerable.&lt;/p&gt;
&lt;p&gt;Este es un comportamiento que me parece adecuado, ya que incrementa, en mi opinión, la legibilidad de los mencionados bloques de código. Por desgracia, en el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; no viene configurado así por defecto, de manera que una instrucción de longitud considerable se llega a dividir en varias líneas, dificultando en exceso la lectura.&lt;/p&gt;
&lt;p&gt;Las opciones de estilo para los bloques de código, curiosamente, no están declaradas en el archivo &lt;code&gt;main.css&lt;/code&gt;, como sería de esperar, sino en un fichero denominado &lt;code&gt;codeblock.css&lt;/code&gt;, que se encuentra en la ruta &lt;code&gt;\static\css\&lt;/code&gt; del directorio donde hayamos decidido almacenar localmente nuestro sitio web. Su contenido original es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras investigar un rato, he conseguido que aparezca la deseada barra de desplazamiento horizontal añadiendo unas cuantas líneas al anterior archivo, de forma que ahora presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}

pre {
    overflow-x: auto;
}

pre code {
    word-wrap: normal;
    white-space: pre;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El único inconveniente de este enfoque es que solo afecta a los bloques de código escritos usando &lt;em&gt;fences&lt;/em&gt; y no a los que generamos mediante el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; de &lt;em&gt;Hugo&lt;/em&gt;. No obstante, como habitualmente no recurro a este último, no he decido indagar más al respecto.&lt;/p&gt;
&lt;p&gt;En los próximos artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el comportamiento de KaTeX</title>
      <link>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</link>
      <pubDate>Tue, 18 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</guid>
      <description>&lt;p&gt;El tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene, por defecto, configurado para que podamos escribir expresiones matemáticas utilizando &lt;a href=&#34;https://khan.github.io/KaTeX/&#34;&gt;KaTeX&lt;/a&gt;. Tras unos minutos experimentando con esta tecnología surge enseguida la primera duda: ¿cómo puedo escribir ecuaciones en línea?&lt;/p&gt;
&lt;p&gt;Para empezar, recomiendo encarecidamente que acudamos a la página de &lt;a href=&#34;https://github.com/Khan/KaTeX/releases&#34;&gt;versiones&lt;/a&gt; de &lt;em&gt;KaTeX&lt;/em&gt; y nos hagamos con la última de ellas, para estar al día en las opciones que ofrece esta herramienta. A la hora de escribir estas líneas, dicha versión venía etiquetada como &lt;code&gt;v0.10.0-rc.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para ello, hacemos clic sobre el enlace denominado &lt;code&gt;katex.zip&lt;/code&gt; y así iniciaremos la descarga de un archivo comprimido, del cual nos interesan especialmente dos archivos contenidos en su interior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;katex.min.css&lt;/code&gt; y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;katex.min.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El primero de ellos lo ubicaremos, dentro del directorio donde hayamos decidido almacenar localmente el sitio web, en la ruta &lt;code&gt;\static\css\&lt;/code&gt;, mientras que el segundo en &lt;code&gt;\static\js\&lt;/code&gt;, sobrescribiendo en ambos casos las antiguas versiones que existiesen en dichas carpetas.&lt;/p&gt;
&lt;p&gt;Una vez al día, la siguiente tarea implica la modificación de una de las plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, concretamente la denominada como &lt;code&gt;footer.html&lt;/code&gt;, ubicada en la ruta &lt;code&gt;\layouts\partials\&lt;/code&gt;. Editamos el mencionado fichero con &lt;em&gt;Sublime Text 3&lt;/em&gt; y buscamos la siguiente línea:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt; renderMathInElement(document.body); &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos a configurar &lt;em&gt;KaTeX&lt;/em&gt; de manera que reconozca las expresiones encerradas entre &lt;code&gt;$&lt;/code&gt; o &lt;code&gt;\\(&lt;/code&gt; como ecuaciones en línea, mientras que las delimitadas por &lt;code&gt;$$&lt;/code&gt; o &lt;code&gt;\\[&lt;/code&gt; como ecuaciones centradas en sus propias líneas. Para ello, tecleamos en el lugar de la anterior instrucción el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  renderMathInElement(
    document.body,
    {
      delimiters: [
        {left: &amp;quot;$$&amp;quot;, right: &amp;quot;$$&amp;quot;, display: true},
        {left: &amp;quot;\\[&amp;quot;, right: &amp;quot;\\]&amp;quot;, display: true},
        {left: &amp;quot;$&amp;quot;, right: &amp;quot;$&amp;quot;, display: false},
        {left: &amp;quot;\\(&amp;quot;, right: &amp;quot;\\)&amp;quot;, display: false}
      ]
    }
  );
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez habilitada la opción de escribir ecuaciones en línea, un hecho salta a la vista de inmediato: ¿no parece que el tamaño de letra para las expresiones matemáticas es mayor que el declarado para el texto estándar? Efectivamente, peculiaridad que, en mi opinión, desluce bastante el aspecto (e incluso diría que dificulta la lectura) de los artículos.&lt;/p&gt;
&lt;p&gt;La solución pasa por modificar la hoja de estilos del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, almacenada en el archivo &lt;code&gt;main.css&lt;/code&gt;, que está ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;. Tras experimentar con cierto rango de valores para el tamaño de fuente de los objetos de la clase &lt;code&gt;.katex&lt;/code&gt;, al final me he decantado por la siguiente solución, que he colocado al principio del fichero &lt;code&gt;main.css&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Modificación para hacer que el tamaño de letra de KaTeX sea similar al de la web */
.katex { font-size: 1.1em !important; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En los próximos artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alojando nuestro sitio web en GitHub</title>
      <link>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</link>
      <pubDate>Sat, 01 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</guid>
      <description>&lt;p&gt;A estas alturas de la película, seguramente con algún que otro artículo redactado y revisado localmente de manera concienzuda, no nos queda más remedio que ocuparnos de un asunto un tanto tedioso: el alojamiento de nuestro sitio web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para tal empresa he optado por &lt;em&gt;GitHub&lt;/em&gt;, que nos permite alojar páginas web estáticas de manera gratuita (¡y sin publicidad!). Desgraciadamente, el proceso dista de ser intuitivo, por lo que examinaremos todos y cada uno de los pasos de la &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;guía oficial&lt;/a&gt; con sumo detalle.&lt;/p&gt;
&lt;p&gt;Para empezar, existe una serie de requisitos que hemos de cumplir para subir nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt; y son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tener instalado en nuestro equipo una versión de &lt;em&gt;Git&lt;/em&gt; superior a la &lt;code&gt;2.8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Disponer de una cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Contar con una página web lista para ser publicada en &lt;em&gt;Internet&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo que respecta a los dos primeros puntos del listado anterior, si estamos siguiendo el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; desde sus orígenes, no supondrán problema alguno, pues fueron abordados en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt; de la serie. En cuanto al tercer punto, con todo el trabajo que llevamos acumulado hasta el momento, es más que posible que entre nuestras manos tengamos ya un esbozo de sitio web que merezca la pena mostrar al resto del mundo.&lt;/p&gt;
&lt;p&gt;Una vez comprobado que satisfacemos los requisitos del procedimiento, el primer paso a realizar consiste en crear dos nuevos repositorios en nuestra cuenta de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, acudimos a la página de nuestro perfil en &lt;em&gt;GitHub&lt;/em&gt; y hacemos clic en el símbolo &lt;code&gt;+&lt;/code&gt; situado en la parte derecha del menú superior, para, a continuación, seleccionar la opción &lt;code&gt;New repositoy&lt;/code&gt;.&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img01_hu1d2635ce16c1c1734de122f7eae276c2_5134_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Creación de un nuevo repositorio en GitHub.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img01_hu1d2635ce16c1c1734de122f7eae276c2_5134_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;227&#34; height=&#34;162&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Creación de un nuevo repositorio en &lt;em&gt;GitHub&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;El primer repositorio que crearemos estará dedicado a almacenar el código fuente de nuestro sitio web y, en un alarde de infinita originalidad, lo denominaremos &lt;code&gt;sitio-web&lt;/code&gt;, tal y como figura en la siguiente imagen. Cuando hayamos rellenado el campo &lt;code&gt;Repository name&lt;/code&gt; haremos clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img02_hu6d07c69b2df423512b33433b2495891e_33732_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Elección del nombre del repositorio.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img02_hu6d07c69b2df423512b33433b2495891e_33732_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;718&#34; height=&#34;483&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Elección del nombre del repositorio.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;A continuación, de las tres opciones que nos ofrece la página que aparece ante nosotros, vamos a escoger la segunda, ya que cuando en &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;esta entrada&lt;/a&gt; generamos nuestro primer sitio web, a la vez iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;. Aquella acción, que en su momento podía parecer un tanto extraña, queda ahora totalmente justificada.&lt;/p&gt;
&lt;p&gt;Así pues, abrimos la terminal del sistema, nos desplazamos hasta el directorio raíz donde hayamos decidido almacenar localmente nuestro sitio web y tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin https://github.com/&amp;lt;USERNAME&amp;gt;/sitio-web.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, en lugar de &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt;, aparece directamente &lt;code&gt;ImAlexisSaez&lt;/code&gt;. Cada uno de nosotros tendrá definida esa parte del comando de manera diferente, por lo que recomiendo encarecidamente copiar la instrucción de la página de &lt;em&gt;GitHub&lt;/em&gt; en lugar de la que aparece arriba.&lt;/p&gt;
&lt;p&gt;Acto seguido, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta manera, transcurridos unos segundos, tendremos disponible en &lt;em&gt;GitHub&lt;/em&gt; una copia del código fuente que permite generar nuestra página web estática.&lt;/p&gt;
&lt;p&gt;A continuación, volvemos a &lt;em&gt;GitHub&lt;/em&gt; y creamos un nuevo repositorio. Este último tendrá un nombre especial que será, además, la dirección de acceso a nuestro sitio web. Hemos de combinar nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; con la extensión &lt;code&gt;.github.io&lt;/code&gt;. Por ejemplo, en mi caso queda &lt;code&gt;ImAlexisSaez.github.io&lt;/code&gt; y así es como rellené en su momento el campo &lt;code&gt;Repository name&lt;/code&gt;. Una vez escrito, simplemente tenemos que hacer clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Volvemos a la terminal del sistema y tecleamos &lt;code&gt;hugo server&lt;/code&gt;, para poder dar así una última revisión local a nuestro sitio web, utilizando la dirección ``http://localhost:1313&lt;code&gt;, y comprobar que todo está en perfecto estado. Cuando estemos satisfechos, acudimos de nuevo a la terminal del sistema y cerramos el servidor local, empleando para ello la combinación de teclas &lt;/code&gt;Ctrl + c`.&lt;/p&gt;
&lt;p&gt;Acto seguido, escribimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando borra por completo la carpeta &lt;code&gt;public&lt;/code&gt;, que se encuentra en el directorio donde tenemos almacenado localmente nuestro sitio web. Dicha carpeta se genera automáticamente cada vez que tecleamos &lt;code&gt;hugo server&lt;/code&gt; en la terminal del sistema, y contiene la versión final de nuestra página web.&lt;/p&gt;
&lt;p&gt;El siguiente paso, precisamente, es crear un submódulo de manera que la carpeta &lt;code&gt;public&lt;/code&gt; apunte a otra dirección de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, desde la terminal del sistema, tecleamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add -b master git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;donde sustituiremos &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; por el nombre de nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; (por ejemplo, &lt;code&gt;ImAlexisSaez&lt;/code&gt; en mi caso).&lt;/p&gt;
&lt;p&gt;¡Ya casi tenemos todo a punto! Únicamente hemos de abrir &lt;em&gt;Sublime Text 3&lt;/em&gt; y en un archivo, que guardaremos como &lt;code&gt;deploy.sh&lt;/code&gt; en el directorio raíz donde hayamos almacenado localmente nuestro sitio web, copiamos el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add .

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back up to the Project Root
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El anterior bloque de código se encarga, de manera automática, del proceso de subida de nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt;. Para utilizarlo, desde la terminal del sistema, nos situaremos en el directorio raíz donde hayamos decidido almacenar nuestro sitio web y teclearemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./deploy.sh &amp;quot;Mensaje que resuma los cambios&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, no me suelo esforzar mucho en declarar mensajes óptimamente descriptivos y, por ejemplo, cuando suba esta entrada el comando será del estilo &lt;code&gt;./deploy.sh &amp;quot;Añade entrada 20180901&amp;quot;&lt;/code&gt;. Los mensajes asociados al repositorio donde guardo el código fuente sí que intento que sean más expresivos y reflejen adecuadamente los cambios de las diferentes versiones.&lt;/p&gt;
&lt;p&gt;Con esto, damos por finalizado el proceso y nuestro sitio web será ahora accesible para todo el mundo a través de la dirección web que proporciona el segundo repositorio que hemos creado (en mi caso &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;En la siguiente entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; posiblemente empecemos a realizar cambios en la hoja de estilos &lt;em&gt;CSS&lt;/em&gt; y personalizar todavía más el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publicando la primera entrada en nuestro sitio web</title>
      <link>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</link>
      <pubDate>Thu, 30 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</guid>
      <description>&lt;p&gt;Tras haber recorrido, en el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, las seis estaciones del vía crucis asociado al calvario de la instalación de &lt;em&gt;Hugo&lt;/em&gt; y la personalización del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, llega el momento más anhelado por todos: generar contenido para el sitio web.&lt;/p&gt;
&lt;p&gt;A continuación, examinaremos, con sumo detalle, todo el proceso de elaboración y revisión local de artículos para nuestra página web. Para empezar, me gustaría comentar que, en el apartado de la &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-4-add-some-content&#34;&gt;guía oficial&lt;/a&gt; asociado a este asunto, se utiliza la combinación de la terminal del sistema y el comando &lt;code&gt;hugo new&lt;/code&gt; para dar a luz, de manera automática, una nueva entrada en el sitio web.&lt;/p&gt;
&lt;p&gt;No obstante, como no podía ser de otra manera y en un acto de la más absurda rebeldía, prefiero llevar a cabo este proceso de forma manual (qué obsesión con el control tengo, ¿verdad?). Si nos fijamos, desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, en la estructura de nuestra página web (heredada del sitio de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;), en el interior del directorio raíz existe una carpeta denominada &lt;code&gt;\content\&lt;/code&gt;, dentro de la cual residen anidadas otras dos: &lt;code&gt;\page\&lt;/code&gt; y &lt;code&gt;\post\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para respetar este esquema, he decidido ubicar todos los artículos del sitio web que se organicen por alguna taxonomía (recordemos que, en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, incluso añadimos alguna adicional a las que vienen dadas por defecto con &lt;em&gt;Hugo&lt;/em&gt;) en la carpeta &lt;code&gt;\post\&lt;/code&gt;, mientras que el resto irá al directorio &lt;code&gt;\page\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Siguiendo esta lógica, como seguramente la primera entrada que vayamos a publicar en nuestro sitio web será una especie de presentación en su blog, generaremos, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt;, un nuevo fichero en la carpeta &lt;code&gt;\post\&lt;/code&gt;. Este poseerá la extensión &lt;code&gt;.md&lt;/code&gt;, pues vamos a escribir todos y cada uno de nuestros artículos utilizando el lenguaje de marcado &lt;em&gt;Markdown&lt;/em&gt;. Para aquellas personas que escuchan por primera vez hablar de él, recomiendo encarecidamente que dediquen unos minutos a completar &lt;a href=&#34;https://www.markdowntutorial.com/&#34;&gt;este tutorial&lt;/a&gt; sobre el mismo.&lt;/p&gt;
&lt;p&gt;La estructura de todo artículo será la que figura acto seguido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
Metadatos del artículo.
---

Párrafo (o párrafos) de introducción al artículo.

Cuerpo del artículo.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al comienzo de cada entrada ubicaremos, delimitada por los caracteres &lt;code&gt;---&lt;/code&gt;, cierta información relevante (metadatos) acerca de la misma, que suministraremos en la forma de pares &lt;code&gt;variable: valor&lt;/code&gt;. Las variables disponibles a nuestro alcance vendrán determinadas por el tema que hayamos escogido finalmente para nuestro sitio web, aunque sí que es cierto que algunas de ellas son comunes a la mayoría de los temas (como, por ejemplo, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;draft&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Teniendo en cuenta que nuestra página web hace uso del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, y considerando la definición de taxonomías y la personalización del &lt;em&gt;permalink&lt;/em&gt; que llevamos a cabo en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, utilizo siempre el mismo esquema para la cabecera de mis artículos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:
slug:
date:
draft:
bigimg:
apartados:
etiquetas:
proyectos:
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso particular de esta entrada, la anterior cabecera ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:  &amp;quot;Publicando la primera entrada en nuestro sitio web&amp;quot;
slug:   &amp;quot;publicando-la-primera-entrada-en-nuestro-sitio-web&amp;quot;
date:   &amp;quot;2018-08-30T05:59:39+02:00&amp;quot;
draft:  false
bigimg: [{src: &amp;quot;img/blog/20180830-cabecera.jpg&amp;quot;}]
apartados: [&amp;quot;Blog&amp;quot;]
etiquetas: [&amp;quot;Hugo&amp;quot;]
proyectos: [&amp;quot;MetaBlog&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos a continuación el cometido de cada una de las variables que figuran en la cabecera:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: contiene el título del artículo. A diferencia de otros temas, por desgracia &lt;em&gt;Beautiful Hugo&lt;/em&gt; no admite la posibilidad de emplear &lt;em&gt;Markdown&lt;/em&gt; o &lt;em&gt;LaTeX&lt;/em&gt; en ciertas partes del título, hecho que debemos tener en consideración.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt;: tal y como comentamos en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, vamos a configurar manualmente el &lt;em&gt;permalink&lt;/em&gt; de cada entrada. Una de sus partes será, precisamente, la asociada a esta variable. Para generar su valor, sustituyo a mano los espacios por guiones y suprimo cualquier acento, eñe o carácter extraño a los ojos del alfabeto inglés que pudiese figurar en el título del artículo. En particular, para esta entrada, el &lt;em&gt;permalink&lt;/em&gt; será &lt;code&gt;/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/&lt;/code&gt;, es decir, la fecha de publicación junto al valor que hemos asignado a la variable &lt;code&gt;slug&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: fecha y hora de publicación del artículo. Me gustaría comentar aquí que nada nos impide generar contenido para fechas futuras, aunque cuando escribamos en la terminal del sistema &lt;code&gt;hugo server&lt;/code&gt;, no tendremos acceso a su revisión. Para solventar esta situación, tenemos que añadir la etiqueta &lt;code&gt;-F&lt;/code&gt;, es decir, teclear &lt;code&gt;hugo server -F&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: variable que nos permite indicar si la entrada en concreto tiene carácter de borrador (utilizando el valor &lt;code&gt;true&lt;/code&gt;) o si ya está lista para su publicación en nuestro sitio web (empleando el valor &lt;code&gt;false&lt;/code&gt;). Para revisar localmente una página web que contenga artículos en forma de borrador, hemos de escribir en la terminal del sistema &lt;code&gt;hugo server -D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigimg&lt;/code&gt;: esta variable nos permite insertar la ruta hacia una imagen de cabecera para nuestros artículos. En &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt; está explicado en detalle el funcionamiento de esta característica particular del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apartados&lt;/code&gt;: primera taxonomía que utilizaremos para agrupar contenido según la categoría a la que pertenezca el artículo. No es más que la localización al español de la habitual &lt;code&gt;categories&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etiquetas&lt;/code&gt;: segunda taxonomía que utilizaremos para agrupar contenido según las palabras clave que caractericen a la entrada. No es más que la localización al español de la habitual &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proyectos&lt;/code&gt;: tercera taxonomía (generalmente opcional) que nos permitirá agrupar contenido que pertenezca a distintos apartados y posea diferentes etiquetas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tras declarar la cabecera, redactaremos un párrafo (o varios) de introducción al artículo, tras los cuales escribiremos la instrucción &lt;code&gt;more&lt;/code&gt;, precedida de los símbolos &lt;code&gt;&amp;lt;!--&lt;/code&gt; y seguida de &lt;code&gt;--&amp;gt;&lt;/code&gt;. Dichos párrafos, además de ser aquellos que den comienzo a nuestra entrada, serán los que figuren en las páginas de listado de nuestro sitio web. ¿A qué me refiero con las páginas de listado? Serían, por ejemplo, la principal de acceso al sitio web y todas aquellas que ofrecen un índice que contiene los artículos asociados a una taxonomía en particular.&lt;/p&gt;
&lt;p&gt;Tras dicha instrucción, finalmente, ya solo nos restará explayarnos tanto como deseemos en el cuerpo de la entrada. &lt;em&gt;The sky is the limit!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; estudiaremos cómo utilizar &lt;em&gt;GitHub&lt;/em&gt; para alojar nuestra página web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (II)</title>
      <link>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</link>
      <pubDate>Thu, 09 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</guid>
      <description>&lt;p&gt;Nos quedamos, en la &lt;a href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/&#34;&gt;anterior entrada&lt;/a&gt; del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, a falta de revisar la parte final del archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;. Terminemos pues de echarle un vistazo a dicho fichero en este artículo.&lt;/p&gt;
&lt;p&gt;Al finalizar la personalización de los parámetros básicos del sitio web, se asomaba ante nosotros el siguiente, y muy extraño, bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nada intuitivo su contenido y carente por completo de comentarios, hecho nada halagüeño. Sin embargo, basta que experimentemos un poco con la anteriores líneas para comprobar que esta sección del archivo &lt;code&gt;config.toml&lt;/code&gt; es la dedicada a gestionar la aparición de un carrusel de imágenes en la página web de acceso, situándolo justo detrás del título.&lt;/p&gt;
&lt;p&gt;Conviene que le echemos un vistazo a la entrada que aparece en el propio blog de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; hablando de la gestión de imágenes de cabecera. En el caso de haber varias declaradas, estas rotan cada diez segundos. Por otro lado, tenemos a nuestra disposición los siguientes parámetros de configuración:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: ruta que apunta a la ubicación de la imagen de cabecera.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desc&lt;/code&gt;: parámetro opcional que nos permite incorporar un pequeño texto sobre la imagen, a modo de pie de figura.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En mi caso, tras navegar un rato por &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;, descargué fotografías hasta componer un carrusel de cinco imágenes a las que no incorporé pie de figura alguno. Por tanto, el anterior bloque de código me ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del carrusel de imágenes de la página de inicio
#
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-01.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-02.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-03.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-04.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-05.jpg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desvelado el anterior misterio, continuemos con la revisión del archivo &lt;code&gt;config.toml&lt;/code&gt;. El siguiente bloque de instrucciones hace referencia a los datos sobre el autor del sitio web (nombre, correo electrónico, etc.). Nos permite, además, configurar una amplia gama de enlaces a nuestras cuentas de redes sociales para así facilitar la conexión entre personas. Originalmente, dicho bloque presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Author]
  name = &amp;quot;Some Person&amp;quot;
  website = &amp;quot;yourwebsite.com&amp;quot;
  email = &amp;quot;youremail@domain.com&amp;quot;
  facebook = &amp;quot;username&amp;quot;
  googleplus = &amp;quot;+username&amp;quot; # or xxxxxxxxxxxxxxxxxxxxx
  github = &amp;quot;username&amp;quot;
  gitlab = &amp;quot;username&amp;quot;
  bitbucket = &amp;quot;username&amp;quot;
  twitter = &amp;quot;username&amp;quot;
  reddit = &amp;quot;username&amp;quot;
  linkedin = &amp;quot;username&amp;quot;
  xing = &amp;quot;username&amp;quot;
  stackoverflow = &amp;quot;users/XXXXXXX/username&amp;quot;
  snapchat = &amp;quot;username&amp;quot;
  instagram = &amp;quot;username&amp;quot;
  youtube = &amp;quot;user/username&amp;quot; # or channel/channelname
  soundcloud = &amp;quot;username&amp;quot;
  spotify = &amp;quot;username&amp;quot;
  bandcamp = &amp;quot;username&amp;quot;
  itchio = &amp;quot;username&amp;quot;
  vk = &amp;quot;username&amp;quot;
  paypal = &amp;quot;username&amp;quot;
  telegram = &amp;quot;username&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personalmente, no utilizo apenas las redes sociales y confieso que, del anterior listado, ni siquiera conozco algunas de ellas. Así pues, como no podía ser de otra manera, en mi caso el anterior bloque de código ha quedado ciertamente reducido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del autor
#
[Author]
  name    = &amp;quot;Alexis Sáez&amp;quot;
  website = &amp;quot;https://imalexissaez.github.io/&amp;quot;
  email   = &amp;quot;imalexissaez@gmail.com&amp;quot;
  github  = &amp;quot;ImAlexisSaez&amp;quot;
  twitter = &amp;quot;imalexissaez&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El último bloque de instrucciones que se presenta ante nosotros nos ofrece la posibilidad de configurar el menú que aparece en la parte superior derecha y presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1

[[menu.main]]
    name = &amp;quot;About&amp;quot;
    url = &amp;quot;page/about/&amp;quot;
    weight = 3

[[menu.main]]
    identifier = &amp;quot;samples&amp;quot;
    name = &amp;quot;Samples&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Big Image Sample&amp;quot;
    url = &amp;quot;post/2017-03-07-bigimg-sample&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Math Sample&amp;quot;
    url = &amp;quot;post/2017-03-05-math-sample&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Code Sample&amp;quot;
    url = &amp;quot;post/2016-03-08-code-sample&amp;quot;
    weight = 3

[[menu.main]]
    name = &amp;quot;Tags&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No obstante, de momento, dejaremos el anterior bloque tal cual figura arriba y ya procederemos en un futuro a su modificación, cuando incorporemos algunos cambios adicionales al sitio web.&lt;/p&gt;
&lt;p&gt;Fin del archivo &lt;code&gt;config.toml&lt;/code&gt;, fin de la entrada, ¿verdad? Todavía no. Nos quedan un par de detalles a los que echarles un vistazo.&lt;/p&gt;
&lt;p&gt;Para empezar, a continuación, configuraremos las taxonomías de nuestro sitio web. ¿Qué es una taxonomía? Sin pretender entrar en detalles técnicos aquí, para que nos hagamos una idea, una taxonomía es un instrumento que nos permite agrupar contenido relacionado. Los ejemplos más habituales a los que estamos acostumbrados son &lt;em&gt;categorías&lt;/em&gt; y &lt;em&gt;etiquetas&lt;/em&gt; (que aquí se llamarán &lt;em&gt;categories&lt;/em&gt; y &lt;em&gt;tags&lt;/em&gt;), que facilitan al lector encontrar artículos que comparten cierta temática.&lt;/p&gt;
&lt;p&gt;En mi caso, para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, conservaré ambas, aunque renombrando su versión inglesa al castellano, para facilitar después la configuración de la localización de la plantilla. Así, &lt;code&gt;categories&lt;/code&gt; pasará a ser &lt;code&gt;apartados&lt;/code&gt;, mientras que &lt;code&gt;tags&lt;/code&gt; se convertirá en &lt;code&gt;etiquetas&lt;/code&gt;. Además, declararé una nueva taxonomía denominada &lt;code&gt;proyectos&lt;/code&gt;, que me facilitará agrupar fácilmente contenido, llegado el caso, de distintos apartados o etiquetas.&lt;/p&gt;
&lt;p&gt;Todo ello se traduce en incluir el siguiente bloque de código en el fichero &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recomiendo seguir la estructura &lt;code&gt;singular = plural&lt;/code&gt; marcada en la &lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34;&gt;guía oficial&lt;/a&gt; de taxonomías de &lt;em&gt;Hugo&lt;/em&gt;. De hecho, dado que la formación de plurales en inglés y castellano es diferente, afinaría un poco la anterior recomendación señalando que conviene escoger parejas en donde el plural se diferencie del singular únicamente por el carácter &lt;code&gt;s&lt;/code&gt; final.&lt;/p&gt;
&lt;p&gt;¿Por qué debemos cuidar tanto el detalle a la hora de declarar taxonomías? Es posible que en un futuro nos adentremos en la personalización de las plantillas del tema y &lt;em&gt;Hugo&lt;/em&gt; incorpora útiles funciones para recorrer bucles apoyándose en esta curiosa relación singular-plural. Es por ello que no vamos a pegarnos un tiro en los pies declarando parejas de variables y valores que luego nos impidan aprovecharnos de las mencionadas herramientas.&lt;/p&gt;
&lt;p&gt;Por último, para finalizar este artículo, echaremos un vistazo a la configuración del &lt;a href=&#34;https://gohugo.io/content-management/urls/&#34;&gt;permalink&lt;/a&gt; de las entradas del sitio web. Por defecto, &lt;em&gt;Hugo&lt;/em&gt; utiliza el directorio donde se encuentre el contenido (generalmente es &lt;code&gt;\post\&lt;/code&gt;) y lo concatena con el título de la entrada, para el que sustituye espacios por guiones.&lt;/p&gt;
&lt;p&gt;Para empezar, me gustaría que apareciese el día de publicación del artículo en el &lt;em&gt;permalink&lt;/em&gt;, siguiendo el formato &lt;code&gt;/año/mes/día&lt;/code&gt;. Por otro lado, como soy consciente de que utilizar caracteres extraños a ojos del alfabeto inglés (tildes, eñes, etc.), en ocasiones, es fuente de problemas, en cada entrada definiré manualmente mi propio &lt;em&gt;slug&lt;/em&gt;, para evitar que la traducción automática del título hacia su correspondiente parte del &lt;em&gt;permalink&lt;/em&gt; dé lugar a resultados no deseados.&lt;/p&gt;
&lt;p&gt;Así pues, mi archivo &lt;code&gt;config.toml&lt;/code&gt; finaliza con el siguiente bloque código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del permalink
#
[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; dejaremos a un lado, de momento, la configuración de la plantilla para estudiar cómo generar contenido (en forma de artículos) para nuestro sitio web.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (I)</title>
      <link>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</link>
      <pubDate>Tue, 07 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</guid>
      <description>&lt;p&gt;Continuemos esta serie de artículos, pertenecientes al &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, donde examinamos con detalle la creación de sitios web utilizando &lt;em&gt;Hugo&lt;/em&gt;. Hoy veremos cómo instalar y configurar el tema &lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34;&gt;Beautiful Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/&#34;&gt;anterior entrada&lt;/a&gt; vimos el proceso a seguir para el tema &lt;em&gt;Anake&lt;/em&gt;. No obstante, como ya comenté entonces, algunos detalles de dicha plantilla no terminaban de convencerme para la idea que tenía en mente para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;. Así pues, tras invertir una considerable cantidad de tiempo en navegar por la &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;sección de temas&lt;/a&gt; de la web oficial de &lt;em&gt;Hugo&lt;/em&gt;, encontré, para mi fortuna, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, una adaptación del tema &lt;em&gt;Beautiful Jekyll&lt;/em&gt; que ya utilicé en su momento como plantilla para mi sitio web.&lt;/p&gt;
&lt;p&gt;Me encanta este tema por el protagonismo que ofrece al contenido, evitando toda esa miríada de elementos que algunas plantillas incorporan y que distraen enormemente la atención a la hora de consultar la información contenida en los artículos. Además, viene con el interesante añadido para un matemático de incorporar, de serie, la configuración adecuada para escribir fórmulas vía &lt;em&gt;KaTeX&lt;/em&gt; (es un detalle con cierta trampa, ya que buenas batallas estoy lidiando, en ocasiones, para que las expresiones matemáticas se visualicen como deberían).&lt;/p&gt;
&lt;p&gt;Así pues, procedamos a su instalación. Para ello, en la terminal, desde el directorio raíz donde hayamos escogido alojar localmente nuestro sitio web, tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y clonamos, en esta carpeta, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; escribiendo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/halogenica/beautifulhugo.git beautifulhugo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al igual que el tema &lt;em&gt;Anake&lt;/em&gt;, &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene acompañado, para nuestro gozo y disfrute, con un pequeño sitio web de muestra, ubicado en la carpeta &lt;code&gt;exampleSite&lt;/code&gt; (siendo la ruta completa &lt;code&gt;\themes\beautifulhugo\exampleSite&lt;/code&gt;). A través del &lt;em&gt;Explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt; podemos comprobar que su contenido es el que se muestra en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/20180807-img01_hu4ce66409e8b1ed97e8056bfee71b847c_1870_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Contenido del sitio web de ejemplo&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/20180807-img01_hu4ce66409e8b1ed97e8056bfee71b847c_1870_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;91&#34; height=&#34;90&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Contenido del sitio web de ejemplo
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Procedemos entonces a copiar las carpetas &lt;code&gt;contents&lt;/code&gt;, &lt;code&gt;layouts&lt;/code&gt; y &lt;code&gt;static&lt;/code&gt;, así como el archivo &lt;code&gt;config.toml&lt;/code&gt; y las pegamos en el directorio raíz de nuestro sitio web. A estas alturas de la película, dependiendo de la intensidad con la que hayamos estado experimentando con diversas plantillas, recomendaría incluso eliminar previamente las mencionadas carpetas y el citado fichero antes de proceder a la acción de pegar, para así evitar la aparición de extraños conflictos en un futuro próximo.&lt;/p&gt;
&lt;p&gt;Ahora, editamos el archivo &lt;code&gt;config.toml&lt;/code&gt;, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt; para ello, con el objetivo de empezar a personalizar la configuración de esta plantilla. Algunos de los detalles que a continuación veremos son muy similares a los que discutimos durante el artículo dedicado al tema &lt;em&gt;Anake&lt;/em&gt;, por lo que en esta ocasión el ritmo de exposición será más ligero.&lt;/p&gt;
&lt;p&gt;El primer bloque de código que encontramos es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;https://username.github.io&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
#DefaultContentLanguage = &amp;quot;ja&amp;quot;
title = &amp;quot;Beautiful Hugo&amp;quot;
theme = &amp;quot;beautifulhugo&amp;quot;
metaDataFormat = &amp;quot;yaml&amp;quot;
pygmentsStyle = &amp;quot;trac&amp;quot;
pygmentsUseClasses = true
pygmentsCodeFences = true
pygmentsCodefencesGuessSyntax = true
#pygmentsUseClassic = true
#pygmentOptions = &amp;quot;linenos=inline&amp;quot;
#disqusShortname = &amp;quot;XXX&amp;quot;
#googleAnalytics = &amp;quot;XXX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algunas variables nos resultarán familiares, por lo que seremos capaces inmediatamente de asignarles sus correspondientes valores. Por ejemplo, las primeras líneas, en mi caso, han quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio
#
title   = &amp;quot;Infinitos Contrastes&amp;quot;            # Título de la web
theme   = &amp;quot;beautifulhugo&amp;quot;                   # Tema 
baseurl = &amp;quot;https://imalexissaez.github.io/&amp;quot; # URL base
metaDataFormat         = &amp;quot;yaml&amp;quot;             # Formato de las cabeceras de las entradas
DefaultContentLanguage = &amp;quot;es&amp;quot;               # Lenguaje de la web (activa localización)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ninguna sorpresa aquí. Entre los descriptivos nombres que poseen las variables y los comentarios que he añadido, no es descabellado suponer que todos configuraremos de manera adecuada el anterior bloque.&lt;/p&gt;
&lt;p&gt;Ahora bien, el siguiente apartado sí que merece explicación por mi parte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los bloques de código fuente
# Guía en: https://gohugo.io/content-management/syntax-highlighting/
#
pygmentsStyle                 = &amp;quot;trac&amp;quot;
pygmentsUseClasses            = true
pygmentsCodeFences            = true
pygmentsCodefencesGuessSyntax = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;He dejado en los comentarios un enlace a la guía oficial para la configuración del &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34;&gt;resaltado de código&lt;/a&gt; a la que convendría que echásemos un vistazo. Para empezar, existen diferentes estilos &lt;em&gt;CSS&lt;/em&gt; que, principalmente, afectan a los colores en los que se resaltan las palabras clave de los lenguajes de programación, así como al fondo en el que el código aparece. Tras revisar las opciones disponibles, el valor &lt;code&gt;&amp;quot;trac&amp;quot;&lt;/code&gt;, en mi opinión, es el que más a juego va con &lt;em&gt;Beautiful Hugo&lt;/em&gt;. Por otro lado, como este tema utiliza la librería &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; (en lugar de la que &lt;em&gt;Hugo&lt;/em&gt; incorpora por defecto) para el mencionado resaltado, hemos de asignar &lt;code&gt;true&lt;/code&gt; a la variable &lt;code&gt;pygmentsUseClasses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuación, habilitamos la posibilidad de escribir código fuente en &amp;ldquo;&lt;em&gt;fences&lt;/em&gt;&amp;quot;, es decir, delimitándolo entre los caracteres habituales para ello (echa un vistazo a la &lt;a href=&#34;https://kramdown.gettalong.org/quickref.html#code-blocks&#34;&gt;guía oficial&lt;/a&gt; de &lt;em&gt;Kramdown&lt;/em&gt; sobre bloques de código para una rápida referencia). Recomiendo actuar así porque, en ocasiones, el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; se comporta de manera extraña, sobre todo en lo que respecta al interlineado cuando incluimos comentarios.&lt;/p&gt;
&lt;p&gt;Además, aunque hemos activado la opción de adivinar el lenguaje de programación por su sintaxis, recomendaría aquí que ayudásemos en lo posible a la librería y le indicáramos cuál estamos empleando, para que así aplique la configuración adecuada para él. Actuar así es crítico cuando, como en este artículo, compartimos pequeños bloques de código, de forma que es bastante complicado acertar con el lenguaje de programación dada la escasa información que suministramos.&lt;/p&gt;
&lt;p&gt;Finalmente, nos limitaremos a introducir los valores correspondientes a las cuentas que habremos creado para &lt;em&gt;Disqus&lt;/em&gt; y para las estadísticas de &lt;em&gt;Google&lt;/em&gt; en el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los comentarios (Disqus)
#
disqusShortname = &amp;quot;&amp;quot;

#
# Configuración de las estadísticas (Google Analytics)
#
googleAnalytics = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nuestra siguiente parada será en la sección dedicada a la configuración de los parámetros del sitio web, que originalmente presenta el aspecto que se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Params]
#  homeTitle = &amp;quot;Beautiful Hugo Theme&amp;quot; # Set a different text for the header on the home page
  subtitle = &amp;quot;Build a beautiful and simple website in minutes&amp;quot;
  logo = &amp;quot;img/avatar-icon.png&amp;quot;
  favicon = &amp;quot;img/favicon.ico&amp;quot;
  dateFormat = &amp;quot;January 2, 2006&amp;quot;
  commit = false
  rss = true
  comments = true
  readingTime = true
  useHLJS = true
  socialShare = true
#  gcse = &amp;quot;012345678901234567890:abcdefghijk&amp;quot; # Get your code from google.com/cse. Make sure to go to &amp;quot;Look and Feel&amp;quot; and change Layout to &amp;quot;Full Width&amp;quot; and Theme to &amp;quot;Classic&amp;quot;

#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empecemos analizando la primera parte que, en mi caso, ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros del sitio web
#
[Params]
  subtitle    = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot; # Subtítulo
  logo        = &amp;quot;img/avatar.jpg&amp;quot;                               # Logo
  favicon     = &amp;quot;img/favicon.ico&amp;quot;                              # Favicon
  dateFormat  = &amp;quot;02-01-2006&amp;quot;                                   # Formato de la fecha
  commit      = false                                          # commit en footer
  rss         = true                                           # Sindicación
  comments    = true                                           # Comentarios activados por defecto
  readingTime = true                                           # Estimación del tiempo de lectura
  useHLJS     = true                                           # Highlight.js para resaltado
  socialShare = true                                           # Compartir entradas en redes sociales
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ya que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No he visto la necesidad de utilizar la variable &lt;code&gt;homeTitle&lt;/code&gt; para modificar el texto que aparece al acceder al sitio web. Me parece adecuado que sea el nombre de la página web: &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, pero, como siempre, &amp;ldquo;para gustos, los colores&amp;rdquo;. La variable &lt;code&gt;subtitle&lt;/code&gt; sí que me resulta interesante para ofrecer una breve descripción o eslogan de nuestra página web.&lt;/li&gt;
&lt;li&gt;Los valores para las variables &lt;code&gt;logo&lt;/code&gt; y &lt;code&gt;favicon&lt;/code&gt; deben apuntar a las rutas donde ubiquemos las respectivas imágenes. Por defecto, las hojas de estilo &lt;em&gt;CSS&lt;/em&gt;, las librerías escritas con &lt;em&gt;JavaScript&lt;/em&gt; y las imágenes las almacenaremos en el interior del directorio &lt;code&gt;static&lt;/code&gt;. Como &lt;em&gt;Hugo&lt;/em&gt; supone este hecho, no es necesario que antecedamos cada ruta con &lt;code&gt;static&lt;/code&gt;, pero debemos ubicar cada recurso adecuadamente.&lt;/li&gt;
&lt;li&gt;La localización de &lt;em&gt;Hugo&lt;/em&gt; a idiomas diferentes al inglés es todavía un aspecto que admite gran margen de mejora. Aunque &lt;em&gt;Beautiful Hugo&lt;/em&gt; incorpora la posibilidad de declarar ciertos textos para distintos idiomas, el tratamiento de las fechas no es todavía el adecuado para las opciones disponibles. Con el objeto de evitar entrar en agotadoras batallas, me he decantado finalmente por un formato &amp;ldquo;neutro&amp;rdquo; para expresar la fecha, en el sentido de que únicamente incluye números, evitando así que en la página aparezcan los nombres de los días de la semana o los de los meses en inglés.&lt;/li&gt;
&lt;li&gt;La variable &lt;code&gt;commit&lt;/code&gt; nos permite insertar el código SHA correspondiente al &lt;em&gt;commit&lt;/em&gt; que generó la última versión del sitio web. No he considerado que dicha información fuera a proporcionar demasiada utilidad para una página como la mía, así que he declarado su valor como &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;El resto de las variables activan, pues su valor es &lt;code&gt;true&lt;/code&gt;, respectivamente, la sindicación vía &lt;em&gt;RSS&lt;/em&gt;, la posibilidad de realizar comentarios en los distintos artículos de la web (vía &lt;em&gt;Disqus&lt;/em&gt;), una estimación del tiempo de lectura para cada entrada (utilizando como referencia 200 palabras por minuto), el uso de la librería &lt;em&gt;highlight.js&lt;/em&gt; para resaltar código y el acceso a compartir nuestro contenido en distintas redes sociales.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como la entrada está empezando a adquirir una extensión considerable. Vamos a poner aquí un punto y seguido, dejando para el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; el análisis del resto de la configuración del archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Ananke</title>
      <link>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</link>
      <pubDate>Tue, 17 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</guid>
      <description>&lt;p&gt;En la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; generamos, ¡solucionando incluso un pequeño &lt;em&gt;bug&lt;/em&gt;!, nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;, utilizando para ello el tema &lt;em&gt;Ananke&lt;/em&gt;. Veamos qué opciones de configuración nos ofrece dicho tema a continuación.&lt;/p&gt;
&lt;p&gt;Así pues, dedicaremos única y exclusivamente este cuarto artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; a examinar con detalle el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, que se ubica en la raíz del directorio donde hayamos decidido almacenar nuestro sitio web.&lt;/p&gt;
&lt;p&gt;Si en su momento nos decantamos por seguir, al pie de la letra, el contenido de la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt;, dicho fichero debería figurar en el interior de la ruta &lt;code&gt;C:\Hugo\Sites\prueba&lt;/code&gt;. Desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, lo seleccionamos con el botón derecho del ratón y escogemos la opción &lt;code&gt;Open with Sublime Text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Parte de su contenido nos resultará familiar a estas alturas, pues ya tuvimos que editar el mencionado archivo para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía tener acceso local al sitio web. Empecemos examinando el primer bloque de código, aquel que comprende las siguientes cinco líneas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;title = &amp;quot;Notre-Dame de Paris&amp;quot;
baseURL = &amp;quot;https://example.com&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;gohugo-theme-ananke&amp;quot;
# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos ante una serie de pares &lt;code&gt;variable = valor&lt;/code&gt;, en donde hemos de personalizar las cadenas de texto para que se ajusten a las opciones que deseamos de cara a nuestro sitio web.&lt;/p&gt;
&lt;p&gt;En el primero de ellos, la variable &lt;code&gt;title&lt;/code&gt;, como bien señala de manera descriptiva su nombre, nos permite indicar el título de la página web. En mi caso, me gustaría que fuese &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, por lo que no tengo más que modificar esa primera línea y teclear &lt;code&gt;title = &amp;quot;Infinitos Contrastes&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ahora, a &lt;code&gt;baseURL&lt;/code&gt; hemos de asignarle el enlace que utilizaremos para acceder a nuestro sitio web a través del navegador web. Dado que la idea es que alojemos la página web en &lt;em&gt;GitHub&lt;/em&gt;, dicha dirección será del estilo &lt;code&gt;https://&amp;lt;NOMBRE_DE_TU_CUENTA&amp;gt;.github.io&lt;/code&gt;. Para ilustrar esto último de manera más concreta, el nombre de mi cuenta en &lt;em&gt;GitHub&lt;/em&gt; es &lt;code&gt;ImAlexisSaez&lt;/code&gt;, por lo que el enlace que permitirá el acceso remoto a la página web será &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;, valor que asignaré a la variable &lt;code&gt;baseURL&lt;/code&gt; en su correspondiente línea.&lt;/p&gt;
&lt;p&gt;A continuación, en &lt;code&gt;languageCode&lt;/code&gt; reside el código del lenguaje en el que se generará nuestro sitio web, que, por defecto, es inglés estadounidense (&lt;code&gt;en-us&lt;/code&gt;). Si vamos a generar contenido un idioma diferente, conviene que modifiquemos el valor de dicha línea. Para el español, el código asociado es &lt;code&gt;es&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Aunque a primera vista no parezca un detalle relevante, es importante asignar el código adecuado a &lt;code&gt;languageCode&lt;/code&gt;, puesto que algunos temas de &lt;em&gt;Hugo&lt;/em&gt; incorporan la posibilidad de localización a diferentes lenguajes y la clave pasa, precisamente, por el valor indicado para dicha variable. Para muestra, un botón: el tema actual de este sitio web, &lt;em&gt;Beautiful Hugo&lt;/em&gt;, es uno de esos ejemplos y en un futuro veremos cómo lidiar con el asunto de la localización en &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La siguiente línea, &lt;code&gt;theme = &amp;quot;gohugo-theme-ananke&amp;quot;&lt;/code&gt;, le indica a &lt;em&gt;Hugo&lt;/em&gt; en qué ruta ha de buscar para acceder a los archivos correspondientes al tema de la web. Es posible que en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; no nos diésemos cuenta, pero cuando instalamos el tema &lt;em&gt;Ananke&lt;/em&gt; automáticamente se generó una carpeta en nuestro disco duro llamada &lt;code&gt;gohugo-theme-ananke&lt;/code&gt;, en el interior del directorio &lt;code&gt;themes&lt;/code&gt;. La variable &lt;code&gt;theme&lt;/code&gt; simplemente apunta a esa ruta, de manera que si, por el extraño motivo que sea, nos vemos en la necesidad de modificar el nombre de la mencionada carpeta, también deberíamos cambiar el valor de esta línea en el archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Por lo que respecta a la última línea de este bloque de código, para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía revisar localmente el sitio web, usamos el símbolo de comentario (&lt;code&gt;#&lt;/code&gt;) para anularla. De esta forma, directamente podemos suprimirla, quedando definitivamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio web
#
title        = &amp;quot;Infinitos Contrastes&amp;quot;             # Título
baseURL      = &amp;quot;https://imalexissaez.github.io/&amp;quot;  # Enlace de entrada
languageCode = &amp;quot;es&amp;quot;                               # Idioma
theme        = &amp;quot;gohugo-theme-ananke&amp;quot;              # Ruta al tema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recomiendo encarecidamente ir comentando el código fuente, para que en futuras revisiones sea más fácil encontrar aquello que andemos buscando. En cuanto a que todo quede alineado por el símbolo &lt;code&gt;=&lt;/code&gt;, es simplemente una manía mía, no es necesario en absoluto.&lt;/p&gt;
&lt;p&gt;Pasemos ahora al siguiente bloque de código, el dado por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;MetaDataFormat = &amp;quot;yaml&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
SectionPagesMenu = &amp;quot;main&amp;quot;
Paginate = 3 # this is set low for demonstrating with dummy content. Set to a higher number
googleAnalytics = &amp;quot;&amp;quot;
enableRobotsTXT = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración adicional del sitio web
#
MetaDataFormat         = &amp;quot;yaml&amp;quot; # Formato cabeceras
DefaultContentLanguage = &amp;quot;es&amp;quot;   # Idioma por defecto del contenido
SectionPagesMenu       = &amp;quot;main&amp;quot; #
Paginate               = 3      # Posts por página en main
googleAnalytics        = &amp;quot;&amp;quot;     # Código para estadísticas web
enableRobotsTXT        = true   # Buscadores
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ya que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En &lt;code&gt;MetaDataFormat&lt;/code&gt; tenemos que indicar qué lenguaje emplearemos para escribir los metadatos de las cabeceras para nuestros artículos del sitio web (hablaremos de ello en detalle cuando, por fin, nos animemos a redactar el primer artículo para nuestra página web). &lt;em&gt;Hugo&lt;/em&gt; permite trabajar con &lt;em&gt;TOML&lt;/em&gt; (por defecto), &lt;em&gt;YAML&lt;/em&gt; y &lt;em&gt;JSON&lt;/em&gt;. Los dos primeros son muy similares y, en mi caso, dado que estuve un tiempo generando el sitio web con &lt;em&gt;Jekyll&lt;/em&gt;, estoy más acostumbrado al estilo &lt;em&gt;YAML&lt;/em&gt; que al &lt;em&gt;TOML&lt;/em&gt;. Por otro lado, aunque también es factible generar las mencionadas cabeceras con &lt;em&gt;JSON&lt;/em&gt;, es un lenguaje un tanto más tedioso a la hora de declarar los metadatos, por lo que recomendaría evitarlo de momento.&lt;/li&gt;
&lt;li&gt;Para &lt;code&gt;DefaultContentLanguage&lt;/code&gt; declaramos el valor del código del idioma en el que tengamos pensado generar el contenido para nuestro sitio web. Para español, recuerdo que dicho código era &lt;code&gt;es&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Confieso que desconozco las posibilidades para &lt;code&gt;SectionPagesMenu&lt;/code&gt;. Experimenté con el tema &lt;em&gt;Ananke&lt;/em&gt; unos minutos y enseguida empecé a buscar, entre los temas disponibles para &lt;em&gt;Hugo&lt;/em&gt;, uno que se adaptara mejor a mis necesidades, así que no he profundizado en exceso en este.&lt;/li&gt;
&lt;li&gt;En &lt;code&gt;Paginate&lt;/code&gt; indicaremos el número de artículos que queremos se muestren por página en el índice que aparece al acceder a nuestro sitio web. En los propios comentarios avisan que el valor asignado por defecto, &lt;code&gt;3&lt;/code&gt;, es un tanto escaso y deberíamos incrementarlo un tanto. ¿Cuánto? En mi opinión, debería estar en función de la frecuencia con la que generemos contenido.&lt;/li&gt;
&lt;li&gt;Si activamos las estadísticas de &lt;em&gt;Google&lt;/em&gt; para nuestro sitio web, tendremos acceso a cierto código, que será el que asignemos como valor en la línea de &lt;code&gt;googleAnalytics&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finalmente, con &lt;code&gt;enableRobotsTXT = true&lt;/code&gt; damos acceso a la &amp;ldquo;arañas&amp;rdquo; de los buscadores para que exploren todo nuestro sitio web e indexen aquello que estimen conveniente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority = 0.5
  filename = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;está dedicado a los parámetros de configuración del mapa del sitio web. Al igual que sucedía con la variable &lt;code&gt;Paginate&lt;/code&gt;, configuraremos los valores de estas tres en función de la frecuencia con la que generemos contenido para nuestro sitio web. Seguramente, la única variable que modificaremos será &lt;code&gt;changefreq&lt;/code&gt;, cambiando &lt;code&gt;&amp;quot;monthly&amp;quot;&lt;/code&gt; por &lt;code&gt;&amp;quot;weekly&amp;quot;&lt;/code&gt; o, incluso, &lt;code&gt;&amp;quot;daily&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, en mi caso, únicamente he colocado un comentario introductorio al bloque y, por supuesto, he continuado alineando valores por el simbolo &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del mapa de la web
#
[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority   = 0.5
  filename   = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para finalizar, el último bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[params]
  favicon = &amp;quot;&amp;quot;
  description = &amp;quot;The last theme you&#39;ll ever need. Maybe.&amp;quot;
  facebook = &amp;quot;&amp;quot;
  twitter = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram = &amp;quot;&amp;quot;
  youtube = &amp;quot;&amp;quot;
  github = &amp;quot;&amp;quot;
  linkedin = &amp;quot;&amp;quot;
  # choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with &amp;quot;bg-&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;me ha quedado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros de la web
#
[params]
  favicon     = &amp;quot;&amp;quot;
  description = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot;
  facebook    = &amp;quot;&amp;quot;
  twitter     = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram   = &amp;quot;&amp;quot;
  youtube     = &amp;quot;&amp;quot;
  github      = &amp;quot;&amp;quot;
  linkedin    = &amp;quot;&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image         = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number    = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estas líneas facilitan la configuración de algunas características de la web, como pueden ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;favicon&lt;/code&gt;: es el icono que aparece, en el navegador, en la parte izquierda de la pestaña correspondiente a nuestro sitio web. El valor que hemos de asignar a esta variable será la ruta de acceso a la imagen que contiene el icono. Entraré en más detalles al respecto de este tema cuando aborde cómo configurar el &lt;em&gt;favicon&lt;/em&gt; para el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: breve subtítulo o eslogan que podemos añadir a la página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;facebook&lt;/code&gt;, &lt;code&gt;twitter&lt;/code&gt;, etc.: enlaces a las páginas de nuestras redes sociales, que permiten a los visitantes dar con nuestros perfiles muy fácilmente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;featured_image&lt;/code&gt;: ruta que apunta a la imagen que deseemos ubicar en la cabecera de nuestra página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recent_posts_number&lt;/code&gt;: cantidad de artículos, de entre los últimos publicados, que aparecerán destacados en la página de entrada a nuestro sitio web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En esta serie de artículos no entraré en detalle en la modificación de las plantillas del tema &lt;em&gt;Ananke&lt;/em&gt;. No obstante, en breve pasaremos a estudiar con profundidad el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y las ideas que exploremos, de cara a modificar diversos aspectos de un sitio web, se podrán extrapolar a cualquier tema, &lt;em&gt;Ananke&lt;/em&gt; incluido.&lt;/p&gt;
&lt;p&gt;Así pues, seguramente, en la próxima entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; instalaremos el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y echaremos un vistazo por encima a su correspondiente archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curso de Hugo en YouTube</title>
      <link>https://imalexissaez.github.io/2018/07/15/curso-de-hugo-en-youtube/</link>
      <pubDate>Sun, 15 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/15/curso-de-hugo-en-youtube/</guid>
      <description>&lt;p&gt;A estas alturas, estimo que nadie pondrá en duda que la plataforma audiovisual &lt;a href=&#34;https://www.youtube.com/&#34;&gt;YouTube&lt;/a&gt; es una colosal mina de recursos de aprendizaje, con auténticos diamantes por descubrir y al alcance de cualquier estudiante.&lt;/p&gt;
&lt;p&gt;Como iré publicando los artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; a un ritmo pausado, que seguramente no convenza a quien descubra la serie de entradas en este instante, me he animado a compartir un excelente recurso que he encontrado en &lt;em&gt;YouTube&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se trata de una lista de reproducción, compuesta por la nada desdeñable cifra de 23 vídeos, que viene de la mano de &lt;a href=&#34;https://www.giraffeacademy.com/&#34;&gt;Giraffe Academy&lt;/a&gt;. Me gustaría destacar que, además de este curso de &lt;em&gt;Hugo&lt;/em&gt;, ponen a nuestra disposición toda una serie de tutoriales sobre bases de datos, distintos lenguajes de programación, desarrollo web y generadores de páginas web estáticas. Es más que recomendable que le echemos un vistazo a su sección &lt;a href=&#34;https://www.giraffeacademy.com/#courses&#34;&gt;Courses&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Volviendo al recurso concreto que nos ocupa en esta entrada, la lista de reproducción parte de una breve introducción teórica a los generadores de páginas web estáticas, para centrarse enseguida en las principales características de &lt;em&gt;Hugo&lt;/em&gt;. A continuación, detalla su instalación en distintos sistemas operativos y pasa a generar acto seguido un sitio web, que servirá de base para explicar distintos conceptos, de una forma muy práctica, a lo largo del resto de la serie de vídeos.&lt;/p&gt;
&lt;p&gt;La mencionada lista de reproducción la podemos encontrar en &lt;a href=&#34;https://www.youtube.com/watch?v=qtIqKaDlqXo&amp;amp;list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&#34;&gt;este enlace&lt;/a&gt;, siendo su índice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction to Hugo&lt;/li&gt;
&lt;li&gt;Installing Hugo on Windows&lt;/li&gt;
&lt;li&gt;Installing Hugo on Mac&lt;/li&gt;
&lt;li&gt;Creating a New Site&lt;/li&gt;
&lt;li&gt;Installing &amp;amp; Using Themes&lt;/li&gt;
&lt;li&gt;Creating &amp;amp; Organizing Content&lt;/li&gt;
&lt;li&gt;Front Matter&lt;/li&gt;
&lt;li&gt;Archetypes&lt;/li&gt;
&lt;li&gt;Shortcodes&lt;/li&gt;
&lt;li&gt;Taxonomies&lt;/li&gt;
&lt;li&gt;Template Basics&lt;/li&gt;
&lt;li&gt;List Page Templates&lt;/li&gt;
&lt;li&gt;Single Page Templates&lt;/li&gt;
&lt;li&gt;Home Page Templates&lt;/li&gt;
&lt;li&gt;Section Templates&lt;/li&gt;
&lt;li&gt;Base Templates &amp;amp; Blocks&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;If Statements&lt;/li&gt;
&lt;li&gt;Data Files&lt;/li&gt;
&lt;li&gt;Partial Templates&lt;/li&gt;
&lt;li&gt;Shortcode Templates&lt;/li&gt;
&lt;li&gt;Building Your Site&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para muestra, un botón:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qtIqKaDlqXo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Creando un sitio web con Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</link>
      <pubDate>Wed, 11 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</guid>
      <description>&lt;p&gt;¡Ha llegado el momento que todos estábamos esperando! Tras un par de artículos en los que hemos preparado nuestros equipos instalando las herramientas necesarias, hoy veremos cómo generar nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esta tercera entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; se va a apoyar en la guía de inicio recogida en la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, a la que podemos acceder a través de &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En primer lugar, abrimos la terminal &lt;em&gt;Git Bash&lt;/em&gt; y nos dirigimos al directorio de nuestro disco duro donde tengamos pensado almacenar localmente el sitio web. En la mencionada guía recomiendan ubicar las páginas en la ruta &lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;, aunque ya comenté en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;anterior entrada&lt;/a&gt; que no era estrictamente necesario proceder de tal forma.&lt;/p&gt;
&lt;p&gt;Dicho esto, en este artículo seguiremos al dedillo las indicaciones dadas en la guía, de manera que en la terminal tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:/Hugo/Sites/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El comando para generar un nuevo sitio web es &lt;code&gt;hugo new site [path] [flags]&lt;/code&gt;, donde sustituiremos &lt;code&gt;[path]&lt;/code&gt; por la ruta al directorio donde almacenaremos nuestra página web. Por lo que respecta a las &lt;code&gt;[flags]&lt;/code&gt;, en el apartado de la documentación oficial dedicado a &lt;a href=&#34;https://gohugo.io/commands/hugo_new_site/&#34;&gt;hugo new site&lt;/a&gt; tenemos el listado de las disponibles. No obstante, para una primera toma de contacto, no añadiremos ninguna de ellas.&lt;/p&gt;
&lt;p&gt;Así pues, generemos un primer sitio de prueba y, en un alarde de extrema originalidad, ubiquémoslo en el directorio &lt;code&gt;\prueba\&lt;/code&gt;. Para ello, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site prueba
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recibimos entonces un mensaje de felicitación (en caso contrario, convendría que revisáramos la instalación de &lt;em&gt;Hugo&lt;/em&gt; siguiendo las indicaciones de &lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;esta entrada&lt;/a&gt;) y algunas instrucciones relacionadas con el uso de temas, la creación de contenidos y el acceso local al sitio web.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hugo&lt;/em&gt; ha creado el directorio &lt;code&gt;\prueba\&lt;/code&gt; en el interior de la ruta donde hemos ejecutado el comando &lt;code&gt;hugo new site&lt;/code&gt;. Además, ha poblado el mismo con algunas carpetas (vacías en su mayor parte), quedando una estructura como la que figura en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img01_hu7a3c76859068dd17c68c75e7f63178fa_2727_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Estructura del sitio web.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img01_hu7a3c76859068dd17c68c75e7f63178fa_2727_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;94&#34; height=&#34;154&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Estructura del sitio web.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;En un futuro exploraremos con detalle el cometido de algunos de esos directorios que aparecen en la imagen (&lt;code&gt;\content\&lt;/code&gt; y &lt;code&gt;\layouts\&lt;/code&gt; son de extrema importancia, así como ese curioso archivo denominado &lt;code&gt;config.toml&lt;/code&gt;). No obstante, por el momento, evitemos distraernos en exceso y sigamos las indicaciones de la guía.&lt;/p&gt;
&lt;p&gt;Volvemos a la terminal, nos movemos hacia el directorio &lt;code&gt;\prueba\&lt;/code&gt; e iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;, acciones que requieren teclear los dos siguientes comandos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd prueba
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente paso de la guía nos invitan a instalar un tema para la web, &lt;a href=&#34;https://themes.gohugo.io/gohugo-theme-ananke/&#34;&gt;Ananke&lt;/a&gt;, utilizando &lt;code&gt;submodule&lt;/code&gt; (un comando de &lt;em&gt;Git&lt;/em&gt;). No obstante, en este momento, me voy a desviar de las indicaciones dadas y optar por un método diferente de instalación de temas. A continuación, nos moveremos a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y clonaremos en nuestro disco duro el propio repositorio del tema. Para ello, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/budparr/gohugo-theme-ananke.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta manera, tenemos acceso localmente a un sitio web de prueba, con un poco de contenido ya generado, que nos permitirá hacernos una idea del aspecto final de nuestro sitio web utilizando el tema &lt;em&gt;Ananke&lt;/em&gt;. Aunque soy consciente de que me estoy desviando &amp;lsquo;&amp;lsquo;ligeramente&amp;rsquo;&amp;rsquo; de la guía oficial, vamos a tomar esta senda para ver cómo luce nuestro sitio web.&lt;/p&gt;
&lt;p&gt;Abrimos el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt; y en el directorio donde hemos ubicado la página web (&lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;) accedemos a la carpeta &lt;code&gt;themes&lt;/code&gt;. Una vez dentro de ella, hacemos doble clic sobre el directorio &lt;code&gt;gohugo-theme-ananke&lt;/code&gt; y repetimos luego la acción con la carpeta denomiada &lt;code&gt;exampleSite&lt;/code&gt;, cuyos contenidos son:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img02_hu2fb7d8a8aa34797b983358bace71f1cd_1615_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Contenido de la carpeta del sitio web de ejemplo.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img02_hu2fb7d8a8aa34797b983358bace71f1cd_1615_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;97&#34; height=&#34;72&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Contenido de la carpeta del sitio web de ejemplo.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Copiamos tanto las dos carpetas, como el archivo &lt;code&gt;config.toml&lt;/code&gt;, y pegamos todo en el directorio &lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;, reemplazando los ficheros existentes con el mismo nombre que en él se encuentran.&lt;/p&gt;
&lt;p&gt;Ahora volvemos a la terminal, que todavía está apuntando a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y tecleamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;para volver al directorio raíz de nuestro sitio web. A continuación, para revisar el sitio web localmente escribimos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y, para mi sorpresa, recibimos el siguiente mensaje de error &lt;code&gt;Error: Unable to find theme Directory: C:\Hugo\gohugo-theme-ananke&lt;/code&gt;, hecho que debe ser el &lt;em&gt;karma&lt;/em&gt; haciendo acto de presencia por haberme desviado de las indicaciones de la guía oficial.&lt;/p&gt;
&lt;p&gt;Aunque no quería meterme en este artículo en el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, para evitar ofrecer mucha información de golpe, solucionemos rápidamente este pequeño &lt;em&gt;bug&lt;/em&gt; para así poder revisar localmente el sitio web.&lt;/p&gt;
&lt;p&gt;Hacemos clic derecho sobre el mencionado fichero y lo abrimos con &lt;em&gt;Sublime Text&lt;/em&gt;. Modificamos la quinta línea que aparece, de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y guardamos los cambios.&lt;/p&gt;
&lt;p&gt;Volvemos ahora a la terminal y tecleamos de nuevo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras recibir cierta información sobre el sitio, únicamente nos resta abrir nuestro navegador web favorito y en la barra de direcciones escribir &lt;code&gt;http://localhost:1313/&lt;/code&gt;, accediendo así a la página de bienvenida de nuestro sitio web, que luce así de bien:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img03_hubbed8eeec85af9da71255570d12d6298_1066184_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Sitio web con el tema Ananke&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img03_hubbed8eeec85af9da71255570d12d6298_1066184_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1308&#34; height=&#34;620&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Sitio web con el tema &lt;em&gt;Ananke&lt;/em&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Es el momento de navegar por la página, estudiar si nos complace estéticamente y comprobar si la manera en la que se organizan los contenidos es la apropiada para el sitio web que teníamos en mente. Cuando hayamos terminado el paseo, volvemos a la terminal y cerramos el servidor local utilizando la combinación de teclas &lt;code&gt;Ctrl + C&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos, ahora sí y con mucho más detalle, la configuración básica del sitio web, que reside en el fichero &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instalando Hugo en Windows</title>
      <link>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</link>
      <pubDate>Sun, 08 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</guid>
      <description>&lt;p&gt;Llevar a cabo la instalación de &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt; es extremadamente fácil, hecho que nos permite empezar a experimentar con esta tecnología en apenas unos minutos. Veamos, sin más dilación, todo el proceso en detalle.&lt;/p&gt;
&lt;p&gt;Así pues, en este segundo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, retomaremos la senda en el lugar que nos quedamos al finalizar la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt;. Recuerdo que, en ella, instalamos un par de útiles herramientas en nuestro equipo (&lt;em&gt;git&lt;/em&gt; y &lt;em&gt;Sublime Text 3&lt;/em&gt;) y nos creamos una cuenta en el portal &lt;em&gt;GitHub&lt;/em&gt;, que será donde alojemos tanto el código fuente de nuestros futuros sitios web, como los propios sitios web en sí.&lt;/p&gt;
&lt;p&gt;En la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, existe una extensa página dedicada a su instalación, con una sección que orienta específicamente a los usuarios de &lt;em&gt;Windows&lt;/em&gt; y a la que podemos acceder directamente a través de &lt;a href=&#34;https://gohugo.io/getting-started/installing#windows&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Los desarrolladores han intentado que la experiencia de instalación sea muy intuitiva, pero, en mi opinión, alguna de las indicaciones puede no ser coherente con la estructura de archivos y carpetas que hayamos decidido implementar en nuestros equipos. ¿A qué se debe esta afirmación? Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hugo&lt;/em&gt; no deja de ser simplemente un programa, por lo que en lugar de instalarlo donde indica la guía, quizá sería mejor opción ubicarlo en la carpeta &lt;code&gt;Archivos de programa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Nos señalan, en la menciona guía, un directorio muy específico donde almacenar nuestros sitios web. No obstante, aunque vayamos a utilizar la pareja &lt;em&gt;git&lt;/em&gt; + &lt;em&gt;GitHub&lt;/em&gt;, es posible que nos interese, además, utilizar un servicio de alojamiento de archivos y, por tanto, ubicar las páginas en otra ruta diferente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simplemente lo comento para que quede claro que las instrucciones que, a continuación, compartiré admiten cierta flexibilidad a la hora de llevarlas a cabo. Dicho esto, sin más preámbulos, veamos cómo instalar &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En primer lugar, bien desde la terminal, bien desde el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt;, creamos en el directorio raíz de nuestro disco duro (generalmente &lt;code&gt;C:\&lt;/code&gt;) una carpeta denominada &lt;code&gt;Hugo&lt;/code&gt;. En su interior engendramos otras dos carpetas: &lt;code&gt;bin&lt;/code&gt;, donde almacenaremos la aplicación, y &lt;code&gt;Sites&lt;/code&gt;, donde ubicaremos nuestros futuros sitios web. Al final, debemos tener disponibles las siguientes dos rutas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\bin\&lt;/code&gt;, y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ir acostumbrándonos al uso de la terminal &lt;em&gt;Git Bash&lt;/em&gt;, todo el anterior proceso lo podíamos haber conseguido escribiendo en ella la siguiente serie de comandos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir Hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir bin Sites
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, abrimos la página de descarga de &lt;em&gt;Hugo&lt;/em&gt; siguiendo &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;este enlace&lt;/a&gt;. A la hora de escribir estas líneas, la versión más reciente es la etiquetada como &lt;code&gt;v0.42.2&lt;/code&gt;. Ahora, desplazamos con cuidado hacia abajo el extenso listado de ficheros, hasta dar con el adecuado para nuestro sistema operativo (en mi caso es &lt;code&gt;hugo_0.42.2_Windows-64bit.zip&lt;/code&gt;). Hacemos clic sobre él e inmediatamente comenzará la descarga a nuestro disco duro de un archivo comprimido.&lt;/p&gt;
&lt;p&gt;Acto seguido, descomprimimos el contenido de dicho archivo en la ruta &lt;code&gt;C:\Hugo\bin\&lt;/code&gt; (o donde hayamos decidido que sería un buen sitio para almacenar la aplicación) y borramos el fichero que hemos descargado, pues no vamos a necesitarlo en un futuro próximo.&lt;/p&gt;
&lt;p&gt;De esta manera, si desde la terminal nos desplazamos hasta la anterior ruta y escribimos &lt;code&gt;hugo version&lt;/code&gt;, recibiremos el siguiente mensaje &lt;code&gt;Hugo Static Site Generator v0.42.2 windows/amd64 BuildDate: 2018-06-28T12:36:53Z&lt;/code&gt;, que indica que hemos llevado a cabo la instalación con éxito.&lt;/p&gt;
&lt;p&gt;No obstante, rápidamente vamos a encontrar un pequeño inconveniente a la hora de empezar a experimentar con &lt;em&gt;Hugo&lt;/em&gt;. Si escribimos &lt;code&gt;hugo version&lt;/code&gt; en cualquier otra ruta distinta a la indicada arriba, recibiremos en la terminal un mensaje de error como este: &lt;code&gt;bash: hugo: command not found&lt;/code&gt;. Dado que nuestra intención es poder utilizar la aplicación en cualquier ruta de nuestro disco duro, tenemos que añadir la ubicación de &lt;em&gt;Hugo&lt;/em&gt; al &lt;code&gt;PATH&lt;/code&gt; de &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cada versión de &lt;em&gt;Windows&lt;/em&gt; tiene una manera más o menos distinta y, en ocasiones, ciertamente enrevesada, de editar el &lt;code&gt;PATH&lt;/code&gt;. Para ello, en &lt;em&gt;Windows 10&lt;/em&gt;, comenzamos pulsando el botón de inicio y seleccionamos &lt;em&gt;Configuración&lt;/em&gt;, accediendo así a la siguiente ventana:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img01_hu665c10f8107b51a386f42b56cf51077b_31771_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Configuración de Windows.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img01_hu665c10f8107b51a386f42b56cf51077b_31771_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1299&#34; height=&#34;440&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Configuración de &lt;em&gt;Windows&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;En el cuadro de búsqueda escribimos &amp;ldquo;configuración avanzada&amp;rdquo; y seleccionamos la opción &lt;em&gt;Ver la configuración avanzada del sistema&lt;/em&gt;, tal y como figura en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img02_hub5ff0f1265d15f8d7c497fc5ed9fdbb9_10941_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ilustración del cuadro de búsqueda.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img02_hub5ff0f1265d15f8d7c497fc5ed9fdbb9_10941_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;336&#34; height=&#34;207&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ilustración del cuadro de búsqueda.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Apareciendo así esta ventana:&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img03_hu5108484132bb84ab2537f3ca577ecb5c_17135_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ventana de configuración avanzada del sistema.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img03_hu5108484132bb84ab2537f3ca577ecb5c_17135_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;412&#34; height=&#34;485&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ventana de configuración avanzada del sistema.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Hacemos clic en el botón &lt;em&gt;Variables de entorno&amp;hellip;&lt;/em&gt;, surgiendo entonces una nueva ventana. En ella seleccionamos la fila del primer cuadro denominada &lt;em&gt;Path&lt;/em&gt; y pulsamos el botón &lt;em&gt;Editar&amp;hellip;&lt;/em&gt;, que aparece justo debajo de dicho cuadro.&lt;/p&gt;





  
  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img04_hub4335b29875d51beedfcb999e070bc9d_27097_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ventana de variables de entorno.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img04_hub4335b29875d51beedfcb999e070bc9d_27097_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;616&#34; height=&#34;584&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ventana de variables de entorno.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Surge, cual capricho de un diabólico destino que parece que quiere poner nuestro temple a prueba, otra nueva ventana (ya por fin la última), donde tenemos que hacer clic sobre el botón &lt;em&gt;Nuevo&lt;/em&gt; y escribir &lt;code&gt;C:\Hugo\bin\&lt;/code&gt;. Finalmente, solo nos resta ir pulsando sobre el botón &lt;em&gt;Aceptar&lt;/em&gt; sucesivas veces, hasta cerrar por completo la ristra de ventanas precedentes que en unos segundos hemos acumulado.&lt;/p&gt;
&lt;p&gt;Así, si en cualquier ruta del sistema ahora tecleamos en la terminal &lt;code&gt;hugo version&lt;/code&gt;, no aparecerá el anterior mensaje de comando desconocido, sino la versión de la aplicación instalada, tal y como pretendíamos.&lt;/p&gt;
&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos el proceso de creación de un sitio web utilizando &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrando a Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/04/migrando-a-hugo/</link>
      <pubDate>Wed, 04 Jul 2018 07:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/04/migrando-a-hugo/</guid>
      <description>&lt;p&gt;La llegada del verano viene acompañada, al menos en mi caso, por un período de experimentación, en el que suelo abordar nuevos intereses o explorar alguna tecnología que haya captado mi atención en los últimos meses.&lt;/p&gt;
&lt;p&gt;Como desvela el título de esta entrada, &lt;em&gt;Hugo&lt;/em&gt; ha sido la primera candidata escogida. Ahora bien, ¿qué es &lt;em&gt;Hugo&lt;/em&gt;? En pocas palabras, es una tecnología que permite fácilmente generar páginas web estáticas y de la que podemos encontrar abundante información en su &lt;a href=&#34;https://gohugo.io/&#34;&gt;sitio oficial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hasta hace apenas unos días, usaba &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/a&gt; para elaborar &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, hecho que conduce lógica e irremediablemente a la siguiente cuestión: ¿por qué migrar a &lt;em&gt;Hugo&lt;/em&gt;? ¿Acaso se debe a su impresionante velocidad a la hora de generar sitios webs?&lt;/p&gt;
&lt;p&gt;Aunque atribuirle dicha causa al cambio estimo que me haría parecer más entendido de lo que verdaderamente soy, mentiría si afirmase que esa ha sido la auténtica razón. Dicho esto, confieso que tampoco me hacía excesiva ilusión el tiempo que le llevaba a la pareja &lt;em&gt;Jekyll&lt;/em&gt; + &lt;em&gt;Minimal Mistakes&lt;/em&gt; reflejar las modificaciones que iba realizando en el sitio web y que, generalmente, superaba con generosidad el minuto.&lt;/p&gt;
&lt;p&gt;Ahora mismo, con &lt;em&gt;Hugo&lt;/em&gt;, &lt;em&gt;Infinitos Contrastes&lt;/em&gt; se genera completamente en menos de 400 milisegundos. Además, cada modificación que llevo a cabo en esta entrada requiere unos 75 milisegundos de espera para poder visualizar en el servidor local el resultado. Cuanto menos, se agradece el cambio en este sentido.&lt;/p&gt;
&lt;p&gt;Así pues, si la velocidad no ha sido un factor determinante a la hora de explicar el cambio de tecnología, ¿por qué migrar a &lt;em&gt;Hugo&lt;/em&gt;? Históricamente, &lt;em&gt;Ruby&lt;/em&gt; y sus &lt;em&gt;gemas&lt;/em&gt; (entre las que se encuentra &lt;em&gt;Jekyll&lt;/em&gt;) me han dado bastantes más quebraderos de cabeza de los recomendables por utilizar &lt;em&gt;Windows&lt;/em&gt;. El soporte oficial para este sistema operativo es más bien escaso y cualquier problema se convertía en una pequeña odisea en ocasiones ciertamente desquiciante.&lt;/p&gt;
&lt;p&gt;Me apetecía simplemente un cambio, con la esperanza de pasar página y olvidar esas batallas pasadas. &lt;em&gt;Hugo&lt;/em&gt; es la alternativa a &lt;em&gt;Jekyll&lt;/em&gt; más popular y las primeras impresiones que me he llevado son muy buenas. No dudo que en un futuro próximo tenga que librar alguna que otra encarnizada pelea, pero espero que el hecho de estar aprendiendo una nueva tecnología compense con creces las penurias que este proceso tiene aparejadas.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
