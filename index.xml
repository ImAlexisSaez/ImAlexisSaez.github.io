<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infinitos Contrastes</title>
    <link>https://imalexissaez.github.io/</link>
      <atom:link href="https://imalexissaez.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Infinitos Contrastes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Alexis Sáez ©2019</copyright><lastBuildDate>Tue, 02 Jul 2019 00:00:01 +0100</lastBuildDate>
    <image>
      <url>https://imalexissaez.github.io/img/sharing.jpg</url>
      <title>Infinitos Contrastes</title>
      <link>https://imalexissaez.github.io/</link>
    </image>
    
    <item>
      <title>1. Presentación del curso</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb01-presentacion-del-curso/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb01-presentacion-del-curso/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/G2FCfQj-9ig&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo, se presenta el curso de &lt;em&gt;Python&lt;/em&gt; y los motivos de su desarrollo. Después se revisa el &lt;strong&gt;temario&lt;/strong&gt;, que aborda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introducción. Requisitos previos. Instalación software.&lt;/li&gt;
&lt;li&gt;Fundamentos y sintaxis básica del lenguaje.&lt;/li&gt;
&lt;li&gt;POO con Python.&lt;/li&gt;
&lt;li&gt;Algoritmos, listas y tramos.&lt;/li&gt;
&lt;li&gt;BBDD.&lt;/li&gt;
&lt;li&gt;Trabajo con gráficos y contenidos.&lt;/li&gt;
&lt;li&gt;Procesos y tareas.&lt;/li&gt;
&lt;li&gt;Programación de red. Sockets.&lt;/li&gt;
&lt;li&gt;Ejercicios prácticos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La lección termina con un breve apartado de FAQ.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2. Introducción a Python</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb02-introduccion/</link>
      <pubDate>Sun, 28 Apr 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb02-introduccion/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/9ojhJsXNWCI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo, se repasa la historia de &lt;em&gt;Python&lt;/em&gt; y sus principales características. Entre ellas, destacan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lenguaje interpretado de alto nivel, orientado a objetos, versátil y que es de código abierto.&lt;/li&gt;
&lt;li&gt;Gramática sencilla, clara y muy legible, con tipado dinámico y fuerte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A través de &lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; descargamos la última versión de &lt;em&gt;Python&lt;/em&gt; (3.7.3 a la hora de escribir estas líneas). Si queremos la versión de 64 bits para &lt;em&gt;Windows&lt;/em&gt;, hemos de buscarla en &lt;a href=&#34;https://www.python.org/downloads/windows/&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Durante su instalación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activamos la casilla que añade la ruta de &lt;em&gt;Python&lt;/em&gt; al &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pulsamos, al final de la instalación, sobre la opción que elimina la restricción de longitud máxima sobre las rutas del &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con respecto a los IDE, en el curso se utilizará &lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;Sublime Text 3&lt;/a&gt;, aunque se ofrecen como alternativas &lt;a href=&#34;https://www.eclipse.org/ide/&#34; target=&#34;_blank&#34;&gt;Eclipse&lt;/a&gt; y &lt;a href=&#34;https://notepad-plus-plus.org/download/v7.6.6.html&#34; target=&#34;_blank&#34;&gt;Notepad++&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3. Sintaxis básica</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb03-sintaxis-basica/</link>
      <pubDate>Sun, 28 Apr 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb03-sintaxis-basica/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/yppT6GPZMyo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En el IDLE de &lt;em&gt;Python&lt;/em&gt;, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;¡Hola mundo!&amp;quot;) # Esto es una instrucción
¡Hola mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usando &lt;code&gt;;&lt;/code&gt; escribimos varias instrucciones en una misma línea, aunque es desaconsejable por restar legibilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;¡Hola mundo!&amp;quot;); print(&amp;quot;¡Bienvenidos!&amp;quot;)
¡Hola mundo!
¡Bienvenidos!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Introducimos los &lt;strong&gt;comentarios&lt;/strong&gt; con el símbolo &lt;code&gt;#&lt;/code&gt; para:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anotar el código, facilitando futuros mantenimientos.&lt;/li&gt;
&lt;li&gt;Desactivar bloques de instrucciones, para localizar errores cometidos.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Esto es un comentario
... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mediante el símbolo &lt;code&gt;\&lt;/code&gt; dividimos una instrucción en varias líneas, aunque es desaconsejable por restar legibilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mi_nombre = &amp;quot;Mi nombre es Alexis.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; mi_nombre
&#39;Mi nombre es Alexis.&#39;
&amp;gt;&amp;gt;&amp;gt; mi_nombre = &amp;quot;Mi nombre es \
... Alexis&amp;quot;
&amp;gt;&amp;gt;&amp;gt; mi_nombre
&#39;Mi nombre es Alexis&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Construimos los bloques de código mediante &lt;strong&gt;identación&lt;/strong&gt;. El IDLE se encarga automáticamente de procurarla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 0
&amp;gt;&amp;gt;&amp;gt; for i in range(5):
...     a += 1
...     print(a)
... 
1
2
3
4
5
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Durante el curso, usaremos el IDLE de &lt;em&gt;Sublime Text 3&lt;/em&gt;. Para ello, descargamos el editor a través de &lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; y lo instalamos. Al iniciarlo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desplegamos el menú &lt;code&gt;Tools&lt;/code&gt; y seleccionamos &lt;code&gt;Command Palette...&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Escribimos &lt;code&gt;Install Package Control&lt;/code&gt; y clicamos sobre la opción que aparece.&lt;/li&gt;
&lt;li&gt;Desplegamos, de nuevo, el menú &lt;code&gt;Tools&lt;/code&gt;, seleccionamos &lt;code&gt;Command Palette...&lt;/code&gt; y tecleamos &lt;code&gt;install package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;En la siguiente ventana, escribimos &lt;code&gt;SublimeREPL&lt;/code&gt;, para así tener el interprete de &lt;em&gt;Python&lt;/em&gt; disponible desde el propio editor.&lt;/li&gt;
&lt;li&gt;Para activarlo, desde el menú &lt;code&gt;Tools&lt;/code&gt;, seleccionamos ahora &lt;code&gt;SublimeREPL&lt;/code&gt; y buscamos &lt;code&gt;Python&lt;/code&gt;. Entre las opciones que aparecen, escogemos &lt;code&gt;Python&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4. Tipos, operadores y variables</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb04-tipos-y-variables/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb04-tipos-y-variables/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/u4I9PqhqCo8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Los &lt;strong&gt;tipos de datos&lt;/strong&gt; disponibles en &lt;em&gt;Python&lt;/em&gt; son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numéricos

&lt;ul&gt;
&lt;li&gt;Enteros (&lt;code&gt;int&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Coma flotante (&lt;code&gt;float&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Complejos&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Textos&lt;/li&gt;
&lt;li&gt;Booleanos

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los principales &lt;strong&gt;operadores&lt;/strong&gt; en &lt;em&gt;Python&lt;/em&gt; son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aritméticos: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; y &lt;code&gt;//&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comparación: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; y &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lógicos: &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt; y &lt;code&gt;NOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Asignación: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;**=&lt;/code&gt; y &lt;code&gt;//=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Especiales: &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;is not&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt; y &lt;code&gt;not in&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los operadores aritméticos nos permiten utilizar &lt;em&gt;Python&lt;/em&gt; a modo de calculadora.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 + 6 # Suma
11
&amp;gt;&amp;gt;&amp;gt; 11 - 8 # Resta
3
&amp;gt;&amp;gt;&amp;gt; 2 * 6 # Multiplicación
12
&amp;gt;&amp;gt;&amp;gt; 7 / 2 # División
3.5
&amp;gt;&amp;gt;&amp;gt; 10 % 3 # Módulo
1
&amp;gt;&amp;gt;&amp;gt; 5 ** 2 # Exponenciación
25
&amp;gt;&amp;gt;&amp;gt; 7 // 2 # División entera
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una &lt;strong&gt;variable&lt;/strong&gt; es un espacio en la memoria del ordenador donde se almacenará un valor que podrá cambiar durante la ejecución del programa. Para declararla, utilizamos el patrón &lt;code&gt;nombre = valor&lt;/code&gt; y su tipo lo establece el contenido, no el contenedor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;Python&lt;/em&gt; todo son objetos (variables, números&amp;hellip;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nombre = 5
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; nombre = &amp;quot;Alexis&amp;quot;
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; nombre = 5.2
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Definimos cadenas de texto mediante los símbolos &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt; y &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;, permitiendo esta última opción saltos de líneas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mensaje = &#39;Esto es un mensaje.&#39;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje.
&amp;gt;&amp;gt;&amp;gt; mensaje = &amp;quot;Esto es un mensaje.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje.
&amp;gt;&amp;gt;&amp;gt; mensaje = &#39;&#39;&#39;Esto es un mensaje
... con tres saltos
... de línea.&#39;&#39;&#39;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje
con tres saltos
de línea.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Los operadores de comparación suelen aparecer en bloques condicionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numero1 = 5
&amp;gt;&amp;gt;&amp;gt; numero2 = 7
&amp;gt;&amp;gt;&amp;gt; if numero1 &amp;gt; numero2:
...     print(&amp;quot;El número 1 es mayor.&amp;quot;)
... else:
...     print(&amp;quot;El número 2 es mayor.&amp;quot;)
... 
El número 2 es mayor.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: no confundir el operador de asignación &lt;code&gt;=&lt;/code&gt; con el operador de comparación &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numero1 = 2
&amp;gt;&amp;gt;&amp;gt; numero2 = 3
&amp;gt;&amp;gt;&amp;gt; if numero1 == numero2:
...     print(&amp;quot;Los números son iguales.&amp;quot;)
... else:
...     print(&amp;quot;Los números son diferentes.&amp;quot;)
... 
Los números son diferentes.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5. Funciones I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb05-funciones-i/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb05-funciones-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/VY448UWAQ_0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;función&lt;/strong&gt; es un conjunto de líneas de código agrupadas, que funcionan como una unidad realizando una tarea específica. Puede devolver valores, tener parámetros o argumentos y recibe el nombre de &lt;strong&gt;método&lt;/strong&gt; cuando está definida dentro de una clase.&lt;/p&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt; existen funciones predifinidas, como por ejemplo &lt;code&gt;print()&lt;/code&gt;. Su principal utilidad es la reutilización de código y su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def nombre(parámetros):
    instrucciones de la función
    return(opcional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos (o llamamos) una función tecleando &lt;code&gt;nombre_función(parámetros)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, dejamos de lado el IDLE de &lt;em&gt;Sublime Text 3&lt;/em&gt; y pasamos a compilar directamente ficheros desde el propio editor. Para ello, desplegamos el menú &lt;code&gt;Tools&lt;/code&gt; y en el apartado &lt;code&gt;Build System&lt;/code&gt; escogemos la opción &lt;code&gt;Python&lt;/code&gt;. Acto seguido, creamos el fichero &lt;code&gt;funciones.py&lt;/code&gt;, que contendrá la instrucción&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y utilizamos la combinación de teclas &lt;code&gt;ctrl + b&lt;/code&gt; para compilar. En la parte inferior de la ventana aparecerá el resultado de la ejecución y el tiempo invertido.&lt;/p&gt;

&lt;p&gt;Ampliemos el anterior fichero a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e imaginemos que necesitamos que las anteriores tres líneas se impriman cinco veces. Podemos, simplemente, copiar y pegar el anterior bloque de código reiteradamente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Las funciones nos permiten reutilizar código para, precisamente, evitar que actuemos como arriba. Definamos una función llamada &lt;code&gt;mensaje()&lt;/code&gt; y ejecutémosla tantas veces como deseemos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def mensaje():
    print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
    print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
    print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, la tarea que buscábamos realizar quedaría como:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mensaje()
mensaje()
mensaje()
mensaje()
mensaje()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre distintas llamadas a una función puede haber cualquier otro tipo de instrucción:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mensaje()

print(&amp;quot;Ejecutando código fuera de función&amp;quot;)

mensaje()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/05/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6. Funciones II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb06-funciones-ii/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:03 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb06-funciones-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/vawEHhV_HFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Comencemos definiendo una función que suma dos números dados (5 y 7), mediante el mecanismo aprendido en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma():
    num1 = 5
    num2 = 7
    print(num1 + num2)


suma()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos reutilizar tantas veces como queramos la función &lt;code&gt;suma()&lt;/code&gt;. No obstante, su utilidad así declarada es bastante limitada. Nos gustaría que no siempre sumara los dos mismos valores, sino aquellos que nos interesen en cada llamada. Para ello emplearemos los &lt;strong&gt;parámetros&lt;/strong&gt; o &lt;strong&gt;argumentos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: aunque el autor del curso se refiere a los términos &amp;ldquo;parámetros&amp;rdquo; y &amp;ldquo;argumentos&amp;rdquo; casi como si fueran sinónimos, en realidad hay un sutil matiz que los diferencia: los &lt;strong&gt;parámetros&lt;/strong&gt; son las variables que aparecen en la definición de una función o método; cuando se produce la llamada a dicha función, los &lt;strong&gt;argumentos&lt;/strong&gt; son los datos que pasamos a los parámetros de la mencionada función.&lt;/p&gt;

&lt;p&gt;Definamos de nuevo la función &lt;code&gt;suma()&lt;/code&gt;, ahora con dos parámetros, con el objetivo de que realice la suma de dos números que pasaremos como argumentos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    print(num1 + num2)


suma(5, 7)  # 12
suma(2, 3)  # 5
suma(35, 358)  # 393
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tal y como está declarada la nueva función de suma, &lt;strong&gt;obligatoriamente&lt;/strong&gt; hemos de pasarle dos argumentos o sino aparecerán errores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(7)
# TypeError: suma() missing 1 required positional argument: &#39;num2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(1, 2, 3)
# TypeError: suma() takes 2 positional arguments but 3 were given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puede resultar conveniente, por legibilidad, pasar los argumentos a una función utilizando el esquema &lt;code&gt;parámetro=valor&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(num1=5, num2=7)  # 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, las funciones&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pueden poseer parámetros de diferentes tipos y&lt;/li&gt;
&lt;li&gt;devuelven valores siempre y cuando empleemos la instrucción &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    resultado = num1 + num2
    return resultado


suma(5, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La ejecución del anterior bloque de código no muestra resultado alguno en la consola. La función devuelve el resultado, pero no lo hemos imprimido. Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(suma(5, 7))  # 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una ventaja de utilizar la instrucción &lt;code&gt;return&lt;/code&gt; reside en que podemos almacenar los valores que devuelve una función en variables y trabajar posteriormente con ellas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;almacena_resultado = suma(5, 8)
print(almacena_resultado)  # 13

actualiza_resultado = suma(almacena_resultado, 8)
print(actualiza_resultado)  # 13 + 8 = 21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: &lt;em&gt;Python&lt;/em&gt; pasa siempre los valores por referencia, no por valor.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/06/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7. Listas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb07-listas/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:04 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb07-listas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Q8hugySbLQQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;lista&lt;/strong&gt; es una estructura de datos que nos permite almacenar gran cantidad de valores. En &lt;em&gt;Python&lt;/em&gt;, estos pueden añadirse de manera dinámica y ser de diferentes tipos.&lt;/p&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = [elem1, elem2, elem3...]&lt;/code&gt; y los elementos están localizados mediante un índice, que en &lt;em&gt;Python&lt;/em&gt; comienza por 0.&lt;/p&gt;

&lt;p&gt;A continuación, creemos una lista con cuatro elementos de tipo texto y veamos cómo imprimirla y acceder a elementos concretos de ella:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista = [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]

print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
print(mi_lista[:])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]

print(mi_lista[2])  # Marta
print(mi_lista[0])  # María
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si empleamos índices que superan el rango de elementos de una lista, &lt;em&gt;Python&lt;/em&gt; nos arroja un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[4])
# IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, sí es posible utilizar índices con valor negativo, que nos permiten acceder (empezando por &lt;code&gt;-1&lt;/code&gt;) a los elementos de una lista desde la derecha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[-1]) # Antonio
print(mi_lista[-3]) # Pepe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, esta estrategia también está limitada por el número de elementos de la lista y no podemos pasar índices negativos fuera de su correspondiente rango:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[-5])
# IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, podemos acceder a porciones de una lista, mediante la sintaxis &lt;code&gt;nombre[a:b]&lt;/code&gt;, que extrae todos los elementos comprendidos entre los índices &lt;code&gt;a&lt;/code&gt; y el anterior a &lt;code&gt;b&lt;/code&gt;. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[0:2])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;]
print(mi_lista[0:1])  # [&amp;quot;María&amp;quot;]
print(mi_lista[-3:-1])  # [&amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se pueden omitir algunos de los anteriores índices indicados y &lt;em&gt;Python&lt;/em&gt; sobreentiende que comienza o acaba en el extremo correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[:2])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;]
print(mi_lista[2:])  # [&amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
print(mi_lista[-2:])  # [&amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: cuando accedemos a una porción, se conserva el tipo lista, pero no así si se extrae un único elemento en particular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(mi_lista[2]))  # &amp;lt;class &#39;str&#39;&amp;gt;
print(type(mi_lista[2:3]))  # &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agregamos elementos al final de la lista utilizando &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista.append(&amp;quot;Sandra&amp;quot;)
print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;, &amp;quot;Sandra&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usaremos &lt;code&gt;.insert(posición, elemento)&lt;/code&gt;, si buscamos añadir un elemento en un punto intermedio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista.insert(2, &amp;quot;Paco&amp;quot;)
print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Paco&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;, &amp;quot;Sandra&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es posible agregar varios elementos al final de una lista utilizando &lt;code&gt;.extend()&lt;/code&gt; y pasando como argumento otra lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_compra = [&amp;quot;Manzanas&amp;quot;]
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;]

mi_compra.extend([&amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;])
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acceder al índice de un elemento, empleamos &lt;code&gt;.index(elemento)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista.index(&amp;quot;Antonio&amp;quot;))  # 4
print(mi_compra.index(&amp;quot;Sandía&amp;quot;))  # 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si intentamos acceder al índice de elementos que no están incluidos en la lista, &lt;em&gt;Python&lt;/em&gt; arroja un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_compra.index(&amp;quot;Melón&amp;quot;))
# ValueError: &#39;Melón&#39; is not in list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En una lista, puede haber elementos iguales en posiciones distintas. La función &lt;code&gt;.index()&lt;/code&gt; nos devolverá el valor del índice del primer elemento repetido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_compra.extend(mi_compra)
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;, &amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;]
print(mi_compra.index(&amp;quot;Manzanas&amp;quot;))  # 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para comprobar si un elemento se encuentra o no en una lista, utilizamos &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Pepe&amp;quot; in mi_lista)  # True
print(&amp;quot;Ana&amp;quot; in mi_lista)  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tal y como mencionamos arriba, una lista puede almacenar sin problemas elementos de diferentes tipos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla = [&amp;quot;Alexis&amp;quot;, True, 10, 3.14]
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, True, 10, 3.14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para eliminar elementos, usamos &lt;code&gt;.remove()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla.remove(True)
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, 10, 3.14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En particular, podemos suprimir el último elemento de una lista mediante &lt;code&gt;.pop()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla.pop()
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;+&lt;/code&gt; concatena listas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista1 = [&amp;quot;Ana&amp;quot;, 5]
lista2 = [True, 2.1]
lista3 = lista1 + lista2
print(lista3)  # [&amp;quot;Ana&amp;quot;, 5, True, 2.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;*&lt;/code&gt; repite la lista un número determinado de veces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(lista1 * 2)  # [&amp;quot;Ana&amp;quot;, 5, &amp;quot;Ana&amp;quot;, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/07/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8. Tuplas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb08-tuplas/</link>
      <pubDate>Tue, 30 Apr 2019 00:01:00 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb08-tuplas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Ufqh8aoR9hE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;tupla&lt;/strong&gt; es una lista inmutable que&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no permite añadir, eliminar, mover elementos&amp;hellip;&lt;/li&gt;
&lt;li&gt;permite la extracción de porciones, que continuan siendo tuplas, y&lt;/li&gt;
&lt;li&gt;posibilita búsquedas de índice (&lt;code&gt;.index()&lt;/code&gt;) y comprobaciones de si un elemento pertenece o no a ella (&lt;code&gt;in&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Son útiles porque&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;son más rápidas en cuanto a ejecución se refiere,&lt;/li&gt;
&lt;li&gt;requieren menos espacio (mayor optimización),&lt;/li&gt;
&lt;li&gt;formatean cadenas de texto, y&lt;/li&gt;
&lt;li&gt;pueden utilizarse como claves en un diccionario, a diferencia de las listas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = (elem1, elem2, elem3...)&lt;/code&gt;, siendo el uso de los paréntesis opcional aunque recomendable. El acceso a los elementos funciona como en las listas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)

print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)
print(mi_tupla[1])  # 10
print(mi_tupla[-1])  # 1995
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen funciones que nos permiten convertir tuplas en listas (&lt;code&gt;list()&lt;/code&gt;) y viceversa (&lt;code&gt;tuple()&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista = list(mi_tupla)
print(mi_lista)  # [&amp;quot;Alexis&amp;quot;, 10, 1, 1995]

mi_tupla = tuple(mi_lista)
print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comprobamos la pertenencia de un elemento a la tupla mediante &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Alexis&amp;quot; in mi_tupla)  # True
print(3.14 in mi_tupla)  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con &lt;code&gt;.count()&lt;/code&gt; obtenemos el número de elementos que se encuentran dentro de una tupla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 1, 2, 2, True, 2, &amp;quot;Alexis&amp;quot;)

print(mi_tupla.count(&amp;quot;Alexis&amp;quot;))  # 2
print(mi_tupla.count(1))  # 2 (True cuenta como 1)
print(mi_tupla.count(2))  # 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El método &lt;code&gt;len&lt;/code&gt; nos permite hallar la longitud de una tupla, siendo el índice del último elemento igual a &lt;code&gt;len - 1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(len(mi_tupla))  # 7
print(mi_tupla[len(mi_tupla) - 1])  # &amp;quot;Alexis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos crear tuplas unitarias siguiendo el patrón &lt;code&gt;nombre = (elem,)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;,)

print(type(mi_tupla))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
print(len(mi_tupla))  # 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como mencionamos, los paréntesis son opcionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = &amp;quot;Alexis&amp;quot;, 3.14, True, 10

print(type(mi_tupla))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 3.14, True, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta sintaxis se conoce como &lt;strong&gt;empaquetado de tupla&lt;/strong&gt; y hemos de ser cautos, pues en un futuro, al combinarla con el uso de funciones, puede dar lugar a confusiones.&lt;/p&gt;

&lt;p&gt;El proceso inverso, &lt;strong&gt;desempaquetado de tuplas&lt;/strong&gt;, nos permite asignar los elementos de una tupla a diferentes variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 3.14, True, 10)

nombre, pi, alto, mes = mi_tupla

print(nombre)  # Alexis
print(pi)  # 3.14
print(alto)  # True
print(mes)  # 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/08/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9. Diccionarios</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb09-diccionarios/</link>
      <pubDate>Tue, 30 Apr 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb09-diccionarios/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2OmgHl8lp0I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;diccionario&lt;/strong&gt; es una estructura de datos que nos permite almacenar valores de diferentes tipos (enteros, cadenas de texto, decimales&amp;hellip;) e incluso listas, tuplas y otros diccionarios.&lt;/p&gt;

&lt;p&gt;Su principal característica reside en que cada dato se almacena asociado a una clave única, de tal forma que se crea una relación de tipo &lt;code&gt;clave:valor&lt;/code&gt; para cada elemento guardado. Además, los mencionados elementos no están ordenados, es decir, el orden es indiferente (por la presencia las referidas claves únicas) a la hora de guardar información en un diccionario.&lt;/p&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = {clave:valor}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Creemos un diccionario que almacene países (clave) y capitales (valor), y veamos cómo se accede a cada uno de sus elementos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {&amp;quot;Alemania&amp;quot;: &amp;quot;Berlin&amp;quot;,
           &amp;quot;Francia&amp;quot;: &amp;quot;París&amp;quot;,
           &amp;quot;Reino Unido&amp;quot;: &amp;quot;Londres&amp;quot;,
           &amp;quot;España&amp;quot;: &amp;quot;Madrid&amp;quot;}

print(mi_dicc[&amp;quot;Francia&amp;quot;])  # París
print(mi_dicc[&amp;quot;España&amp;quot;])  # Madrid

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agregamos nuevos elementos al diccionario con el patrón &lt;code&gt;nombre[clave] = valor&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc[&amp;quot;Italia&amp;quot;] = &amp;quot;Lisboa&amp;quot;

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Lisboa&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modificamos un valor asignado a una clave simplemente sobreescribiéndolo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc[&amp;quot;Italia&amp;quot;] = &amp;quot;Roma&amp;quot;

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Roma&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suprimimos elementos con &lt;code&gt;del&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del mi_dicc[&amp;quot;Reino Unido&amp;quot;]

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Roma&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos un diccionario que presente diferentes tipos de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {&amp;quot;Alemania&amp;quot;: &amp;quot;Berlín&amp;quot;,
           23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Mosqueteros&amp;quot;: 3}

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlín&#39;, 23: &#39;Jordan&#39;, &#39;Mosqueteros&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empleemos una tupla (el procedimiento sería similar si optamos por una lista) para asignar la clave a cada uno de los valores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;España&amp;quot;, &amp;quot;Francia&amp;quot;, &amp;quot;Reino Unido&amp;quot;, &amp;quot;Alemania&amp;quot;)
mi_dicc = {mi_tupla[0]: &amp;quot;Madrid&amp;quot;,
           mi_tupla[1]: &amp;quot;París&amp;quot;,
           mi_tupla[2]: &amp;quot;Londres&amp;quot;,
           mi_tupla[3]: &amp;quot;Berlín&amp;quot;}

print(mi_dicc)  # {&#39;España&#39;: &#39;Madrid&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;Alemania&#39;: &#39;Berlín&#39;}

print(mi_dicc[&amp;quot;España&amp;quot;])  # Madrid
print(mi_dicc[mi_tupla[0]])  # Madrid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;También podemos almacenar tuplas (o listas&amp;hellip;) como valores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Nombre&amp;quot;: &amp;quot;Michael&amp;quot;,
           &amp;quot;Equipo&amp;quot;: &amp;quot;Chicago&amp;quot;,
           &amp;quot;Anillos&amp;quot;: (1991, 1992, 1993, 1996, 1997, 1998)}

print(mi_dicc)  # {23: &#39;Jordan&#39;, &#39;Nombre&#39;: &#39;Michael&#39;, &#39;Equipo&#39;: &#39;Chicago&#39;, &#39;Anillos&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}
print(mi_dicc[&amp;quot;Equipo&amp;quot;])  # Chicago
print(mi_dicc[&amp;quot;Anillos&amp;quot;])  # (1991, 1992, 1993, 1996, 1997, 1998)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Asimismo, guardemos un diccionario dentro de otro:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Nombre&amp;quot;: &amp;quot;Michael&amp;quot;,
           &amp;quot;Equipo&amp;quot;: &amp;quot;Chicago&amp;quot;,
           &amp;quot;Anillos&amp;quot;: {&amp;quot;Temporadas&amp;quot;: (1991, 1992, 1993, 1996, 1997, 1998)}}

print(mi_dicc)  # {23: &#39;Jordan&#39;, &#39;Nombre&#39;: &#39;Michael&#39;, &#39;Equipo&#39;: &#39;Chicago&#39;, &#39;Anillos&#39;: {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}}
print(mi_dicc[&amp;quot;Anillos&amp;quot;])  # {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algunos métodos interesantes a conocer son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;, para acceder a las claves de un diccionario;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;, para conocer los valores de un diccionario; y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt;, para averiguar la longitud de un diccionario:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_dicc.keys())  # dict_keys([23, &#39;Nombre&#39;, &#39;Equipo&#39;, &#39;Anillos&#39;])
print(mi_dicc.values())  # dict_values([&#39;Jordan&#39;, &#39;Michael&#39;, &#39;Chicago&#39;, {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}])
print(len(mi_dicc))  # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/09/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10. Condicionales I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb10-condicionales-i/</link>
      <pubDate>Tue, 30 Apr 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb10-condicionales-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/iV-4F0jGWak&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Las estructuras condicionales nos permiten alterar el flujo de ejecución de un programa. Por lo que respecta al condicional &lt;code&gt;if&lt;/code&gt;, tiene la siguiente sintaxis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if condición:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La anterior condición suele venir expresada a través de operadores de comparación (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;). Veamos un sencillo ejemplo de aplicación de una estructura condicional &lt;code&gt;if&lt;/code&gt; en la definición de una función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(evaluacion(6))  # Aprobado
print(evaluacion(1))  # Suspenso
print(evaluacion(2.1))  # Suspenso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Programemos una versión interactiva del anterior bloque de instrucciones, donde el usuario ha de introducir la nota durante la ejecución del código (a través de la función &lt;code&gt;input()&lt;/code&gt;). Para ello, necesitamos activar la consola mediante el menú &lt;code&gt;Tools&lt;/code&gt;, opción &lt;code&gt;SublimeREPL&lt;/code&gt; y en el apartado &lt;code&gt;Python&lt;/code&gt; seleccionamos &lt;code&gt;Python - RUN current file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input()

print(evaluacion(nota_alumno))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si ejecutamos e insertamos una nota numérica (por ejemplo, &lt;code&gt;8&lt;/code&gt;), &lt;em&gt;Python&lt;/em&gt; nos arroja el siguiente error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# TypeError: &#39;&amp;lt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ello es debido a que cualquier información introducida por el usuario desde el teclado se almacena como cadena de texto (&lt;code&gt;&amp;quot;8&amp;quot;&lt;/code&gt;), y el operador &lt;code&gt;&amp;lt;&lt;/code&gt; no está preparado para comparar textos y números. Resolvemos esta situación empleando la función &lt;code&gt;int()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input()

print(evaluacion(int(nota_alumno)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo una iteración del programa, por ejemplo,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Programa de evaluación de notas de alumnos
8
Aprobado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;input()&lt;/code&gt; admite la posibilidad de indicar un mensaje:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input(&amp;quot;Introduce la nota del alumno: &amp;quot;)

print(evaluacion(int(nota_alumno)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo ahora una iteración del programa, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Programa de evaluación de notas de alumnos
Introduce la nota del alumno: 8
Aprobado
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/10/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11. Condicionales II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb11-condicionales-ii/</link>
      <pubDate>Tue, 30 Apr 2019 00:03:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb11-condicionales-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/cf7o4s9nFu8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo ampliaremos las posibilidades de la estructura condicional &lt;code&gt;if&lt;/code&gt; mediante &lt;code&gt;else&lt;/code&gt; y &lt;code&gt;elif&lt;/code&gt;, quedando entonces su sintaxis como&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if condicion:
    instrucciones
elif condicion:
    instrucciones
else:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos creando un programa de control de acceso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Verificación de acceso&amp;quot;)

edad_usuario = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

if edad_usuario &amp;lt; 18:
    print(&amp;quot;No puedes pasar.&amp;quot;)
else:
    print(&amp;quot;Puedes pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de algunas ejecuciones de este programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 19
Puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 15
No puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadamos al programa la posibilidad de mostrar un mensaje de error si el usuario introduce un dato excesivamente elevado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Verificación de acceso&amp;quot;)

edad_usuario = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

if edad_usuario &amp;lt; 18:
    print(&amp;quot;No puedes pasar.&amp;quot;)
elif edad_usuario &amp;gt; 100:
    print(&amp;quot;Edad incorrecta.&amp;quot;)
else:
    print(&amp;quot;Puedes pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de ejecutar el anterior programa con distintos valores de edad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 25
Puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 15
No puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 124
Edad incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para reforzar el uso de esta estructura condicional, elaboremos un programa que asigna a cada calificación numérica su correspondiente etiqueta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Control de calificaciones&amp;quot;)

nota_alumno = int(input(&amp;quot;Introduce la nota: &amp;quot;))

if nota_alumno &amp;lt; 0:
    print(&amp;quot;Nota incorrecta.&amp;quot;)
elif nota_alumno &amp;lt; 5:
    print(&amp;quot;Insuficiente.&amp;quot;)
elif nota_alumno &amp;lt; 6:
    print(&amp;quot;Suficiente.&amp;quot;)
elif nota_alumno &amp;lt; 7:
    print(&amp;quot;Bien.&amp;quot;)
elif nota_alumno &amp;lt; 9:
    print(&amp;quot;Notable.&amp;quot;)
elif nota_alumno &amp;lt;= 10:
    print(&amp;quot;Sobresaliente.&amp;quot;)
else:
    print(&amp;quot;Nota incorrecta.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de ejecutar el anterior programa con distintas calificaciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: -6
Nota incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 4
Insuficiente.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 6
Bien.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 7
Notable.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 10
Sobresaliente.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 12
Nota incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que pida dos números &lt;em&gt;enteros&lt;/em&gt; por teclado. El programa tendrá una función llamada &lt;code&gt;devuelve_max&lt;/code&gt; encargada de devolver el número más alto de los dos introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_max(n1, n2):
    if n1 &amp;lt; n2:
        return n2
    else:
        return n1


num1 = int(input(&amp;quot;Introduce el primer número: &amp;quot;))
num2 = int(input(&amp;quot;Introduce el segundo número: &amp;quot;))

print(&amp;quot;El máximo es: &amp;quot; + str(devuelve_max(num1, num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida por teclado &amp;ldquo;Nombre&amp;rdquo;, &amp;ldquo;Apellido&amp;rdquo; y &amp;ldquo;Tfno&amp;rdquo;. Esos tres datos deberán ser almacenados en una lista y mostrar en consola el mensaje: &amp;ldquo;Los datos personales son: nombre apellido teléfono&amp;rdquo; (Se mostrarán los datos introducidos por teclado).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = input(&amp;quot;Nombre: &amp;quot;)
apell = input(&amp;quot;Apellido: &amp;quot;)
tfno = input(&amp;quot;Teléfono: &amp;quot;)

datos = [nombre, apell, tfno]

print(&amp;quot;Los datos personales son: &amp;quot; + 
      datos[0] + &amp;quot; &amp;quot; + datos[1] + &amp;quot; &amp;quot; + datos[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 3&lt;/strong&gt;: crea un programa que pida tres números por teclado. El programa imprime en consola la media aritmética de los números introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num1 = float(input(&amp;quot;Introduce el primer número: &amp;quot;))
num2 = float(input(&amp;quot;Introduce el segundo número: &amp;quot;))
num3 = float(input(&amp;quot;Introduce el tercer número: &amp;quot;))

media = (num1 + num2 + num3) / 3

print(&amp;quot;La media aritmética es: &amp;quot; + str(media))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/11/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12. Condicionales III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb12-condicionales-iii/</link>
      <pubDate>Wed, 01 May 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb12-condicionales-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/qxgEolsC6rg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Aunque en &lt;em&gt;Python&lt;/em&gt; no existe una instrucción de tipo &lt;code&gt;switch&lt;/code&gt;, como en otros lenguajes de programación, veremos que, gracias a la concatenación de operadores de comparación, a los operadores lógicos &lt;code&gt;and&lt;/code&gt; y &lt;code&gt;or&lt;/code&gt;, y al operador &lt;code&gt;in&lt;/code&gt;, disponemos de bastante versatilidad a la hora de trabajar con estructuras condicionales.&lt;/p&gt;

&lt;p&gt;Antes de nada, siguiendo las instrucciones de &lt;a href=&#34;https://stackoverflow.com/a/19977184&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt;, creamos un atajo para ejecutar de manera más ágil nuestros programas. Ahora ya no hemos de navegar por los menús cada vez que deseemos realizar una ejecución en la consola, simplemente hemos de emplear la combinación de teclas &lt;code&gt;ctrl + alt + b&lt;/code&gt; (mientras que para cerrarla usamos la combinación de teclas &lt;code&gt;ctrl + w&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Empecemos creando un programa que controle si un dato numérico introducido para la edad es válido, es decir, no es negativo ni un valor muy elevado. Para ello, utilizaremos la concatenación de operadores de comparación, teniendo en cuenta que su lectura se realiza de izquierda a derecha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def comprueba_edad(edad):
    if 0 &amp;lt; edad &amp;lt; 100:
        print(&amp;quot;La edad es correcta.&amp;quot;)
    else:
        print(&amp;quot;La edad es incorrecta.&amp;quot;)


comprueba_edad(5)  # La edad es correcta.
comprueba_edad(135)  # La edad es incorrecta.
comprueba_edad(-7)  # La edad es incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creemos ahora un programa que evaluará el salario de diferentes trabajadores de una empresa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sal_presidente = int(input(&amp;quot;Introduce el salario del presidente: &amp;quot;))
print(&amp;quot;Salario presidente: &amp;quot; + str(sal_presidente))

sal_director = int(input(&amp;quot;Introduce el salario del director: &amp;quot;))
print(&amp;quot;Salario director: &amp;quot; + str(sal_director))

sal_jefe_area = int(input(&amp;quot;Introduce el salario del jefe de área: &amp;quot;))
print(&amp;quot;Salario jefe de área: &amp;quot; + str(sal_jefe_area))

sal_administrativo = int(input(&amp;quot;Introduce el salario del administrativo: &amp;quot;))
print(&amp;quot;Salario administrativo: &amp;quot; + str(sal_administrativo))

if sal_administrativo &amp;lt; sal_jefe_area &amp;lt; sal_director &amp;lt; sal_presidente:
    print(&amp;quot;Todo funciona correctamente.&amp;quot;)
else:
    print(&amp;quot;Algo falla en esta empresa.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/12/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>13. Condicionales IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb13-condicionales-iv/</link>
      <pubDate>Wed, 01 May 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb13-condicionales-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rDGsWYnQEJY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A continuación, veremos el uso de los operadores lógicos &lt;code&gt;and&lt;/code&gt; y &lt;code&gt;or&lt;/code&gt;, y del operador &lt;code&gt;in&lt;/code&gt;. Para ello, crearemos un programa que evalúe si un alumno tiene o no derecho a beca, dependiendo de&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la distancia a la que vive del centro,&lt;/li&gt;
&lt;li&gt;el número de hermanos, y&lt;/li&gt;
&lt;li&gt;el salario familiar.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Programa de evaluación de becas - Curso 2018/19&amp;quot;)

dist_escuela = int(input(&amp;quot;Introduce la distancia a la escuela (en km): &amp;quot;))
print(&amp;quot;Distancia a la escuela: &amp;quot; + str(dist_escuela))

num_hermanos = int(input(&amp;quot;Introduce el número de hermanos en el centro: &amp;quot;))
print(&amp;quot;Número de hermanos: &amp;quot; + str(num_hermanos))

sal_familiar = int(input(&amp;quot;Introduce el salario anual bruto: &amp;quot;))
print(&amp;quot;Salario anual bruto: &amp;quot; + str(sal_familiar))

if dist_escuela &amp;gt; 40 and num_hermanos &amp;gt; 2 and sal_familiar &amp;lt;= 20000:
    print(&amp;quot;Tienes derecho a beca&amp;quot;)
else:
    print(&amp;quot;No tienes derecho a beca&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Revisemos la estrutura condicional para que no sea tan complicado tener derecho a una beca:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Programa de evaluación de becas - Curso 2018/19&amp;quot;)

distancia_escuela = int(input(&amp;quot;Introduce la distancia a la escuela (en km): &amp;quot;))
print(&amp;quot;Distancia a la escuela: &amp;quot; + str(distancia_escuela))

numero_hermanos = int(input(&amp;quot;Introduce el número de hermanos en el centro: &amp;quot;))
print(&amp;quot;Número de hermanos: &amp;quot; + str(numero_hermanos))

salario_familiar = int(input(&amp;quot;Introduce el salario anual bruto: &amp;quot;))
print(&amp;quot;Salario anual bruto: &amp;quot; + str(salario_familiar))

if distancia_escuela &amp;gt; 40 or numero_hermanos &amp;gt; 2 or salario_familiar &amp;lt;= 20000:
    print(&amp;quot;Tienes derecho a beca&amp;quot;)
else:
    print(&amp;quot;No tienes derecho a beca&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estudiemos ahora el uso del operador &lt;code&gt;in&lt;/code&gt;. Crearemos un programa donde un alumno debe escoger una asignatura opcional de entre un listado predeterminado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Asignaturas optativas - Curso 2018/19&amp;quot;)

print(&amp;quot;- Informática gráfica&amp;quot;)
print(&amp;quot;- Pruebas de software&amp;quot;)
print(&amp;quot;- Usabilidad y accesibilidad&amp;quot;)

asignatura = input(&amp;quot;Escoge la asignatura optativa: &amp;quot;)

if asignatura in (&amp;quot;Informática gráfica&amp;quot;, &amp;quot;Pruebas de software&amp;quot;,
                  &amp;quot;Usabilidad y accesibilidad&amp;quot;):
    print(&amp;quot;Asignatura elegida: &amp;quot; + asignatura)
else:
    print(&amp;quot;La asignatura escogida no está contemplada.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es &lt;strong&gt;case sensitive&lt;/strong&gt; (distingue entre mayúsculas y minúsculas). Para solucionar esta situación, utilizamos las funciones &lt;code&gt;lower()&lt;/code&gt; y &lt;code&gt;upper()&lt;/code&gt;, funciones que escriben, respectivamente, una cadena de caracteres toda en minúsculas o mayúsculas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Asignaturas optativas - Curso 2018/19&amp;quot;)

print(&amp;quot;- Informática gráfica&amp;quot;)
print(&amp;quot;- Pruebas de software&amp;quot;)
print(&amp;quot;- Usabilidad y accesibilidad&amp;quot;)

opcion = input(&amp;quot;Escoge la asignatura optativa: &amp;quot;)

asignatura = opcion.lower()

if asignatura in (&amp;quot;informática gráfica&amp;quot;, &amp;quot;pruebas de software&amp;quot;,
                  &amp;quot;usabilidad y accesibilidad&amp;quot;):
    print(&amp;quot;Asignatura elegida: &amp;quot; + asignatura)
else:
    print(&amp;quot;La asignatura escogida no está contemplada.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/13/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>14. Bucles I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb14-bucles-i/</link>
      <pubDate>Wed, 01 May 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb14-bucles-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/GQGhU1526Oo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Abordaremos ahora otro tipo de estructura de control de flujo (las estructuras condicionales asimismo lo eran): los &lt;strong&gt;bucles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La utilidad de un &lt;strong&gt;bucle&lt;/strong&gt; es repetir una o varias líneas de código tantas veces como sea preciso (siendo esta cantidad conocida de antemano o no). En &lt;em&gt;Python&lt;/em&gt; tenemos dos tipos de bucles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;determinados&lt;/em&gt;: sabemos a priori cuántas veces se repetirá el bloque de código, e&lt;/li&gt;
&lt;li&gt;&lt;em&gt;indeterminados&lt;/em&gt;: desconocemos a priori el número de repeticiones del bloque de código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empecemos viendo el primer tipo, al que pertenece la instrucción &lt;code&gt;for&lt;/code&gt;, cuya sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for variable in elemento_a_recorrer:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;code&gt;elemento_a_recorrer&lt;/code&gt; puede ser una lista, una tupla, una cadena de texto&amp;hellip;&lt;/p&gt;

&lt;p&gt;Por ejemplo, para imprimir tres veces una palabra, una posible estrategia sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [1, 2, 3]:
    print(&amp;quot;Hola&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aunque hemos utilizado una lista de números, no es imprescindible. El siguiente ejemplo consigue el mismo resultado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(&amp;quot;Hola&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En ambos casos, el elemento a recorrer es una lista de tres elementos y es por ello que el mensaje &lt;code&gt;&amp;quot;Hola&amp;quot;&lt;/code&gt; se repite en tres ocasiones, tantas como el mencionado número de elementos de la correspondiente lista.&lt;/p&gt;

&lt;p&gt;Si en lugar de un texto predeterminado optamos por imprimir la propia variable en ambos casos, el resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [1, 2, 3]:
    print(i)

# 1
# 2
# 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(i)

# enero
# febrero
# marzo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La variable no tiene que denominarse necesariamente &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for meses in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(meses)

# enero
# febrero
# marzo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/14/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>15. Bucles II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb15-bucles-ii/</link>
      <pubDate>Thu, 02 May 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb15-bucles-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/D416qOEDrhI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Las instrucciones &lt;code&gt;print()&lt;/code&gt; que aparecen en los bucles de tipo &lt;code&gt;for&lt;/code&gt; insertan un salto de línea en cada iteración:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;Píldoras&amp;quot;, &amp;quot;Informáticas&amp;quot;, 3]:
    print(&amp;quot;Hola&amp;quot;)

# Hola
# Hola
# Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si deseamos que la impresión se produzca en la misma línea, hemos de declarar adecuadamente el argumento &lt;code&gt;end&lt;/code&gt; de la función &lt;code&gt;print()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;Píldoras&amp;quot;, &amp;quot;Informáticas&amp;quot;, 3]:
    print(&amp;quot;Hola&amp;quot;, end=&amp;quot; &amp;quot;)

# Hola Hola Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si el elemento a recorrer es una cadena de texto, el bucle &lt;code&gt;for&lt;/code&gt; ejecutará tantas iteraciones como letras tenga esta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in &amp;quot;Alexis&amp;quot;:
    print(i, end=&amp;quot;-&amp;quot;)

# A-l-e-x-i-s-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta característica nos permite, por ejemplo, programar una primera aproximación a un verificador de direcciones de correo electrónico, que nos indique que una es correcta si alberga una arroba en su declaración:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = False

for i in &amp;quot;direccion@dominio.com&amp;quot;:
    if i == &amp;quot;@&amp;quot;:
        email = True

if email == True:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)

# El email es correcto.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior bloque de código se puede simplificar un tanto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in &amp;quot;direccion@dominio.com&amp;quot;:
    if i == &amp;quot;@&amp;quot;:
        email = True

if email:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)

# El email es correcto.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos una versión interactiva de este programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_email(direcc):
    email = False

    for i in direcc:
        if i == &amp;quot;@&amp;quot;:
            email = True
    if email:
        print(&amp;quot;El email es correcto.&amp;quot;)
    else:
        print(&amp;quot;El email no es correcto.&amp;quot;)


direcc = input(&amp;quot;Introduce tu dirección de correo electrónico: &amp;quot;)

evalua_email(direcc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos ampliar la función de verificación de correos electrónicos para que compruebe si también hay un carácter &lt;code&gt;.&lt;/code&gt; en la cadena de texto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_email(direcc):
    arroba = False
    punto = False

    for i in direcc:
        if i == &amp;quot;@&amp;quot;:
            arroba = True
        if i == &amp;quot;.&amp;quot;:
            punto = True
    if arroba and punto:
        print(&amp;quot;El email es correcto.&amp;quot;)
    else:
        print(&amp;quot;El email no es correcto.&amp;quot;)


direcc = input(&amp;quot;Introduce tu dirección de correo electrónico: &amp;quot;)

evalua_email(direcc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el uso del tipo &lt;code&gt;range&lt;/code&gt; en combinación con el bucle &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(i)

# 0
# 1
# 2
# 3
# 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/15/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>16. Bucles III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb16-bucles-iii/</link>
      <pubDate>Thu, 02 May 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb16-bucles-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/KFz-mXB7qVI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Veamos algunas opciones de la función &lt;code&gt;print()&lt;/code&gt; a la hora de imprimir el valor de variables durante la ejecución de un bucle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 0
# valor de la variable 1
# valor de la variable 2
# valor de la variable 3
# valor de la variable 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La &lt;code&gt;f&lt;/code&gt; que aparece antes del texto entrecomillado indica el uso de &lt;strong&gt;funciones f&lt;/strong&gt;, que permiten interesantes opciones de cara a la impresión de textos en la consola. En esta ocasión, concatena la cadena de caracteres con el valor que toma la variable en cada iteración, indicada por &lt;code&gt;{i}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El tipo &lt;code&gt;range&lt;/code&gt; admite el uso de argumentos adicionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5, 10):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 5
# valor de la variable 6
# valor de la variable 7
# valor de la variable 8
# valor de la variable 9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5, 50, 5):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 5
# valor de la variable 10
# valor de la variable 15
# valor de la variable 20
# valor de la variable 25
# valor de la variable 30
# valor de la variable 35
# valor de la variable 40
# valor de la variable 45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;len&lt;/code&gt; también resulta de utilidad a la hora de emplear bucles &lt;code&gt;for&lt;/code&gt;. Veámosla en acción retomando el ejemplo de la validación de una dirección de correo electrónico visto en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;valido = False

email = input(&amp;quot;Introduce tu email: &amp;quot;)

for i in range(len(email)):
    if email[i] == &amp;quot;@&amp;quot;:
        valido = True

if valido:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que muestre los números impares del 1 al 100. Los números deberán aparecer una al lado del otro sin salto de línea.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, 100, 2):
    print(i, end=&amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida por teclado introducir una contraseña. La contraseña no podrá tener menos de 8 caracteres ni espacios en blanco. Si la contraseña es correcta, el programa imprime &amp;ldquo;Contraseña OK&amp;rdquo;. En caso contrario imprime &amp;ldquo;Contraseña errónea&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_password(password):
    valido = True
    if len(password) &amp;lt; 8 or &amp;quot; &amp;quot; in password:
        valido = False
    return valido


password = input(&amp;quot;Introduce contraseña: &amp;quot;)

if evalua_password(password):
    print(&amp;quot;Constraseña OK.&amp;quot;)
else:
    print(&amp;quot;Contraseña errónea.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 3&lt;/strong&gt;: crea un programa que evalúe si una dirección de correo electrónico es válida o no en función de si tiene &lt;code&gt;@&lt;/code&gt; o &lt;code&gt;.&lt;/code&gt; Hay que tener en cuenta que la dirección se considera correcta si solo tiene una &lt;code&gt;@&lt;/code&gt; y si tiene uno o más &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_mail(mail):
    arroba = False
    punto = False

    if &amp;quot;.&amp;quot; in mail:
        punto = True

    contador = 0
    for i in mail:
        if i == &amp;quot;@&amp;quot;:
            contador += 1

    if contador == 1:
        arroba = True

    return punto and arroba


mail = input(&amp;quot;Introduce dirección de correo electrónico: &amp;quot;)

if evalua_mail(mail):
    print(&amp;quot;Dirección de correo electrónico VÁLIDA.&amp;quot;)
else:
    print(&amp;quot;Dirección de correo electrónico INVÁLIDA.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/16/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>17. Bucles IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb17-bucles-iv/</link>
      <pubDate>Fri, 03 May 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb17-bucles-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/UfUM6uzl5SM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos el bucle &lt;strong&gt;while&lt;/strong&gt;, que es tipo &lt;em&gt;indeterminado&lt;/em&gt; porque no sabemos a priori cuántas veces ejecutará el bloque de código contenido en su interior. Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while condición:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el siguiente ejemplo, no obstante, vemos cómo programar un bucle &lt;code&gt;while&lt;/code&gt; para que funcione como uno de tipo &lt;em&gt;determinado&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;i = 1

while i &amp;lt;= 10:
    print(f&amp;quot;Iteración: {i}.&amp;quot;)
    i += 1

print(&amp;quot;Fin de ejecución del bucle while.&amp;quot;)

# Iteración: 1.
# Iteración: 2.
# Iteración: 3.
# Iteración: 4.
# Iteración: 5.
# Iteración: 6.
# Iteración: 7.
# Iteración: 8.
# Iteración: 9.
# Iteración: 10.
# Fin de ejecución del bucle while.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos ahora un programa que nos solicite la edad y, en caso de ser el dato introducido un número negativo, vuelva a preguntarnos de nuevo (siendo así un ejemplo de bucle &lt;code&gt;while&lt;/code&gt; de tipo &lt;em&gt;indeterminado&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;edad = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

while edad &amp;lt; 0 or edad &amp;gt; 110:
    print(&amp;quot;Has introducido una edad incorrecta. Vuelve a intentarlo.&amp;quot;)
    edad = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

print(f&amp;quot;Tienes {edad} años. Gracias por colaborar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si un usuario se empeña en introducir datos negativos o muy elevados, puede dar lugar a la aparición de un bucle &amp;ldquo;infinito&amp;rdquo;. Veamos una estrategia para evitar este tipo de situaciones con un programa que nos permita hallar la raíz cuadrada de un número:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

print(&amp;quot;Programa de cálculo de raíces cuadradas&amp;quot;)

numero = int(input(&amp;quot;Introduce un número: &amp;quot;))

intentos = 0  # Para ejecutar el bucle while un número de veces determinado

while numero &amp;lt; 0:
    print(&amp;quot;No se puede hallar la raíz de un número negativo.&amp;quot;)
    if intentos == 2:
        print(&amp;quot;Has consumido demasiados intentos.&amp;quot;)
        print(&amp;quot;El programa ha finalizado&amp;quot;)
        break
    numero = int(input(&amp;quot;Introduce un número: &amp;quot;))
    if numero &amp;lt; 0:
        intentos += 1

if intentos &amp;lt; 2:
    solucion = math.sqrt(numero)
    print(f&amp;quot;La raíz cuadrada de {numero} es {solucion}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La instrucción &lt;code&gt;break&lt;/code&gt; detiene la ejecución del bucle. Es decir, si durante el transcurso de la ejecución de un bucle llegamos a una situación donde se lee una instrucción &lt;code&gt;break&lt;/code&gt;, en ese instante, el flujo del programa deja el bucle y salta a la primera línea de código que se encuentra a continuación del mencionado bucle.&lt;/li&gt;
&lt;li&gt;En la línea &lt;code&gt;solucion = math.sqrt(numero)&lt;/code&gt; introducimos el uso de la clase &lt;code&gt;math&lt;/code&gt;, que hemos importado en la primera línea de código (&lt;code&gt;import math&lt;/code&gt;). Es un concepto que se estudiará posteriormente en el curso, pero dicha instrucción sirve para encontrar la raíz cuadrada de un número. La utilidad de importar clases reside en que podemos aprovechar funciones ya programadas y no hemos de &amp;ldquo;reinventar la rueda&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que pida números infinitamente. Los números introducidos deben ser cada vez mayores. El programa finalizará cuando se introduce un número menor que el anterior.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numero = int(input(&amp;quot;Introduce un número entero: &amp;quot;))

condicion = True

while condicion:
    num1 = numero
    numero = int(input(&amp;quot;Introduce un número entero mayor que el anterior: &amp;quot;))
    if num1 &amp;gt; numero:
        print(f&amp;quot;Valor incorrecto: {num1} no es mayor que {numero}.&amp;quot;)
        condicion = False
    else:
        print(f&amp;quot;Valor correcto: {numero} es mayor que {num1}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida números positivos indefinidamente. El programa termina cuando se introduce un número negativo. Finalmente el programa muestras la suma de todos los números introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Cálculo de la suma de una serie de números positivos.&amp;quot;)
print(&amp;quot;Instrucciones: &amp;quot;)
print(&amp;quot;- Introduce tantos números positivos como desees sumar.&amp;quot;)
print(&amp;quot;- Introduce un número negativo para calcular la suma.&amp;quot;)

suma = 0
num = int(input(&amp;quot;Introduce un número positivo: &amp;quot;))

while num &amp;gt; 0:
    suma += num
    num = int(input(&amp;quot;Introduce un número positivo: &amp;quot;))

print(f&amp;quot;La suma de los valores positivos introducios es {suma}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/17/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>18. Bucles V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb18-bucles-v/</link>
      <pubDate>Sun, 05 May 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb18-bucles-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/c8WCRTU4udo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el uso de las instrucciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;: provoca que el flujo de ejecución de un programa, dentro de un bucle, salte a la siguiente iteración de este.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass&lt;/code&gt;: en cuanto se lee en el interior de un bucle, devuelve &lt;code&gt;null&lt;/code&gt; (es como si no ejecutara el bucle). Su uso es reducido, salvo en definición de clases o casos muy concretos (dejar bucles vacíos, que sabemos serán precisos, para programar en un futuro próximo).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt;: cuando un bucle finaliza todas sus iteraciones, entonces comienza a leer las contenidas en el bloque de código asociado a esta instrucción.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos algunos ejemplos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for letra in &amp;quot;Python&amp;quot;:
    print(f&amp;quot;Viendo la letra {letra}.&amp;quot;)

# Viendo la letra P.
# Viendo la letra y.
# Viendo la letra t.
# Viendo la letra h.
# Viendo la letra o.
# Viendo la letra n.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for letra in &amp;quot;Python&amp;quot;:
    if letra == &amp;quot;h&amp;quot;:
        continue
    print(f&amp;quot;Viendo la letra {letra}.&amp;quot;)

# Viendo la letra P.
# Viendo la letra y.
# Viendo la letra t.
# Viendo la letra o.
# Viendo la letra n.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elaboremos, a continuación, un programa que cuente el número de caracteres de una cadena de texto, ignorando los espacios en blanco:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = &amp;quot;Píldoras Informáticas&amp;quot;

print(len(nombre))  # 21 (considera espacio en blanco como carácter)

contador = 0

for i in nombre:
    if i == &amp;quot; &amp;quot;:
        continue
    contador += 1

print(contador)  # 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cuando queremos crear una clase (o función), tan pequeña como sea posible, pero que seguramente en un futuro ampliemos, la instrucción &lt;code&gt;pass&lt;/code&gt; es de suma utilidad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class mi_clase:
    pass  # A implementar más tarde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por lo que respecta a la instrucción &lt;code&gt;else&lt;/code&gt;, veamos un código para comprobar si una dirección de correo electrónico posee o no una arroba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = input(&amp;quot;Introduce tu email: &amp;quot;)

for i in email:
    if i == &amp;quot;@&amp;quot;:
        arroba = True
        break
else:
    arroba = False

print(arroba)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de ser cautos, pues generalmente asociamos la instrucción &lt;code&gt;else&lt;/code&gt; a estructuras condicionales y no a bucles. Fijarse en la identación del programa es clave.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/18/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>19. Generadores I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb19-generadores-i/</link>
      <pubDate>Sun, 05 May 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb19-generadores-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TLVnoqXGWpY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;generador&lt;/strong&gt; es una estructura que extrae valores de una función y los almacena, de uno en uno, en objetos iterables (que se pueden recorrer). Cada vez que un generador almacena un valor, permanece en un estado pausado hasta que se solicita el siguiente, característica que se conoce como &lt;strong&gt;suspensión de estado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La utilidad de los generadores reside en que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;son más eficientes que las funciones tradicionales (sobretodo en consumo de recursos y tiempo, al no tener que construir &amp;ldquo;estructuras completas de datos&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;resultan muy útiles con listas de valores infinitos; y&lt;/li&gt;
&lt;li&gt;bajo determinados escenarios, será recomendable que un generador devuelva los valores de uno en uno.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def nombre():
    yield
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creemos un programa que nos genere una lista de números pares, primero a través de una función y luego utilizando generadores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    lista_pares = []
    while num &amp;lt; limite:
        lista_pares.append(num * 2)
        num += 1
    return lista_pares


print(genera_pares(10))  # [2, 4, 6, 8, 10, 12, 14, 16, 18]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    while num &amp;lt; limite:
        yield num * 2
        num += 1


# Creo el objeto iterable que genera la función
devuelve_pares = genera_pares(10)

# Recorro el objeto iterable con, por ejemplo, un bucle for
for i in devuelve_pares:
    print(i)

# 2
# 4
# 6
# 8
# 10
# 12
# 14
# 16
# 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imaginemos ahora que nuestro objetivo es imprimir en la consola únicamente los tres primeros números pares. Con el método &lt;code&gt;next()&lt;/code&gt; podemos solicitar valores de uno en uno al objeto iterable fruto del generador:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    while num &amp;lt; limite:
        yield num * 2
        num += 1


# Creo el objeto iterable que genera la función
devuelve_pares = genera_pares(10)

print(next(devuelve_pares))  # 2

print(&amp;quot;Aquí podría ir más código.&amp;quot;)

print(next(devuelve_pares))  # 4

print(&amp;quot;Aquí podría ir más código.&amp;quot;)

print(next(devuelve_pares))  # 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/19/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20. Generadores II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb20-generadores-ii/</link>
      <pubDate>Sun, 05 May 2019 00:03:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb20-generadores-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ucaHqGII350&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos el uso de la instrucción &lt;code&gt;yield from&lt;/code&gt;, cuya utilidad reside en la simplificación del código de los generadores en el caso de utilizar bucles anidados.&lt;/p&gt;

&lt;p&gt;Por ejemplo, elaboremos un generador que nos devuelva ciudades:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        yield elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # Madrid

print(next(ciudades_devueltas))  # Barcelona
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;Python&lt;/em&gt;, cuando colocamos un &lt;code&gt;*&lt;/code&gt; delante de un parámetro, estamos indicando que podemos pasar un número indeterminado de argumentos, que los recibirá en forma de tupla.&lt;/p&gt;

&lt;p&gt;Imaginemos que ahora deseamos acceder a los elementos de cada una de las ciudades (sus letras en este caso):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        for sub_elemento in elemento:
            yield sub_elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # M

print(next(ciudades_devueltas))  # a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior ejemplo lo podemos simplificar utilizando la instrucción &lt;code&gt;yield from&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        yield from elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # M

print(next(ciudades_devueltas))  # a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/20/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>21. Excepciones I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb21-excepciones-i/</link>
      <pubDate>Mon, 06 May 2019 00:01:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb21-excepciones-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2MaAs7XU2T0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;excepción&lt;/strong&gt; es un error que acontece durante la ejecución de un programa. La sintaxis del código es correcta, pero, en el momento de ejecutarse el algoritmo, sucede &amp;ldquo;algo inesperado&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Para ilustrar la aparición de excepciones, trabajemos con el siguiente código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    return num1 + num2


def resta(num1, num2):
    return num1 - num2


def multiplica(num1, num2):
    return num1 * num2


def divide(num1, num2):
    return num1 / num2


op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))

print(&amp;quot;Operaciones disponibles: &amp;quot;)
print(&amp;quot;- Suma&amp;quot;)
print(&amp;quot;- Resta&amp;quot;)
print(&amp;quot;- Multiplica&amp;quot;)
print(&amp;quot;- Divide&amp;quot;)

operacion = input(&amp;quot;Introduce la operación a realizar: &amp;quot;)

if operacion == &amp;quot;Suma&amp;quot;:
    print(suma(op1, op2))
elif operacion == &amp;quot;Resta&amp;quot;:
    print(resta(op1, op2))
elif operacion == &amp;quot;Multiplica&amp;quot;:
    print(multiplica(op1, op2))
elif operacion == &amp;quot;Divide&amp;quot;:
    print(divide(op1, op2))
else:
    print(&amp;quot;Operación no contemplada.&amp;quot;)

print(&amp;quot;Operación ejecutada. Continuación de ejecución del programa &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un posible ejemplo de ejecución sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 16
Introduce el segundo número: 4
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Multiplica
64
Operación ejecutada. Continuación de ejecución del programa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, si por accidente intentamos realizar una división entre 0:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 2
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Divide
Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    print(divide(op1, op2))
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 14, in divide
    return num1 / num2
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De forma que el código se detiene en el preciso instante de la llamada a la función &lt;code&gt;divide()&lt;/code&gt; y deja de ejecutar las restantes líneas (la instrucción &lt;code&gt;print()&lt;/code&gt; final en esta ocasión), cuya importancia puede ser vital para nosotros.&lt;/p&gt;

&lt;p&gt;Este tipo de situaciones se aborda mediante una &lt;strong&gt;captura&lt;/strong&gt; o &lt;strong&gt;control de excepción&lt;/strong&gt;. La idea es intentar realizar un bloque de código y, en el caso de no poderse llevar a cabo dicha acción, que al menos el resto de programa siga adelante.&lt;/p&gt;

&lt;p&gt;Si nos fijamos en la &lt;strong&gt;pila de llamadas&lt;/strong&gt; que nos muestran antes de arrojar el error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    print(divide(op1, op2))
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 14, in divide
    return num1 / num2
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leyendo de abajo hacia arriba, la instrucción &lt;code&gt;return num1 / num2&lt;/code&gt;, ubicada en la línea 14 del código, arroja un error de división por cero (&lt;code&gt;ZeroDivisionError&lt;/code&gt;). Para controlar esta circunstancia, usaremos un bloque de tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    instrucciones
except error:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, nuestra función &lt;code&gt;divide()&lt;/code&gt; la podríamos reescribir como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre 0.&amp;quot;)
        return &amp;quot;Operación errónea.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera que, replicando el anterior conflictivo ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 2
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Divide
No se puede dividir entre 0.
Operación errónea.
Operación ejecutada. Continuación de ejecución del programa 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apreciamos que la última línea de código, aquel &lt;code&gt;print()&lt;/code&gt; final, ahora efectivamente sí llega a ejecutarse.&lt;/p&gt;

&lt;p&gt;Por desgracia, no es el único punto conflictivo que presenta el código mostrado. Por ejemplo, ¿qué sucede si introducimos una cadena de texto en lugar de un número?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 3
Introduce el segundo número: a
Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 22, in &amp;lt;module&amp;gt;
    op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
ValueError: invalid literal for int() with base 10: &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; arroja un error de tipo &lt;code&gt;ValueError&lt;/code&gt; que también habríamos de controlar a través de un bloque &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;except&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/21/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>22. Excepciones II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb22-excepciones-ii/</link>
      <pubDate>Mon, 06 May 2019 00:02:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb22-excepciones-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/HH3c6ZBvSx8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Recordemos el código final de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    return num1 + num2


def resta(num1, num2):
    return num1 - num2


def multiplica(num1, num2):
    return num1 * num2


def divide(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre 0.&amp;quot;)
        return &amp;quot;Operación errónea.&amp;quot;


op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))

print(&amp;quot;Operaciones disponibles: &amp;quot;)
print(&amp;quot;- Suma&amp;quot;)
print(&amp;quot;- Resta&amp;quot;)
print(&amp;quot;- Multiplica&amp;quot;)
print(&amp;quot;- Divide&amp;quot;)

operacion = input(&amp;quot;Introduce la operación a realizar: &amp;quot;)

if operacion == &amp;quot;Suma&amp;quot;:
    print(suma(op1, op2))
elif operacion == &amp;quot;Resta&amp;quot;:
    print(resta(op1, op2))
elif operacion == &amp;quot;Multiplica&amp;quot;:
    print(multiplica(op1, op2))
elif operacion == &amp;quot;Divide&amp;quot;:
    print(divide(op1, op2))
else:
    print(&amp;quot;Operación no contemplada.&amp;quot;)

print(&amp;quot;Operación ejecutada. Continuación de ejecución del programa.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, este código es susceptible de presentar más errores. Por ejemplo, introduciendo una cadena de texto en lugar de un número cuando nos solicitan los datos.&lt;/p&gt;

&lt;p&gt;Para solucionar ese detalle, podemos reescribir el correspondiente bloque de código como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
    op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
except ValueError:
    print(&amp;quot;Los valores introducidos no son correctos.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El programa así modificado, presenta errores de lógica ahora, ya que si introducimos una cadena de texto como dato, &lt;em&gt;Python&lt;/em&gt; no arroja error, pero continua la ejecución del programa y al intentar llevar a cabo cualquier operación de las disponibles, lanza un error de tipo &lt;code&gt;NameError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 5
Introduce el segundo número: a
Los valores introducidos no son correctos.
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Suma
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_1.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;
    print(suma(op1, op2))
NameError: name &#39;op2&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una manera de abordar esta problemática es mediante un bucle infinito de tipo &lt;code&gt;while&lt;/code&gt;, forzando que el usuario introduzca valores admisibles para continuar la ejecución del programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    try:
        op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
        op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
        break
    except ValueError:
        print(&amp;quot;Los valores introducidos no son correctos. Inténtalo de nuevo.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo una posible ejecución del programa la que se muestra acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 5
Introduce el segundo número: a
Los valores introducidos no son correctos. Inténtalo de nuevo.
Introduce el primer número: ag
Los valores introducidos no son correctos. Inténtalo de nuevo.
Introduce el primer número: 5
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Suma
5
Operación ejecutada. Continuación de ejecución del programa.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elaboremos ahora una función &lt;code&gt;divide()&lt;/code&gt; diferente a la vista en el ejemplo anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
    op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
    print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como antes, el programa arroja excepciones si intentamos dividir por cero o introducimos cadenas de texto como datos. Capturémoslas de manera consecutiva:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    except ValueError:
        print(&amp;quot;El valor introducido es erróneo.&amp;quot;)
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre cero.&amp;quot;)
    print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existe una alternativa genérica, aunque poco recomendable, que consiste en teclear &lt;code&gt;except:&lt;/code&gt; sin más e imprimir un mensaje neutro de error. Captura una excepción de forma general, pero no informa sobre lo acontencido.&lt;/p&gt;

&lt;p&gt;Por otro lado, cuando queremos que un código se ejecute siempre, existe la posibilidad de ubicarlo en el interior de una claúsula &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    except ValueError:
        print(&amp;quot;El valor introducido es erróneo.&amp;quot;)
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre cero.&amp;quot;)
    finally:
        print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, es posible también programar utilizando la combinación &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    finally:
        print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos algunas posibles ejecuciones de este último bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: 4
Divisor: 2
La división resulta: 2.0
Cálculo finalizado.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: aaa
Cálculo finalizado.
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;
    divide()
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 3, in divide
    op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
ValueError: could not convert string to float: &#39;aaa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: 5
Divisor: 0
Cálculo finalizado.
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;
    divide()
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 5, in divide
    print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
ZeroDivisionError: float division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La cadena de texto &lt;code&gt;&amp;quot;Cálculo finalizado&amp;quot;&lt;/code&gt; se muestra por pantalla, independientemente de la presencia o no de excepciones durante la ejecución del algoritmo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: toda instrucción &lt;code&gt;try&lt;/code&gt; ha de estar acompañada bien de su correspondiente &lt;code&gt;except&lt;/code&gt;, bien de &lt;code&gt;finally&lt;/code&gt;, bien de ambas; pero no puede aparecer en solitario.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/22/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>23. Excepciones III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb23-excepciones-iii/</link>
      <pubDate>Tue, 07 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb23-excepciones-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/dLH-oay4Bts&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos cómo lanzar excepciones, de forma intencionada, a través de la instrucción &lt;code&gt;raise&lt;/code&gt;. Veremos su utilidad cuando trabajemos, más adelante, con clases.&lt;/p&gt;

&lt;p&gt;Generemos un sencillo programa cuyo objetivo sea evaluar nuestra edad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_edad(edad):
    if edad &amp;lt; 20:
        return &amp;quot;Eres muy joven.&amp;quot;
    elif edad &amp;lt; 40:
        return &amp;quot;Eres joven.&amp;quot;
    elif edad &amp;lt; 65:
        return &amp;quot;Eres maduro.&amp;quot;
    elif edad &amp;lt; 100:
        return &amp;quot;Cuídate.&amp;quot;


print(evalua_edad(18))  # Eres muy joven.
print(evalua_edad(70))  # Cuídate.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, la función así definida presenta este curioso comportamiento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(evalua_edad(-15))  # Eres muy joven.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evidentemente, podemos arreglar esta situación mediante estructuras condicionales, pero veremos a continuación cómo emplear la instrucción &lt;code&gt;raise&lt;/code&gt; para abordar el presente caso.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_edad(edad):
    if edad &amp;lt; 0:
        raise TypeError(&amp;quot;No se permiten edades negativas.&amp;quot;)
    if edad &amp;lt; 20:
        return &amp;quot;Eres muy joven.&amp;quot;
    elif edad &amp;lt; 40:
        return &amp;quot;Eres joven.&amp;quot;
    elif edad &amp;lt; 65:
        return &amp;quot;Eres maduro.&amp;quot;
    elif edad &amp;lt; 100:
        return &amp;quot;Cuídate.&amp;quot;


print(evalua_edad(18))
print(evalua_edad(70))
print(evalua_edad(-15))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior programa, obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Eres muy joven.
Cuídate.
Traceback (most recent call last):
  File &amp;quot;prac23_excepciones3_2.py&amp;quot;, line 16, in &amp;lt;module&amp;gt;
    print(evalua_edad(-15))
  File &amp;quot;prac23_excepciones3_2.py&amp;quot;, line 3, in evalua_edad
    raise TypeError(&amp;quot;No se permiten edades negativas.&amp;quot;)
TypeError: No se permiten edades negativas.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: hemos de usar alguno de los tipos de error disponibles en &lt;em&gt;Python&lt;/em&gt;, no pdemos cualquier cadena de texto sin más ahí. No obstante, dicho esto, cuando generemos clases podremos elaborar también errores personalizados.&lt;/p&gt;

&lt;p&gt;Pasemos a programar un algoritmo que calcule la raíz cuadrada de un número mayor o igual que cero:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math


def calcula_raiz(num):
    if num &amp;lt; 0:
        raise ValueError(&amp;quot;El número no puede ser negativo.&amp;quot;)
    else:
        return math.sqrt(num)


op = (int(input(&amp;quot;Introduce un número mayor o igual que cero: &amp;quot;)))

print(calcula_raiz(op))

print(&amp;quot;Programa terminado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Controlemos la excepción que aparece si introducimos un número negativo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math


def calcula_raiz(num):
    if num &amp;lt; 0:
        raise ValueError(&amp;quot;El número no puede ser negativo.&amp;quot;)
    else:
        return math.sqrt(num)


op = (int(input(&amp;quot;Introduce un número mayor o igual que cero: &amp;quot;)))

try:
    print(calcula_raiz(op))
except ValueError as ErrorDeNumeroNegativo:
    print(ErrorDeNumeroNegativo)

print(&amp;quot;Programa terminado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un par de ejecuciones del anterior programa, por ejemplo, podrían ser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce un número mayor o igual que cero: 144
12.0
Programa terminado.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce un número mayor o igual que cero: -144
El número no puede ser negativo.
Programa terminado.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/23/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>24. Programación orientada a objetos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb24-poo-i/</link>
      <pubDate>Wed, 08 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb24-poo-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/5Ohme4A2Weg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es un lenguaje de programación orientado a objetos (POO). Existen, principalemente, dos paradigmas de programación:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programación orientada a procedimientos.&lt;/li&gt;
&lt;li&gt;Programación orientada a objetos.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;programación-orientada-a-procedimientos&#34;&gt;Programación orientada a procedimientos&lt;/h3&gt;

&lt;p&gt;Algunos ejemplos de lenguajes de programación que siguen este paradigma son: Fortan, Cobol, Basic&amp;hellip;&lt;/p&gt;

&lt;p&gt;Entre sus principales desventajas encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Las unidades de código son muy grandes en aplicaciones complejas (resultando en un número de líneas significativamente elevado).&lt;/li&gt;
&lt;li&gt;En aplicaciones complejas, el código resulta difícil de descifrar.&lt;/li&gt;
&lt;li&gt;Las aplicaciones generadas suelen ser poco reutilizables.&lt;/li&gt;
&lt;li&gt;Si existen fallos en alguna línea del código, es muy probable que el programa caiga en su totalidad.&lt;/li&gt;
&lt;li&gt;Aparición frecuente de &lt;strong&gt;código espaguetti&lt;/strong&gt; (saltos en el flujo de ejecución del programa).&lt;/li&gt;
&lt;li&gt;Es difícil de depurar el código por otros programadores en caso de necesidad o error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;programación-orientada-a-objetos&#34;&gt;Programación orientada a objetos&lt;/h3&gt;

&lt;p&gt;La programación orientada a objetos consiste en trasladar el comportamiento que tienen los objetos en la vida real al código de programación. Los objetos tienen un estado, un comportamiento (¿qué puede hacer?) y unas propiedades.&lt;/p&gt;

&lt;p&gt;Por ejemplo, pensemos en el objeto &amp;ldquo;coche&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;¿Cuál es el estado de un coche? Puede estar parado, circulando, aparcado&amp;hellip;&lt;/li&gt;
&lt;li&gt;¿Qué propiedades tiene un coche? Tiene un color, un peso, un tamaño&amp;hellip;&lt;/li&gt;
&lt;li&gt;¿Qué comportamiento tiene un coche? Puede arrancar, frenar, acelerar, girar&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Objeto&lt;/th&gt;
&lt;th&gt;Coche&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Propiedades (atributos)&lt;/td&gt;
&lt;td&gt;Color, peso, alto, largo&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Comportamiento&lt;/td&gt;
&lt;td&gt;Arrancar, frenar, girar, acelerar&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Algunos ejemplos de lenguajes de programación que emplean este paradigma son: C++, Java, VisualNet&amp;hellip;&lt;/p&gt;

&lt;p&gt;Entre las principales ventajas encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los programas están divididos en &amp;ldquo;trozos&amp;rdquo;, &amp;ldquo;partes&amp;rdquo;, &amp;ldquo;módulos&amp;rdquo; o &amp;ldquo;clases&amp;rdquo;, es decir, existe &lt;strong&gt;modularización&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;El código es muy reutilizable. Aparece en el concepto de &lt;strong&gt;herencia&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Si existen fallos en alguna línea del código, el programa es posible que continue con su funcionamiento, debido al &lt;strong&gt;control de excepciones&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Surge el concepto de &lt;strong&gt;encapsulamiento&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El vocabulario más frecuente de este paradigma de programación incluye palabras o expresiones como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clase.&lt;/li&gt;
&lt;li&gt;Objeto.&lt;/li&gt;
&lt;li&gt;Ejemplar de clase. Instancia de clase. Ejemplarizar una clase. Instanciar una clase.&lt;/li&gt;
&lt;li&gt;Modularización.&lt;/li&gt;
&lt;li&gt;Encapsulamiento / encapsulación.&lt;/li&gt;
&lt;li&gt;Herencia.&lt;/li&gt;
&lt;li&gt;Polimorfismo.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>25. Programación orientada a objetos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb25-poo-ii/</link>
      <pubDate>Wed, 08 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb25-poo-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2UNrSiKEI8w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;clase&lt;/strong&gt; es un modelo donde se redactan las características comunes de un grupo de objetos.&lt;/p&gt;

&lt;p&gt;Una &lt;strong&gt;instancia&lt;/strong&gt; (o &lt;strong&gt;ejemplar&lt;/strong&gt; u &lt;strong&gt;objeto&lt;/strong&gt;) es un miembro concreto de una clase.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;modularización&lt;/strong&gt; surge cuando un programa está compuesto de diversas clases. Cada una de ellas funciona de manera independiente (facilitando así enormemente su mantenimiento y control de excepciones) y es posible su reutilización en otros programas.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;encapsulación&lt;/strong&gt; nos permite proteger el funcionamiento interno de cierto bloque de código, para que no pueda accederse o alterarse desde el exterior de manera inadecuada. No obstante, todas las clases de un programa estarán &amp;ldquo;conectadas&amp;rdquo; entre sí de cierta manera (mediante &lt;strong&gt;métodos de acceso&lt;/strong&gt; a ciertas características de cada una de las clases).&lt;/p&gt;

&lt;p&gt;El mencionado acceso se llevará a cabo empleando la &lt;strong&gt;nomenclatura del punto&lt;/strong&gt;. Por ejemplo, supongamos que hemos creado un objeto, de la clase &lt;code&gt;coche&lt;/code&gt;, llamado &lt;code&gt;miCoche&lt;/code&gt;. Para acceder a sus propiedades, utilizaremos la sintaxis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;miCoche.color = &#39;&#39;rojo&#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.peso = 1500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.ancho = 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.alto = 900&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De forma similar, el acceso al comportamiento de este objeto se realizará mediante la mencionada nomenclatura:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;miCoche.arranca()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.frena()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.gira()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.acelera()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>26. Programación orientada a objetos III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb26-poo-iii/</link>
      <pubDate>Wed, 08 May 2019 00:00:03 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb26-poo-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Y_SiIgxc-xI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Traslademos a código fuente algunos de los conceptos examinados en las dos lecciones anteriores. La sintaxis para crear la clase &lt;code&gt;Coche&lt;/code&gt; sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos declarando las &lt;strong&gt;propiedades&lt;/strong&gt; de la clase &lt;code&gt;Coche&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Definamos &lt;strong&gt;comportamientos&lt;/strong&gt; para los futuros objetos que pertenezcan a esta clase, que vienen determinados por distintos métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def function(self):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En &lt;em&gt;Sublime Text 3&lt;/em&gt; cuando empezamos a escribir &lt;code&gt;def&lt;/code&gt; nos ofrece dos opciones, crear una &lt;strong&gt;función&lt;/strong&gt; o un &lt;strong&gt;método&lt;/strong&gt;. La principal diferencia radica en que la primera no pertenece a ninguna clase, al contrario que la segunda. Podemos, a través de los cursores, escoger en el editor la opción que apunta a un método y se nos proporciona la sintaxis de uno por defecto, como el que se muestra arriba.&lt;/p&gt;

&lt;p&gt;Una vez editado, el código queda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: &lt;code&gt;self&lt;/code&gt; hace referencia al propio objeto perteneciente a la clase, es decir, a la instancia perteneciente a la clase.&lt;/p&gt;

&lt;p&gt;Construyamos un objeto de la clase &lt;code&gt;Coche&lt;/code&gt; y veamos cómo acceder a sus propiedades:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche = Coche()  # Instanciación de una clase

print(&amp;quot;Largo del coche: &amp;quot;, mi_coche.largo_chasis)  # Largo del coche:  250
print(&amp;quot;Número de ruedas: &amp;quot;, mi_coche.ruedas)  # Número de ruedas:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trabajemos en el método declarado, para ello, escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;En marcha: &amp;quot;, mi_coche.en_marcha)  # En marcha:  False
mi_coche.arrancar()
print(&amp;quot;En marcha: &amp;quot;, mi_coche.en_marcha)  # En marcha:  True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta última acción la podríamos haber llevado a cabo a través de otro comportamiento, &lt;code&gt;estado&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True

    def estado(self):
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;


print(mi_coche.estado())  # El coche está parado.
mi_coche.arrancar()
print(mi_coche.estado())  # El coche está en marcha.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En resumen, hemos creado la clase &lt;code&gt;Coche&lt;/code&gt;, que se caracteriza por poseer cuatro propiedades y dos comportamientos.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/26/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>27. Programación orientada a objetos IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb27-poo-iv/</link>
      <pubDate>Thu, 09 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb27-poo-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/x5CY8fVyYLo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Partamos del código del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True

    def estado(self):
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos dos objetos y comparémoslos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche1 = Coche()
mi_coche2 = Coche()

print(&amp;quot;Largo mi_coche1: &amp;quot;, mi_coche1.largo_chasis)  # Largo mi_coche1:  250
print(&amp;quot;Largo mi_coche2: &amp;quot;, mi_coche2.largo_chasis)  # Largo mi_coche2:  250

mi_coche1.arrancar()
print(mi_coche1.estado())  # El coche está en marcha.
print(mi_coche2.estado())  # El coche está parado.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sería buena idea que el método &lt;code&gt;arrancar()&lt;/code&gt;, además de arrancar el coche, nos informase de su estado (en marcha o parado). También, programaremos el método &lt;code&gt;estado()&lt;/code&gt; para que nos ofrezca información del coche:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)


mi_coche1 = Coche()
mi_coche2 = Coche()

print(mi_coche1.arrancar(True))  # El coche está en marcha.
print(mi_coche2.arrancar(False))  # # El coche está parado.
mi_coche1.estado()
# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
mi_coche2.estado()
# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En programación orientada a objetos, las características comunes suelen formar parte de lo que se conoce como &lt;strong&gt;estado inicial&lt;/strong&gt;. Para especificar dicho estado utilizaremos un &lt;strong&gt;constructor&lt;/strong&gt;, que es un método especial que le da estado a los objetos que pertenecen a una clase. Su sintaxis vendrá dada por&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self):
    propiedades
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, el código de la clase quedaría:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.largo_chasis = 250
        self.ancho_chasis = 120
        self.ruedas = 4
        self.en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Qué sucede si intentamos ahora incrementar a cinco el número de ruedas del segundo coche?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.ruedas = 5

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
El coche tiene 5 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta acción, en ciertos casos, no debería estar permitida. Para ello, entra en juego el concepto de &lt;strong&gt;encapsulación&lt;/strong&gt;, que nos permitirá proteger propiedades para que no se puedan modificar desde fuera de la propia clase. Su aplicación es tan sencilla como preceder con &lt;code&gt;__&lt;/code&gt; el nombre de la propiedad a proteger y en aquellos lugares donde luego aparezca:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.largo_chasis = 250
        self.ancho_chasis = 120
        self.__ruedas = 4
        self.en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.__ruedas = 5

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En esta ocasión, las cuatro propiedades deberían encapsularse. Incluso &lt;code&gt;en_marcha&lt;/code&gt;, ya que queremos modificarla únicamente desde el interior de la clase.&lt;/p&gt;

&lt;p&gt;La clase entonces quedaría:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos
        if self.__en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De la misma manera, se pueden encapsular métodos, opción que estudiaremos en futuras lecciones.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/27/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>28. Programación orientada a objetos V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb28-poo-v/</link>
      <pubDate>Thu, 09 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb28-poo-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OU-e2uhoGxE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A continuación, abordaremos la encapsulación de métodos partiendo del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos
        if self.__en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encapsular un método es hacer que sea únicamente accesible desde la propia clase, no desde fuera.&lt;/p&gt;

&lt;p&gt;Como aplicación práctica de este procedimiento, generemos un método que compruebe que todo está en orden antes de arrancar, &lt;code&gt;chequeo_interno(self)&lt;/code&gt;, que llamaremos desde &lt;code&gt;arrancar()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos

        if self.__en_marcha:
            chequeo = self.chequeo_interno()

        if self.__en_marcha and chequeo:
            return &amp;quot;El coche está en marcha.&amp;quot;
        elif self.__en_marcha and not chequeo:
            return &amp;quot;Algo ha ido mal en el chequeo. No podemos arrancar.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)

    def chequeo_interno(self):
        print(&amp;quot;Realizando chequeo interno.&amp;quot;)

        self.gas = &amp;quot;Ok&amp;quot;
        self.aceite = &amp;quot;Ok&amp;quot;
        self.puertas = &amp;quot;Ok&amp;quot;

        if self.gas == &amp;quot;Ok&amp;quot; and self.aceite == &amp;quot;Ok&amp;quot; and self.puertas == &amp;quot;Ok&amp;quot;:
            return True
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche1 = Coche()

print(mi_coche1.arrancar(True))

mi_coche1.estado()

print(&amp;quot;---- Segundo vehículo ----&amp;quot;)

mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Realizando chequeo interno.
El coche está en marcha.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
---- Segundo vehículo ----
El coche está parado.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El método &lt;code&gt;chequeo_interno()&lt;/code&gt; es accesible desde fuera de la clase (no está encapsulado), pero, ¿es lógico que podamos acceder a él en cualquier momento? ¿Incluso si está parado? Si el método está diseñado para ejecutarse únicamente en el momento previo a arrancar, hemos de &amp;ldquo;protegerlo&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))
print(mi_coche2.chequeo_interno())  # Absurdo en este caso
mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
Realizando chequeo interno.
True
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para encapsular el mencionado método, utilizamos la estrategia de &lt;code&gt;__&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos

        if self.__en_marcha:
            chequeo = self.__chequeo_interno()

        if self.__en_marcha and chequeo:
            return &amp;quot;El coche está en marcha.&amp;quot;
        elif self.__en_marcha and not chequeo:
            return &amp;quot;Algo ha ido mal en el chequeo. No podemos arrancar.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)

    def __chequeo_interno(self):
        print(&amp;quot;Realizando chequeo interno.&amp;quot;)

        self.gas = &amp;quot;Ok&amp;quot;
        self.aceite = &amp;quot;Ok&amp;quot;
        self.puertas = &amp;quot;Ok&amp;quot;

        if self.gas == &amp;quot;Ok&amp;quot; and self.aceite == &amp;quot;Ok&amp;quot; and self.puertas == &amp;quot;Ok&amp;quot;:
            return True
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De forma que si ahora escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))
print(mi_coche2.__chequeo_interno())
mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
Traceback (most recent call last):
  File &amp;quot;prac28_poo5_1.py&amp;quot;, line 50, in &amp;lt;module&amp;gt;
    print(mi_coche2.__chequeo_interno())
AttributeError: &#39;Coche&#39; object has no attribute &#39;__chequeo_interno&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, &lt;em&gt;Python&lt;/em&gt; arroja un error. No nos deja llamar al método &lt;code&gt;__chequeo_interno()&lt;/code&gt; desde fuera de la propia clase &lt;code&gt;Coche&lt;/code&gt; porque está encapsulado.&lt;/p&gt;

&lt;p&gt;¿Cuándo encapsular una variable o un método? No existe una &amp;ldquo;regla de oro&amp;rdquo;, esto es, habremos de hacerlo cuando la clase así lo precise, dependiendo del comportamiento que posea una clase y en función del criterio del propio programador.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/28/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>29. Programación orientada a objetos VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb29-poo-vi/</link>
      <pubDate>Thu, 09 May 2019 00:00:03 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb29-poo-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/u_VbLsIyzRk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En programación orientada a objetos, el concepto de &lt;strong&gt;herencia&lt;/strong&gt; intenta dar una réplica aproximada de su contrapartida en la vida real. De una clase, denominada en ocasiones &lt;strong&gt;clase padre&lt;/strong&gt; o &lt;strong&gt;superclase&lt;/strong&gt;, heredarán otras clases atributos, métodos&amp;hellip; Se conocen estas últimas como &lt;strong&gt;subclases&lt;/strong&gt; de la anterior (y también como &lt;strong&gt;superclases&lt;/strong&gt; si de ellas también heredan otras).&lt;/p&gt;

&lt;p&gt;La principal utilidad de la herencia es la reutilización de código cuando se generan clases &amp;ldquo;similares&amp;rdquo;. Hemos de estudiar las características y comportamientos que poseen en común todos los objetos con los que deseamos trabajar. Todo ello lo englobaremos en una &lt;strong&gt;superclase&lt;/strong&gt;, de la cual luego heredarán otras clases, que aun teniendo características en común, también es cierto que existen otras peculiaridades que las diferencian.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo práctico:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Clase Padre
class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


# Clase hija
class Moto(Vehiculo):
    pass


mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estamos utilizando métodos de la clase &lt;code&gt;Vehiculo&lt;/code&gt; a través de la clase &lt;code&gt;Moto&lt;/code&gt; gracias a la herencia.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/29/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>30. Programación orientada a objetos VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb30-poo-vii/</link>
      <pubDate>Thu, 09 May 2019 00:00:04 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb30-poo-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/jMQQN9OxwVc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Continuemos con el ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Clase Padre
class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


# Clase hija
class Moto(Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Construyamos la clase &lt;code&gt;Moto&lt;/code&gt;, añadiendo un comportamiento nuevo, &lt;code&gt;caballito&lt;/code&gt;, que se va a sumar a los cuatro heredados de la clase &lt;code&gt;Vehiculo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podríamos teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.caballito()

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El programa &amp;ldquo;funciona&amp;rdquo; (al menos no arroja errores), pero no nos está informando si estamos haciendo el caballito o no.&lt;/p&gt;

&lt;p&gt;Abordemos esta situación sobreescribiendo el método &lt;code&gt;estado&lt;/code&gt; heredado de la clase &lt;code&gt;Vehiculo&lt;/code&gt;, para así incorporar la información sobre el nuevo comportamiento de la clase &lt;code&gt;Moto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para sobreescribir un método de la clase padre definimos uno en la clase hija que se caracterice por tener el mismo nombre y número de parámetros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, la ejecución del siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.caballito()

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Produce como resultado ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False 
 Voy haciendo el caballito.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiquemos el código para albergar la posibilidad de trabajar con furgonetas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_furgo = Furgoneta(&amp;quot;Renault&amp;quot;, &amp;quot;Kangoo&amp;quot;)

mi_furgo.arrancar()

mi_furgo.estado()

mi_furgo.carga(True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Renault 
Modelo: Kangoo 
En marcha: True 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Todo funciona de manera adecuada, con la salvedad de que no estamos viendo que la furgoneta está cargada. Como el método &lt;code&gt;carga()&lt;/code&gt; devuelve una cadena de texto, añadiendo una función &lt;code&gt;print()&lt;/code&gt; solucionamos el entuerto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_furgo = Furgoneta(&amp;quot;Renault&amp;quot;, &amp;quot;Kangoo&amp;quot;)

mi_furgo.arrancar()

mi_furgo.estado()

print(mi_furgo.carga(True))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Renault 
Modelo: Kangoo 
En marcha: True 
Acelerando: False 
Frenando: False
La furgoneta está cargada.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, una instrucción del tipo &lt;code&gt;mi_moto.carga()&lt;/code&gt; arroja un error, ya que no hereda de &lt;code&gt;Furgoneta&lt;/code&gt; la clase &lt;code&gt;Moto&lt;/code&gt;, sino de &lt;code&gt;Vehiculo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Añademos soporte para vehículos electrónicos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class VehiculoElec():
    def __init__(self):
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y, a continuación, generemos una clase para trabajar con biciletas eléctricas. Estas tienen marca, modelo, pueden arrancar, frenar&amp;hellip; y a la vez también poseen autonomia y la posibilidad de cargar energía. &lt;em&gt;Python&lt;/em&gt; nos permite heredar de dos o más clases, que se conoce como &lt;strong&gt;herencia múltiple&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de tener en cuenta que cuando se da herencia múltiple, a la hora de tomar el constructor o los diferentes métodos, se da la preferencia según hayamos ordenado las clases padres de las que hereda. En este caso, no podemos iniciar una bicicleta eléctrica con marca y modelo, aprovechando así el constructor de la clase &lt;code&gt;Vehiculo&lt;/code&gt;, ya que la clase &lt;code&gt;VehiculoElec&lt;/code&gt; posee su propio constructor y este último tiene preferencia por haber colocado esta clase primero en la definición de &lt;code&gt;BicicletaElec&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac30_poo7_3.py&amp;quot;, line 58, in &amp;lt;module&amp;gt;
    mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)
TypeError: __init__() takes 1 positional argument but 3 were given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si intercambiamos el orden de las clases padre en la definición de &lt;code&gt;BicicletaElec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BicicletaElec(Vehiculo, VehiculoElec):
    pass


mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)

mi_bici.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La ejecución ya no arroja errores, mostrando el siguiente resultado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Orbea 
Modelo: HCI30 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/30/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>31. Programación orientada a objetos VIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb31-poo-viii/</link>
      <pubDate>Fri, 10 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb31-poo-viii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/oe04X1B14YY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección estudiaremos el uso de las funciones&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;super()&lt;/code&gt; e&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isinstance()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partimos del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec():
    def __init__(self):
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True


class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si queremos crear un objeto de la clase &lt;code&gt;BicicletaElec&lt;/code&gt; que posea una marca y un modelo, tenemos dos opciones disponibles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acudir al método &lt;code&gt;__init__()&lt;/code&gt; de la clase &lt;code&gt;VehiculoElec&lt;/code&gt; y copiar las líneas que nos interesen del método homónimo de la clase &lt;code&gt;Vehiculo&lt;/code&gt;. No obstante, este enfoque es, cuanto menos, poco elegante.&lt;/li&gt;
&lt;li&gt;Utilizar la función &lt;code&gt;super()&lt;/code&gt;, cuya utilidad reside en que procede a llamar al método de la clase padre.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos esta segunda aproximación con un ejemplo un tanto más sencillo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Persona():
    def __init__(self, nombre, edad, residencia):
        self.nombre = nombre
        self.edad = edad
        self.residencia = residencia

    def describir(self):
        print(&amp;quot;Nombre:&amp;quot;, self.nombre, &amp;quot;\nEdad:&amp;quot;, self.edad, &amp;quot;\nResidencia:&amp;quot;,
              self.residencia)


class Empleado(Persona):
    def __init__(self, salario, antiguedad):
        self.salario = salario
        self.antiguedad = antiguedad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podríamos comenzar a construir objetos de ambas clases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;antonio = Persona(&amp;quot;Antonio&amp;quot;, 55, &amp;quot;España&amp;quot;)

antonio.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Antonio 
Edad: 55 
Residencia: España
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para constuir un objeto de la clase &lt;code&gt;Empleado&lt;/code&gt;, hemos de tener en cuenta que tomará como argumentos los parámetros declarados en dicha clase, y no los de &lt;code&gt;Persona&lt;/code&gt;. No obstante, a la hora de emplear el método &lt;code&gt;describir()&lt;/code&gt; encontraremos problemas tal y como están programadas ambas clases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac31_poo8_2.py&amp;quot;, line 24, in &amp;lt;module&amp;gt;
    juan.describir()
  File &amp;quot;prac31_poo8_2.py&amp;quot;, line 8, in describir
    print(&amp;quot;Nombre:&amp;quot;, self.nombre, &amp;quot;\nEdad:&amp;quot;, self.edad, &amp;quot;\nResidencia:&amp;quot;,
AttributeError: &#39;Empleado&#39; object has no attribute &#39;nombre&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos reescribir el constructor de la clase &lt;code&gt;Empleado&lt;/code&gt;, haciendo uso de la función &lt;code&gt;super()&lt;/code&gt;, como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado(Persona):
    def __init__(self, salario, antiguedad):
        super().__init__(&amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)
        self.salario = salario
        self.antiguedad = antiguedad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera que ahora el código no arrojará error alguno:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Juan 
Edad: 33 
Residencia: Italia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, programado así, todos nuestros empleados se llamarían Juan, tendrían 33 años y serían italianos. Veamos cómo generalizar el funcionamiento de la anterior clase:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado(Persona):
    def __init__(self, salario, antiguedad, nombre_empleado, edad_empleado,
                 residencia_empleado):
        super().__init__(nombre_empleado, edad_empleado, residencia_empleado)
        self.salario = salario
        self.antiguedad = antiguedad

    def describir(self):
        super().describir()
        print(&amp;quot;Salario:&amp;quot;, self.salario, &amp;quot;\nAntigüedad:&amp;quot;, self.antiguedad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De paso, hemos mejorado también el método &lt;code&gt;describir()&lt;/code&gt;, que procede a llamar al de la clase padre y, además, añade la información correspondiente al salario y a la antigüedad. De este modo,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15, &amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Juan 
Edad: 33 
Residencia: Italia
Salario: 1500 
Antigüedad: 15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;isinstance()&lt;/code&gt; nos informa si un objeto es instancia de una clase determinada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15, &amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)

juan.describir()

print(isinstance(juan, Persona))  # True
print(isinstance(juan, Empleado))  # True

marco = Persona(&amp;quot;Marco&amp;quot;, 51, &amp;quot;Francia&amp;quot;)

print(isinstance(marco, Persona))  # True
print(isinstance(marco, Empleado))  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con todo, modifiquemos el ejemplo inicial para permitir que una bicicleta eléctrica admita marca y modelo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec(Vehiculo):
    def __init__(self, marca, modelo):
        super().__init__(marca, modelo)
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True


class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notemos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hemos utilizado la función &lt;code&gt;super()&lt;/code&gt; en el método &lt;code&gt;__init__()&lt;/code&gt; de &lt;code&gt;VehiculoElec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hemos declarado que la clase &lt;code&gt;VehiculoElec&lt;/code&gt; hereda de &lt;code&gt;Vehiculo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)

mi_bici.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Orbea 
Modelo: HCI30 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/31/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>32. Programación orientada a objetos IX</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb32-poo-ix/</link>
      <pubDate>Fri, 10 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb32-poo-ix/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/kV1cN_bqcSw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el concepto de &lt;strong&gt;polimorfismo&lt;/strong&gt;. Un objeto puede cambiar de forma dependiendo del contexto en el que se utilice y, por tanto, modificar tanto sus propiedades como sus comportamientos asociados.&lt;/p&gt;

&lt;p&gt;Como &lt;em&gt;Python&lt;/em&gt; es un lenguaje de tipado dinámico, esta característica es sencilla de utilizar.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando cuatro ruedas.&amp;quot;)


class Moto():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando dos ruedas.&amp;quot;)


class Camion():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando seis ruedas.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_vehiculo = Moto()

mi_vehiculo.desplazamiento()

mi_vehiculo2 = Coche()

mi_vehiculo2.desplazamiento()

mi_vehiculo3 = Camion()

mi_vehiculo3.desplazamiento()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Me desplazo utilizando dos ruedas.
Me desplazo utilizando cuatro ruedas.
Me desplazo utilizando seis ruedas.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tuviésemos cientos de vehículos y quisiéramos utilizar sus comportamientos, habríamos de seguir el patrón esbozado arriba.&lt;/p&gt;

&lt;p&gt;No obstante, nos podemos aprovechar de la magia del polimorfismo creando una función como se muestra a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def desplazamiento_vehiculo(vehiculo):
    vehiculo.desplazamiento()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y como el objeto &lt;code&gt;vehiculo&lt;/code&gt; posee la capacidad de adquirir el rol de cualquiera de los vehículos programados arriba (coche, moto o camión), &lt;em&gt;Python&lt;/em&gt; en todo momento sabrá a qué método &lt;code&gt;desplazamiento()&lt;/code&gt; acudir en cada instante.&lt;/p&gt;

&lt;p&gt;Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_vehiculo = Camion()

desplazamiento_vehiculo(mi_vehiculo)

mi_vehiculo = Coche()

desplazamiento_vehiculo(mi_vehiculo)

mi_vehiculo = Moto()

desplazamiento_vehiculo(mi_vehiculo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Me desplazo utilizando seis ruedas.
Me desplazo utilizando cuatro ruedas.
Me desplazo utilizando dos ruedas.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/32/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>33. Métodos de cadenas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb33-cadenas/</link>
      <pubDate>Sat, 11 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb33-cadenas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/zH0VsRuD2ok&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Examinemos algunos de los métodos disponibles en &lt;em&gt;Python&lt;/em&gt; a la hora de trabajar con cadenas de texto, que son objetos de tipo &lt;code&gt;String&lt;/code&gt;. Entre los más habituales encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capitalize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isdigit()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isalum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isalpha()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rfind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener más información sobre su utilización, conviene que visitemos &lt;a href=&#34;http://pyspanishdoc.sourceforge.net/lib/string-methods.html&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veamos algunos ejemplos sencillos que ilustren el uso de algunos de los anteriores métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre_usuario = input(&amp;quot;Introduce tu nombre de usuario: &amp;quot;)

print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario)
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.upper())
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.lower())
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.capitalize())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce tu nombre de usuario: Alexis Sáez
El nombre es: Alexis Sáez
El nombre es: ALEXIS SÁEZ
El nombre es: alexis sáez
El nombre es: Alexis sáez
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algunas de estas funciones resultan útiles a la hora de validar los datos que un usuario proporciona a nuestros programas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;edad = input(&amp;quot;Introduce la edad: &amp;quot;)

while not edad.isdigit():
    print(&amp;quot;Por favor, introduce un valor numérico.&amp;quot;)
    edad = input(&amp;quot;Introduce la edad: &amp;quot;)

if int(edad) &amp;lt; 18:
    print(&amp;quot;No puede pasar.&amp;quot;)
else:
    print(&amp;quot;Puede pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce la edad: 8iu9
Por favor, introduce un valor numérico.
Introduce la edad: o9098
Por favor, introduce un valor numérico.
Introduce la edad: 99
Puede pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: crea un programa que pida introducir una dirección de email por teclado. El programa debe imprimir en consola si la dirección de email es correcta o no en función de si esta tiene el símbolo &lt;code&gt;@&lt;/code&gt;. Si tiene una &lt;code&gt;@&lt;/code&gt; la dirección será correcta. Si tiene más de una o ninguna &lt;code&gt;@&lt;/code&gt; la dirección será errónea. Si la &lt;code&gt;@&lt;/code&gt; está al comienzo de la dirección de email o al final, la dirección también será errónea&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = input(&amp;quot;Introduce email: &amp;quot;)

if email.count(&amp;quot;@&amp;quot;) == 1 and email.count(&amp;quot;@&amp;quot;, 1, len(email) - 1) == 1:
    print(&amp;quot;La dirección de correo es correcta.&amp;quot;)
else:
    print(&amp;quot;La dirección de correo es incorrecta.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/33/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>34. Módulos</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb34-modulos/</link>
      <pubDate>Sun, 12 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb34-modulos/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/t93x-vnFvP4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;módulo&lt;/strong&gt; es un archivo con extensión &lt;code&gt;.py&lt;/code&gt;, &lt;code&gt;.pyc&lt;/code&gt; (Python compilado) o fichero escrito en &lt;em&gt;C&lt;/em&gt; para &lt;em&gt;CPython&lt;/em&gt;, que posee su propio espacio de nombres y que puede contener variables, funciones, clases e incluso otros módulos.&lt;/p&gt;

&lt;p&gt;Sirve para organizar y reutilizar el código (&lt;strong&gt;modularización&lt;/strong&gt; y &lt;strong&gt;reutilización&lt;/strong&gt;). Se genera uno creando un archivo con extensión &lt;code&gt;.py&lt;/code&gt; (o &lt;code&gt;.pyc&lt;/code&gt; o archivo en C) y guardándolo donde nos interese.&lt;/p&gt;

&lt;p&gt;Vamos a crear un módulo que, siguiendo la organización del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; de código, se llamará &lt;code&gt;modulo_matematicas.py&lt;/code&gt;. En su interior tecleamos las siguientes líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, generamos otro archivo, &lt;code&gt;script_1.py&lt;/code&gt;, e importamos el anterior módulo, utilizando para ello la instrucción &lt;code&gt;import&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import modulo_matematicas as modulo

modulo.sumar(5, 7)

modulo.restar(9, 5)

modulo.multiplicar(4, 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 4
El resultado de la multiplicación es: 36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como el nombre del módulo generado es un tanto extenso, he utilizado la instrucción &lt;code&gt;as&lt;/code&gt;, que permite reescribir dicho nombre y, en mi caso, abreviarlo para que su uso sea más cómodo.&lt;/p&gt;

&lt;p&gt;Una alternativa a esta estrategia la encontramos en el fichero &lt;code&gt;script_2.py&lt;/code&gt;, donde se utiliza &lt;code&gt;from ... import ...&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import sumar

sumar(5, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el bloque de código anterior, únicamente hemos importado la función &lt;code&gt;sumar()&lt;/code&gt; de nuestro módulo. Podemos añadir más funciones separándolas mediante comas o importar todo el contenido del módulo utilizando el carácter &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import sumar, restar

sumar(5, 7)

restar(12, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import *

sumar(5, 7)

restar(12, 6)

multiplicar(12, 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 6
El resultado de la multiplicación es: 144
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, es peligroso actuar así, pues, en ocasiones, podemos reescribir métodos de manera accidental y arribar a resultados no deseados. Además, en aplicaciones complejas, por motivos de optimización, utilizar el carácter &lt;code&gt;*&lt;/code&gt; provoca que se reserve demasiado espacio en memoria al tener que almacenar todo el contenido del módulo importado.&lt;/p&gt;

&lt;p&gt;Creemos un módulo, &lt;code&gt;modulo_vehiculos.py&lt;/code&gt; con las clases utilizadas en la lección de herencia asociada al apartado de programación orientada a objetos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec(Vehiculo):
    def __init__(self, marca, modelo):
        super().__init__(marca, modelo)
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora, en el fichero &lt;code&gt;script_5.py&lt;/code&gt; tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_vehiculos import *

mi_coche = Vehiculo(&amp;quot;Mazda&amp;quot;, &amp;quot;MX5&amp;quot;)
mi_coche.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Mazda 
Modelo: MX5 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; busca los módulos en el mismo directorio donde está guardado el fichero desde el cual se realiza la llamada de importación. En caso de no hallarlo ahí, pasa a revisar el &lt;code&gt;syspath&lt;/code&gt; (es un conjunto de directorios entre los que está, por ejemplo, el de instalación de &lt;em&gt;Python&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Si no tenemos los módulos en ninguna de ambas ubicaciones, &lt;em&gt;Python&lt;/em&gt; arrojará un error al ejecutar el programa. Para solucionar esta situación estudiaremos el uso de &lt;strong&gt;paquetes&lt;/strong&gt; en la próxima lección.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/34/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>35. Paquetes I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb35-paquetes-i/</link>
      <pubDate>Sun, 12 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb35-paquetes-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nRieWujis4s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Los &lt;strong&gt;paquetes&lt;/strong&gt; son directorios donde se almacenarán módulos relacionados entre sí. Sirven para organizar el código de una aplicación y reutilizar los mencionados módulos.&lt;/p&gt;

&lt;p&gt;Un paquete se crea generando un directorio en cuyo interior haya presente un archivo denominado &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imaginemos que nuestro objetivo es elaborar un programa que realice diversos cálculos matemáticos y estadísticos. Vamos a empezar creando un directorio denominado &lt;code&gt;calculos&lt;/code&gt;, en consonancia con la nomenclatura que estamos siguiendo para los ficheros del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En su interior creamos el mencionado archivo &lt;code&gt;__init__.py&lt;/code&gt; (sin contenido alguno), acción que le transmite a &lt;em&gt;Python&lt;/em&gt; la información de que la carpeta &lt;code&gt;calculos&lt;/code&gt; funcionará como un paquete.&lt;/p&gt;

&lt;p&gt;Añadimos ahora a la carpeta el módulo &lt;code&gt;calculos_generales.py&lt;/code&gt;, cuyo contenido es el siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)


def dividir(dividendo, divisor):
    print(&amp;quot;El resultado de la división es:&amp;quot;, dividendo / divisor)


def potenciar(base, exponente):
    print(&amp;quot;El resultado de la potenciación es:&amp;quot;, base**exponente)


def redondear(numero):
    print(&amp;quot;El resultado del redondeo es:&amp;quot;, round(numero))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, desde la raíz del directorio, veamos cómo podemos utilizar nuestro paquete recién creado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import dividir

dividir(10, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la división es: 3.3333333333333335
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recordemos que podemos importar todo el contenido del módulo utilizando el carácter &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import *

dividir(10, 3)

redondear(4.6)

potenciar(2, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la división es: 3.3333333333333335
El resultado del redondeo es: 5
El resultado de la potenciación es: 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos crear &lt;strong&gt;subpaquetes&lt;/strong&gt;, esto es, un paquete dentro de otro, siguiendo de manera recursiva el procedimiento explicado.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para afinar un poco más, creemos dos directorios dentro de la carpeta del paquete, denominados &lt;code&gt;basicos&lt;/code&gt; (para suma, resta, multiplicación y división) y &lt;code&gt;redondeo-potencia&lt;/code&gt; (para redondear y calcular potencias). Cada una de ellas ha de llevar en su interior su correspondiente fichero &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la carpeta &lt;code&gt;basicos&lt;/code&gt; incluimos el módulo &lt;code&gt;operaciones_basicas.py&lt;/code&gt;, cuyo contenido será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)


def dividir(dividendo, divisor):
    print(&amp;quot;El resultado de la división es:&amp;quot;, dividendo / divisor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mientras que en la carpeta &lt;code&gt;redondeo_potencia&lt;/code&gt; generamos el módulo &lt;code&gt;redondea_y_potencia&lt;/code&gt;, compuesto por el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def potenciar(base, exponente):
    print(&amp;quot;El resultado de la potenciación es:&amp;quot;, base**exponente)


def redondear(numero):
    print(&amp;quot;El resultado del redondeo es:&amp;quot;, round(numero))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para utilizar estos últimos módulos creados, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.basicos.operaciones_basicas import sumar
from calculos.redondeo_potencia.redondea_y_potencia import potenciar

sumar(5, 7)
potenciar(2, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la potenciación es: 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/35/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>36. Paquetes distribuibles</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb36-paquetes-ii/</link>
      <pubDate>Mon, 13 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb36-paquetes-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Zf9sN-w0BVE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Veamos cómo crear &lt;strong&gt;paquetes distribuibles&lt;/strong&gt; para que otras personas puedan utilizar nuestro código fuente. El proceso a seguir se reduce a dos sencillos pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Crear el paquete.&lt;/li&gt;
&lt;li&gt;Instalar el paquete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En la lección anterior generamos el paquete &lt;code&gt;calculos&lt;/code&gt; como una carpeta en el interior del directorio del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; donde estamos almacenando todos los archivos de este curso. Desde la raíz del mencionado directorio, utilizamos los módulos contenidos en dicho paquete en, por ejemplo, &lt;code&gt;paquetes_1.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora bien, si movemos este último archivo a otro directorio, &lt;em&gt;Python&lt;/em&gt; seguramente no será capaz de encontrar el paquete &lt;code&gt;calculos&lt;/code&gt;. Para solventar esta situación, hemos de proceder a su instalación.&lt;/p&gt;

&lt;p&gt;En primer lugar, creamos un archivo denominado &lt;code&gt;setup.py&lt;/code&gt; en la raíz del directorio, que contendrá una descripción del paquete que vamos a distribuir (nombre, versión, autor&amp;hellip;). En su interior, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import setup

setup(name=&amp;quot;prac35_calculos&amp;quot;,
      version=&amp;quot;1.0&amp;quot;,
      description=&amp;quot;Paquete de cálculos matemáticos&amp;quot;,
      author=&amp;quot;Alexis Sáez&amp;quot;,
      author_email=&amp;quot;cucoalexis@hotmail.com&amp;quot;,
      url=&amp;quot;https://imalexissaez.github.io/&amp;quot;,
      packages=[&amp;quot;prac35_calculos&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, abrimos la terminal de &lt;em&gt;Windows&lt;/em&gt; y nos dirigimos a la carpeta donde hemos almacenado el fichero &lt;code&gt;setup.py&lt;/code&gt; (la instrucción &lt;code&gt;cd&lt;/code&gt; es clave en este proceso). Escribimos ahora&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py sdist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si todo ha ido bien, habrán aparecido dos nuevas carpetas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;calculos.egg-info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta última hallamos el archivo comprimido denominado &lt;code&gt;calculos-1.0.tar.gz&lt;/code&gt;. Este es el fichero que podemos enviar por correo electrónico o subir a alguna plataforma online para distribuirlo a otras personas.&lt;/p&gt;

&lt;p&gt;Acto seguido, imaginemos que lo hemos recibido y queremos instalarlo. Para ello, desde la terminal de &lt;em&gt;Windows&lt;/em&gt; acudimos al directorio donde resida el fichero comprimido y tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install calculos-1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibiremos rápidamente en la consola el mensaje &amp;ldquo;Successfully installed calculos-1.0&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ahora, desde cualquier carpeta de nuestro ordenador, podemos emplear el paquete recién instalado escribiendo, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import sumar

sumar(6, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para comprobar que efectivamente el procedimiento se ha llevado a cabo con éxito, he creado una nueva carpeta, &lt;code&gt;test_paquete&lt;/code&gt;, y allí he ubicado el archivo &lt;code&gt;paquetes.py&lt;/code&gt;. De no haber instalado correctamente el paquete, &lt;em&gt;Python&lt;/em&gt; habría sido incapaz de encontrar la función &lt;code&gt;sumar()&lt;/code&gt; utilizando la instrucción dada arriba.&lt;/p&gt;

&lt;p&gt;Finalmente, para desinstalar el paquete, desde la terminal de &lt;em&gt;Windows&lt;/em&gt; tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 uninstall calculos
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/36/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>37. Archivos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb37-archivos-i/</link>
      <pubDate>Tue, 14 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb37-archivos-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/V87m9SltcI8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección abordaremos cómo trabajar con ficheros externos de texto, utilizando para tal empresa el módulo &lt;code&gt;io&lt;/code&gt;. Nuestro objetivo será conseguir la &lt;strong&gt;persistencia de datos&lt;/strong&gt;, es decir, salvaguardar los datos que estamos manipulando para que no se pierdan al finalizar una sesión de &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Existen dos alternativas para conseguir el mencionado objetivo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manejar archivos externos.&lt;/li&gt;
&lt;li&gt;Trabajar con bases de datos (BBDD).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las fases necesarias para guardar cierta información en archivos externos son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creación del archivo externo.&lt;/li&gt;
&lt;li&gt;Apertura del archivo externo.&lt;/li&gt;
&lt;li&gt;Manipulación del archivo externo.&lt;/li&gt;
&lt;li&gt;Cierre del archivo externo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La documentación del módulo &lt;code&gt;io&lt;/code&gt; la podemos encontrar en &lt;a href=&#34;https://docs.python.org/3/library/io.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo sencillo en el que crearemos un archivo donde almacenar una frase. Empecemos tecleando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: un archivo lo podemos abrir en modo lectura (&lt;code&gt;r&lt;/code&gt;), escritura (&lt;code&gt;w&lt;/code&gt;), agregar (&lt;code&gt;a&lt;/code&gt;)&amp;hellip;&lt;/p&gt;

&lt;p&gt;Si ahora acudimos al interior de la carpeta, encontraremos un archivo de texto vacío denominado &lt;code&gt;archivo.txt&lt;/code&gt;. En absoluto es necesario que almacenemos el fichero en una carpeta, pero únicamente procedo así para que el &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; mantenga una estructura coherente.&lt;/p&gt;

&lt;p&gt;A continuación, veamos cómo incluir información (texto) en dicho archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

# Creación + Apertura
archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;w&amp;quot;)

frase = &amp;quot;Es un estupendo día para estudiar Python\nen Youtube.&amp;quot;

# Manipulación
archivo_texto.write(frase)

# Cierre
archivo_texto.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, hemos incluido el texto declarado en la variable &lt;code&gt;frase&lt;/code&gt; en el fichero &lt;code&gt;archivo.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, estudiemos cómo abrir un archivo en modo lectura y acceder a su contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)

texto = archivo_texto.read()

archivo_texto.close()

print(texto)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otro método que nos puede resultar de utilidad a la hora de leer un archivo es &lt;code&gt;readlines()&lt;/code&gt;, que accede a la información almacenada línea a línea y la guarda en una lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)

lineas_texto = archivo_texto.readlines()

archivo_texto.close()

print(lineas_texto)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#39;Es un estupendo día para estudiar Python\n&#39;, &#39;en Youtube.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ser una lista, podemos utilizar ahora todo lo que hemos aprendido sobre ellas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(lineas_texto[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, veamos cómo abrir un archivo para agregar información. Para no alterar el contenido de &lt;code&gt;archivo.txt&lt;/code&gt;, almacenaremos sus frases en una variable, las escribiremos en un nuevo fichero, &lt;code&gt;archivo2.txt&lt;/code&gt;, y sobre este último será donde agreguemos contenido adicional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo1 = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)
texto = archivo1.read()
archivo1.close()

archivo2 = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;w&amp;quot;)
archivo2.write(texto)
archivo2.close()

archivo2 = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;a&amp;quot;)
archivo2.write(&amp;quot;\n¡Mañana más!&amp;quot;)
archivo2.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si acudimos a la carpeta, comprobaremos la existencia de un fichero denominado &lt;code&gt;archivo2.txt&lt;/code&gt;, que contiene tres líneas.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/37/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>38. Archivos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb38-archivos-ii/</link>
      <pubDate>Tue, 14 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb38-archivos-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/0dEYVSRYl_s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Continuemos el estudio de la manipulación de ficheros externos de texto, con el módulo &lt;code&gt;io&lt;/code&gt;, analizando en esta ocasión cómo manejar punteros en texto.&lt;/p&gt;

&lt;p&gt;Para ello, movamos el último archivo de texto generado en la lección anterior (&lt;code&gt;archivo2.txt&lt;/code&gt;) a la carpeta, para así mantener la coherencia de la estructura de ficheros del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;. Tras ello, tecleemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si no indicamos lo contrario, la función &lt;code&gt;.read()&lt;/code&gt; sitúa el puntero al inicio del archivo y comienza entonces su lectura. Cuando finaliza esta, la posición del puntero se ubica tras el último carácter. Esto implica que si ahora escribimos de nuevo la instrucción &lt;code&gt;print(archivo.read())&lt;/code&gt;, nada se mostraría en la consola, puesto que tras la posición que ha quedado el puntero no existe información alguna.&lt;/p&gt;

&lt;p&gt;Se puede inicializar la posición del puntero utilizando la función &lt;code&gt;.seek()&lt;/code&gt;, que como argumento recibe el carácter desde el que deseamos comenzar la lectura del archivo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read())

archivo.seek(0)  # Reinicio posición puntero

print(archivo.read())

archivo.seek(10)  # Establezco posición puntero en carácter 10

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
pendo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con el método &lt;code&gt;.read()&lt;/code&gt; también podemos modificar la función del puntero, aunque de manera algo diferente a cómo se lleva a cabo el proceso con &lt;code&gt;.seek()&lt;/code&gt;. La primera lee hasta la posición del puntero que le indiquemos como argumento, mientras que la segunda posiciona el puntero en una posición y la lectura se efectúa a partir de dicha posición.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read(11))
print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estup
endo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para situar el puntero justo en medio de un archivo de texto podemos emplear la siguiente estrategia:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

archivo.seek(len(archivo.read()) / 2)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;r Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Y si queremos situar el puntero al final de la primera línea?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

archivo.seek(len(archivo.readline()))

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un archivo lo podemos abrir, simultáneamente, en modo lectura y escritura (&lt;code&gt;&amp;quot;r+&amp;quot;&lt;/code&gt;), para realizar ambas acciones a la vez si nos es preciso. Generemos un fichero denominado &lt;code&gt;archivo3.txt&lt;/code&gt;, con el mismo contenido que aquel con el que llevamos trabajando a lo largo de toda esta lección. Después, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo3.txt&amp;quot;, &amp;quot;r+&amp;quot;)  # lectura y escritura

archivo.write(&amp;quot;Comienzo del texto: &amp;quot;)

archivo.seek(0)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Comienzo del texto: para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al abrir el archivo, el puntero se posiciona al principio del mismo. Así, cuando usamos el método &lt;code&gt;.write()&lt;/code&gt;, efectivamente sobreescribimos el contenido que originalmente hubiera (en tantas posiciones como longitud posea la nueva cadena de texto).&lt;/p&gt;

&lt;p&gt;Así, para incluir una línea en mitad del documento (la segunda en este caso particular), un posible enfoque sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo3.txt&amp;quot;, &amp;quot;r+&amp;quot;)  # lectura y escritura

lineas = archivo.readlines()

lineas[1] = &amp;quot;Esta línea ha sido incluida desde el exterior.\n&amp;quot;

archivo.seek(0)

archivo.writelines(lineas)

archivo.seek(0)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Comienzo del texto: para estudiar Python
Esta línea ha sido incluida desde el exterior.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/38/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>39. Serialización I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb39-serializacion-i/</link>
      <pubDate>Wed, 15 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb39-serializacion-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/SOimkkfQIOM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección estudiaremos cómo serializar colecciones de ciertos objetos. La &lt;strong&gt;serialización&lt;/strong&gt; consiste en guardar en un fichero externo una lista, un diccionario o, incluso, un objeto; con la particularidad de que la codificación de dicho fichero es binaria.&lt;/p&gt;

&lt;p&gt;Esta estrategia resulta de utilidad a la hora de compartir archivos por Internet, ya que su distribución es más sencilla, o bien si deseamos guardarlo en un dispositivo de almacenamiento externo o en una base de datos.&lt;/p&gt;

&lt;p&gt;Para tal empresa utilizaremos la biblioteca de &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;pickle&lt;/code&gt;, para aprovechar los métodos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dump()&lt;/code&gt;: vuelca datos en un fichero binario externo, y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load()&lt;/code&gt;: carga datos de un fichero binario externo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos un ejemplo sencillo de aplicación de ambas funciones. Almacenaremos en un archivo binario externo una lista de nombres y, posteriormente, la rescataremos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

nombres = [&amp;quot;Pedro&amp;quot;, &amp;quot;Ana&amp;quot;, &amp;quot;María&amp;quot;, &amp;quot;Isabel&amp;quot;]

fichero = open(&amp;quot;lista_nombres&amp;quot;, &amp;quot;wb&amp;quot;)

pickle.dump(nombres, fichero)

fichero.close()

del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A la hora de crear el fichero externo en modo escritura, con el método &lt;code&gt;open()&lt;/code&gt;, hemos de indicarle que esta será binaria, para lo cual el correspondiente parámetro toma como valor de argumento &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;La instrucción &lt;code&gt;del&lt;/code&gt; borra el puntero de la memoria hacia la variable &lt;code&gt;fichero&lt;/code&gt;, dejando de estar disponible su acceso a partir de ese momento.&lt;/li&gt;
&lt;li&gt;Al ejecutar el anterior bloque de código, en la carpeta correspondiente del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;), aparecerá un archivo externo de tipo binario denominado &lt;code&gt;lista_nombres&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A continuamos, veamos cómo rescatar la información que reside en el interior del mencionado fichero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

fichero = open(&amp;quot;lista_nombres&amp;quot;, &amp;quot;rb&amp;quot;)

lista = pickle.load(fichero)

fichero.close()

print(lista)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#39;Pedro&#39;, &#39;Ana&#39;, &#39;María&#39;, &#39;Isabel&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para activar el modo de lectura de archivos binarios, el  parámetro correspondiente de la función &lt;code&gt;open()&lt;/code&gt; ha de tomar el valor de argumento &lt;code&gt;&amp;quot;rb&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/39/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>40. Serialización II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb40-serializacion-ii/</link>
      <pubDate>Thu, 16 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb40-serializacion-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/CkfDnMC79b4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos estudiando el tema de la serialización, analizando ahora cómo llevar a cabo el proceso cuando hay objetos implicados.&lt;/p&gt;

&lt;p&gt;Aprovechemos la clase &lt;code&gt;Vehiculo&lt;/code&gt; que generamos anteriormente y cuyo código fuente recordemos era:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, importemos la librería &lt;code&gt;pickle&lt;/code&gt; y creemos una lista con algunas instancias de la clase &lt;code&gt;Vehiculo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

coche1 = Vehiculo(&amp;quot;Mazda&amp;quot;, &amp;quot;MX5&amp;quot;)
coche2 = Vehiculo(&amp;quot;Seat&amp;quot;, &amp;quot;León&amp;quot;)
coche3 = Vehiculo(&amp;quot;Renault&amp;quot;, &amp;quot;Megane&amp;quot;)

coches = [coche1, coche2, coche3]

fichero = open(&amp;quot;coches&amp;quot;, &amp;quot;wb&amp;quot;)

pickle.dump(coches, fichero)

fichero.close()

del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recordemos que estamos creando ficheros externos cuya codificación es binaria, es por ello que el valor del parámetro correspondiente de la función &lt;code&gt;open()&lt;/code&gt; es &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Al ejecutar el anterior bloque de código, aparecerá en la carpeta asociada del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;) el fichero &lt;code&gt;coches&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para rescatar la información de este archivo que acabamos de generar, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


fichero = open(&amp;quot;coches&amp;quot;, &amp;quot;rb&amp;quot;)

coches = pickle.load(fichero)

print(coches)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&amp;lt;__main__.Vehiculo object at 0x00000259428D65C0&amp;gt;, &amp;lt;__main__.Vehiculo object at 0x00000259428F7F28&amp;gt;, &amp;lt;__main__.Vehiculo object at 0x00000259428F7F98&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Efectivamente, disponemos ahora de una lista con tres objetos. No obstante, recordemos que tenemos el método &lt;code&gt;estado&lt;/code&gt; para acceder a información de interés sobre dichos objetos. Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for coche in coches:
    print(coche.estado())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Mazda 
Modelo: MX5 
En marcha: False 
Acelerando: False 
Frenando: False
None
Marca: Seat 
Modelo: León 
En marcha: False 
Acelerando: False 
Frenando: False
None
Marca: Renault 
Modelo: Megane 
En marcha: False 
Acelerando: False 
Frenando: False
None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: como podemos comprobar arriba, si hacemos la recuperación de la serialización en un fichero distinto, la definición de la clase &lt;code&gt;Vehiculo&lt;/code&gt; es necesario que figure asimismo (en caso contrario arroja &lt;em&gt;Python&lt;/em&gt; un error). El problema radica en que el nuevo archivo no tiene información sobre la clase &lt;code&gt;Vehiculo&lt;/code&gt; ni, por supuesto, del método &lt;code&gt;estado()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/40/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>41. Guardado permanente</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb41-guardado-permanente/</link>
      <pubDate>Mon, 20 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb41-guardado-permanente/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/J3qvf1fTCsU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos estudiando cómo guardar datos de forma permanente en ficheros externos, reforzando así los contenidos aprendidos hasta el momento.&lt;/p&gt;

&lt;p&gt;Empecemos importando la librería &lt;code&gt;pickle&lt;/code&gt; y creando una clase sencilla: &lt;code&gt;Persona&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Persona:
    def __init__(self, nombre, genero, edad):
        self.nombre = nombre
        self.genero = genero
        self.edad = edad
        print(&amp;quot;Se ha creado una persona nueva con el nombre de&amp;quot;, self.nombre)

    def __str__(self):
        return &amp;quot;{} {} {}&amp;quot;.format(self.nombre, self.genero, self.edad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: el método &lt;code&gt;__str__()&lt;/code&gt; convierte en cadena de texto la información de un objeto.&lt;/p&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Sandra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El objetivo será crear algunos objetos de dicha clase, almacenarlos en una lista (empresa que realizaremos a través de otra clase, &lt;code&gt;ListaPersonas&lt;/code&gt;) y después volcar la información en un fichero externo, al cual podamos acceder en cualquier instante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Persona:
    def __init__(self, nombre, genero, edad):
        self.nombre = nombre
        self.genero = genero
        self.edad = edad
        print(&amp;quot;Se ha creado una persona nueva con el nombre de&amp;quot;, self.nombre)

    def __str__(self):
        return &amp;quot;{} {} {}&amp;quot;.format(self.nombre, self.genero, self.edad)


class ListaPersonas:
    personas = []

    def agregar_personas(self, persona):
        self.personas.append(persona)

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())


lista_personas = ListaPersonas()

sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
lista_personas.agregar_personas(sandra)

antonio = Persona(&amp;quot;Antonio&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;39&amp;quot;)
lista_personas.agregar_personas(antonio)

ana = Persona(&amp;quot;Ana&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;20&amp;quot;)
lista_personas.agregar_personas(ana)

lista_personas.mostrar_personas()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Sandra
Se ha creado una persona nueva con el nombre de Antonio
Se ha creado una persona nueva con el nombre de Ana
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Almacenemos ahora la lista de personas que hemos generado en un fichero externo. Para ello, incluiremos los pasos necesarios del mencionado proceso en el constructor de la clase &lt;code&gt;ListaPersonas&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())


lista_personas = ListaPersonas()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El fichero está vacío.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en la función &lt;code&gt;open()&lt;/code&gt;, el valor del argumento &lt;code&gt;&amp;quot;ab+&amp;quot;&lt;/code&gt; nos permite agregar información a un fichero de codificación binaria.&lt;/p&gt;

&lt;p&gt;A continuación, modifiquemos el método &lt;code&gt;agregar_personas()&lt;/code&gt; para que una vez añadida a la lista la nueva información, la almacene en el fichero externo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)
        self.guardar_personas()

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())

    def guardar_personas(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;wb&amp;quot;)
        pickle.dump(self.personas, fichero)
        fichero.close()
        del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ejecutamos ahora el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_personas = ListaPersonas()

sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
lista_personas.agregar_personas(sandra)

antonio = Persona(&amp;quot;Antonio&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;39&amp;quot;)
lista_personas.agregar_personas(antonio)

ana = Persona(&amp;quot;Ana&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;20&amp;quot;)
lista_personas.agregar_personas(ana)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El fichero está vacío.
Se ha creado una persona nueva con el nombre de Sandra
Se ha creado una persona nueva con el nombre de Antonio
Se ha creado una persona nueva con el nombre de Ana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recuperemos la información guardada en el fichero externo, utilizando para ello un método que añadiremos a la clase &lt;code&gt;ListaPersonas&lt;/code&gt;, &lt;code&gt;mostrar_informacion&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)
        self.guardar_personas()

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())

    def guardar_personas(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;wb&amp;quot;)
        pickle.dump(self.personas, fichero)
        fichero.close()
        del fichero

    def mostrar_informacion(self):
        print(&amp;quot;La información del fichero externo es la siguiente:&amp;quot;)
        for persona in self.personas:
            print(persona.__str__())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_personas.mostrar_informacion()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;La información del fichero externo es la siguiente:
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agreguemos una nueva persona. Para ello, tecleamos por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Persona(&amp;quot;Juan&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;47&amp;quot;)
lista_personas.agregar_personas(juan)

lista_personas.mostrar_informacion()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Juan
La información del fichero externo es la siguiente:
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
Juan Masculino 47
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/41/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>42. Interfaces gráficas I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb42-interfaces-graficas-i/</link>
      <pubDate>Mon, 20 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb42-interfaces-graficas-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/hTUJC8HsC2I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, comenzamos el estudio de las &lt;strong&gt;interfaces gráficas&lt;/strong&gt; en &lt;em&gt;Python&lt;/em&gt;, analizando para ello la librería &lt;code&gt;Tkinter&lt;/code&gt;. Las interfaces gráficas, también denominadas GUI, son intermediarios entre el programa y el usuario. Están formadas por un conjunto de gráficos como ventanas, botones, menús, casillas de verificación, etc.&lt;/p&gt;

&lt;p&gt;Además de la mencionada, existen otras librerías alternativas para trabajar con interfaces gráficas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WxPython&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyQT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyGTK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Tkinter&lt;/code&gt; es un &amp;ldquo;puente&amp;rdquo; entre &lt;em&gt;Python&lt;/em&gt; y la librería &lt;code&gt;TCL / TK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La estructura de una interfaz gráfica en &lt;em&gt;Python&lt;/em&gt; es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Raíz&lt;/em&gt;: la ventana de la aplicación propiamente dicha.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frame&lt;/em&gt;: estructura que agrupa diversos elementos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Widgets&lt;/em&gt;: elementos de la aplicación. En ocasiones, al &lt;em&gt;frame&lt;/em&gt; también se le considera un &lt;em&gt;widget&lt;/em&gt; más.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A continuación, veamos cómo construir la raíz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior bloque de código aparece una ventana en blanco en nuestro escritorio, con algunos botones que permiten interactuar con ella a la manera que estamos habituados.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primera ventana.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Para que una ventana pueda mantenerse en ejecución, debe estar en una especie de &amp;ldquo;bucle infinito&amp;rdquo; (a la espera o escucha de eventos), estado que conseguimos a través de la función &lt;code&gt;mainloop()&lt;/code&gt;, que, por el momento, habrá de estar siempre al final de nuestros programas.&lt;/p&gt;

&lt;p&gt;La documentación para la librería &lt;code&gt;Tkinter&lt;/code&gt; la podemos encontrar siguiendo &lt;a href=&#34;https://docs.python.org/3/library/tk.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Modifiquemos algunas de las características que esta ventana posee por defecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=False, height=False)  # raiz.resizable(0, 0)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.geometry(&amp;quot;450x300&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)
raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title()&lt;/code&gt; nos permite cambiar el título de la ventana generada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resizable()&lt;/code&gt; acepta dos valores booleanos para indicar si permitimos que se modifique la anchura o la altura de la ventana. Según los argumentos escogidos, incluso queda deshabilitado el botón de maximizar ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iconbitmap()&lt;/code&gt; nos da la posibilidad de cambiar el icono de la ventana generada, que, por defecto, es una especie de pluma. Para ello, hemos de almacenar en el directorio de la aplicación (o tener bien localizada su ruta) un archivo de extensión &lt;code&gt;.ico&lt;/code&gt; (buscar en &lt;em&gt;Google&lt;/em&gt; &amp;ldquo;conversor .ico&amp;rdquo; para acceder a aplicaciones online que nos generen este tipo de ficheros).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry()&lt;/code&gt; configura el ancho y el alto de la ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config()&lt;/code&gt;, entre otras acciones, nos permite cambiar el color del fondo.&lt;/li&gt;
&lt;/ul&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Modificando propiedades de la ventana.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Hasta el momento, las ventanas requieren de la consola de &lt;em&gt;Python&lt;/em&gt; para su funcionamiento. Si queremos que este sea independiente de ella, hemos de modificar la extensión de la aplicación de &lt;code&gt;.py&lt;/code&gt; a &lt;code&gt;.pyw&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/42/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>43. Interfaces gráficas II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb43-interfaces-graficas-ii/</link>
      <pubDate>Tue, 21 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb43-interfaces-graficas-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/M80CzDC1Crc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Después de introducir, en la lección anterior, la &lt;em&gt;raíz&lt;/em&gt; de una interfaz gráfica, en esta abordaremos la construcción y uso de &lt;em&gt;frames&lt;/em&gt;. Comencemos recuperando el código fuente de la &amp;ldquo;aplicación&amp;rdquo; que generamos con anterioridad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=False, height=False)  # raiz.resizable(0, 0)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.geometry(&amp;quot;450x300&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)
raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, crearemos un frame y lo empaquetaremos (ubicaremos) dentro de la raíz disponible a través del método &lt;code&gt;pack()&lt;/code&gt;. Además, prescindiremos de la instrucción &lt;code&gt;raiz.geometry()&lt;/code&gt;, para así estar en condiciones de configurar el tamaño del &lt;em&gt;frame&lt;/em&gt; (la raíz se adaptará automáticamente al tamaño de sus elementos internos):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack()
frame.config(bg=&amp;quot;tomato&amp;quot;, width=&amp;quot;450&amp;quot;, height=&amp;quot;300&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A primera vista, al ejecutar el aterior bloque de código, da la sensación de que hemos perdido el color de fondo declarado para la aplicación (&lt;code&gt;lightblue&lt;/code&gt;). No obstante, como ahora permitimos manipular el tamaño de la ventana (mediante la instrucción &lt;code&gt;raiz.resizable(width=True, height=True)&lt;/code&gt;), al agrandarla comprobamos que todo funciona correctamente.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Los dos colores de fondo siguen disponibles.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;a href=&#34;http://www.science.smith.edu/dftwiki/index.php/Color_Charts_for_TKinter&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; podemos encontrar un buen recurso para acceder a una paleta de colores declarados por nombres y disponibles para la librería &lt;code&gt;tkinter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por otro lado, observamos que el &lt;em&gt;frame&lt;/em&gt; tiene un tamaño fijo, por mucho que manipulemos el tamaño de la ventana, las dimensiones del &lt;em&gt;frame&lt;/em&gt; no se alteran, así como su posición, que permanece centrada en la parte superior de la ventana de la aplicación. Este comportamiento es el dado por defecto, que podemos configurar de manera diferente, si así lo deseamos, a través del método &lt;code&gt;pack()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack(side=&amp;quot;left&amp;quot;, anchor=&amp;quot;s&amp;quot;, fill=&amp;quot;x&amp;quot;, expand=&amp;quot;True&amp;quot;)
frame.config(bg=&amp;quot;tomato&amp;quot;, width=&amp;quot;450&amp;quot;, height=&amp;quot;300&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Modificando propiedades del &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Las opciones de configuración de los &lt;em&gt;frames&lt;/em&gt; son ciertamente numerosas. Por ejemplo, podemos añadirle un borde (parámetros &lt;code&gt;bd&lt;/code&gt; y &lt;code&gt;relief&lt;/code&gt;) o cambiar el icono del ratón cuando se adentra en el interior del &lt;em&gt;frame&lt;/em&gt; (parámetro &lt;code&gt;cursor&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack(side=&amp;quot;left&amp;quot;, anchor=&amp;quot;s&amp;quot;)
frame.config(bg=&amp;quot;tomato&amp;quot;,
             width=&amp;quot;450&amp;quot;,
             height=&amp;quot;300&amp;quot;,
             bd=35,
             relief=&amp;quot;groove&amp;quot;,
             cursor=&amp;quot;pirate&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Añadiendo un marco al &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Obviamente, todo aquello que hemos visto de cara a configurar un &lt;em&gt;frame&lt;/em&gt; es aplicable a la propia &lt;em&gt;raíz&lt;/em&gt; y dependerá de cómo deseemos diseñar nuestra aplicación.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/43/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>44. Interfaces gráficas III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb44-interfaces-graficas-iii/</link>
      <pubDate>Tue, 21 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb44-interfaces-graficas-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Nf4-gvf-tNg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, analizaremos cómo trabajar con el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;, perteneciente a la librería &lt;code&gt;tkinter&lt;/code&gt;, que nos permite mostrar texto o imágenes en nuestras interfaces gráficas. No es un elemento con el que podamos interactuar, es decir, no podremos borrarlo, arrastrarlo, etc.&lt;/p&gt;

&lt;p&gt;Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;variable = Label(contenedor, opciones)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En &lt;a href=&#34;http://effbot.org/tkinterbook/label.htm&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; podemos consultar qué opciones disponibles ofrece el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ver en acción este &lt;em&gt;widget&lt;/em&gt;, reutilicemos como base parte del código generado en lecciones anteriores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadimos ahora, antes de la instrucción &lt;code&gt;root.mainloop()&lt;/code&gt;, las líneas de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;label = Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;)
label.pack()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Quedando el resultado de la ejecución como una ventana bastante reducida porque, recordemos, la raíz se adapta al tamaño de sus elementos integrados (aunque le hayamos indicado ciertas dimensiones previamente). Ello se debe al uso del método &lt;code&gt;pack()&lt;/code&gt;. Veamos el efecto que produce utilizar la función &lt;code&gt;place()&lt;/code&gt; en su lugar, pasándole las coordenadas donde deseamos situar el &lt;em&gt;widget&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

label = Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;)
label.place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Utilizando la función &lt;code&gt;place()&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: &lt;em&gt;Python&lt;/em&gt; utiliza un curioso sistema de coordenadas. La coordenada &lt;code&gt;x&lt;/code&gt; indica la distancia horizontal al comienzo del &lt;em&gt;widget&lt;/em&gt; tal como estamos acostumbrados en matemáticas. Sin embargo, la coordenada &lt;code&gt;y&lt;/code&gt; indica la distancia vertical al comienzo del &lt;em&gt;widget&lt;/em&gt; tomando como referencia la parte superior de la ventana y siendo los valores positivos desplazamientos hacia abajo.&lt;/p&gt;

&lt;p&gt;Si no vamos a utilizar en ningún momento la variable &lt;code&gt;label&lt;/code&gt;, podemos aligerar un tanto el código escribiendo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;).place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A partir de aquí, ya únicamente nos queda experimentar con las diferentes opciones asociadas al &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;, fg=&amp;quot;tomato&amp;quot;,
      font=(&amp;quot;Arial&amp;quot;, 18)).place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Probando opciones adicionales para &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Adicionalmente, el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt; nos permite incluir (de forma nativa en la librería &lt;code&gt;tkinter&lt;/code&gt;) imágenes de tipo &lt;em&gt;gif&lt;/em&gt; o &lt;em&gt;png&lt;/em&gt;. Por ejemplo, insertemos en nuestra aplicación &lt;a href=&#34;https://www.freepng.es/png-lwhgke/&#34; target=&#34;_blank&#34;&gt;esta imagen&lt;/a&gt;, que, en un alarde de originalidad, llamaremos &lt;code&gt;avengers.png&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label, PhotoImage

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

imagen = PhotoImage(file=&amp;quot;avengers.png&amp;quot;)

Label(frame, image=imagen).pack()  # .place() es otra posibilidad

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img04.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Una imagen como &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para que la ventana se adaptase automáticamente al tamaño de la imagen descargada, he utilizado el método &lt;code&gt;pack()&lt;/code&gt; en lugar de la función &lt;code&gt;place()&lt;/code&gt;. No obstante, con ambas opciones se puede conseguir el mismo resultado si ajustamos de manera fina sus correspondientes opciones.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/44/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>45. Interfaces gráficas IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb45-interfaces-graficas-iv/</link>
      <pubDate>Wed, 22 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb45-interfaces-graficas-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/YRs8j0QGEn0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, tras haber estudiado en la anterior el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;, abordaremos el uso del &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Entry&lt;/code&gt;, cuyo funcionamento es realmente similar a nivel de sintaxis. Este último habilita, en nuestras ventanas, la posibilidad de introducir un cuadro de texto, desde el cual el usuario puede suministrar cierta información.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Entry

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

cuadro_texto = Entry(root)
cuadro_texto.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Entry&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A partir de ahora, podemos reutilizar los conceptos y propiedades aprendidas hasta el momento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

cuadro_texto = Entry(frame)
cuadro_texto.place(x=100, y=100)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Insertando el &lt;em&gt;widget&lt;/em&gt; en un &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Empecemos a combinar &lt;em&gt;widgets&lt;/em&gt; añadiendo al lado del cuadro de texto una etiqueta que rece &amp;ldquo;Nombre:&amp;ldquo;, como si quisiéramos elaborar un formulario de registro de datos personales. Utilizando la función &lt;code&gt;place()&lt;/code&gt; es posible, pero resulta muy complicado cuadrar adecuadamente todos los espacios de la ventana de la aplicación.&lt;/p&gt;

&lt;p&gt;Existen dos alternativas a la hora de abordar esta situación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pack()&lt;/code&gt;, aunque ya sabemos que después se ajustará la ventana al tamaño de sus elementos internos, ignorando pues las dimensiones que establecimos en su declaración.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid()&lt;/code&gt;, construye una tabla dentro de la interfaz gráfica con tantas filas y columnas como nosotros queramos. Tras ello, podemos ubicar en la casilla que deseemos el elemento que nos interese.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estudiemos el uso de esta última función mencionada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Probando el método &lt;code&gt;grid()&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Por defecto, los elementos se alinean centrados dentro de su correspondiente casilla de la rejilla. Con el parámetro &lt;code&gt;sticky&lt;/code&gt; y los cuatro puntos cardinales (&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; y sus combinaciones por parejas) podemos modificar dicho comportamiento.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img04.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;El parámetro &lt;code&gt;sticky&lt;/code&gt; en acción.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Para evitar que los elementos aparezcan tan juntos, los parámetros &lt;code&gt;padx&lt;/code&gt; y &lt;code&gt;pady&lt;/code&gt; pueden resultarnos de utilidad, ya que nos permiten configurar la distancia del elemento al límite del contenedor donde se haya ubicado.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img05.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img05.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Separando elementos con &lt;code&gt;padx&lt;/code&gt; y &lt;code&gt;pady&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Ahora, ya únicamente nos resta experimentar con la configuración de los distintos &lt;em&gt;widgets&lt;/em&gt; estudiados, empleando para ello principalmente la función &lt;code&gt;config()&lt;/code&gt; asociada a cada &lt;em&gt;widget&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, veamos cómo añadir un cuadro de texto que nos permita introducir contraseñas. Buscamos que al suministrar la información, esta aparezca &amp;ldquo;oculta&amp;rdquo; tras asteriscos. El parámetro &lt;code&gt;show&lt;/code&gt; de la función &lt;code&gt;config()&lt;/code&gt; cumple dicho cometido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1)
pass_texto.config(show=&amp;quot;*&amp;quot;)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img06.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img06.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Una contraseña más segura con &lt;code&gt;show&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/45/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>46. Interfaces gráficas V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb46-interfaces-graficas-v/</link>
      <pubDate>Thu, 23 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb46-interfaces-graficas-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nZF9SwhmPRo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, presentaremos dos &lt;em&gt;widgets&lt;/em&gt; nuevos: &lt;code&gt;Text&lt;/code&gt; y &lt;code&gt;Button&lt;/code&gt;. El primero de ellos nos permite introducir un texto de extensión considerable en un cuadro, mientras que el segundo simplemente se trata de la clase asociada a los botones que habitualmente pulsamos en cualquier aplicación.&lt;/p&gt;

&lt;p&gt;Retomemos el último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1)
pass_texto.config(show=&amp;quot;*&amp;quot;)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadamos, a continuación del campo declarado para la introducción de la contraseña, uno dedicado a la biografía de la persona que está rellenando el formulario. Ello nos permitirá hacer uso de la clase &lt;code&gt;Text&lt;/code&gt;, que habremos de importar al inicio del código. Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bio_label = Label(frame, text=&amp;quot;Biografía:&amp;quot;)
bio_label.grid(row=6, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

bio_texto = Text(frame, width=15, height=5)
bio_texto.grid(row=6, column=1, padx=2, pady=2)

scroll_vert = Scrollbar(frame, command=bio_texto.yview)
scroll_vert.grid(row=6, column=2, sticky=&amp;quot;nsew&amp;quot;)
bio_texto.config(yscrollcommand=scroll_vert.set)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Text&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conviene que declaremos unas longitudes adecuadas mediante los parámetros &lt;code&gt;width&lt;/code&gt; y &lt;code&gt;height&lt;/code&gt;, ya que las asignadas por defecto son ciertamente elevadas.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Text&lt;/code&gt; automáticamente permite la posibilidad de &lt;em&gt;scroll&lt;/em&gt;, aunque si deseamos que aparezca una barra de desplazamiento lateral, hemos de indicarlo. Para ello, se requiere la construcción de un objeto de la clase &lt;code&gt;Scrollbar&lt;/code&gt; (que hemos de importar de la librería &lt;code&gt;tkinter&lt;/code&gt;) y asociarlo al cuadro de texto generado. La correspondiente instrucción que se ocupa de tal tarea en el bloque de código anterior es:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scroll_vert = Scrollbar(frame, command=bio_texto.yview)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Acto seguido, mediante el método &lt;code&gt;grid()&lt;/code&gt;, y teniendo cuidado con el valor correspondiente para el parámetro &lt;code&gt;column&lt;/code&gt;, terminamos haciendo que aparezca en la ventana de la aplicación. Para que se adapte al tamaño del cuadro de texto asociado, una posible estrategia es incluir &lt;code&gt;sticky=&amp;quot;nsew&amp;quot;&lt;/code&gt; en la declaración del &lt;em&gt;scroll&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Por otro lado, si queremos que se posicione la barra de desplazamiento al nivel del texto que estamos introduciendo, incluiremos la instrucción &lt;code&gt;bio_texto.config(yscrollcommand=scroll_vert.set)&lt;/code&gt; tras la declaración de la variable &lt;code&gt;scroll_vert&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pasemos ahora a añadir un botón a nuestra interfaz gráfica, para lo cual haremos uso de la clase &lt;code&gt;Button&lt;/code&gt;. Posicionemos uno en la raíz (&lt;code&gt;root&lt;/code&gt;) de la ventana de la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;)
boton_envio.pack()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Button&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A continuación, veamos cómo añadir cierta funcionalidad al botón generado. Para ello, incluimos en su declaración el parámetro &lt;code&gt;command=codigo_boton&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;, command=codigo_boton)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;codigo_boton&lt;/code&gt; será una función que contendrá el código con las acciones que deseemos se lleven a cabo cuando el usuario pulse sobre el botón.&lt;/p&gt;

&lt;p&gt;Por ejemplo, aunque no sea la característica habitual de este tipo de botones, hagamos que cuando el usuario pulse sobre el mencionado botón, se escriba nuestro nombre automáticamente en el cuadro de texto correspondiente. Así, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def codigo_boton():
    mi_nombre.set(&amp;quot;Alexis&amp;quot;)


root = Tk()

mi_nombre = StringVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La instrucción &lt;code&gt;mi_nombre = StringVar()&lt;/code&gt; únicamente le indica a &lt;em&gt;Python&lt;/em&gt; que la variable &lt;code&gt;mi_nombre&lt;/code&gt; es una cadena de caracteres. Como viene siendo habitual, habremos de importar la correspondiente clase al comienzo del código (o, directamente, utilizar el esquema &lt;code&gt;from ... import *&lt;/code&gt;). Ahora, modificamos la declaración del cuadro de texto asociado al nombre del usuario introduciendo el parámetro &lt;code&gt;textvariable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cuadro_nombre = Entry(frame, textvariable=mi_nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: no podemos utilizar &lt;code&gt;StringVar()&lt;/code&gt; antes de definir la raíz (&lt;code&gt;root&lt;/code&gt;) de la aplicación.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;¡El botón está vivo!¡Vivo!&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Si la función &lt;code&gt;set()&lt;/code&gt; nos permite declarar el valor de un cuadro de texto, para obtener la información que el usuario introduzca en uno, utilizaremos, en próximas lecciones, el método &lt;code&gt;get()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, comparto el código completo de esta última aplicación generada, para tener acceso así a una visión global de la misma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Button, Entry, Label, Scrollbar, StringVar, Text


def codigo_boton():
    mi_nombre.set(&amp;quot;Alexis&amp;quot;)


root = Tk()

mi_nombre = StringVar()

root.title(&amp;quot;Probando los widgets Text y Button&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame, textvariable=mi_nombre)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1, padx=2, pady=2)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1, padx=2, pady=2)
pass_texto.config(show=&amp;quot;*&amp;quot;)

bio_label = Label(frame, text=&amp;quot;Biografía:&amp;quot;)
bio_label.grid(row=6, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

bio_texto = Text(frame, width=15, height=5)
bio_texto.grid(row=6, column=1, padx=2, pady=2)

scroll_vert = Scrollbar(frame, command=bio_texto.yview)
scroll_vert.grid(row=6, column=2, sticky=&amp;quot;nsew&amp;quot;)
bio_texto.config(yscrollcommand=scroll_vert.set)

boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;, command=codigo_boton)
boton_envio.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/46/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>47. Interfaces gráficas VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb47-interfaces-graficas-vi/</link>
      <pubDate>Thu, 23 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb47-interfaces-graficas-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/kbTl3DaFJUk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A partir de esta lección, utilizando los conocimientos adquiridos a lo largo de todo el curso, empezaremos un nuevo proyecto: la creación de una calculadora. Comencemos elaborando su interfaz gráfica:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Pantalla
pantalla = Entry(frame)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)

# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3)
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3)
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3)
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3)
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3)
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3)
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3)
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3)
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3)
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3)
boton0.grid(row=5, column=1)
boton_coma = Button(frame, text=&amp;quot;.&amp;quot;, width=3)
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3)
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3)
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: la pantalla ha de ocupar no una columna, sino cuatro, ya que hemos generado después filas de cuatro botones. Para ello, utilizamos el parámetro &lt;code&gt;columnspan&lt;/code&gt; en la función &lt;code&gt;grid()&lt;/code&gt; correspondiente a la pantalla y le asignamos el valor &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb47-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb47-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Interfaz gráfica de la calculadora.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/47/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>48. Interfaces gráficas VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb48-interfaces-graficas-vii/</link>
      <pubDate>Fri, 24 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb48-interfaces-graficas-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/oIzt6ESA7nU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una vez elaborada la interfaz gráfica de la calculadora, en esta lección abordaremos cómo programar parte de la funcionalidad de la misma. Para empezar, nuestro objetivo será conseguir que al pulsar los diferentes botones numéricos aparezcan sus valores asociados en la pantalla.&lt;/p&gt;

&lt;p&gt;Empecemos creando una variable para almacenar una cadena de texto y asociémosla a la pantalla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numero_pantalla = StringVar()

pantalla = Entry(frame, textvariable=numero_pantalla)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, creemos una función que, por ejemplo, escriba el número &lt;code&gt;4&lt;/code&gt; en pantalla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pulsaciones teclado
def numero_pulsado():
    numero_pantalla.set(&amp;quot;4&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, asociémosla al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=numero_pulsado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, al pulsar en el botón del número cuatro, aparece un &lt;code&gt;4&lt;/code&gt; en la pantalla. Vemos que si pulsamos en varias ocasiones, no se añaden más cuatros, que sería el comportamiento deseable. Modifiquemos la función &lt;code&gt;numero_pulsado()&lt;/code&gt; para conseguir tal efecto. Para ello, obtendremos la información actual de la pantalla y le agregaremos el número &lt;code&gt;4&lt;/code&gt; después:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pulsaciones teclado
def numero_pulsado():
    numero_pantalla.set(numero_pantalla.get() + &amp;quot;4&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para generalizar, necesitaremos el uso de funciones &lt;em&gt;lambda&lt;/em&gt; o &lt;em&gt;anónimas&lt;/em&gt; en la declaración de los botones. De no utilizarlas, tal y como transcurre el flujo del programa, al llegar a la línea de la declaración de &lt;code&gt;boton4&lt;/code&gt;, se produciría directamente la llamada de la función &lt;code&gt;numero_pulsado(&amp;quot;4&amp;quot;)&lt;/code&gt;, mostrando (sin que el usuario pulse sobre nada) un &lt;code&gt;4&lt;/code&gt; en la pantalla al abrir la calculadura y, además, deshabilitando la funcionalidad del botón, puesto que al seguir pulsando sobre él no añade más cuatros.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_pulsado(num):
    numero_pantalla.set(numero_pantalla.get() + num)

boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para finalizar, incluyo el código completo de la aplicación elaborada hasta este instante, para obtener así una visión global de la calculadora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    numero_pantalla.set(numero_pantalla.get() + num)


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3)
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3)
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/48/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>49. Interfaces gráficas VIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb49-interfaces-graficas-viii/</link>
      <pubDate>Sat, 25 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb49-interfaces-graficas-viii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/LnO35TiFuQY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, nuestro objetivo será conseguir que la calculadora que estamos generando sea capaz de sumar valores numéricos enteros.&lt;/p&gt;

&lt;p&gt;Empecemos declarando una variable global, que será accesible desde todos las funciones del programa, denominada &lt;code&gt;operacion&lt;/code&gt; y que almacenará la operación aritmética que desea el usuario llevar a cabo. Además, la utilizaremos para conseguir que la pantalla vuelva a su estado inicial a través del uso de bloques condicionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;operación = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta variable cambiará de valor a medida que pulsemos los botones de operaciones aritméticas. Por ejemplo, para la suma, definimos la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función suma
def suma():
    global operacion
    operacion = &amp;quot;suma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, modificamos el código de &lt;code&gt;boton_suma&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3, command=lambda: suma())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, hemos de conseguir que, cuando se pulse dicho botón, la pantalla se borre y permita el almacenamiento de un nuevo número. Modifiquemos la función &lt;code&gt;numero_pulsado()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_pulsado(num):
    global operacion
    if operacion != &amp;quot;&amp;quot;:
        numero_pantalla.set(num)
        operacion = &amp;quot;&amp;quot;
    else:
        numero_pantalla.set(numero_pantalla.get() + num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si pulsamos sobre el botón de sumar, la condición &lt;code&gt;operacion != &amp;quot;&amp;quot;&lt;/code&gt; sería cierta, por lo que entraríamos en esa parte de la estructura condicional. En su interior, apreciamos que no concatenamos el número con nada más y volvemos a declarar el valor de la variable &lt;code&gt;operacion&lt;/code&gt; como una cadena vacía, para permitir así la correcta introducción de un nuevo número.&lt;/p&gt;

&lt;p&gt;Ahora necesitamos una variable global, que denominaremos &lt;code&gt;resultado&lt;/code&gt;, que vaya almacenando los valores introducidos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resultado = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La siguiente tarea consiste en actualizar la función &lt;code&gt;suma()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función suma
def suma(num):
    global operacion, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    numero_pantalla.set(resultado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;num&lt;/code&gt; representa el número que aparece en la pantalla de la calculadora al pulsar el botón de sumar. Como estamos trabajando con cuadros de texto, &lt;em&gt;Python&lt;/em&gt; almacena los textos, lógicamente como su nombre indica, como cadenas de caracteres, de ahí la necesidad de utilizar la función &lt;code&gt;int()&lt;/code&gt;. Una vez realizada la operación aritmética, mostramos su resultado en la pantalla con &lt;code&gt;numero_pantalla.set(resultado)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El nuevo parámetro de la función &lt;code&gt;suma()&lt;/code&gt; nos obliga a modificar el código de &lt;code&gt;boton_suma&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, programemos el comportamiento del botón del símbolo igual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función el_resultado (para el botón igual)
def el_resultado():
    global resultado
    numero_pantalla.set(resultado + int(numero_pantalla.get()))
    resultado = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, al resultado acumulado hemos de sumarle el número que figure en pantalla antes de pulsar el botón del símbolo igual. Tras ello, reseteamos la variable &lt;code&gt;resultado&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Procedamos ahora a modificar el código el mencionado botón:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como viene siendo habitual, comparto el código completo de la aplicación para que podamos tener una visión global de la calculadora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()
operacion = &amp;quot;&amp;quot;
resultado = 0

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    global operacion
    if operacion != &amp;quot;&amp;quot;:
        numero_pantalla.set(num)
        operacion = &amp;quot;&amp;quot;
    else:
        numero_pantalla.set(numero_pantalla.get() + num)


# Función suma
def suma(num):
    global operacion, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    numero_pantalla.set(resultado)


# Función el_resultado (para el botón igual)
def el_resultado():
    global resultado
    numero_pantalla.set(resultado + int(numero_pantalla.get()))
    resultado = 0


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/49/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>50. Interfaces gráficas IX</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb50-interfaces-graficas-ix/</link>
      <pubDate>Sat, 25 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb50-interfaces-graficas-ix/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/YfYUOUGMaXU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Partamos, en esta lección, del siguiente código fuente, que incluye, además de la función para sumar, las correspondientes a las operaciones resta, multiplicación y división:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()
operacion = &amp;quot;&amp;quot;
resultado = 0
reset_pantalla = False

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    global operacion, reset_pantalla
    if reset_pantalla:
        numero_pantalla.set(num)
        reset_pantalla = False
    else:
        numero_pantalla.set(numero_pantalla.get() + num)


# Función suma
def suma(num):
    global operacion, reset_pantalla, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    reset_pantalla = True
    numero_pantalla.set(resultado)


# Función resta
num1 = 0
contador_resta = 0


def resta(num):
    global contador_resta, num1, operacion, reset_pantalla, resultado
    if contador_resta == 0:
        num1 = int(num)
        resultado = num1
    else:
        if contador_resta == 1:
            resultado = num1 - int(num)
        else:
            resultado = int(resultado) - int(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_resta = contador_resta + 1
    operacion = &amp;quot;resta&amp;quot;
    reset_pantalla = True


# Función multiplicación
contador_multi = 0


def multiplica(num):
    global contador_multi, num1, operacion, reset_pantalla, resultado
    if contador_multi == 0:
        num1 = int(num)
        resultado = num1
    else:
        if contador_multi == 1:
            resultado = num1 * int(num)
        else:
            resultado = int(resultado) * int(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_multi = contador_multi + 1
    operacion = &amp;quot;multiplicacion&amp;quot;
    reset_pantalla = True


# Función división
contador_divi = 0


def divide(num):
    global contador_divi, num1, operacion, reset_pantalla, resultado
    if contador_divi == 0:
        num1 = float(num)
        resultado = num1
    else:
        if contador_resta == 1:
            resultado = num1 / float(num)
        else:
            resultado = float(resultado) / float(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_divi = contador_divi + 1
    operacion = &amp;quot;division&amp;quot;
    reset_pantalla = True


# Función el_resultado (para el botón igual)
def el_resultado():
    global contador_divi, contador_multi, contador_resta, operacion, resultado
    if operacion == &amp;quot;suma&amp;quot;:
        numero_pantalla.set(resultado + int(numero_pantalla.get()))
        resultado = 0
    elif operacion == &amp;quot;resta&amp;quot;:
        numero_pantalla.set(int(resultado) - int(numero_pantalla.get()))
        resultado = 0
        contador_resta = 0
    elif operacion == &amp;quot;multiplicacion&amp;quot;:
        numero_pantalla.set(int(resultado) * int(numero_pantalla.get()))
        resultado = 0
        contador_multi = 0
    elif operacion == &amp;quot;division&amp;quot;:
        numero_pantalla.set(int(resultado) / int(numero_pantalla.get()))
        resultado = 0
        contador_divi = 0


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame,
                   text=&amp;quot;/&amp;quot;,
                   width=3,
                   command=lambda: divide(numero_pantalla.get()))
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame,
                    text=&amp;quot;*&amp;quot;,
                    width=3,
                    command=lambda: multiplica(numero_pantalla.get()))
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame,
                    text=&amp;quot;-&amp;quot;,
                    width=3,
                    command=lambda: resta(numero_pantalla.get()))
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, veremos cómo trabajar con botones de radio, es decir, con la clase &lt;code&gt;Radiobutton&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Radiobutton&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A primera vista, observamos dos inconvenientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;aparecen ambas opciones seleccionadas al abrir la aplicación y&lt;/li&gt;
&lt;li&gt;por mucho que pulse sobre ellas, la selección no se modifica.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para abordar esta situación, comenzamos creando una variable global, &lt;code&gt;opcion&lt;/code&gt;, perteneciente a la clase &lt;code&gt;IntVar&lt;/code&gt; y se la asignamos a ambos botones a través del parámetro &lt;code&gt;variable&lt;/code&gt;; junto con un valor para cada uno de ellos, utilizando el parámetro &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()

Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Permitiendo la posibilidad de seleccionar una de las opciones.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: si asignamos &lt;code&gt;value=0&lt;/code&gt; a alguno de los botones, aparecerá seleccionado por defecto cuando abramos la aplicación. Esta característica puede resultar de cierta utilidad en algunos contextos.&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿cómo rescatamos el valor que ha seleccionado el usuario? Al igual que sucedía en el caso de la calculadora, recurriremos al uso de funciones en esta ocasión.&lt;/p&gt;

&lt;p&gt;Así, generemos una, denominada &lt;code&gt;imprimir&lt;/code&gt;, que imprima en la consola de &lt;em&gt;Python&lt;/em&gt; el valor del botón seleccionado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    print(opcion.get())


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiquemos el código para ver dichos valores en la propia interfaz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    if opcion.get() == 1:
        etiqueta.config(text=&amp;quot;Has elegido género femenino.&amp;quot;)
    else:
        etiqueta.config(text=&amp;quot;Has elegido género masculino.&amp;quot;)


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()

etiqueta = Label(raiz)
etiqueta.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Mostrando la opción seleccionada en la ventana de la aplicación.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Incorporar un botón adicional que contemple otros géneros es sencillo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    if opcion.get() == 1:
        etiqueta.config(text=&amp;quot;Has elegido género femenino.&amp;quot;)
    elif opcion.get() == 2:
        etiqueta.config(text=&amp;quot;Has elegido género masculino.&amp;quot;)
    else:
        etiqueta.config(text=&amp;quot;Has elegido otras opciones para género.&amp;quot;)


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Otras opciones&amp;quot;, variable=opcion, value=3,
            command=imprimir).pack()

etiqueta = Label(raiz)
etiqueta.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img04.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Añadiendo una nueva opción a las disponibles.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/50/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>51. Interfaces gráficas X</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb51-interfaces-graficas-x/</link>
      <pubDate>Sun, 26 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb51-interfaces-graficas-x/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TzeU61X-dnI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, introduciremos el funcionamiento de la clase &lt;code&gt;Checkbutton&lt;/code&gt;, que se encarga de gestionar los clásicos &lt;em&gt;botones de selección&lt;/em&gt; (también denominados &lt;em&gt;casillas de verificación&lt;/em&gt;). Estos nos permiten la posibilidad de realizar una selección múltiple sobre distintas opciones ofrecidas.&lt;/p&gt;

&lt;p&gt;Acto seguido, veamos un sencillo ejemplo de aplicación de la mencionada clase, donde el usuario ha de escoger qué tipo de destinos prefiere para sus vacaciones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Checkbutton, Frame, IntVar, Label, PhotoImage, Tk

raiz = Tk()
raiz.title(&amp;quot;Casillas de verificación&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

playa = IntVar()
montana = IntVar()
turismo_rural = IntVar()


def opciones_viaje():
    opcion_escogida = &amp;quot;&amp;quot;
    if playa.get() == 1:
        opcion_escogida += &amp;quot; playa&amp;quot;
    if montana.get() == 1:
        opcion_escogida += &amp;quot; montaña&amp;quot;
    if turismo_rural.get() == 1:
        opcion_escogida += &amp;quot; turismo rural&amp;quot;
    texto_final.config(text=opcion_escogida)


foto = PhotoImage(file=&amp;quot;helicoptero.png&amp;quot;)
Label(raiz, image=foto).pack()

frame = Frame(raiz)
frame.pack()

Label(frame, text=&amp;quot;Escoge destinos:&amp;quot;, width=50).pack()

Checkbutton(frame,
            text=&amp;quot;Playa&amp;quot;,
            variable=playa,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
Checkbutton(frame,
            text=&amp;quot;Montaña&amp;quot;,
            variable=montana,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
Checkbutton(frame,
            text=&amp;quot;Turismo rural&amp;quot;,
            variable=turismo_rural,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()

texto_final = Label(frame)
texto_final.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para empezar, el siguiente bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;foto = PhotoImage(file=&amp;quot;helicoptero.png&amp;quot;)
Label(raiz, image=foto).pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nos permite introducir, como cabecera de nuestra aplicación, la imagen de un helicóptero (disponible en &lt;a href=&#34;https://www.freepng.es/png-ct7rpy/download.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A continuación, las líneas de código asociadas a la primera casilla de verificación son&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Checkbutton(frame,
            text=&amp;quot;Playa&amp;quot;,
            variable=playa,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observamos que dicha casilla está ubicada en el &lt;em&gt;frame&lt;/em&gt; &lt;code&gt;frame&lt;/code&gt; y muestra como texto, en la ventana de la aplicación, la palabra &lt;code&gt;Playa&lt;/code&gt;. Para posibilitar la interacción con ella, almacenamos su valor en la variable &lt;code&gt;playa&lt;/code&gt;, siendo este &lt;code&gt;1&lt;/code&gt; cuando esté seleccionada y &lt;code&gt;0&lt;/code&gt; en otro caso. Finalmente, su comportamiento se gestiona a través de la función &lt;code&gt;opciones_viaje()&lt;/code&gt;, tal y como figura en el valor del parámetro &lt;code&gt;command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la variable &lt;code&gt;playa&lt;/code&gt;, así como al resto, las declaramos utilizando la clase &lt;code&gt;IntVar&lt;/code&gt;, puesto que nuestra intención es almacenar en ellas valores enteros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;playa = IntVar()
montana = IntVar()
turismo_rural = IntVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, mostraremos las opciones seleccionadas por el usuario empleando una etiqueta para ello, de ahí que figure el siguiente bloque de código al final del programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto_final = Label(frame)
texto_final.pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, la función que gestiona el comportamiento de las casillas de verificación simplemente se ocupa de establecer el texto de la variable &lt;code&gt;texto_final&lt;/code&gt; según una serie de bloques condicionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def opciones_viaje():
    opcion_escogida = &amp;quot;&amp;quot;
    if playa.get() == 1:
        opcion_escogida += &amp;quot; playa&amp;quot;
    if montana.get() == 1:
        opcion_escogida += &amp;quot; montaña&amp;quot;
    if turismo_rural.get() == 1:
        opcion_escogida += &amp;quot; turismo rural&amp;quot;
    texto_final.config(text=opcion_escogida)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb51-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb51-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Checkbutton&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/51/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>52. Interfaces gráficas XI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb52-interfaces-graficas-xi/</link>
      <pubDate>Mon, 27 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb52-interfaces-graficas-xi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Dv1ALaWwScI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el estudio del &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Menu&lt;/code&gt;, que nos permitirá la posibilidad de crear barras de menús.&lt;/p&gt;

&lt;p&gt;Comencemos utilizando el siguiente esqueleto de aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, generamos una variable, &lt;code&gt;barra_menu&lt;/code&gt;, que será la encargada de almacenar el menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barra_menu = Menu(raiz)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y configuramos el valor del parámetro &lt;code&gt;menu&lt;/code&gt; de la &lt;em&gt;raíz&lt;/em&gt; para que figure en nuestra aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raiz.config(menu=barra_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, establecemos los elementos que conformarán nuestro menú. Por ejemplo, para crear uno denominado &lt;em&gt;Archivo&lt;/em&gt;, generamos la variable &lt;code&gt;archivo_menu&lt;/code&gt;, indicándole que pertenece a la barra de menús &lt;code&gt;barra_menu&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu = Menu(barra_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si ejecutamos el código, todavía no aparece barra de menús alguna. Añadamos el texto correspondiente a cada elemento. Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, ya únicamente nos resta la tarea de añadir elementos de submenú. Para ello, tras la línea de declaración del elemento &lt;code&gt;archivo_menu&lt;/code&gt;, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aparece una barra separadora, que identificamos por los símbolos &lt;code&gt;- - - -&lt;/code&gt;, al pulsar sobre cualquier elemento de la barra de menús. Para suprimirla, modificamos como sigue la línea de declaración de la variable &lt;code&gt;archivo_menu&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu = Menu(barra_menu, tearoff=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, aunque la mencionada barra separada no nos interesaba, sí que podemos desear diferenciar, de alguna manera, los diversos elementos de un submenú, para que así queden agrupados por cierto criterio. Con tal objetivo, donde nos convenga, introducimos la instrucción&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_separator()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acabar, comparto el código completo de la aplicación, para obtener así una visión global del funcionamiento de la clase &lt;code&gt;Menu&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb52-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb52-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Menu&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/52/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>53. Interfaces gráficas XII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb53-interfaces-graficas-xii/</link>
      <pubDate>Tue, 28 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb53-interfaces-graficas-xii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/xUGUglpaTJc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo construir ventanas emergentes, que son ventanas modales para informar, avisar o permitir realizar ciertas tareas al usuario.&lt;/p&gt;

&lt;p&gt;Para comenzar, recuperemos el código fuente generado en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, nuestro objetivo será construir una ventana emergente que aparezca cuando el usuario pulse sobre la opción &lt;em&gt;Acerca de&amp;hellip;&lt;/em&gt;, ubicada en el menú &lt;em&gt;Ayuda&lt;/em&gt;. Para ello, empecemos creando una función que será la responsable de generar la mencionada ventana emergente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hemos de importar el módulo &lt;code&gt;messagebox&lt;/code&gt; al principio de nuestro código.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;title&lt;/code&gt; gestiona el texto que aparecerá en la barra que figura en la parte superior de la ventana emergente.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;text&lt;/code&gt; declara el texto que se ubicará en el cuerpo de la ventana emergente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acto seguido, modificamos la declaración del submenú &lt;em&gt;Acerca de&amp;hellip;&lt;/em&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img01.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primera ventana emergente.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Estas ventanas emergentes admiten enormes posibilidades de configuración y podemos adaptarlas según nuestra intención sea informar al usuario de algún detalle concreto (como el ejemplo que se muestra en la imagen que figura arriba), avisarle de algún error, etc. Los símbolos y la disposición de los diferentes botones asociados variarían en función de nuestro objetivo.&lt;/p&gt;

&lt;p&gt;Por ejemplo, generemos una ventana emergente que nos avise del estado de la licencia de nuestra aplicación. Para ello, creamos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y modificamos la correspondiente opción del menú &lt;em&gt;Ayuda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img02.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente de aviso.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Acto seguido, veamos un nuevo tipo de ventana emergente, que asociaremos al submenú &lt;em&gt;Salir&lt;/em&gt; y que nos pedirá confirmación antes de proceder a cerrar la aplicación. Con tal objetivo en mente, empecemos construyendo la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def salir_aplicacion():
    messagebox.askquestion(title=&amp;quot;Salir&amp;quot;,
                           message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para luego modificar la opción del menú &lt;em&gt;Archivo&lt;/em&gt; asociada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img03.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente con pregunta.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Ahora, si pulsamos sobre el botón &lt;em&gt;No&lt;/em&gt;, volvemos a la aplicación, como cabría esperar. No obstante, al pulsar sobre el botón &lt;em&gt;Sí&lt;/em&gt; debería salir de la aplicación y no sucede tal acción, puesto que hemos de programar todavía dicho comportamiento.&lt;/p&gt;

&lt;p&gt;La función &lt;code&gt;askquestion()&lt;/code&gt; devuelve una cadena de texto en función del botón pulsado, &lt;code&gt;&amp;quot;yes&amp;quot;&lt;/code&gt; o &lt;code&gt;&amp;quot;no&amp;quot;&lt;/code&gt;, por lo que basta modificar la función &lt;code&gt;salir_aplicacion()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;destroy()&lt;/code&gt; posee un nombre lo suficientemente explicativo para que intuyamos cómo afecta a la &lt;em&gt;raíz&lt;/em&gt; de la aplicación.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: con la función &lt;code&gt;askokcancel()&lt;/code&gt; tenemos una variante de la anterior ventana emergente, cuyos botones son del tipo &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, veamos una ventana emergente de tipo &amp;ldquo;reintentar&amp;rdquo;, asociada a la opción &lt;em&gt;Cerrar&lt;/em&gt; del menú &lt;em&gt;Archivo&lt;/em&gt;. Para ello, construimos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y modificamos el correspondiente elemento del menú &lt;em&gt;Archivo&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
&lt;/code&gt;&lt;/pre&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img04.png&#34; &gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente para reintentar una acción.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Finalmente, como viene siendo habitual en este subapartado del curso dedicado a las interfaces gráficas, comparto el código completo de la aplicación generada para así ofrecer una visión global de la misma.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/53/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>54. Interfaces gráficas XIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb54-interfaces-graficas-xiii/</link>
      <pubDate>Tue, 28 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb54-interfaces-graficas-xiii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TmQZBzwIMGk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, construiremos la típica ventana emergente que nos permite abrir un archivo en una aplicación. Para empezar, recuperemos el código fuente generado en las últimas lecciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, importamos el módulo &lt;code&gt;filedialog&lt;/code&gt;, de la librería &lt;code&gt;tkinter&lt;/code&gt;, y construimos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;)
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la variable &lt;code&gt;fichero&lt;/code&gt;, almacenamos la ruta al archivo que seleccionemos a través de la ventana emergente, como bien podremos comprobar en la consola de &lt;em&gt;Python&lt;/em&gt; gracias a la función &lt;code&gt;print()&lt;/code&gt; que hemos incorporado en el interior de &lt;code&gt;abrir_archivo()&lt;/code&gt;. Después, acudimos al elemento del menú &lt;em&gt;Archivo&lt;/em&gt; correspondiente y modificamos la línea como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;, command=abrir_archivo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A la vista del resultado, es posible que nos interese modificar la ubicación de la ruta desde la que un usuario ha de comenzar la búsqueda de un archivo. Para ello, modificamos la función &lt;code&gt;abrir_archivo()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;,
                                         initialdir=&amp;quot;/&amp;quot;)
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y, de esta manera, ahora la ventana emergente nos muestra los directorios ubicados en la raíz de nuestro disco duro.&lt;/p&gt;

&lt;p&gt;Además, podemos restringir el tipo de archivo que deseamos un usuario examine (por ejemplo, restringir la búsqueda a imágenes o documentos) mediante el parámetro &lt;code&gt;filetypes&lt;/code&gt;. Así, si modificamos la función &lt;code&gt;abrir_archivo()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;,
                                         initialdir=&amp;quot;/&amp;quot;,
                                         filetypes=((&amp;quot;Ficheros de Excel&amp;quot;,
                                                     &amp;quot;*.xlsx&amp;quot;),
                                                    (&amp;quot;Ficheros de texto&amp;quot;,
                                                     &amp;quot;*.txt&amp;quot;)))
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora la ventana emergente nos restringe el tipo de fichero que podemos seleccionar y, además, nos permite filtrar por dos opciones diferentes (de Excel o de texto), según sus correspondientes extensiones.&lt;/p&gt;

&lt;p&gt;Para comodidad del usuario, conviene siempre incluir una opción para abrir cualquier tipo de archivo, independientemente de su extensión:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(
        title=&amp;quot;Abrir archivo&amp;quot;,
        initialdir=&amp;quot;/&amp;quot;,
        filetypes=((&amp;quot;Ficheros de Excel&amp;quot;, &amp;quot;*.xlsx&amp;quot;),
                   (&amp;quot;Ficheros de texto&amp;quot;, &amp;quot;*.txt&amp;quot;),
                   (&amp;quot;Todos los archivos&amp;quot;, &amp;quot;*.*&amp;quot;)))
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como ya viene siendo habitual en esta serie de lecciones dedicadas a las interfaces gráficas, comparto el código fuente completo de la aplicación generada, para tener así una visión global de la misma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import filedialog, Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


def abrir_archivo():
    fichero = filedialog.askopenfilename(
        title=&amp;quot;Abrir archivo&amp;quot;,
        initialdir=&amp;quot;/&amp;quot;,
        filetypes=((&amp;quot;Ficheros de Excel&amp;quot;, &amp;quot;*.xlsx&amp;quot;),
                   (&amp;quot;Ficheros de texto&amp;quot;, &amp;quot;*.txt&amp;quot;),
                   (&amp;quot;Todos los archivos&amp;quot;, &amp;quot;*.*&amp;quot;)))
    print(fichero)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;, command=abrir_archivo)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/54/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>55. Bases de datos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb55-bases-de-datos-i/</link>
      <pubDate>Wed, 29 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb55-bases-de-datos-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ZJuVQ9jUg-A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, cambiamos de tercio y abordamos el tratamiento de las bases de datos (BBDD) en &lt;em&gt;Python&lt;/em&gt;. Estudiaremos cómo crearlas, conectar con ellas e insertar registros en su interior.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es capaz de gestionar la información que se encuentra almacenada en diferentes gestores de bases de datos, como, por ejemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SQL Server&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Oracle&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SQLite&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PostgreSQL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En este curso trabajaremos, principalmente, con &lt;em&gt;MySQL&lt;/em&gt; y &lt;em&gt;SQLite&lt;/em&gt; debido a su popularidad. No obstante, ello requiere que tengamos unos mínimos conocimientos del lenguaje utilizado para realizar consultas en bases de datos: &lt;strong&gt;SQL&lt;/strong&gt; (&lt;em&gt;Structured Query Language&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Por lo que respecta a &lt;em&gt;SQLite&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es un sistema de gestión de BBDD relacional.&lt;/li&gt;
&lt;li&gt;Está escrito en &lt;em&gt;C&lt;/em&gt;, siendo de código abierto.&lt;/li&gt;
&lt;li&gt;La BBDD forma parte integral del programa y se guarda como un único fichero en &lt;em&gt;host&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así, entre sus ventajas, encontramos que ocupa muy poco espacio en disco y memoria, es muy eficiente y rápido, es multiplataforma, no requiere configuración o administración y es de dominio público, esto es, sin costo alguno añadido. Sin embargo, también posee asociadas una serie de desventajas, como que no admite cláusulas anidadas (de tipo &lt;code&gt;where&lt;/code&gt;), no existen usuarios (no permite acceso simultáneo por parte de varios usuarios) y carece de clave foránea cuando se crea en modo consola.&lt;/p&gt;

&lt;p&gt;A continuación, los pasos a seguir para conectar con una BBDD son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Abrir (o crear) una conexión.&lt;/li&gt;
&lt;li&gt;Crear un puntero (o cursor).&lt;/li&gt;
&lt;li&gt;Ejecutar una consulta (&lt;em&gt;query&lt;/em&gt;) &lt;em&gt;SQL&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Manejar los resultados de la consulta.

&lt;ul&gt;
&lt;li&gt;Insertar, leer, actualizar, borrar (&lt;em&gt;Create&lt;/em&gt;, &lt;em&gt;Read&lt;/em&gt;, &lt;em&gt;Update&lt;/em&gt;, &lt;em&gt;Delete&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cerrar puntero.&lt;/li&gt;
&lt;li&gt;Cerrar conexión.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt;, comenzamos importando la librería &lt;code&gt;sqlite3&lt;/code&gt; para luego crear la conexión con la BBDD. La primera vez que realizamos este proceso, al no haber disponible ninguna, procederemos a su creación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior bloque de código, aparece en el correspondiente directorio una BBDD de datos vacía, de nombre &lt;code&gt;base-de-datos&lt;/code&gt;. Veamos, acto seguido, cómo crear nuestra primera tabla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;CREATE TABLE PRODUCTOS (NOMBRE_ARTICULO VARCHAR(50), PRECIO INTEGER, SECCION VARCHAR(20))&amp;quot;)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tras crear el puntero o cursor, &lt;code&gt;mi_cursor&lt;/code&gt;, lanzamos, a través de la función &lt;code&gt;execute()&lt;/code&gt;, el comando &lt;em&gt;SQL&lt;/em&gt; correspondiente a la creación de una tabla que poseerá tres columnas. Si ejecutamos el anterior bloque de código, observaremos que el tamaño del fichero &lt;code&gt;base-de-datos&lt;/code&gt; se incrementa y deja de estar vacío.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: podemos investigar qué contiene el archivo &lt;code&gt;base-de-datos&lt;/code&gt;, de manera visual, mediante la herramienta &lt;a href=&#34;https://sqlitebrowser.org/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, analicemos cómo insertar información en la tabla que acabamos de crear. Para ello, comentamos la anterior línea de código, que precisamente generaba la tabla (porque ya existe y entonces &lt;em&gt;Python&lt;/em&gt; arrojaría un error llegado a ese momento), y ejecutamos, a través del cursor, la instrucción de &lt;em&gt;SQL&lt;/em&gt; apropiada. Tras ello, verificamos que deseamos realizar el cambio en la tabla, utiliando el método &lt;code&gt;commit()&lt;/code&gt; asociado a la conexión:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: cuando trabajamos con cadenas de caracteres que poseen comillas anidadas, hemos de alternar los simbolos &lt;code&gt;&#39;&lt;/code&gt; y &lt;code&gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/55/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>56. Bases de datos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb56-bases-de-datos-ii/</link>
      <pubDate>Wed, 29 May 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb56-bases-de-datos-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/eM0MkDc34qo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, aprenderemos cómo insertar varios registros simultáneamente en nuestra base de datos (BBDD), así como después estudiaremos cómo recuperar información de la BBDD.&lt;/p&gt;

&lt;p&gt;En primer lugar, importemos la librería &lt;code&gt;sqlite3&lt;/code&gt; y construyamos, tanto la conexión a la BBDD, como un cursor. Con tal objetivo en mente, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, mediante una lista de tuplas, establecemos los productos que nos interese insertar en la BBDD:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;productos = [(&amp;quot;Camiseta&amp;quot;, 10, &amp;quot;Deportes&amp;quot;), (&amp;quot;Jarrón&amp;quot;, 90, &amp;quot;Cerámica&amp;quot;),
             (&amp;quot;Camión&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y con el método &lt;code&gt;executemany()&lt;/code&gt; ejecutamos la instrucción &lt;em&gt;SQL&lt;/em&gt; adecuada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?)&amp;quot;, productos)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: en las instrucciones de &lt;em&gt;SQL&lt;/em&gt; parametrizadas, hemos de insertar tantos interrogantes, &lt;code&gt;?&lt;/code&gt;, como campos posee cada registro.&lt;/p&gt;

&lt;p&gt;Finalmente, confirmamos los cambios y cerramos la conexión abierta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, veamos cómo accedemos a la información registrada en la BBDD. Para ello, simplemente hemos de ejecutar, desde el cursor, una instrucción de &lt;em&gt;SQL&lt;/em&gt; de tipo &lt;code&gt;SELECT&lt;/code&gt;, para luego almacenar en una variable la información utilizando el método &lt;code&gt;fetchall()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS&amp;quot;)

productos = mi_cursor.fetchall()

print(productos)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;), (&#39;Camiseta&#39;, 10, &#39;Deportes&#39;), (&#39;Jarrón&#39;, 90, &#39;Cerámica&#39;), (&#39;Camión&#39;, 20, &#39;Juguetería&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, aplicando aquello que conocemos sobre listas, podemos mostrar la información de manera más cómoda para el usuario:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS&amp;quot;)

productos = mi_cursor.fetchall()

for producto in productos:
    print(producto)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;)
(&#39;Camiseta&#39;, 10, &#39;Deportes&#39;)
(&#39;Jarrón&#39;, 90, &#39;Cerámica&#39;)
(&#39;Camión&#39;, 20, &#39;Juguetería&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/56/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>57. Bases de datos III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb57-bases-de-datos-iii/</link>
      <pubDate>Thu, 30 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb57-bases-de-datos-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/HVd6mPiD3pc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo gestionar las claves principales de nuestras bases de datos (BBDD). Los registros de una BBDD relacional han de estar identificados de manera única mediante un &lt;strong&gt;campo clave&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hasta el momento, hemos creado una tabla en nuestra BBDD e insertado algunos registros, pero carece de dicho campo clave. Analicemos cómo añadir esta característica a las tablas de una BBDD. Para ello, partamos del siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En primer lugar, generemos una tabla, denominada &lt;code&gt;PRODUCTOS&lt;/code&gt;, cuyos registros se van a caracterizar por poseer cuatro campos, uno de ellos clave. Así, tras la declaración del cursor, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    CODIGO_ARTICULO VARCHAR(4) PRIMARY KEY,
    NOMBRE_ARTICULO VARCHAR(50),
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como apreciamos, la única novedad, con respecto a lecciones anteriores, es la aparición de la instrucción &lt;code&gt;PRIMARY KEY&lt;/code&gt;, que convierte en clave el respectivo campo declarado, &lt;code&gt;CODIGO_ARTICULO&lt;/code&gt; en este caso concreto. Por otro lado, el número que figura en el tipo de campo &lt;code&gt;VARCHAR&lt;/code&gt; indica su longitud máxima.&lt;/p&gt;

&lt;p&gt;Acto seguido, insertamos algunos registros en la tabla &lt;code&gt;PRODUCTOS&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;productos = [(&amp;quot;AR01&amp;quot;, &amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;AR02&amp;quot;, &amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;AR03&amp;quot;, &amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;AR04&amp;quot;, &amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?, ?)&amp;quot;, productos)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el programa, observamos que en el directorio donde hemos almacenado el código aparece un archivo denominado &lt;code&gt;gestion-productos&lt;/code&gt;, que contiene la BBDD recién generada.&lt;/p&gt;

&lt;p&gt;A continuación, insertemos un nuevo registro en la BBDD:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR05&#39;, &#39;Tren&#39;, 15, &#39;Juguetería&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora intentamos añadir un nuevo artículo a la BBDD cuyo código coincida con uno de los asignados a los cuatro productos existentes, &lt;em&gt;Python&lt;/em&gt; nos arrojará un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR03&#39;, &#39;Portátil&#39;, 750, &#39;Informática&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;bbdd_3.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR03&#39;, &#39;Portátil&#39;, 750, &#39;Informática&#39;)&amp;quot;)
sqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.CODIGO_ARTICULO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la práctica, por comodidad, la construcción e inserción del campo clave se suele automatizar. Para ello, la estrategia consiste en crear un campo clave de tipo entero que sea autoincrementable.&lt;/p&gt;

&lt;p&gt;Retomemos el primer ejemplo examinado en esta lección (modificando el fichero que contiene la BBDD) y estudiemos cómo implementar la funcionalidad comentada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos-2&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE_ARTICULO VARCHAR(50),
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)

productos = [(&amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)&amp;quot;, productos)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por convención, los campos de una tabla que van a ser automatizados reciben el nombre de &lt;code&gt;ID&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Con la instrucción &lt;code&gt;AUTOINCREMENT&lt;/code&gt; conseguimos la mencionada gestión automática del campo entero que ahora hemos declarado como clave.&lt;/li&gt;
&lt;li&gt;La instrucción donde realizamos la llamada a la función &lt;code&gt;executemany()&lt;/code&gt; hemos de modificarla, con respecto a lo programado anteriormente, ya que las tuplas de &lt;code&gt;productos&lt;/code&gt; poseen tres elementos, mientras que figuran cuatro símbolos &lt;code&gt;?&lt;/code&gt; en el comando &lt;em&gt;SQL&lt;/em&gt; &lt;code&gt;INSERT INTO&lt;/code&gt;. Para solucionar este escollo, sustituimos el primer &lt;code&gt;?&lt;/code&gt; por la instrucción &lt;code&gt;NULL&lt;/code&gt;, acción que permitirá a &lt;em&gt;Python&lt;/em&gt; gestionar el campo clave de forma automática.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/57/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>58. Bases de datos IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb58-bases-de-datos-iv/</link>
      <pubDate>Fri, 31 May 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb58-bases-de-datos-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/m_FzVf9JTV8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos la cláusula &lt;code&gt;UNIQUE&lt;/code&gt; y operaciones &lt;em&gt;CRUD&lt;/em&gt; (&lt;em&gt;Create, Read, Update, Delete&lt;/em&gt;). Para ello, partamos de un código ciertamente similar a los examinados en anteriores ocasiones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE_ARTICULO VARCHAR(50) UNIQUE,
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)

productos = [(&amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)&amp;quot;,
                      productos)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recordemos que al incorporar &lt;code&gt;PRIMARY KEY&lt;/code&gt; en el campo &lt;code&gt;ID&lt;/code&gt; (nuestro anterior campo &lt;code&gt;CODIGO_ARTICULO&lt;/code&gt;) lo convertimos en clave y, de manera implícita, estamos forzando que la infomación registrada en él no pueda repetirse.&lt;/li&gt;
&lt;li&gt;Añadiendo &lt;code&gt;UNIQUE&lt;/code&gt; al campo &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt; impedimos la posibilidad de que dos artículos posean el mismo nombre. Esta cláusula la podemos ubicar en tantos campos como deseemos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¿Qué sucede ahora si intentamos insertar un registro cuyo para &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt; ya figura en la base de datos (BBDD)?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, &#39;Pelota&#39;, 57, &#39;Deportes&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;bbdd_2.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, &#39;Pelota&#39;, 57, &#39;Deportes&#39;)&amp;quot;)
sqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.NOMBRE_ARTICULO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto es, &lt;em&gt;Python&lt;/em&gt; arroja un error de integridad por violarse la restricción de unicidad para el campo &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, abordemos las operaciones de tipo operaciones &lt;em&gt;CRUD&lt;/em&gt; (&lt;em&gt;Create, Read, Update, Delete&lt;/em&gt;). Aunque las dos primeras ya las hemos analizado en lecciones anteriores, recordemos brevemente cómo realizar una de tipo &lt;em&gt;Read&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS WHERE SECCION=&#39;Confección&#39;&amp;quot;)

productos = mi_cursor.fetchall()

for producto in productos:
    print(producto)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(2, &#39;Pantalón&#39;, 15, &#39;Confección&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: las instrucciones suministradas a la BBDD son &lt;em&gt;case sensitive&lt;/em&gt;, es decir, hemos de proceder con cautela a la hora de introducir los datos y utilizar adecuadamente las mayúsculas y las minúsculas (además de los acentos y otros posibles caracteres conflictivos).&lt;/p&gt;

&lt;p&gt;Para realizar una actualización de registro (operación de tipo &lt;em&gt;Update&lt;/em&gt;), simplemente hemos de modificar la instrucción &lt;em&gt;SQL&lt;/em&gt; de manera acertada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;UPDATE PRODUCTOS SET PRECIO=35 WHERE NOMBRE_ARTICULO=&#39;Pelota&#39;&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, para borrar registros (operación de tipo &lt;em&gt;Delete&lt;/em&gt;), la manera de proceder es similar a la vista antes, ya que únicamente hemos de emplear la instrucción &lt;em&gt;SQL&lt;/em&gt; adecuada (y borrar por un criterio que no ocasione conflictos con otros registros almacenados en la BBDD):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;DELETE FROM PRODUCTOS WHERE ID=1&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: cuando utilicemos una cláusula &lt;code&gt;DELETE&lt;/code&gt;, no hemos de olvidar jamás añadir otra de tipo &lt;code&gt;WHERE&lt;/code&gt; o terminaremos suprimiendo la tabla completa en lugar de uno o varios registros.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/58/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>59. Práctica guiada I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb59-practica-guiada-i/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb59-practica-guiada-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/E0OqddzjFUY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, y con el objetivo de reforzar los contenidos vistos hasta la fecha, comenzaremos a esbozar una aplicación gráfica de tipo &lt;em&gt;CRUD&lt;/em&gt;. Mediante ella, conectaremos con una base de datos (BBDD) y podremos realizar las operaciones básicas: &lt;em&gt;Create&lt;/em&gt;, &lt;em&gt;Read&lt;/em&gt;, &lt;em&gt;Update&lt;/em&gt; y &lt;em&gt;Delete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el vídeo se explican los diferentes elementos y funcionalidades que caracterizan a la aplicación propuesta, por si queremos lanzarnos a su elaboración de antemano. No obstante, se procederá a su implementación en posteriores lecciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>60. Práctica guiada II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb60-practica-guiada-ii/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb60-practica-guiada-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/o8E869dmK3U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, comenzaremos a esbozar la interfaz gráfica de nuestra aplicación &lt;em&gt;CRUD&lt;/em&gt;. Para ello, empezamos tecleando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

# Raíz de la aplicación
root = Tk()
root.title(&amp;quot;Aplicación CRUD&amp;quot;)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Ejecución de la aplicación
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, generamos la barra de menú superior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Menú superior de la aplicación
barra_menu = Menu(root)
root.config(menu=barra_menu)

bbdd_menu = Menu(barra_menu, tearoff=0)
bbdd_menu.add_command(label=&amp;quot;Conectar&amp;quot;)
bbdd_menu.add_separator()
bbdd_menu.add_command(label=&amp;quot;Salir&amp;quot;)

borrar_menu = Menu(barra_menu, tearoff=0)
borrar_menu.add_command(label=&amp;quot;Borrar campos&amp;quot;)

crud_menu = Menu(barra_menu, tearoff=0)
crud_menu.add_command(label=&amp;quot;Crear&amp;quot;)
crud_menu.add_command(label=&amp;quot;Leer&amp;quot;)
crud_menu.add_command(label=&amp;quot;Actualizar&amp;quot;)
crud_menu.add_command(label=&amp;quot;Borrar&amp;quot;)

help_menu = Menu(barra_menu, tearoff=0)
help_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
help_menu.add_separator()
help_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;BBDD&amp;quot;, menu=bbdd_menu)
barra_menu.add_cascade(label=&amp;quot;Borrar&amp;quot;, menu=borrar_menu)
barra_menu.add_cascade(label=&amp;quot;CRUD&amp;quot;, menu=crud_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=help_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por lo que respecta al cuerpo de la aplicación, lo dividiremos en dos &lt;em&gt;frames&lt;/em&gt;: uno superior para organizar los campos de introducción de datos y otro inferior para distribuir los cuatro botones que nos permitirán llevar a cabo acciones de tipo &lt;em&gt;CRUD&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Así pues, si, por ejemplo, optamos por construir los diferentes campos de entrada que poseerá la aplicación, el bloque de código a escribir será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Frame superior
campos_frame = Frame(root)
campos_frame.pack()

id_entry = Entry(campos_frame)
id_entry.grid(row=0, column=1, padx=2, pady=2)

name_entry = Entry(campos_frame)
name_entry.grid(row=1, column=1, padx=2, pady=2)

lastname_entry = Entry(campos_frame)
lastname_entry.grid(row=2, column=1, padx=2, pady=2)

address_entry = Entry(campos_frame)
address_entry.grid(row=3, column=1, padx=2, pady=2)

password_entry = Entry(campos_frame)
password_entry.grid(row=4, column=1, padx=2, pady=2)
password_entry.config(show=&amp;quot;*&amp;quot;)

comment_text = Text(campos_frame, width=15, height=5)
comment_text.grid(row=5, column=1, padx=2, pady=2)
comment_text_scrollvert = Scrollbar(campos_frame, command=comment_text.yview)
comment_text_scrollvert.grid(row=5, column=2, sticky=&amp;quot;nsew&amp;quot;)
comment_text.config(yscrollcommand=comment_text_scrollvert)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/60/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>61. Práctica guiada III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb61-practica-guiada-iii/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb61-practica-guiada-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OJzFGgOSpvI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, una vez declarados los campos de introducción de datos en la anterior, nos centraremos en ubicar las etiquetas en la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_label = Label(campos_frame, text=&amp;quot;ID:&amp;quot;)
id_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

name_label = Label(campos_frame, text=&amp;quot;Nombre:&amp;quot;)
name_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

lastname_label = Label(campos_frame, text=&amp;quot;Apellido:&amp;quot;)
lastname_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

address_label = Label(campos_frame, text=&amp;quot;Dirección:&amp;quot;)
address_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

password_label = Label(campos_frame, text=&amp;quot;Contraseña:&amp;quot;)
password_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

comment_label = Label(campos_frame, text=&amp;quot;Comentarios:&amp;quot;)
comment_label.grid(row=5, column=0, sticky=&amp;quot;ne&amp;quot;, padx=2, pady=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, ocupémonos de construir un &lt;em&gt;frame&lt;/em&gt; en la parte inferior del ya disponible y disponer cuatro botones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Frame inferior
botones_frame = Frame(root)
botones_frame.pack(expand=True)

crear_button = Button(botones_frame, text=&amp;quot;Create&amp;quot;)
crear_button.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

read_button = Button(botones_frame, text=&amp;quot;Read&amp;quot;)
read_button.grid(row=0, column=1, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

update_button = Button(botones_frame, text=&amp;quot;Update&amp;quot;)
update_button.grid(row=0, column=2, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

delete_button = Button(botones_frame, text=&amp;quot;Delete&amp;quot;)
delete_button.grid(row=0, column=3, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, ya únicamente nos resta programar la funcionalidad de la aplicación, tanto para el menú, como para los botones recién creados.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/61/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>62. Práctica guiada IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb62-practica-guiada-iv/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb62-practica-guiada-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/5XPLCDp7nDk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, implementaremos cierta funcionalidad a nuestra aplicación, comenzando por el menú &lt;em&gt;BBDD&lt;/em&gt;. Programaremos la función que realiza la conexión a la base de datos (BBDD) y la que posibilita la opción de salir de la aplicación.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la conexión de la BBDD, como la primera vez que pulsemos la función va a encargarse de crear la tabla, después hemos de controlar la excepción que aparece al volver a llamar la función con dicha tabla ya creada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función para conectar a la BBDD
def conecta_bbdd():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    try:
        cursor.execute(&#39;&#39;&#39;
            CREATE TABLE DATOS_USUARIOS (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            NOMBRE_USUARIO VARCHAR(50),
            APELLIDO VARCHAR(50),
            DIRECCION VARCHAR(50),
            PASSWORD VARCHAR(50),
            COMENTARIOS VARCHAR(250))
            &#39;&#39;&#39;)
    except sqlite3.OperationalError:
        pass
    finally:
        messagebox.showinfo(
            title=&amp;quot;Conexión a la base de datos&amp;quot;,
            message=&amp;quot;La conexión a la base de datos se ha realizado con éxito.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, acudimos a la instrucción que gestiona el elemento del menú &lt;em&gt;BBDD&lt;/em&gt; correspondiente y la modificamos como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bbdd_menu.add_command(label=&amp;quot;Conectar&amp;quot;, command=conecta_bbdd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, implementemos la función que gestiona la salida de la aplicación. El código es idéntico al visto en lecciones anteriores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función para salir de la aplicación
def sale_aplicacion():
    valor = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;,
        message=&amp;quot;¿Deseas realmente salir de la aplicación?&amp;quot;)
    if valor == &amp;quot;yes&amp;quot;:
        root.destroy()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y añadimos la funcionalidad al correspondiente elemento del menú &lt;em&gt;BBDD&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bbdd_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=sale_aplicacion)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/62/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>63. Práctica guiada V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb63-practica-guiada-v/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb63-practica-guiada-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/mNzHPglBuUk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, analizaremos cómo limpiar los campos de registros (por si el usuario comete algún error al transcribir los datos) e insertar datos en la base de datos (BBDD), es decir, ejecutar la operación de tipo &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar, de cara a poder realizar manipulaciones sobre el texto que un usuario escriba en los campos de registros, hemos de emplear variables de tipo &lt;code&gt;StringVar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_data = StringVar()
name_data = StringVar()
lastname_data = StringVar()
address_data = StringVar()
password_data = StringVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, las asignamos a sus correspondientes &lt;code&gt;Entry&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_entry = Entry(campos_frame, width=40, textvariable=id_data)
name_entry = Entry(campos_frame, width=40, textvariable=name_data)
lastname_entry = Entry(campos_frame, width=40, textvariable=lastname_data)
address_entry = Entry(campos_frame, width=40, textvariable=address_data)
password_entry = Entry(campos_frame, width=40, textvariable=password_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después, construimos la función que limpia los campos de registros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que limpia los registros de la aplicación
def limpia_registros():
    id_data.set(&amp;quot;&amp;quot;)
    name_data.set(&amp;quot;&amp;quot;)
    lastname_data.set(&amp;quot;&amp;quot;)
    address_data.set(&amp;quot;&amp;quot;)
    password_data.set(&amp;quot;&amp;quot;)
    comment_text.delete(1.0, END)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notemos cómo se limpia un cuadro de comentario, ya que el procedimiento a seguir es un tanto diferente. Hemos de utilizar la función &lt;code&gt;delete()&lt;/code&gt;, indicándole el punto de partida (&lt;code&gt;1.0&lt;/code&gt;) y el de finalización (&lt;code&gt;END&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Al hilo de lo anterior, &lt;code&gt;END&lt;/code&gt; es asimismo una instrucción de la librería &lt;code&gt;tkinter&lt;/code&gt;, de manera que hemos de importarla si estamos siguiendo la estrategia de &lt;code&gt;from tkinter import ...&lt;/code&gt;. De hecho, en mi código dicha instrucción comienza a adquirir una longitud considerable, siendo en la actualidad:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, END, Entry, Frame, Label, Menu, messagebox, Scrollbar, StringVar, Text, Tk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, asignamos esta funcionalidad al elemento correspondiente el menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;borrar_menu.add_command(label=&amp;quot;Borrar campos&amp;quot;, command=limpia_registros)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, abordemos la primera operación &lt;em&gt;CRUD&lt;/em&gt;, &lt;em&gt;Create&lt;/em&gt;, que nos permitirá añadir registros a la BBDD.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que inserta registros en la BBDD
def crud_create():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, &#39;&amp;quot; +
                   name_data.get() + &amp;quot;&#39;, &#39;&amp;quot; + lastname_data.get() + &amp;quot;&#39;,&#39;&amp;quot; +
                   address_data.get() + &amp;quot;&#39;,&#39;&amp;quot; + password_data.get() + &amp;quot;&#39;,&#39;&amp;quot; +
                   comment_text.get(&amp;quot;1.0&amp;quot;, END) + &amp;quot;&#39;)&amp;quot;)
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Crear registro&amp;quot;,
        message=&amp;quot;Registro insertado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No recogemos aquello que el usuario escribe en el campo &lt;em&gt;ID&lt;/em&gt;, ya que lo hemos declarado en la tabla como clave primaria autoincrementable (de ahí el &lt;code&gt;NULL&lt;/code&gt; en la instrucción &lt;em&gt;SQL&lt;/em&gt; de arriba). Este proceder puede resultar un tanto confuso para el usuario y admite margen de mejora.&lt;/li&gt;
&lt;li&gt;Es muy sencillo equivocarse a la hora de escribir la anterior instrucción &lt;em&gt;SQL&lt;/em&gt; por el elevado número de concatenaciones. Un enfoque alternativo consiste en escribir primero una serie de datos concretos de ejemplo y, después, poco a poco sustituir dichos datos por las correspondientes variables con sus métodos &lt;code&gt;get()&lt;/code&gt; asociados.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, añadimos la funcionalidad, tanto al elemento de menú correspondiente, como al botón que figura en la parte inferior de la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Crear&amp;quot;, command=crud_create)

crear_button = Button(botones_frame, text=&amp;quot;Create&amp;quot;, command=crud_create)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/63/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>64. Práctica guiada VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb64-practica-guiada-vi/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb64-practica-guiada-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nx3OE31y0IY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos la implementación de las operaciones de tipo &lt;em&gt;Read&lt;/em&gt; y &lt;em&gt;Update&lt;/em&gt;. El criterio para posibilitar la lectura de registros será que el usuario introduzca en el formulario la &lt;em&gt;ID&lt;/em&gt; de la cual desea consultar la información pertinente.&lt;/p&gt;

&lt;p&gt;En primer lugar, implementemos la función de lectura, apoyándonos en cómo procedimos en anteriores lecciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que lee registros de la BBDD
def crud_read():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;SELECT * FROM DATOS_USUARIOS WHERE ID=&amp;quot; + id_data.get())
    usuario = cursor.fetchall()
    for u in usuario:
        id_data.set(u[0])
        name_data.set(u[1])
        lastname_data.set(u[2])
        address_data.set(u[3])
        password_data.set(u[4])
        comment_text.insert(1.0, u[5])
    conexion.commit()
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luego, añadimos la funcionalidad, tanto al elemento del menú correspondiente, como al botón asociado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Leer&amp;quot;, command=crud_read)

read_button = Button(botones_frame, text=&amp;quot;Read&amp;quot;, command=crud_read)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: así programa la funcionalidad, la aplicación no responde cuando se inserta un &lt;em&gt;ID&lt;/em&gt; que no figura en la base de datos. Habría de mostrar un mensaje de advertencia mediante la clase &lt;code&gt;messagebox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, ocupémonos de la función de tipo &lt;em&gt;Update&lt;/em&gt;, que será muy similar a la programada para &lt;em&gt;Create&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que actualiza registros de la BBDD
def crud_update():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO=&#39;&amp;quot; +
                   name_data.get() + &amp;quot;&#39;, APELLIDO=&#39;&amp;quot; + lastname_data.get() +
                   &amp;quot;&#39;, DIRECCION=&#39;&amp;quot; + address_data.get() + &amp;quot;&#39;, PASSWORD=&#39;&amp;quot; +
                   password_data.get() + &amp;quot;&#39;, COMENTARIOS=&#39;&amp;quot; +
                   comment_text.get(&amp;quot;1.0&amp;quot;, END) + &amp;quot;&#39;&amp;quot;)
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Actualizar registro&amp;quot;,
        message=&amp;quot;Registro actualizado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después, añadimos el comportamiento, tanto al elemento del menú asociado, como al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Actualizar&amp;quot;, command=crud_update)

update_button = Button(botones_frame, text=&amp;quot;Update&amp;quot;, command=crud_update)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/64/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>65. Práctica guiada VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb65-practica-guiada-vii/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb65-practica-guiada-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nj-alxd7YvM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos cómo borrar registros (operación de tipo &lt;em&gt;Delete&lt;/em&gt;) y la creación de consultas parametrizadas.&lt;/p&gt;

&lt;p&gt;En cuanto a la primera tarea, empecemos construyendo la correspondiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que borra registros de la BBDD
def crud_delete():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;DELETE FROM DATOS_USUARIOS WHERE ID=&amp;quot; + id_data.get())
    conexion.commit()
    conexion.close()
    messagebox.showinfo(
        title=&amp;quot;Borrar registro&amp;quot;,
        message=&amp;quot;Registro borrado con éxito en la base de datos.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, añadimos la funcionalidad, tanto al elemento del menú asociado, como al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Borrar&amp;quot;, command=crud_delete)

delete_button = Button(botones_frame, text=&amp;quot;Delete&amp;quot;, command=crud_delete)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, analicemos cómo modificar algunas de las consultas &lt;em&gt;SQL&lt;/em&gt; para hacerlas parametrizadas y que su escritura sea mucho más sencilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que inserta registros en la BBDD
def crud_create():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    datos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(&amp;quot;1.0&amp;quot;, END)
    cursor.execute(&amp;quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, ?, ?, ?, ?, ?)&amp;quot;, (datos))
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Crear registro&amp;quot;,
        message=&amp;quot;Registro insertado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que actualiza registros de la BBDD
def crud_update():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    datos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(&amp;quot;1.0&amp;quot;, END)
    cursor.execute(&amp;quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO=?, APELLIDO=?, DIRECCION=?, PASSWORD=?, COMENTARIOS=? WHERE ID=&amp;quot; + id_data.get(), (datos))
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Actualizar registro&amp;quot;,
        message=&amp;quot;Registro actualizado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como extra, incluyamos funcionalidad para los dos elementos del menú &lt;em&gt;Ayuda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función licencia
def licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


# Función acerca de...
def acerca_de():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, incorporemos dicha funcionalidad en los elementos del menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=licencia)

help_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=acerca_de)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/65/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>66. Funciones lambda</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb66-funciones-lambda/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb66-funciones-lambda/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/tfYLcHbjc_A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos las funciones &lt;em&gt;lambda&lt;/em&gt;. Una función &lt;strong&gt;lambda&lt;/strong&gt; es una función anónima, y se utilizan en &lt;em&gt;Python&lt;/em&gt; a la hora de programar para abreviar, ya que aligera la sintaxis del código. Además, no ocupan lugar en el espacio de nombres asociado a las funciones de una aplicación.&lt;/p&gt;

&lt;p&gt;Cualquier tarea que llevemos a cabo con una función &lt;em&gt;lambda&lt;/em&gt; se puede desarrollar mediante una función normal, pero no así a la inversa (sobre todo cuando su lógica es compleja).&lt;/p&gt;

&lt;p&gt;Por ejemplo, para calcular el área de un triángulo, podemos construir la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_triangulo(b, h):
    return b * h / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for b in range(1, 10, 5):
    for h in range(1, 10, 5):
        print(
            f&amp;quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El área del triángulo de base 1 y altura 1 es 0.5.
El área del triángulo de base 1 y altura 6 es 3.0.
El área del triángulo de base 6 y altura 1 es 3.0.
El área del triángulo de base 6 y altura 6 es 18.0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, una función tan sencilla puede ser abreviada como una función &lt;em&gt;lambda&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;area_triangulo = lambda b, h: b * h / 2

for b in range(1, 10, 5):
    for h in range(1, 10, 5):
        print(
            f&amp;quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El área del triángulo de base 1 y altura 1 es 0.5.
El área del triángulo de base 1 y altura 6 es 3.0.
El área del triángulo de base 6 y altura 1 es 3.0.
El área del triángulo de base 6 y altura 6 es 18.0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: las funciones &lt;em&gt;lambda&lt;/em&gt;, generalmente, no se asignan a variables. En tales casos, conviene hacer uso de la instrucción &lt;code&gt;def&lt;/code&gt; y definir una función tal y como estamos habituados.&lt;/p&gt;

&lt;p&gt;Usadas &amp;ldquo;al vuelo&amp;rdquo;, su sintaxis queda como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;El cubo de 3 es &amp;quot; + str((lambda x:x**3) (3)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El cubo de 3 es 27
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/66/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>67. La función filter</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb67-filter/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb67-filter/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/mTJKU7IxL0U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos la función &lt;code&gt;filter()&lt;/code&gt;, que forma parte de un conjunto de funciones conocidas como &amp;ldquo;de orden superior&amp;rdquo; y nos permiten utilizar en &lt;em&gt;Python&lt;/em&gt; el paradigma de &lt;strong&gt;programación funcional&lt;/strong&gt;. La mencionada función verifica que los elementos de una secuencia cumplen una condición, devolviendo un iterador compuesto por aquellos que la satisfacen.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podemos construir un programa que detecte qué números son pares y cuáles no lo son, devolviéndonos una lista compuesta por los que verifiquen dicha condición:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_par(num):
    if num % 2 == 0:
        return True


numeros = [17, 24, 7, 39, 8, 51, 92]

print(filter(numero_par, numeros))  # objeto iterable

print(list(filter(numero_par, numeros)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;filter object at 0x0000029E5BA262B0&amp;gt;
[24, 8, 92]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;numero_par()&lt;/code&gt; la podemos abreviar un tanto como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_par(num):
    return num % 2 == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es más, como es tan sencilla, incluso podemos prescindir de ella utilizando una función &lt;em&gt;lambda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numeros = [17, 24, 7, 39, 8, 51, 92]

print(list(filter(lambda x: x % 2 == 0, numeros)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[24, 8, 92]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Habitualmente, utilizaremos la función &lt;code&gt;filter()&lt;/code&gt; para filtrar objetos. Por ejemplo, supongamos que tenemos varias instancias de la clase &lt;code&gt;Empleado&lt;/code&gt; y deseamos filtrarlas por el valor de uno de sus atributos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 75000),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 85000),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 25000),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 27000),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 21000)
]

salarios_altos = filter(lambda e: e.salario &amp;gt; 50000, lista_empleados)

[print(s.__str__()) for s in salarios_altos]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 75000 €.
Ana trabaja como Presidenta y cobra 85000 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A modo de curiosidad, ya que me he avanzado y he utilizado comprensiones de listas (ver la última línea del bloque de código anterior), resulta que mediante ellas, en este ejemplo concreto, no es necesario recurrir al uso de la función &lt;code&gt;filter()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 75000),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 85000),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 25000),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 27000),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 21000)
]

[print(e.__str__()) for e in lista_empleados if e.salario &amp;gt; 50000]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 75000 €.
Ana trabaja como Presidenta y cobra 85000 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/67/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>68. La función map</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb68-map/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb68-map/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/4dkjpHI6vpA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos la función &lt;code&gt;map()&lt;/code&gt;, que, como &lt;code&gt;filter()&lt;/code&gt;, también forma parte de un conjunto de funciones conocidas como &amp;ldquo;de orden superior&amp;rdquo; y nos permiten utilizar en &lt;em&gt;Python&lt;/em&gt; el paradigma de &lt;strong&gt;programación funcional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La filosofía de ambas funciones es ciertamente similar ya que, por ejemplo, &lt;code&gt;map()&lt;/code&gt; aplica una función a cada elemento de un objeto de tipo iterable (listas, tuplas&amp;hellip;) devolviendo a su vez un objeto de tipo iterable que contiene los resultados de dicha aplicación.&lt;/p&gt;

&lt;p&gt;Retomemos la clase definida en la lección anterior, junto con la lista de empleados generada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 6700),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 7500),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 1200),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 1250),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 1000)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: hemos modificado los salarios para que sus cantidades sean mensuales, en lugar de las anuales declaradas en la lección anterior.&lt;/p&gt;

&lt;p&gt;Imaginemos ahora que todos los empleados recibien un extra monetario en forma de comisión, que hemos de agregar a su salario mensual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calcula_comision(empleado):
    empleado.salario *= 1.03
    return empleado


lista_empleados_comision = map(calcula_comision, lista_empleados)

[print(e) for e in lista_empleados_comision]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 6901.0 €.
Ana trabaja como Presidenta y cobra 7725.0 €.
Antonio trabaja como Administrativo y cobra 1236.0 €.
Sara trabaja como Secretaria y cobra 1287.5 €.
Mario trabaja como Botones y cobra 1030.0 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Y si queremos aplicar la comisión solamente a aquellos trabajadores que tengan un salario inferior a 3000 euros?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calcula_comision(empleado):
    if empleado.salario &amp;lt;= 3000:
        empleado.salario *= 1.03
    return empleado


lista_empleados_comision = map(calcula_comision, lista_empleados)

[print(e) for e in lista_empleados_comision]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 6700 €.
Ana trabaja como Presidenta y cobra 7500 €.
Antonio trabaja como Administrativo y cobra 1236.0 €.
Sara trabaja como Secretaria y cobra 1287.5 €.
Mario trabaja como Botones y cobra 1030.0 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/68/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>69. Expresiones regulares I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb69-expresiones-regulares-i/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb69-expresiones-regulares-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/qpwn3gRtxCo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, comenzaremos el estudio de las &lt;strong&gt;expresiones regulares&lt;/strong&gt; en &lt;em&gt;Python&lt;/em&gt;, que son una secuencia de caracteres que forman un patrón de búsqueda y sirven para el trabajo y procesamiento de texto. Por ejemplo, podemos estar interesados, entre otras tareas, en:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buscar un texto que se ajuste a un formato determinado (correo electrónico).&lt;/li&gt;
&lt;li&gt;Buscar si existe o no una cadena de caracteres dentro de un texto.&lt;/li&gt;
&lt;li&gt;Contar el número de coincidencias dentro de un texto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conviene que consultemos la &lt;a href=&#34;https://docs.python.org/3/library/re.html&#34; target=&#34;_blank&#34;&gt;documentación oficial&lt;/a&gt; del módulo asociado a las expresiones regulares, &lt;code&gt;re&lt;/code&gt;, en &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, veamos algunos ejemplos sencillos. Empecemos ilustrando el uso del método &lt;code&gt;search()&lt;/code&gt;, que nos permite buscar una cadena de texto concreta y nos ofrece su localización:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &amp;quot;Vamos a aprender expresiones regulares.&amp;quot;

print(re.search(&amp;quot;aprender&amp;quot;, cadena))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;re.Match object; span=(8, 16), match=&#39;aprender&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apreciamos que la ejecución nos devuelve un objeto, de tipo &lt;code&gt;Match&lt;/code&gt;, que en el intervalo de caracteres &lt;code&gt;(8, 16)&lt;/code&gt; ha encontrado la cadena de texto de interés, &lt;code&gt;aprender&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora bien, si insertamos una cadena de texto que no figure en la variable &lt;code&gt;cadena&lt;/code&gt;, el resultado que arroja la ejecución del programa es &lt;code&gt;None&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &amp;quot;Vamos a aprender expresiones regulares.&amp;quot;

print(re.search(&amp;quot;Python&amp;quot;, cadena))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, podemos pasar variables a la función &lt;code&gt;search()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &amp;quot;Vamos a aprender expresiones regulares.&amp;quot;

texto_buscar = &amp;quot;aprender&amp;quot;

if re.search(texto_buscar, cadena) is not None:
    print(&amp;quot;Texto encontrado.&amp;quot;)
else:
    print(&amp;quot;Texto no encontrado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Texto encontrado.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos encontrado el texto, efectivamente, pero, ¿en qué carácter comienza? Utilizando el método &lt;code&gt;start()&lt;/code&gt; hallamos la respuesta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &amp;quot;Vamos a aprender expresiones regulares.&amp;quot;

texto_buscar = &amp;quot;aprender&amp;quot;

texto_encontrado = re.search(texto_buscar, cadena)

print(texto_encontrado.start())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Análogamente,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(texto_encontrado.end())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al hilo de las acciones anteriores, el método &lt;code&gt;span()&lt;/code&gt; nos devuelve una tupla con los valores mostrados arriba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(texto_encontrado.span())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(8, 16)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, examinemos la utilidad del método &lt;code&gt;findall()&lt;/code&gt;, para lo cual hemos de ampliar un poco la cadena de texto original suministrada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &#39;&#39;&#39;
    Vamos a aprender expresiones regulares en Python.
    Python es un lenguaje de sintaxis sencilla.&#39;&#39;&#39;

texto_buscar = &amp;quot;Python&amp;quot;

print(re.findall(texto_buscar, cadena))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#39;Python&#39;, &#39;Python&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accedemos a una lista que contiene el texto de interés, tantas veces como repeticiones figuren en él. Empleando ahora la función &lt;code&gt;len()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

cadena = &#39;&#39;&#39;
    Vamos a aprender expresiones regulares en Python.
    Python es un lenguaje de sintaxis sencilla.&#39;&#39;&#39;

texto_buscar = &amp;quot;Python&amp;quot;

print(len(re.findall(texto_buscar, cadena)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/69/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>70. Expresiones regulares II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb70-expresiones-regulares-ii/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb70-expresiones-regulares-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/V8316ao08tQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos el estudio de las expresiones regulares abordando los denominados &lt;strong&gt;metacaracteres&lt;/strong&gt; (o &lt;em&gt;caracteres comodín&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Empecemos con las &lt;em&gt;anclas&lt;/em&gt;, que dentro de una lista nos van a permitir encontrar coincidencias al principio y al final de cada elemento de esta. Por ejemplo, mediante el ancla &lt;code&gt;^&lt;/code&gt;, las buscamos al inicio de la cadena de texto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

lista_nombres = [&amp;quot;Ana Gómez&amp;quot;,
                 &amp;quot;María Martín&amp;quot;,
                 &amp;quot;Sandra López&amp;quot;,
                 &amp;quot;Santiago Martín&amp;quot;]

for nombre in lista_nombres:
    if re.findall(&amp;quot;^Sandra&amp;quot;, nombre):
        print(nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Sandra López
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El último bucle lo podemos compactar utilizando comprensiones de listas de la siguiente forma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[print(nombre) for nombre in lista_nombres if re.findall(&amp;quot;^Sandra&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, podemos extraer de &lt;code&gt;lista_nombres&lt;/code&gt;, si nos interesa, todos los nombres que comiencen por &lt;code&gt;S&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

lista_nombres = [&amp;quot;Ana Gómez&amp;quot;,
                 &amp;quot;María Martín&amp;quot;,
                 &amp;quot;Sandra López&amp;quot;,
                 &amp;quot;Santiago Martín&amp;quot;]

[print(nombre) for nombre in lista_nombres if re.findall(&amp;quot;^S&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Sandra López
Santiago Martín
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Y si queremos todos los nombres cuyo apellido sea &lt;code&gt;Martín&lt;/code&gt;? El ancla &lt;code&gt;$&lt;/code&gt; es el metacarácter que hemos de emplear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

lista_nombres = [&amp;quot;Ana Gómez&amp;quot;,
                 &amp;quot;María Martín&amp;quot;,
                 &amp;quot;Sandra López&amp;quot;,
                 &amp;quot;Santiago Martín&amp;quot;]

[print(nombre) for nombre in lista_nombres if re.findall(&amp;quot;Martín$&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;María Martín
Santiago Martín
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos otro ejemplo de su uso, trabajando ahora con una lista de dominios, estamos interesados en encontrar aquellos que acaben en &lt;code&gt;.es&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

urls = [&amp;quot;https://pildorasinformaticas.es&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.es&amp;quot;,
        &amp;quot;https://pildorasinformaticas.com&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.com&amp;quot;]

[print(url) for url in urls if re.findall(&amp;quot;.es$&amp;quot;, url)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://pildorasinformaticas.es
ftp://pildorasinformaticas.es
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quizá nos interese hallar qué dominios son de tipo &lt;code&gt;ftp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

urls = [&amp;quot;https://pildorasinformaticas.es&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.es&amp;quot;,
        &amp;quot;https://pildorasinformaticas.com&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.com&amp;quot;]

[print(url) for url in urls if re.findall(&amp;quot;^ftp&amp;quot;, url)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ftp://pildorasinformaticas.es
ftp://pildorasinformaticas.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, tenemos las &lt;strong&gt;clases de caracteres&lt;/strong&gt;, que nos permiten introducir patrones de búsqueda utilizando el operador &lt;code&gt;[]&lt;/code&gt;. Cambiemos ligeramente los dominios para ver su utilidad (buscando aquellos dominios que contengan el carácter &lt;code&gt;ñ&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

urls = [&amp;quot;https://pildorasinformaticas.es&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.es&amp;quot;,
        &amp;quot;https://pildorasinformaticas.com&amp;quot;,
        &amp;quot;ftp://pildorasinformaticas.com&amp;quot;,
        &amp;quot;https://informaticaenespaña.es&amp;quot;]

[print(url) for url in urls if re.findall(&amp;quot;[ñ]&amp;quot;, url)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://informaticaenespaña.es
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un ejemplo un tanto más complejo: en una lista de palabras, queremos encontrar si se hallan las palabras &lt;code&gt;niños&lt;/code&gt; y &lt;code&gt;niñas&lt;/code&gt;. Como solo se diferencias ambas cadenas en un carácter, podemos escribir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

urls = [&amp;quot;hombres&amp;quot;, &amp;quot;mujeres&amp;quot;, &amp;quot;mascotas&amp;quot;, &amp;quot;niños&amp;quot;, &amp;quot;niñas&amp;quot;]

[print(url) for url in urls if re.findall(&amp;quot;niñ[oa]s&amp;quot;, url)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;niños
niñas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: al escribir &lt;code&gt;[oa]&lt;/code&gt; no exigimos que deban estar presentes los dos caracteres y en ese preciso orden. La función &lt;code&gt;findall()&lt;/code&gt; nos arrojará una coincidencia cuando alguno de los dos esté presente (o ambos, siendo indiferente el orden en el que se encuentren en este último caso).&lt;/p&gt;

&lt;p&gt;Esta estrategia es también útil cuando lidiamos con tildes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

urls = [&amp;quot;hombres&amp;quot;, &amp;quot;mujeres&amp;quot;, &amp;quot;mascotas&amp;quot;, &amp;quot;camión&amp;quot;, &amp;quot;camion&amp;quot;]

[print(url) for url in urls if re.findall(&amp;quot;cami[oó]n&amp;quot;, url)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;camión
camion
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/70/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>71. Expresiones regulares III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb71-expresiones-regulares-iii/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb71-expresiones-regulares-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Q4vXCQd1zwc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos el estudio de las expresiones regulares analizando cómo trabajar con &lt;strong&gt;rangos&lt;/strong&gt;. Estos nos permiten buscar patrones indicando un rango de números, de caracteres, etc.&lt;/p&gt;

&lt;p&gt;Por ejemplo, a partir de una lista de nombres, supongamos que estamos interesados en hallar todos aquellos que tengan letras comprendidas entre la &lt;code&gt;o&lt;/code&gt; y la &lt;code&gt;t&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombres = [&amp;quot;Ana&amp;quot;, &amp;quot;Pedro&amp;quot;, &amp;quot;María&amp;quot;, &amp;quot;Rosa&amp;quot;, &amp;quot;Sandra&amp;quot;, &amp;quot;Celia&amp;quot;]

[print(nombre) for nombre in nombres if re.findall(&amp;quot;[o-t]&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Pedro
María
Rosa
Sandra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: los rangos son &lt;em&gt;case sensitive&lt;/em&gt;, esto es, distinguen entre minúsculas y mayúsculas. Por ejemplo, si combinamos el rango anterior con el ancla &lt;code&gt;^&lt;/code&gt;, la ejecución no arrojará resultado alguno, porque todos los nombres están declarados con su inicial en mayúscula.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombres = [&amp;quot;Ana&amp;quot;, &amp;quot;Pedro&amp;quot;, &amp;quot;María&amp;quot;, &amp;quot;Rosa&amp;quot;, &amp;quot;Sandra&amp;quot;, &amp;quot;Celia&amp;quot;]

[print(nombre) for nombre in nombres if re.findall(&amp;quot;^[o-t]&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, completando el rango solucionamos esta situación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombres = [&amp;quot;Ana&amp;quot;, &amp;quot;Pedro&amp;quot;, &amp;quot;María&amp;quot;, &amp;quot;Rosa&amp;quot;, &amp;quot;Sandra&amp;quot;, &amp;quot;Celia&amp;quot;]

[print(nombre) for nombre in nombres if re.findall(&amp;quot;^[o-tO-T]&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Pedro
Rosa
Sandra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, estudiemos el uso de rangos cuando se nos presenta una lista de códigos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

codigos = [&amp;quot;Ma1&amp;quot;, &amp;quot;Se1&amp;quot;, &amp;quot;Ma2&amp;quot;, &amp;quot;Ba1&amp;quot;, &amp;quot;Ma3&amp;quot;, &amp;quot;Va1&amp;quot;, &amp;quot;Va2&amp;quot;, &amp;quot;Ma4&amp;quot;]

[print(codigo) for codigo in codigos if re.findall(&amp;quot;Ma[0-3]&amp;quot;, codigo)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ma1
Ma2
Ma3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, &lt;em&gt;Python&lt;/em&gt; nos permite la posibilidad de negar rangos, es decir, de obtener aquellos resultados que no se ajustan al patrón de búsqueda especificado. Para ello, antecediendo el rango, utilizamos el carácter &lt;code&gt;^&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

codigos = [&amp;quot;Ma1&amp;quot;, &amp;quot;Se1&amp;quot;, &amp;quot;Ma2&amp;quot;, &amp;quot;Ba1&amp;quot;, &amp;quot;Ma3&amp;quot;, &amp;quot;Va1&amp;quot;, &amp;quot;Va2&amp;quot;, &amp;quot;Ma4&amp;quot;]

[print(codigo) for codigo in codigos if re.findall(&amp;quot;Ma[^0-3]&amp;quot;, codigo)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ma4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, agreguemos algunos códigos nuevos y sigamos experimentando el uso de rangos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

codigos = [&amp;quot;Ma1&amp;quot;, &amp;quot;Se1&amp;quot;, &amp;quot;Ma2&amp;quot;, &amp;quot;Ba1&amp;quot;, &amp;quot;Ma3&amp;quot;, &amp;quot;Va1&amp;quot;, &amp;quot;Va2&amp;quot;, &amp;quot;Ma4&amp;quot;,
           &amp;quot;MaA&amp;quot;, &amp;quot;Ma5&amp;quot;, &amp;quot;MaB&amp;quot;, &amp;quot;MaC&amp;quot;]

[print(codigo) for codigo in codigos if re.findall(&amp;quot;Ma[0-3A-B]&amp;quot;, codigo)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ma1
Ma2
Ma3
MaA
MaB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, insertemos algunos caracteres especiales en mitad de ciertos códigos y veamos entonces cómo lidiar con ellos. Imaginemos que buscamos todos aquellos cuyo tercer carácter sea bien un punto, bien dos puntos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

codigos = [&amp;quot;Ma.1&amp;quot;, &amp;quot;Se1&amp;quot;, &amp;quot;Ma2&amp;quot;, &amp;quot;Ba1&amp;quot;, &amp;quot;Ma:3&amp;quot;, &amp;quot;Va1&amp;quot;, &amp;quot;Va2&amp;quot;, &amp;quot;Ma4&amp;quot;,
           &amp;quot;MaA&amp;quot;, &amp;quot;Ma.5&amp;quot;, &amp;quot;MaB&amp;quot;, &amp;quot;Ma:C&amp;quot;]

[print(codigo) for codigo in codigos if re.findall(&amp;quot;Ma[.:]&amp;quot;, codigo)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ma.1
Ma:3
Ma.5
Ma:C
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/71/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>72. Expresiones regulares IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb72-expresiones-regulares-iv/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb72-expresiones-regulares-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/u3WBRgpxQcc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, finaliremos la serie dedicada a expresiones regulares profundizando en el uso de las funciones &lt;code&gt;match()&lt;/code&gt; y &lt;code&gt;search()&lt;/code&gt; del módulo &lt;code&gt;re&lt;/code&gt;. La función &lt;code&gt;match()&lt;/code&gt; busca coincidencias, con respecto a un patrón determinado, siempre al comienzo del texto.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombre1 = &amp;quot;Sandra López&amp;quot;
nombre2 = &amp;quot;Antonio Gómez&amp;quot;
nombre3 = &amp;quot;María López&amp;quot;

if re.match(&amp;quot;Sandra&amp;quot;, nombre1):
    print(&amp;quot;Hemos encontrado el nombre.&amp;quot;)
else:
    print(&amp;quot;No hemos encontrado el nombre.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hemos encontrado el nombre.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, podemos evitar el comportamiento &lt;em&gt;case sensitive&lt;/em&gt; de esta función mediante el parámetro &lt;code&gt;re.IGNORECASE&lt;/code&gt;. Cambiemos &lt;code&gt;Sandra&lt;/code&gt; por &lt;code&gt;sandra&lt;/code&gt; y comprobémoslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombre1 = &amp;quot;Sandra López&amp;quot;
nombre2 = &amp;quot;Antonio Gómez&amp;quot;
nombre3 = &amp;quot;María López&amp;quot;

if re.match(&amp;quot;sandra&amp;quot;, nombre1, re.IGNORECASE):
    print(&amp;quot;Hemos encontrado el nombre.&amp;quot;)
else:
    print(&amp;quot;No hemos encontrado el nombre.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hemos encontrado el nombre.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, tenemos a nuestra disposición el uso de comodines en los patrones de búsqueda. Así, si añadimos dos nuevos nombres &amp;ldquo;parecidos&amp;rdquo;, &lt;code&gt;Lara&lt;/code&gt; y &lt;code&gt;Jara&lt;/code&gt;, mediante el carácter &lt;code&gt;.&lt;/code&gt; (que representa un carácter qualquiera sin determinar) podemos comprobar si ambos pertenecen o no a un listado de nombres:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombres = [&amp;quot;Sandra López&amp;quot;, &amp;quot;Antonio Gómez&amp;quot;, &amp;quot;María López&amp;quot;,
           &amp;quot;Jara Martín&amp;quot;, &amp;quot;Lara Pérez&amp;quot;]

[print(nombre, end=&amp;quot;\n&amp;quot;) for nombre in nombres if re.match(&amp;quot;.ara&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Jara Martín
Lara Pérez
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, veamos cómo emplear el patrón &lt;code&gt;\d&lt;/code&gt; para averiguar si una cadena comienza o no por un número:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

datos = [&amp;quot;Alexis Sáez&amp;quot;, &amp;quot;123456789&amp;quot;, &amp;quot;Number1&amp;quot;]

[print(d) for d in datos if re.match(&amp;quot;\d&amp;quot;, d)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;123456789
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, cambiemos de tercio y estudiemos la función &lt;code&gt;search()&lt;/code&gt; que, a diferencia de &lt;code&gt;match()&lt;/code&gt; (que se limita a buscar al comienzo de un texto), examina la cadena de texto completa. Retomemos el ejemplo de los nombres y busquemos la aparición de ciertos apellidos concretos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

nombres = [&amp;quot;Sandra López&amp;quot;, &amp;quot;Antonio Gómez&amp;quot;, &amp;quot;María López&amp;quot;,
           &amp;quot;Jara Martín&amp;quot;, &amp;quot;Lara Pérez&amp;quot;]

[print(nombre, end=&amp;quot;\n&amp;quot;) for nombre in nombres if re.search(&amp;quot;López&amp;quot;, nombre)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Sandra López
María López
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, la principal utilidad de &lt;code&gt;search()&lt;/code&gt; reside en la búsqueda de determinados patrones dentro de una cadena de caracteres de extensión considerable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

codigos = [
    &#39;&#39;&#39;
    Lorem ipsum dolor sit amet, 42consectetur adipiscing elit.
    Maecenas leo erat, varius non laoreet sed, cursus ut tortor.
    Morbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.
    Maecenas venenatis, sapien vitae sodales viverra, ante urna
    tincidunt tellus, a faucibus elit dui congue dui. Quisque congue
    sed ex in sollicitudin. Pellentesque luctus justo quis felis
    feugiat, et semper erat laoreet. Curabitur id dui arcu. Curabitur
    purus massa, placerat id pretium ac, ornare eleifend ante.
    &#39;&#39;&#39;,
    &#39;&#39;&#39;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    Maecenas 42leo erat, varius non laoreet sed, cursus ut tortor.
    Morbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.
    Maecenas venenatis, sapien vitae sodales viverra, ante urna
    tincidunt tellus, a faucibus elit dui congue dui. Quisque congue sed
    ex in sollicitudin. Pellentesque luctus justo quis felis feugiat, et
    semper erat laoreet. Curabitur id dui arcu. Curabitur purus massa,
    placerat id pretium ac, ornare eleifend ante.
    &#39;&#39;&#39;,
    &#39;&#39;&#39;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas
    leo erat, varius non laoreet sed, cursus ut tortor. Morbi maximus
    pulvinar ante, ut pulvinar ex malesuada blandit. Maecenas venenatis,
    sapien vitae sodales viverra, ante urna tincidunt tellus, a faucibus
    elit dui congue dui. Quisque congue sed ex in sollicitudin.
    Pellentesque luctus justo quis felis feugiat, et semper erat laoreet.
    Curabitur id dui arcu. Curabitur purus massa, placerat id pretium ac,
    ornare eleifend ante.
    &#39;&#39;&#39;]

[print(c, end=&amp;quot;\n&amp;quot;) for c in codigos if re.search(&amp;quot;42&amp;quot;, c)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    Lorem ipsum dolor sit amet, 42consectetur adipiscing elit.
    Maecenas leo erat, varius non laoreet sed, cursus ut tortor.
    Morbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.
    Maecenas venenatis, sapien vitae sodales viverra, ante urna
    tincidunt tellus, a faucibus elit dui congue dui. Quisque congue
    sed ex in sollicitudin. Pellentesque luctus justo quis felis
    feugiat, et semper erat laoreet. Curabitur id dui arcu. Curabitur
    purus massa, placerat id pretium ac, ornare eleifend ante.
    

    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    Maecenas 42leo erat, varius non laoreet sed, cursus ut tortor.
    Morbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.
    Maecenas venenatis, sapien vitae sodales viverra, ante urna
    tincidunt tellus, a faucibus elit dui congue dui. Quisque congue sed
    ex in sollicitudin. Pellentesque luctus justo quis felis feugiat, et
    semper erat laoreet. Curabitur id dui arcu. Curabitur purus massa,
    placerat id pretium ac, ornare eleifend ante.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/72/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>73. Decoradoras I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb73-decoradoras-i/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb73-decoradoras-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/DQXm6bIZgvk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, introduciremos el uso de las &lt;strong&gt;decoradoras&lt;/strong&gt; (o &lt;em&gt;funciones decoradoras&lt;/em&gt;), que son funciones que añaden ciertos comportamientos a otras (de ahí el nombre, puesto que las &amp;ldquo;decoran&amp;rdquo; incorporando funcionalidades adicionales).&lt;/p&gt;

&lt;p&gt;La estructura de una decoradora, de forma abstracta, es la siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Son tres funciones (&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; y &lt;code&gt;C&lt;/code&gt;), donde &lt;code&gt;A&lt;/code&gt; recibe como parámetro a &lt;code&gt;B&lt;/code&gt; para devolver &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Esto es, una decoradora devuelve siempre una función.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su sintaxis queda como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcion_decoradora(funcion):  # funcion_A(funcion_B)
    def funcion_interna():        # funcion_C
        # codigo funcion interna
    return funcion_interna
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos su aplicación práctica mediante un ejemplo muy sencillo, en el que la utilidad de la decoradora será casi nula y nos servirá únicamente para comprender su funcionamiento, sin añadir excesiva complejidad al código fuente.&lt;/p&gt;

&lt;p&gt;En primer lugar, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma():
    print(15 + 20)


def resta():
    print(30 - 10)


suma()
resta()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;35
20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, supongamos que deseamos añadir a todas las funciones cierto comportamiento adicional. Para ello, podemos acudir a su código y modificarlas una por una (en este ejemplo son dos, pero imaginemos un caso donde hubiera cientos de funciones) o utilizar una decoradora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcion_decoradora(funcion_parametro):
    def funcion_interior():
        # Acciones adicionales que decoran
        print(&amp;quot;Vamos a realizar un cálculo: &amp;quot;)
        funcion_parametro()
        # Acciones adicionales que decoran
        print(&amp;quot;Hemos terminado el cálculo.&amp;quot;)
    return funcion_interior
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, para añadir el decorador a cualquiera de las funciones ya previamente existentes, escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@funcion_decoradora
def suma():
    print(15 + 20)


def resta():
    print(30 - 10)


suma()
resta()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Vamos a realizar un cálculo: 
35
Hemos terminado el cálculo.
20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notemos cómo el decorador solo afecta a la función &lt;code&gt;suma()&lt;/code&gt;, pues así lo hemos declarado arriba. Bastaría replicar la estrategia para decorar asimismo la función &lt;code&gt;resta()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/73/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>74. Decoradoras II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb74-decoradoras-ii/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb74-decoradoras-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/_IwlE3Z7U04&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;



&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/KOw0tpcspH4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuamos el estudio de las funciones generadoras, analizando cómo utilizar parámetros con ellas. Para ello, retomemos el código del ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcion_decoradora(funcion_parametro):
    def funcion_interior():
        # Acciones adicionales que decoran
        print(&amp;quot;Vamos a realizar un cálculo: &amp;quot;)
        funcion_parametro()
        # Acciones adicionales que decoran
        print(&amp;quot;Hemos terminado el cálculo.&amp;quot;)
    return funcion_interior


@funcion_decoradora
def suma():
    print(15 + 20)


@funcion_decoradora
def resta():
    print(30 - 10)


suma()
resta()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiquemos las funciones &lt;code&gt;suma()&lt;/code&gt; y &lt;code&gt;resta()&lt;/code&gt; para que admitan la posibilidad de recibir parámetros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@funcion_decoradora
def suma(n1, n2):
    print(n1 + n2)


@funcion_decoradora
def resta(n1, n2):
    print(n1 - n2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, en la &lt;code&gt;funcion_interior()&lt;/code&gt; y en &lt;code&gt;funcion_parametros()&lt;/code&gt;, que figuran dentro de la &lt;code&gt;funcion_decoradora()&lt;/code&gt;, gestionamos esos parámetros utilizando &lt;code&gt;*args&lt;/code&gt;, que posibilita que una función reciba un número indeterminado de parámetros. Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcion_decoradora(funcion_parametro):
    def funcion_interior(*args):
        # Acciones adicionales que decoran
        print(&amp;quot;Vamos a realizar un cálculo: &amp;quot;)
        funcion_parametro(*args)
        # Acciones adicionales que decoran
        print(&amp;quot;Hemos terminado el cálculo.&amp;quot;)
    return funcion_interior
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, si ejecutamos ahora el código para las siguientes llamadas de las funciones &lt;code&gt;suma()&lt;/code&gt; y &lt;code&gt;resta()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(10, 5)
resta(25, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Vamos a realizar un cálculo: 
15
Hemos terminado el cálculo.
Vamos a realizar un cálculo: 
5
Hemos terminado el cálculo.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, incluso podemos ampliar la funcionalidad de nuestra decoradora, permitiendo la posibilidad de admitir parámetros que sigan el patrón &lt;em&gt;key = value&lt;/em&gt;. Para ello, utilizamos en la definición de &lt;code&gt;funcion_interior()&lt;/code&gt; y &lt;code&gt;funcion_parametro()&lt;/code&gt; la convención &lt;code&gt;**kwargs&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcion_decoradora(funcion_parametro):
    def funcion_interior(*args, **kwargs):
        # Acciones adicionales que decoran
        print(&amp;quot;Vamos a realizar un cálculo: &amp;quot;)
        funcion_parametro(*args, **kwargs)
        # Acciones adicionales que decoran
        print(&amp;quot;Hemos terminado el cálculo.&amp;quot;)
    return funcion_interior
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, construimos una función que realice la potenciación de un número y procedemos a su llamada, utilizando ahora el esquema &lt;em&gt;key = value&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@funcion_decoradora
def potencia(base, exponente):
    print(pow(base, exponente))


potencia(base=5, exponente=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Vamos a realizar un cálculo: 
25
Hemos terminado el cálculo.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/74/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>75. Documentación</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb75-documentacion/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb75-documentacion/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/SJqANWdRG4I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo documentar nuestros programas, esto es, incluir comentarios en clases, métodos, módulos, etc., con el objetivo de facilitar el trabajo en equipo sobre todo; resultando especialmente útil cuando las aplicaciones son complejas.&lt;/p&gt;

&lt;p&gt;Para empezar, tomemos como referencia este sencillo código, que contiene la definición de dos funciones y llamadas a estas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_cuadrado(lado):
    return &amp;quot;El área del cuadrado es: &amp;quot; + str(lado * lado)


def area_triangulo(base, altura):
    return &amp;quot;El área del triángulo es: &amp;quot; + str(base * altura / 2.)


print(area_cuadrado(5))
print(area_triangulo(3, 6))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El área del cuadrado es: 25
El área del triángulo es: 9.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, para documentarlas, tras su definición insertamos el comentario oportuno encerrado por una triple comilla. De esta manera, mediante el atributo &lt;code&gt;__doc__&lt;/code&gt;, incluso podemos acceder a la documentación de una función en tiempo de ejecución:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_cuadrado(lado):
    &amp;quot;&amp;quot;&amp;quot;Calcula el área de un cuadrado dado su lado.&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del cuadrado es: &amp;quot; + str(lado * lado)


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;Calcula el área de un triángulo dada su base y su altura.&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del triángulo es: &amp;quot; + str(base * altura / 2.)


# print(area_cuadrado(5))
# print(area_triangulo(3, 6))

print(area_cuadrado.__doc__)
print(area_triangulo.__doc__)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Calcula el área de un cuadrado dado su lado.
Calcula el área de un triángulo dada su base y su altura.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, obtenemos el mismo resultado empleando la función &lt;code&gt;help()&lt;/code&gt; que, además, nos ofrece acceso a la cabecera de la definición de la función y al módulo donde se encuentra:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_cuadrado(lado):
    &amp;quot;&amp;quot;&amp;quot;Calcula el área de un cuadrado dado su lado.&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del cuadrado es: &amp;quot; + str(lado * lado)


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;Calcula el área de un triángulo dada su base y su altura.&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del triángulo es: &amp;quot; + str(base * altura / 2.)


# print(area_cuadrado(5))
# print(area_triangulo(3, 6))

# print(area_cuadrado.__doc__)
# print(area_triangulo.__doc__)

help(area_cuadrado)
help(area_triangulo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Help on function area_cuadrado in module __main__:

area_cuadrado(lado)
    Calcula el área de un cuadrado dado su lado.

Help on function area_triangulo in module __main__:

area_triangulo(base, altura)
    Calcula el área de un triángulo dada su base y su altura.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, modifiquemos ligeramente el código para generar una clase &lt;code&gt;Areas&lt;/code&gt;, en cuyo interior se encuentren las dos anteriores funciones, y veamos cómo acceder a la documentación generada antes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Areas:
    def area_cuadrado(lado):
        &amp;quot;&amp;quot;&amp;quot;Calcula el área de un cuadrado dado su lado.&amp;quot;&amp;quot;&amp;quot;
        return &amp;quot;El área del cuadrado es: &amp;quot; + str(lado * lado)

    def area_triangulo(base, altura):
        &amp;quot;&amp;quot;&amp;quot;Calcula el área de un triángulo dada su base y su altura.&amp;quot;&amp;quot;&amp;quot;
        return &amp;quot;El área del triángulo es: &amp;quot; + str(base * altura / 2.)


help(Areas.area_cuadrado)
help(Areas.area_triangulo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Help on function area_cuadrado in module __main__:

area_cuadrado(lado)
    Calcula el área de un cuadrado dado su lado.

Help on function area_triangulo in module __main__:

area_triangulo(base, altura)
    Calcula el área de un triángulo dada su base y su altura.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, para obtener una documentación general de la clase basta teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(Areas)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Help on class Areas in module __main__:

class Areas(builtins.object)
 |  Methods defined here:
 |  
 |  area_cuadrado(lado)
 |      Calcula el área de un cuadrado dado su lado.
 |  
 |  area_triangulo(base, altura)
 |      Calcula el área de un triángulo dada su base y su altura.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, también podemos documentar la propia clase:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Areas:
    &amp;quot;&amp;quot;&amp;quot;Esta clase calcula las áreas de diferentes figuras geométricas.&amp;quot;&amp;quot;&amp;quot;
    def area_cuadrado(lado):
        &amp;quot;&amp;quot;&amp;quot;Calcula el área de un cuadrado dado su lado.&amp;quot;&amp;quot;&amp;quot;
        return &amp;quot;El área del cuadrado es: &amp;quot; + str(lado * lado)

    def area_triangulo(base, altura):
        &amp;quot;&amp;quot;&amp;quot;Calcula el área de un triángulo dada su base y su altura.&amp;quot;&amp;quot;&amp;quot;
        return &amp;quot;El área del triángulo es: &amp;quot; + str(base * altura / 2.)


help(Areas)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Help on class Areas in module __main__:

class Areas(builtins.object)
 |  Esta clase calcula las áreas de diferentes figuras geométricas.
 |  
 |  Methods defined here:
 |  
 |  area_cuadrado(lado)
 |      Calcula el área de un cuadrado dado su lado.
 |  
 |  area_triangulo(base, altura)
 |      Calcula el área de un triángulo dada su base y su altura.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: utilizando esta misma estrategia, podemos documentar asimismo módulos.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/75/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>76. Pruebas I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb76-pruebas-i/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb76-pruebas-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/BUNEkSFlmys&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, analizaremos cómo realizar pruebas, utilizando la documentación para ello. Esta forma de proceder la podemos llevar a cabo con el módulo &lt;code&gt;doctest&lt;/code&gt; de &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar, partamos de este sencillo código, que contiene una función que calcula el área del triángulo dada su base y su altura:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_triangulo(base, altura):
    return base * altura / 2.


print(area_triangulo(2, 4))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, documentemos la función &lt;code&gt;area_triangulo()&lt;/code&gt; siguiendo el procedimiento visto en la lección anterior e incluyamos ahí nuestra primera prueba (antecediéndola mediante &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;). Luego, una vez importado el módulo &lt;code&gt;doctest&lt;/code&gt;, incluimos la instrucción &lt;code&gt;doctest.testmod()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;
    Calcula el área de un triángulo dada su base y altura.

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(3, 6)
    9.0

    &amp;quot;&amp;quot;&amp;quot;
    return base * altura / 2.


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior bloque de código, no observamos respuesta alguna en la consola de &lt;em&gt;Python&lt;/em&gt;, lo cual es una buena señal, pues significa que se han superado los tests planteados sin encontrar ningún problema.&lt;/p&gt;

&lt;p&gt;Ahora, imaginemos que nos hemos equivocado escribiendo el test (también valdría modificando la expresión que devuelve la instrucción &lt;code&gt;return&lt;/code&gt;) y decimos que ha de resultar &lt;code&gt;8.0&lt;/code&gt; el área de un triángulo de base &lt;code&gt;3&lt;/code&gt; y altura &lt;code&gt;6&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;
    Calcula el área de un triángulo dada su base y altura.

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(3, 6)
    8.0

    &amp;quot;&amp;quot;&amp;quot;
    return base * altura / 2.


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;**********************************************************************
File &amp;quot;pruebas_2.py&amp;quot;, line 8, in __main__.area_triangulo
Failed example:
    area_triangulo(3, 6)
Expected:
    8.0
Got:
    9.0
**********************************************************************
1 items had failures:
   1 of   1 in __main__.area_triangulo
***Test Failed*** 1 failures.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, compliquemos ligeramente el ejemplo y hagamos que la función &lt;code&gt;area_triangulo()&lt;/code&gt; devuelva una cadena de caracteres en lugar de un valor numérico. Ello implica redactar con cuidado la prueba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;
    Calcula el área de un triángulo dada su base y altura.

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(3, 6)
    &#39;El área del triángulo es 9.0&#39;

    &amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del triángulo es &amp;quot; + str(base * altura / 2.)


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: hemos de proceder con cautela porque, en esta ocasión, las comillas &lt;code&gt;&#39;&lt;/code&gt; y &lt;code&gt;&amp;quot;&lt;/code&gt; no son intercambiables.&lt;/p&gt;

&lt;p&gt;Obviamente, tenemos la posibilidad de realizar varias pruebas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest


def area_triangulo(base, altura):
    &amp;quot;&amp;quot;&amp;quot;
    Calcula el área de un triángulo dada su base y altura.

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(3, 6)
    &#39;El área del triángulo es 9.0&#39;

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(2, 4)
    &#39;El área del triángulo es 4.0&#39;

    &amp;gt;&amp;gt;&amp;gt; area_triangulo(4, 5)
    &#39;El área del triángulo es 10.0&#39;

    &amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;El área del triángulo es &amp;quot; + str(base * altura / 2.)


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, llevar a cabo múltiples pruebas tiene sentido cuando la complejidad del código se incrementa. Recordemos el código que generamos para comprobar si una dirección de correo electrónico era correcta en función de si presentaba o no el carácter &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest


def check_mail(mail_user):
    &amp;quot;&amp;quot;&amp;quot;
    Evalúa un mail recibido en busca de @.
    Si tiene una @ es correcto.
    Si tiene más de una @ es incorrecto.
    Si la @ está al final es incorrecto.

    &amp;gt;&amp;gt;&amp;gt; check_mail(&amp;quot;alexis@cursos.es&amp;quot;)
    True

    &amp;gt;&amp;gt;&amp;gt; check_mail(&amp;quot;alexiscursos.es@&amp;quot;)
    False

    &amp;gt;&amp;gt;&amp;gt; check_mail(&amp;quot;alexis.cursos.es&amp;quot;)
    False

    &amp;gt;&amp;gt;&amp;gt; check_mail(&amp;quot;alexis@cursos@es&amp;quot;)
    False
    &amp;quot;&amp;quot;&amp;quot;

    arroba = mail_user.count(&amp;quot;@&amp;quot;)
    return not (arroba != 1 or mail_user.rfind(&#39;@&#39;) == len(mail_user) - 1)


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/76/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>77. Pruebas II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb77-pruebas-ii/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb77-pruebas-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/64v9X7K-iuc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos el estudio de las pruebas que realizamos utilizando la documentación, pero incrementando un tanto su complejidad (con expresiones anidadas), para así ver las opciones que nos plantea el módulo &lt;code&gt;doctest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar, partamos del siguiente código fuente, que no es todo lo eficiente que debería, pero que cumple su propósito a efectos metodológicos para ilustrar pruebas con expresiones anidadas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math


def raiz_cuadrada(lista_numeros):
    &amp;quot;&amp;quot;&amp;quot;
    La función devuelve una lista con la raíz cuadrada de
    los elementos numéricos pasados por parámetros en otra
    lista.
    &amp;quot;&amp;quot;&amp;quot;
    return [math.sqrt(n) for n in lista_numeros]


print(raiz_cuadrada([1, 4, 9, 16]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[1.0, 2.0, 3.0, 4.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, para diseñar una prueba que contenta estructuras complejas como condicionales o bucles, simplemente hemos de utilizar &lt;code&gt;...&lt;/code&gt; apropiadamente para anidar instrucciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest
import math


def raiz_cuadrada(lista_numeros):
    &amp;quot;&amp;quot;&amp;quot;
    La función devuelve una lista con la raíz cuadrada de
    los elementos numéricos pasados por parámetros en otra
    lista.

    &amp;gt;&amp;gt;&amp;gt; lista = []
    &amp;gt;&amp;gt;&amp;gt; for i in [4, 9, 16]:
    ...     lista.append(i)
    &amp;gt;&amp;gt;&amp;gt; raiz_cuadrada(lista)
    [2.0, 3.0, 4.0]
    &amp;quot;&amp;quot;&amp;quot;
    return [math.sqrt(n) for n in lista_numeros]


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, analicemos cómo implementar pruebas que arrojen excepciones. Por ejemplo, incluyamos un elemento negativo en la lista que pasamos como argumento a la función &lt;code&gt;raiz_cuadrada()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(raiz_cuadrada([4, -9, 16]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;pruebas_2.py&amp;quot;, line 27, in &amp;lt;module&amp;gt;
    print(raiz_cuadrada([4, -9, 16]))
  File &amp;quot;pruebas_2.py&amp;quot;, line 22, in raiz_cuadrada
    return [math.sqrt(n) for n in lista_numeros]
  File &amp;quot;pruebas_2.py&amp;quot;, line 22, in &amp;lt;listcomp&amp;gt;
    return [math.sqrt(n) for n in lista_numeros]
ValueError: math domain error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, para diseñar una prueba que contemple el uso de número negativos en general (y no el de esta lista en concreto), utilizaremos &lt;code&gt;...&lt;/code&gt; y nos quedaremos únicamente con la primera y última línea de la excepción arrojada arriba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import doctest
import math


def raiz_cuadrada(lista_numeros):
    &amp;quot;&amp;quot;&amp;quot;
    La función devuelve una lista con la raíz cuadrada de
    los elementos numéricos pasados por parámetros en otra
    lista.

    &amp;gt;&amp;gt;&amp;gt; lista = []
    &amp;gt;&amp;gt;&amp;gt; for i in [4, 9, 16]:
    ...     lista.append(i)
    &amp;gt;&amp;gt;&amp;gt; raiz_cuadrada(lista)
    [2.0, 3.0, 4.0]

    &amp;gt;&amp;gt;&amp;gt; lista = []
    &amp;gt;&amp;gt;&amp;gt; for i in [4, -9, 16]:
    ...     lista.append(i)
    &amp;gt;&amp;gt;&amp;gt; raiz_cuadrada(lista)
    Traceback (most recent call last):
    ...
    ValueError: math domain error
    &amp;quot;&amp;quot;&amp;quot;
    return [math.sqrt(n) for n in lista_numeros]


doctest.testmod()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/77/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>78. Ejecutables</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb78-ejecutables/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:02 +0100</pubDate>
      <guid>https://imalexissaez.github.io/courses/python-basic/pb78-ejecutables/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Vr9vl0qlggE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo generar un ejecutable de una aplicación escrita en &lt;em&gt;Python&lt;/em&gt; y que tomará el formato nativo del sistema operativo en el que estemos trabajando (&lt;code&gt;.exe&lt;/code&gt; en &lt;em&gt;Windows&lt;/em&gt;, por ejemplo).&lt;/p&gt;

&lt;p&gt;Para empezar, desde la terminal del sistema, instalamos &lt;code&gt;pyinstaller&lt;/code&gt;, utilizando para ello la instrucción:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install pyinstaller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, rescatemos los archivos de la aplicación que simulaba una calculadora, correspondiente a la lección 50. Generemos una copia de ellos, por coherencia con la estructura del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;, en el directorio &lt;code&gt;/lecciones/78/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora, desde la terminal, nos desplazamos a dicho directorio y tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyinstaller calculadora.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto es, la instrucción &lt;code&gt;pyinstaller&lt;/code&gt; seguida del nombre del archivo del cual deseamos generar un ejecutable.&lt;/p&gt;

&lt;p&gt;El proceso da a luz a una cantidad considerable de ficheros y carpetas, siendo de nuestro interés la denominada &lt;code&gt;/dist/&lt;/code&gt;, en cuyo interior encontraremos otra designada como &lt;code&gt;/calculadora/&lt;/code&gt;, que contiene la aplicación lista para ser distribuida. Si hacemos doble clic sobre &lt;code&gt;calculadora.exe&lt;/code&gt;, podemos corroborar que la aplicación funciona a la perfección.&lt;/p&gt;

&lt;p&gt;Ahora bien, tras ella aparece la propia terminal de &lt;em&gt;Python&lt;/em&gt;, característica que quizá no nos interese y posiblemente solo deseemos trabajar con la interfaz gráfica de la calculadora. Para conseguirlo, hemos de incluir el modificador &lt;code&gt;--windowed&lt;/code&gt;, en la llamada a &lt;code&gt;pyinstaller&lt;/code&gt;, a la hora de crear el ejecutable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyinstaller --windowed calculadora.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, la aplicación requiere de la presencia de todos los ficheros contenidos en el directorio &lt;code&gt;/calculadora/&lt;/code&gt; para su correcto funcionamiento. Sería deseable que todo ello se &amp;ldquo;compilase&amp;rdquo; en un único archivo y que se pudiera ejecutar en cualquier ordenador, independientemente de si tiene o no instalado &lt;em&gt;Python&lt;/em&gt;. El mencionado comportamiento se obtiene agregando el modificador &lt;code&gt;--onefile&lt;/code&gt; a la anterior instrucción, esto es,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyinstaller --windowed --onefile calculadora.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, en la carpeta &lt;code&gt;/dist/&lt;/code&gt; hallamos únicamente el archivo.&lt;/p&gt;

&lt;p&gt;Finalmente, de cara a modificar el icono de la aplicación, simplemente hemos de añadir un nuevo modificador a la instrucción &lt;code&gt;pyinstaller&lt;/code&gt;: &lt;code&gt;--icon=./icon.ico&lt;/code&gt;, siendo &lt;code&gt;icon.ico&lt;/code&gt; el nombre del archivo que contiene el icono y que se ubica en el mismo directorio donde se halla el fichero &lt;code&gt;calculadora.py&lt;/code&gt;. Así pues, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pyinstaller --windowed --onefile --icon=./icon.ico calculadora.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/78/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrando al tema Academic</title>
      <link>https://imalexissaez.github.io/2019/07/02/migrando-al-tema-academic/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/2019/07/02/migrando-al-tema-academic/</guid>
      <description>&lt;p&gt;Aunque hace unos días publiqué un &lt;a href=&#34;https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/&#34;&gt;artículo&lt;/a&gt; que trataba sobre la configuración de ciertos aspectos de las hojas de estilos CSS del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, sí que es cierto que &lt;em&gt;Infinitos Contrastes&lt;/em&gt; lleva ya unas cuantas semanas bajo los auspicios del tema &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Academic&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De vez en cuando, me gusta echar un vistazo a la &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;lista oficial&lt;/a&gt; de temas de la web oficial de &lt;em&gt;Hugo&lt;/em&gt;, sobre todo cuando siento que la organización de los contenidos no me termina de convencer. En uno de esos paseos, descubrí el tema &lt;em&gt;Academic&lt;/em&gt; y tres de sus aspectos enseguida captaron poderosamente mi atención:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En primer lugar, la construcción de la página inicial del sitio a través de diferentes &lt;em&gt;widgets&lt;/em&gt;. En &lt;em&gt;Infinitos Contrastes&lt;/em&gt; apenas uso unos pocos de ellos, pero en la página web de &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34;&gt;ejemplo&lt;/a&gt; del tema aparecen casi todos y nos permiten hacernos una idea de su enorme potencial.&lt;/li&gt;
&lt;li&gt;En segundo lugar, la sección dedicada a los proyectos personales, con la posibilidad incorporada de filtrar por etiquetas, es una funcionalidad maravillosa en mi opinión. Ahora mismo, estoy experimentando con ella para organizar los &lt;a href=&#34;https://imalexissaez.github.io/proyecto/problemas/&#34;&gt;Problemas&lt;/a&gt; e información sobre la &lt;a href=&#34;https://imalexissaez.github.io/proyecto/capacitacion/&#34;&gt;Capacitación en Valenciano&lt;/a&gt;, por ejemplo.&lt;/li&gt;
&lt;li&gt;Finalmente, aunque no por ello menos impactante, la plantilla &lt;code&gt;docs&lt;/code&gt;, diseñada para elaborar documentación, pero cuya flexibilidad permite organizar fácilmente los apuntes de un curso o un proyecto de extensión considerable. Precisamente ha sido mi elección para recopilar una serie de notas personales de un &lt;a href=&#34;https://imalexissaez.github.io/courses/python-basic/&#34;&gt;curso de Python&lt;/a&gt; que recientemente he finalizado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Además, una vez metido de lleno en los entresijos de este tema, no puedo más que destacar la excelente &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;documentación&lt;/a&gt; del mismo. Con &lt;em&gt;Beautiful Hugo&lt;/em&gt; me animé a escribir una serie de artículos donde explicaba cómo tratar ciertos aspectos (aquel primer proyecto, &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Metablog&lt;/a&gt;), pero con &lt;em&gt;Academic&lt;/em&gt; es a todas luces innecesario, ya que han puesto a nuestra disposición toda una serie de detalladas explicaciones.&lt;/p&gt;

&lt;p&gt;Por otro lado, el nivel de actualizaciones sigue un elevado ritmo y la resolución de &lt;em&gt;bugs&lt;/em&gt; (una vez notificados en &lt;em&gt;GitHub&lt;/em&gt; abriendo &lt;em&gt;issues&lt;/em&gt;) es casi instantánea. Cada pocos días aparece un nuevo &lt;em&gt;commit&lt;/em&gt; que puede interesarnos y el proceso de actualización, localmente vía &lt;em&gt;script&lt;/em&gt; o automáticamente mediante &lt;em&gt;Netlify&lt;/em&gt;, es muy sencillo.&lt;/p&gt;

&lt;p&gt;Sin embargo, evidentemente, no todo han sido luces durante la migración. Las peculiaridades de este tema han provocado que haya tenido que revisar, una por una, todas las páginas generadas hasta el momento. Si bien es cierto que principalmente el trabajo se ha reducido a la edición de las cabeceras de los documentos, todavía quedan ciertos detalles a ajustar que, poco a poco, iré abordando en los próximos meses. En esta línea, también me gustaría comentar que no es un tema que recomendaría a alguien que se iniciase en el desarrollo web con &lt;em&gt;Hugo&lt;/em&gt;, puesto que la cantidad de opciones disponibles y decisiones a tomar puede resultar abrumadora.&lt;/p&gt;

&lt;p&gt;En resumen, &lt;em&gt;Academic&lt;/em&gt; es un tema excelente para aquellas personas que deseen ir &amp;ldquo;un paso más allá&amp;rdquo; en sus blogs y estén dispuestas a invertir unas cuantas horas entre la experimentación y la lectura de la extensa documentación.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reseña: &#39;Curso Python desde 0&#39;</title>
      <link>https://imalexissaez.github.io/2019/06/18/resena-curso-python-desde-cero/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/2019/06/18/resena-curso-python-desde-cero/</guid>
      <description>&lt;p&gt;Durante los últimos meses he estado centrado, casi exclusivamente, en la obtención del requisito lingüístico de cara a opositar en la &lt;em&gt;Comunidad Valenciana&lt;/em&gt;. En breve, ello se traduce en haber alcanzado un nivel &lt;em&gt;C1&lt;/em&gt; en una lengua que hacía unas dos décadas que no usaba en absoluto y, además, haber superado una prueba de capacitación para ejercer la docencia en dicha lengua.&lt;/p&gt;

&lt;p&gt;Así pues, con un cierto grado de saturación del estudio de las letras, me apetecía iniciar un pequeño proyecto paralelo, que me permitiese desconectar y, a ser posible, relacionado con la &lt;em&gt;Ciencia de Datos&lt;/em&gt;. No obstante, mis anteriores escarceos en esta disciplina han sido siempre utilizando el lenguaje de programación &lt;em&gt;R&lt;/em&gt;, mientras que la tendencia actual sugiere el uso de &lt;em&gt;Python&lt;/em&gt; en estos páramos. Aunque este último no es un gran desconocido para mí, sí que es cierto que necesitaba un refresco de su sintaxis, así como de sus muchas peculiaridades.&lt;/p&gt;

&lt;p&gt;Curiosamente, de entre los varios &lt;em&gt;MOOC&lt;/em&gt;, libros y tutoriales disponibles en internet, fue esta &lt;a href=&#34;https://www.youtube.com/playlist?list=PLU8oAlHdN5BlvPxziopYZRd55pdqFwkeS&#34; target=&#34;_blank&#34;&gt;lista de reproducción&lt;/a&gt; de &lt;em&gt;YouTube&lt;/em&gt;, de la mano de &lt;a href=&#34;https://www.pildorasinformaticas.es/&#34; target=&#34;_blank&#34;&gt;Píldoras Informáticas&lt;/a&gt;, la que captó poderosamente mi atención. Su extensión, más que considerable, anticipaba que cumpliría con creces mis necesidades de cara a repasar &lt;em&gt;Python&lt;/em&gt;. Además, en un rápido vistazo al índice, observé que la mencionada lista incluía aspectos que no había tratado con este lenguaje de programación (aunque algunos de ellos sí con otros), como la construcción de interfaces gráficas, el manejo de bases de datos o el uso de funciones decoradoras, por nombrar algunos.&lt;/p&gt;

&lt;p&gt;El enfoque del &amp;lsquo;Curso Python desde 0&amp;rsquo; es realmente práctico. La teoría asociada a cada una de las secciones no es que brille por su ausencia, pero sí es cierto que se reduce a la mínima expresión necesaria para poder implementar los conceptos y sin que las diversas instrucciones parezcan extraídas de la chistera de un mago. Las explicaciones son fáciles de seguir y en aquellos puntos donde el instructor, por su experiencia, considera o anticipa la posible aparición de dificultades, el análisis del código incluye hasta repasos detallados simulando el flujo de ejecución del algoritmo.&lt;/p&gt;

&lt;p&gt;Por otro lado, es una bendición que no se detenga en los clásicos parajes de los cursos introductorios, en los que apenas se estudian variables, operadores, estructuras condicionales, bucles, funciones y, de manera muy superficial, el paradigma de programación orientada a objetos. En esta lista de reproducción, se tratan todos los anteriores conceptos, con una profundidad adecuada y, además, mediante prácticas guiadas, se construyen aplicaciones interesantes como excusa a introducir áreas como el diseño de interfaces, el manejo de bases de datos, el uso de expresiones regulares, las funciones anónimas o la realización de pruebas a través de la documentación.&lt;/p&gt;

&lt;p&gt;Sin embargo, por añadir una insignificante tara a este maravilloso recurso, la cantidad de ejercicios propuestos es ciertamente reducida y solo aparecen en los primeros estadios del curso. En mi opinión, un lenguaje de programación se aprende de manera práctica, desafiando los conceptos estudiados mediante retos de dificultad adecuada. Sí que es verdad que cada uno, a través de los campos de su interés, puede plantearse sus propias actividades; pero considero que se ha perdido un tanto la oportunidad de hacer de este curso de &lt;em&gt;Python&lt;/em&gt; una herramienta de aprendizaje más activa.&lt;/p&gt;

&lt;p&gt;Para finalizar, me gustaría comentar que he recogido mis notas personales, tomadas durante la visualización de la lista de reproducción, en uno de los proyectos de la web: &lt;a href=&#34;https://imalexissaez.github.io/courses/python-basic/&#34;&gt;Python (Básico)&lt;/a&gt;, por si alguna persona las pudiera encontrar de utilidad en cualquier momento.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursos para la atención a la diversidad</title>
      <link>https://imalexissaez.github.io/2019/06/05/recursos-para-la-atencion-a-la-diversidad/</link>
      <pubDate>Wed, 05 Jun 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/06/05/recursos-para-la-atencion-a-la-diversidad/</guid>
      <description>&lt;p&gt;En la web oficial de la &lt;em&gt;Conselleria de Educación, Investigación, Cultura y Deporte&lt;/em&gt;, dentro del apartado dedicado a la &lt;em&gt;inclusión educativa&lt;/em&gt;, podemos encontrar interesantes publicaciones enfocadas hacia la atención al alumnado con necesidades específicas de apoyo educativo.&lt;/p&gt;

&lt;p&gt;Las diferentes guías están disponibles tanto en &lt;a href=&#34;http://www.ceice.gva.es/es/web/inclusioeducativa/publicaciones&#34; target=&#34;_blank&#34;&gt;español&lt;/a&gt; como en &lt;a href=&#34;http://www.ceice.gva.es/va/web/inclusioeducativa/publicaciones?platform=hootsuite&#34; target=&#34;_blank&#34;&gt;valenciano&lt;/a&gt; y abarcan temas tan variados como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Altas capacidades intelectuales.&lt;/li&gt;
&lt;li&gt;Trastorno por déficit de atención e hiperactividad (TDAH).&lt;/li&gt;
&lt;li&gt;Trastorno de espectro del autismo.&lt;/li&gt;
&lt;li&gt;Dificultad específica de aprendizaje de la lectura.&lt;/li&gt;
&lt;li&gt;Dificultad específica en el lenguaje y la comunicación.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En los manuales encontramos detalladas descripciones y un sinfín de útiles orientaciones a considerar a la hora de llevar a cabo actuaciones en el aula. Se convierten así en un más que maravilloso recurso para el correspondiente apartado de nuestras programaciones didácticas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unos cambios rápidos a las plantillas</title>
      <link>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</link>
      <pubDate>Sat, 01 Jun 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</guid>
      <description>&lt;p&gt;En esta entrada recojo el código necesario para localizar a español ciertas secciones de la página web, incluyendo un experimento que al final no terminó de convencerme, pero que comparto por si sirviera de inspiración a la creatividad ajena.&lt;/p&gt;

&lt;p&gt;Al final de cada una de las entradas del blog aparece un apartado de &lt;em&gt;etiquetas&lt;/em&gt;, que permite agrupar fácilmente contenidos relacionados. Cambiemos la cabecera de esta sección de &lt;code&gt;Tags:&lt;/code&gt; a &lt;code&gt;Etiquetas:&lt;/code&gt;. Para ello, editamos con &lt;em&gt;Sublime Text 3&lt;/em&gt; el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) y buscamos el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Tags: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, modificamos el valor del atributo &lt;code&gt;content&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Etiquetas: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y guardamos los cambios realizados.&lt;/p&gt;

&lt;p&gt;Siguiendo con esta misma filosofía, traduzcamos ese &lt;code&gt;View all&lt;/code&gt; que aparece en las páginas de índice que agrupan contenidos por taxonomías. Para ello, editamos el archivo &lt;code&gt;terms.html&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y, utilizando el buscador de &lt;em&gt;Sublime Text 3&lt;/em&gt;, nos situamos donde aparece la mencionada cadena de caracteres y la sustituimos, por ejemplo, por &lt;code&gt;Ver todos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Todavía podemos mejorar un tanto la localización a español del tema a través de las taxonomías. Con tal objetivo en mente, modifiquemos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) como sigue, de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  project  = &amp;quot;projects&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, editamos la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y sustituimos el bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si queremos que aparezca en las entradas del blog información sobre el apartado o proyecto al que pertenecen, no tendríamos más que incorporar dos nuevos bloques a continuación, utilizando el anterior como guía y llevando a cabo las adaptaciones pertinentes. Por otro lado, sería más que recomendable crear en el archivo de estilos &lt;em&gt;css&lt;/em&gt; las clases &lt;code&gt;blog-etiquetas&lt;/code&gt;, &lt;code&gt;blog-apartados&lt;/code&gt; y &lt;code&gt;blog-proyectos&lt;/code&gt;, para mejorar el mantenimiento de la localización del tema en un futuro.&lt;/p&gt;

&lt;p&gt;A continuación, hemos de editar las plantillas &lt;code&gt;list.html&lt;/code&gt; e &lt;code&gt;index.html&lt;/code&gt; (ubicadas ambas en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;), substituyendo los bloques de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;por&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadiendo, acto seguido, bloques análogos para &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; si lo hemos considerado oportuno.&lt;/p&gt;

&lt;p&gt;Este cambio nos obliga a actualizar la ruta de acceso a la página de etiquetas, por lo que debemos editar el archivo &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) de manera que el bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pase a ser&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;etiquetas&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, nos queda modificar el estilo de la cabecera de la página de etiquetas. Para ello editamos el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) buscando el término &lt;code&gt;header&lt;/code&gt; y añadiendo la cadena correspondiente a etiquetas. Por ejemplo, para el bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;la modificación quedaría como sigue&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .etiquetas-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En total, hemos de proceder de esta manera en tres ocasiones.&lt;/p&gt;

&lt;p&gt;Y ya que estamos con las manos en la masa, creemos las clases de estilos para &lt;code&gt;etiquetas&lt;/code&gt;, &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; trabajando sobre los bloques de código originales que aparecen tras el comentario &lt;code&gt;/* --- Tags --- */&lt;/code&gt; (recordemos que cualquier modificación puede implicar después que hayamos de editar la cabeceras de las páginas tal y como hicimos hace un instante). Así pues, nos van a quedar bloques como el que aparece a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags,
.blog-apartados,
.blog-etiquetas,
.blog-proyectos {
  font-family: &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;
  color: #999;
  font-size: 15px;
  margin-bottom: 30px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aquellos en los que aparece el atributo &lt;code&gt;before&lt;/code&gt; no los podemos agrupar tan fácilmente. No obstante, no deja de ser trabajo de &lt;em&gt;copy&amp;amp;paste&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como he comentado arriba, no debemos olvidar añadir a las clases de las cabeceras las líneas correspondientes, de forma que nos aparezcan bloques como el que figura acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .apartados-heading,
.intro-header .etiquetas-heading,
.intro-header .proyectos-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, hacemos una nueva modificación sobre el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y cambiamos el nombre del menú principal &lt;em&gt;Blog&lt;/em&gt; por &lt;em&gt;Inicio&lt;/em&gt;. Así, el bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pasa a ser&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Inicio&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, en la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;) añado, en la ubicación donde aparecen las etiquetas, información sobre el apartado y el proyecto al que pertenece una entrada en particular. Por tanto, el bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.apartados }}
  &amp;lt;div class=&amp;quot;blog-apartados&amp;quot;&amp;gt;
    {{ range .Params.apartados }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/apartados/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.proyectos }}
  &amp;lt;div class=&amp;quot;blog-proyectos&amp;quot;&amp;gt;
    {{ range .Params.proyectos }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/proyectos/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, aunque es una opción razonable, no me convence cómo queda, por lo que, en mi caso, voy a dejarlo como estaba. No obstante, comparto el código fuente por si alguien tiene interés en realizar esta modificación.&lt;/p&gt;

&lt;p&gt;Por último, quizá quede todo un poco mejor si damos acceso a las diferentes secciones desde el menú superior derecho, con un desplegable. Para ello, modificamos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y dejamos la sección dedicada al menú como figura a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del menú superior derecho
#
[[menu.main]]
    identifier = &amp;quot;menu&amp;quot;
    name       = &amp;quot;Menú&amp;quot;
    weight     = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Apartados&amp;quot;
    url    = &amp;quot;apartados/&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Etiquetas&amp;quot;
    url    = &amp;quot;etiquetas/&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Proyectos&amp;quot;
    url    = &amp;quot;proyectos/&amp;quot;
    weight = 3

[[menu.main]]
    name   = &amp;quot;Acerca de&amp;quot;
    url    = &amp;quot;page/about/&amp;quot;
    weight = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concluyo aquí esta extensa entrada, dejando el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto MetaBlog&lt;/a&gt; en espera, pues en estos momentos estoy más centrado en la generación de contenido para la página web, que en la edición de la misma.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Política, votos y un poco de combinatoria</title>
      <link>https://imalexissaez.github.io/2019/05/29/politica-votos-y-un-poco-de-combinatoria/</link>
      <pubDate>Wed, 29 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/29/politica-votos-y-un-poco-de-combinatoria/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 81:&lt;/strong&gt; Dos candidatos $A$ y $B$ se presentan a una elección. Si $A$ recibe $a$ votos y $B$ recibe $b$ votos, con $a&amp;gt;b$, ¿cuál es la probabilidad de que, en todo momento del escrutinio, $A$ vaya por delante de $B$?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;El presente ejercicio es ciertamente similar a uno de los apartados del &lt;a href=&#34;https://imalexissaez.github.io/2019/05/25/seguimos_de_rutas/&#34;&gt;anterior problema&lt;/a&gt;, por lo que seguiremos el procedimiento allí esbozado. Para empezar, como no tenemos mayores indicaciones sobre cómo transcurre el escrutinio, asumiremos que todos los sucesos posibles de este experimento aleatorio son equiprobables, hecho que nos permitirá calcular probabilidades haciendo uso de la &lt;em&gt;Regla de Laplace&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por lo que respecta al total de casos posibles, este asciende al número de trayectorias que parten desde el origen de coordenadas y arriban hasta el punto $(a,b)$, que sabemos es&lt;/p&gt;

&lt;p&gt;$$
C_{a+b,a} = \dbinom{a+b}{a}.
$$&lt;/p&gt;

&lt;p&gt;A continuación, de cara a obtener el cardinal del conjunto de casos favorables, sabemos que, a la postre, $a&amp;gt;b$. Por otro lado, la condición de que, durante el escrutinio, el candidato $A$ se mantenga siempre por delante del $B$, se traduce en que las trayectorias que partan del origen de coordenadas y lleguen hasta el punto $(a,b)$, se mantengan siempre por debajo de la diagonal $y=x$, sin intersecarla en momento alguno.&lt;/p&gt;

&lt;p&gt;Para ello, las rutas favorables a la situación comentada han de comenzar, necesariamente, desde el punto $(1,0)$. Así pues, hallemos el total de trayectorias existentes entre el punto $(1,0)$ y el punto $(a,b)$ que, por traslación, sabemos es equivalente a la cantidad de rutas entre el origen de coordenadas y el punto $(a,b) - (1,0) = (a-1,b)$ y esta última cifra asciende a&lt;/p&gt;

&lt;p&gt;$$
C_{a+b-1,b} = \dbinom{a+b-1}{b}.
$$&lt;/p&gt;

&lt;p&gt;No obstante, entre ellas habrá algunas que se caractericen por intersecar la recta diagonal $y=x$, que procederemos a sustraer utilizando el &lt;em&gt;Principio de reflexión de André&lt;/em&gt;. Aplicado a este caso particular, dicho principio afirma que el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $(a,b)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $(a,b)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(a,b) - (0,1) = (a,b-1)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{a+b-1,a} = \dbinom{a+b-1}{a}.
$$&lt;/p&gt;

&lt;p&gt;Por consiguiente, el número de trayectorias desde el origen de coordenadas hasta el punto $(a,b)$, que se sitúan por debajo de la recta diagonal $y=x$, son&lt;/p&gt;

&lt;p&gt;$$
\dbinom{a+b-1}{b} - \dbinom{a+b-1}{a}.
$$&lt;/p&gt;

&lt;p&gt;Finalmente,&lt;/p&gt;

&lt;p&gt;$$
P = \dfrac{C_{a+b-1,b} - C_{a+b-1,a}}{C_{a+b,a}} = \dfrac{\dbinom{a+b-1}{b} - \dbinom{a+b-1}{a}}{\dbinom{a+b}{a}}
$$&lt;/p&gt;

&lt;p&gt;es la probabilidad de que, en todo momento del escrutinio, $A$ vaya por delante de $B$. A modo anecdótico, podemos facilitar una expresión más compacta para $P$. Desarrollando,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
P &amp;amp;= \dfrac{\dfrac{(a+b-1)!}{b!(a-1)!} - \dfrac{(a+b-1)!}{a!(b-1)!}}{\dfrac{(a+b)!}{a!b!}} = \dfrac{\dfrac{a(a+b-1)!}{a!b!} - \dfrac{b(a+b-1)!}{a!b!}}{\dfrac{(a+b)!}{a!b!}}\\ &amp;amp;= \dfrac{(a-b)(a+b-1)!}{(a+b)(a+b-1)!} = \dfrac{a-b}{a+b},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;llegamos a una sencilla expresión para rápidamente calcular la probabilidad de interés.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seguimos de rutas</title>
      <link>https://imalexissaez.github.io/2019/05/25/seguimos_de_rutas/</link>
      <pubDate>Sat, 25 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/25/seguimos_de_rutas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 80:&lt;/strong&gt; Sea el plano $E$ cuadriculado por las rectas $x=m$ e $y=n$, con $m$ y $n$ números enteros. El punto $P(m,n)$ es un nudo de la cuadrícula. Una sucesión de nudos se llama trayectoria. Se consideran las trayectorias ascendentes $T_a$ en las que se pasa de un nudo al siguiente por la traslación $u$ o por la traslación $v$, donde $(O,u,v)$ es un sistema ortogonal. La longitud de una trayectoria es el número de traslaciones $u$ o $v$ que tiene.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Determina el número $T_a(O,P)$ que van del origen $O$ al punto $P(m,n)$ ($m\geq0$, $n\geq0$) y el número de trayectorias $T^{\prime}_a(P^{\prime},P)$ que van del punto $P^{\prime}(m^{\prime},n^{\prime})$ al punto $P(m,n)$ con $m^{\prime}\leq m$ y $n^{\prime}\leq n$.&lt;/li&gt;
&lt;li&gt;(b) Calcula el número de trayectorias de longitud $h$, $T_a$, que parten del origen.&lt;/li&gt;
&lt;li&gt;(c) Sea $P(m,n)$, con $m&amp;gt;n$. Calcula el número $T_{a_1}(O,P)$ de trayectorias que van de $O$ a $P$ por debajo de la diagonal $y=x$.&lt;/li&gt;
&lt;li&gt;(d) Sea $P(n,n)$. Halla el número de trayectorias $T_{a_2}(O,P)$ que van de $O$ a $P$ por encima o por debajo de la diagonal principal sin tocarla nada más que en los puntos $O$ y $P$.&lt;/li&gt;
&lt;li&gt;(e) Se lanza una moneda $2n$ veces, ¿cuál es la probabilidad de obtener $n$ caras y $n$ cruces? Se supone que la igualdad no se alcanza antes del último lanzamiento.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;El presente problema, en planteamiento, es similar (en parte) al que figura en el &lt;a href=&#34;https://imalexissaez.github.io/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/&#34;&gt;problema anterior&lt;/a&gt;, de manera que haremos uso aquí de algunos de los resultados alcanzados allí. Así, la situación que se plantea queda ilustrada en el siguiente diagrama.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190525-img01.png&#34; &gt;

&lt;img src=&#34;20190525-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Planteamiento gráfico del problema.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;En el apartado (a) nos piden obtener el número de trayectorias (que en el ejercicio anterior designábamos por rutas) desde el origen de coordenadas hasta el punto $P(m,n)$. Sabemos que dicha cifra se corresponde con la elección de $m$ posibilidades tomadas de un total de $m+n$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{m+n,m} = \dbinom{m+n}{m},
$$&lt;/p&gt;

&lt;p&gt;cantidad que es equivalente, asimismo, a $C_{m+n,n}$ o a $PR_{m+n}^{m,n}$.&lt;/p&gt;

&lt;p&gt;A continuación, para la segunda parte de este apartado, hemos de encontrar el total de rutas existentes entre los puntos $P^{\prime}(m^{\prime},n^{\prime})$ y $P(m,n)$. Dicha cifra es equivalente, por traslación, al número de rutas entre el origen de coordenadas y el punto $(m,n) - (m^{\prime},n^{\prime}) = (m-m^{\prime},n-n^{\prime})$. Por tanto, hay&lt;/p&gt;

&lt;p&gt;$$
C_{m+n-m^{\prime}-n^{\prime}, m-m^{\prime}} = \dbinom{m+n-m^{\prime}-n^{\prime}}{m-m^{\prime}}
$$&lt;/p&gt;

&lt;p&gt;rutas existentes entre los puntos $P^{\prime}(m^{\prime},n^{\prime})$ y $P(m,n)$.&lt;/p&gt;

&lt;p&gt;Para el apartado (b), por el razonamiento que se encuentra en el ejercicio citado, concluimos que el número de trayectorias de longitud $h$ es&lt;/p&gt;

&lt;p&gt;$$
\dbinom{h}{0} + \dbinom{h}{1} + \dbinom{h}{2} + \cdots + \dbinom{h}{h} = 2^h.
$$&lt;/p&gt;

&lt;p&gt;Acto seguido, para el apartado (c), nos apoyaremos en el diagrama que aparece en la siguiente figura, donde hemos añadido al anterior la recta diagonal de ecuación $y=x$.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190525-img02.png&#34; &gt;

&lt;img src=&#34;20190525-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Planteamiento gráfico del apartado (c).&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Buscamos todas las rutas existentes entre el origen de coordenadas y el punto $P(m,n)$ que se sitúen por debajo de la mencionada diagonal, esto es, que no posean intersección con ella. Obligatoriamente, todas ellas empezarán desde el punto $(1,0)$, ya que de hacerlo desde $(0,1)$, parte de la ruta se situaría por encima de la diagonal $y=x$.&lt;/p&gt;

&lt;p&gt;Así pues, hallemos el total de rutas existentes entre el punto $(1,0)$ y el punto $P(m,n)$ que, por traslación, sabemos es equivalente a la cantidad de rutas entre el origen de coordenadas y el punto $(m,n) - (1,0) = (m-1,n)$ y esta última cifra asciende a&lt;/p&gt;

&lt;p&gt;$$
C_{m+n-1,n} = \dbinom{m+n-1}{n}.
$$&lt;/p&gt;

&lt;p&gt;No obstante, entre ellas habrá algunas que se caractericen por intersecar la diagonal $y=x$, que procedemos a sustraer utilizando el &lt;em&gt;Principio de reflexión de André&lt;/em&gt;. Aplicado a este caso particular, dicho principio afirma que el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $P(m,n)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $P(m,n)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (0,1) = (m,n-1)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{m+n-1,m} = \dbinom{m+n-1}{m}.
$$&lt;/p&gt;

&lt;p&gt;Por consiguiente, el número de trayectorias desde el origen de coordenadas hasta el punto $P(m,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son&lt;/p&gt;

&lt;p&gt;$$
\dbinom{m+n-1}{n} - \dbinom{m+n-1}{m}.
$$&lt;/p&gt;

&lt;p&gt;Siendo estrictos, en realidad el primer punto de partida es $(2,0)$ y no $(1,0)$, puesto que si de este último efectuamos un &amp;ldquo;paso hacia arriba&amp;rdquo; se produciría una intersección con la recta diagonal $y=x$. No obstante, el &lt;em&gt;Principio de reflexión de André&lt;/em&gt; nos permite empezar, sin problema alguno, desde $(1,0)$, ya que descontará las rutas que no satisfagan la condición impuesta en el enunciado para este apartado. No obstante, si optamos por empezar desde $(2,0)$, el procedimiento a seguir es análogo al mostrado en párrafos anteriores. El total de rutas de rutas desde el punto $(2,0)$ al punto $P(m,n)$, por traslación, equivale a la cantidad de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (2,0) = (m-2,n)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{m+n-2,n} = \dbinom{m+n-2}{n}.
$$&lt;/p&gt;

&lt;p&gt;Ahora, por el &lt;em&gt;Principio de reflexión de André&lt;/em&gt;, el número de trayectorias que van desde el punto $(2,0)$ hasta el punto $P(m,n)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,2)$ (simétrico de $(2,0)$ respecto de la recta $y=x$) hasta el punto $P(m,n)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (0,2) = (m,n-2)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{m+n-2,m} = \dbinom{m+n-2}{m}.
$$&lt;/p&gt;

&lt;p&gt;Por tanto, el número de trayectorias desde el origen de coordenadas hasta el punto $P(m,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son&lt;/p&gt;

&lt;p&gt;$$
\dbinom{m+n-2}{n} - \dbinom{m+n-2}{m},
$$&lt;/p&gt;

&lt;p&gt;y esta diferencia coincide con la calculada anteriormente.&lt;/p&gt;

&lt;p&gt;En el apartado (d), la situación se ilustra en el diagrama que figura en la imagen siguiente. El modo de proceder es similar al seguido en el apartado previo, pues las rutas que se sitúan por debajo necesariamente han de comenzar por el punto $(1,0)$; pero con una salvedad: han de llegar al punto $P(n,n)$ a través del punto $(n,n-1)$, para así efectivamente situarse por debajo de la recta diagonal $y=x$. En el apartado anterior, como $m&amp;gt;n$, no era necesario exigir esta última condición, puesto que el punto $P(m,n)$ se situaba &amp;ldquo;lejos&amp;rdquo; de la condición que impone la diagonal $y=x$. Así pues, hallaremos el total de rutas comprendidas entre los puntos $(1,0)$ y $(n,n-1)$, para luego sustraer aquellas que intersecan la diagonal $y=x$, utilizando el &lt;em&gt;Principio de reflexión de André&lt;/em&gt;.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190525-img03.png&#34; &gt;

&lt;img src=&#34;20190525-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Planteamiento gráfico del apartado (d).&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;El número de rutas existente entre los puntos $(1,0)$ y $(n,n-1)$ equivale, por traslación, al total de rutas entre el origen de coordenadas y el punto $(n,n-1) - (1,0) = (n-1,n-1)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{2n-2, n-1} = \dbinom{2n-2}{n-1}.
$$&lt;/p&gt;

&lt;p&gt;Ahora, por el &lt;em&gt;Principio de reflexión de André&lt;/em&gt;, el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $(n,n-1)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $(n,n-1)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(n,n-1) - (0,1) = (n,n-2)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{2n-2,n} = \dbinom{2n-2}{n}.
$$&lt;/p&gt;

&lt;p&gt;Por tanto, el número de trayectorias desde el origen de coordenadas hasta el punto $P(n,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son&lt;/p&gt;

&lt;p&gt;$$
\dbinom{2n-2}{n-1} - \dbinom{2n-2}{n}.
$$&lt;/p&gt;

&lt;p&gt;Por simetría, el argumento se desarrolla de forma análoga para las trayectorias que se sitúan por encima de la recta diagonal $y=x$, por lo que únicamente hemos de duplicar el anterior resultado alcanzado&lt;/p&gt;

&lt;p&gt;$$
2\left(\dbinom{2n-2}{n-1} - \dbinom{2n-2}{n}\right)
$$&lt;/p&gt;

&lt;p&gt;para hallar el total de rutas existentes entre el origen de coordenadas y el punto $P(n,n)$ que se sitúan por encima o por debajo de la recta diagonal $y=x$, tocándola únicamente en $O$ y $P(n,n)$.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado (e), aplicaremos la &lt;em&gt;Regla de Laplace&lt;/em&gt; por tratarse de sucesos equiprobables y calcularemos tanto el número de casos favorables, como la cantidad de casos totales, utilizando trayectorias. Para empezar, la cifra de casos totales equivale al número de trayectorias entre el origen de coordenadas y el punto $P(n,n)$, esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{2n,n} = \dbinom{2n}{n}.
$$&lt;/p&gt;

&lt;p&gt;En cuanto al número de casos favorables, precisamente, es el resultado que obtuvimos en el apartado previo. Así,&lt;/p&gt;

&lt;p&gt;$$
P = \dfrac{2(C_{2n-2,n-1} - C_{2n-2,n})}{C_{2n,n}} = \dfrac{2\left(\dbinom{2n-2}{n-1} - \dbinom{2n-2}{n}\right)}{\dbinom{2n}{n}}
$$&lt;/p&gt;

&lt;p&gt;es la probabilidad de obtener $n$ caras y $n$ cruces si la igualdad entre estas no se alcanza antes del último lanzamiento.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breve introducción a los problemas de rutas</title>
      <link>https://imalexissaez.github.io/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/</link>
      <pubDate>Wed, 22 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 79:&lt;/strong&gt; ¿Cuántas rutas existen, desde la esquina inferior izquierda de una cuadrícula $n\times n$ a la esquina superior derecha, si los viajes se restringen solo a pasos de longitud unitaria a la derecha o hacia arriba?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Antes de abordar el problema en su versión general, tal y como reza el enunciado, estudiemos un caso concreto, como el que se muestra en la siguiente figura. En ella, hemos tomado $n=5$ y sobre la cuadrícula aparecen delineadas dos de las posibles rutas (una en verde y otra en rojo) que parten del origen de coordenadas $(0,0)$ y llegan hasta el punto $(5,5)$. Esto es, ambas parten desde la esquina inferior izquierda de la mencionada cuadrícula y arriban a su esquina superior derecha.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190522-img01.png&#34; &gt;

&lt;img src=&#34;20190522-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Representación simplificada del problema.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Si denotamos por $D$ a los pasos de longitud unitaria que se recorren hacia la derecha y por $A$ a los correspondientes que se efectúan hacia arriba, rápidamente apreciamos que, en cada una de las rutas que podamos imaginar, habrá cinco $D$ y otras cinco $A$. Es decir, toda ruta es una reordenación de la cadena $DDDDDAAAAA$. El número de tales cadenas que podemos escribir asciende al total de permutaciones con repetición de diez elementos, donde uno de ellos se repite cinco veces, mientras que el otro lo hace en el mismo número de ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{10}^{5,5} = \dfrac{10!}{5!5!} = \dfrac{10\cdot9\cdot8\cdot7\cdot6}{5!} = 252
$$&lt;/p&gt;

&lt;p&gt;rutas posibles cuando $n=5$.&lt;/p&gt;

&lt;p&gt;Alternativamente, podemos enfocar el problema como sigue: para llegar desde una esquina a la otra es necesario que efectuemos un total de diez de pasos, de los cuales cinco habrán de ser hacia la derecha (el mismo razonamiento es válido si consideramos dar los pasos hacia arriba). Como el orden en el que los demos no es importante, el número de maneras de dar cinco pasos a la derecha de un total de diez pasos equivale al total de combinaciones de diez elementos tomados de cinco es cinco, es decir,&lt;/p&gt;

&lt;p&gt;$$
C_{10,5} = \dbinom{10}{5} = \dfrac{10\cdot9\cdot8\cdot7\cdot6}{5!} = 252.
$$&lt;/p&gt;

&lt;p&gt;Si ahora consideramos una cuadrícula rectangular, de manera que la esquina superior derecha de la misma la situamos en el punto $(5,7)$, razonaríamos de manera análoga a como hicimos en el párrafo anterior. ¿Cuántos pasos hemos de efectuar para llegar desde el origen de coordenadas hasta el punto $(5,7)$? En las condiciones que impone el enunciado del ejercicio, serían $5+7=12$ los pasos requeridos. El número de rutas, entonces, ascendería al total de combinaciones de doce elementos tomados de cinco en cinco, $C_{12,5}$ (o bien $C_{12,7}$ si hacemos el razonamiento fijándonos en los pasos que deben darse hacia arriba), esto es,&lt;/p&gt;

&lt;p&gt;$$
C_{12,5} = C_{12,7} = \dbinom{12}{5} = \dfrac{12\cdot11\cdot10\cdot9\cdot8}{5!} = 792
$$&lt;/p&gt;

&lt;p&gt;son las rutas posibles en este caso.&lt;/p&gt;

&lt;p&gt;En general, dada una cuadrícula $m\times n$ el número de rutas que existen, desde su esquina inferior izquierda hasta su esquina superior derecha, si los viajes se restringen a pasos de longitud unitaria a la derecha o hacia arriba asciende a&lt;/p&gt;

&lt;p&gt;$$
C_{m+n,n} = \dbinom{m+n}{n}\qquad\text{o}\qquad C_{m+n,m}=\dbinom{m+n}{m}.
$$&lt;/p&gt;

&lt;p&gt;En nuestro caso concreto, como $m=n$, dicha cifra será&lt;/p&gt;

&lt;p&gt;$$
C_{2n,n} = \dbinom{2n}{n}.
$$&lt;/p&gt;

&lt;p&gt;Imaginemos, a continuación, que nos indican que estamos situados en el punto $(1,2)$. ¿Cuántas rutas distintas existen desde dicho punto a la esquina superior derecha de la cuadrícula, $(n,n)$? Esta cuestión la resolveríamos aplicando una traslación, puesto que el número de rutas entre los puntos $(1,2)$ y $(n,n)$ equivale al total de rutas entre $(0,0)$ y $(n-1,n-2)$ (simplemente hemos efectuado una traslación de vector $(1,2)$, es decir, sustraemos el mencionado vector a ambos puntos para obtener los finalmente mostrados). Dicha cifra, aplicando lo visto en párrafos anteriores, será&lt;/p&gt;

&lt;p&gt;$$
\dbinom{n-1+n-2}{n-1} = \dbinom{2n-3}{n-1} = C_{2n-3,n-1}
$$&lt;/p&gt;

&lt;p&gt;o bien $C_{2n-3,n-2}$.&lt;/p&gt;

&lt;p&gt;Consideremos ahora que la longitud de una ruta equivale al número de pasos realizados. Así, podríamos preguntamos, ¿cuántas rutas de longitud seis existen? Una ruta de longitud seis, en las condiciones que impone en el enunciado de este ejercicio, puede llevarnos a cualquiera de los puntos que se indican en la siguiente figura, por lo que la tarea se reduce entonces a contar el número de rutas existente desde el origen de coordenadas a cada uno de ellos.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190522-img02.png&#34; &gt;

&lt;img src=&#34;20190522-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Posibles longitudes de rutas.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Así, de $(0,0)$ a $(0,6)$ hay un total de $C_{6,0}$ rutas; de $(0,0)$ a $(1,5)$ encontramos $C_{6,1}$ rutas; de $(0,0)$ a $(2,4)$ hallamos $C_{6,2}$ rutas; y así sucesivamente. En total son&lt;/p&gt;

&lt;p&gt;$$
\dbinom{6}{0} + \dbinom{6}{1} + \dbinom{6}{2} + \dbinom{6}{3} + \dbinom{6}{4} + \dbinom{6}{5} + \dbinom{6}{6} = 2^6 = 64,
$$&lt;/p&gt;

&lt;p&gt;ya que,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{n}{0} + \dbinom{n}{1} + \dbinom{n}{2} + \cdots + \dbinom{n}{n} = \sum_{k=0}^{n}{\dbinom{n}{k}} = (1+1)^n = 2^n.
$$&lt;/p&gt;

&lt;p&gt;Por tanto, si ahora nos preguntasen por el total de rutas de longitud diez, directamente podríamos decir que son $2^{10} = 1024$.&lt;/p&gt;

&lt;p&gt;Este clásico problema, conocido como el de las &lt;em&gt;rutas equiprobables&lt;/em&gt;, nos permite dar respuesta a preguntas como: ¿de cuántas maneras podemos obtener cinco caras y cinco cruces al lanzar una moneda diez veces? En ejercicios anteriores, utilizando técnicas de combinatoria, hallamos que dicha cantidad equivalía a $PR_{10}^{5,5}$ o bien $C_{10,5}$. Un enfoque alternativo sería por conteo de rutas desde el origen de coordenadas hasta el punto de interés, $(5,5)$ en esta ocasión. Por otro lado, el total de rutas de longitud seis es, en otros términos, la cantidad de secuencias que podemos obtener al lanzar una moneda seis veces, que, por combinatoria, sabemos asciende a $VR_{2,6} = 2^6 = 64$. Así, los ejercicios de rutas fácilmente se extrapolan a otros contextos (sobre todo de monedas) y podemos resolver con ellas interrogantes del estilo: dado que he obtenido una cada y dos cruces, ¿de cuántas formas posibles puedo llegar a conseguir diez caras y diez cruces? La respuesta, como vimos en párrafos anteriores, la encontraríamos rápidamente tras aplicar una traslación de vector $(1,2)$ y contar después del número de rutas entre el origen de coordenadas y el punto $(9,8)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marchando uno de números combinatorios generalizados</title>
      <link>https://imalexissaez.github.io/2019/05/18/marchando-uno-de-numeros-combinatorios-generalizados/</link>
      <pubDate>Sat, 18 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/18/marchando-uno-de-numeros-combinatorios-generalizados/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 78:&lt;/strong&gt; Demuestra que, para cada número natural $n$,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{-1 / 2}{n} = \dbinom{2n}{n}\left(-\dfrac{1}{4}\right)^n.
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Utilizando la definición,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
\dbinom{-1 / 2}{n} &amp;amp;= \dfrac{\left(-\dfrac{1}{2}\right)\left(-\dfrac{1}{2}-1\right)\left(-\dfrac{1}{2}-2\right)\cdots\left(-\dfrac{1}{2} - (n-1)\right)}{n!}\\ &amp;amp;= \dfrac{\left(-\dfrac{1}{2}\right)\left(-\dfrac{3}{2}\right)\left(-\dfrac{5}{2}\right)\cdots\left(\dfrac{1-2n}{2}\right)}{n!}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;En el numerador encontramos $n$ factores, por lo que podremos extraer esa misma cantidad de signos negativos, quedando entonces $(-1)^n$ (atención a cómo quedaría el último factor tras esta acción). Además, hay $n$ doses en los denominadores de las fracciones que aparecen en el numerador, quedando su producto entonces $2^n$, valor que podemos trasladar al denominador de la expresión. Por consiguiente,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{-1 / 2}{n} = (-1)^n\cdot\dfrac{1\cdot3\cdot5\cdots (2n-1)}{2^nn!}.
$$&lt;/p&gt;

&lt;p&gt;Ahora, multipliquemos y dividamos por el producto de números pares $2\cdot4\cdot6\cdots 2n$ (llegamos a $2n$ y no hasta $2n-2$ por la expresión a la que buscamos arribar), provocando así que en el numerador aparezca el factorial de $2n$,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{-1 / 2}{n} = (-1)^n\dfrac{1\cdot2\cdot3\cdot4\cdot5\cdots (2n-1)\cdot 2n}{(2\cdot4\cdot6\cdots 2n) 2^n n!} = (-1)^n\dfrac{(2n)!}{(2\cdot4\cdot6\cdots 2n) 2^n n!}.
$$&lt;/p&gt;

&lt;p&gt;Además, sacando un dos de cada factor, y teniendo en cuenta que hay $n$ de ellos, es cierto que,&lt;/p&gt;

&lt;p&gt;$$
2\cdot4\cdot6\cdots 2n = 2^n(1\cdot2\cdot3\cdots n) = 2^n n!,
$$&lt;/p&gt;

&lt;p&gt;y sustituyendo el resultado alcanzado en la expresión anterior,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{-1 / 2}{n} = (-1)^n\dfrac{(2n)!}{(2^n n!) (2^n n!)}.
$$&lt;/p&gt;

&lt;p&gt;Como $2^n\cdot 2^n = 2^{2n} = 4^n$,&lt;/p&gt;

&lt;p&gt;$$
\dbinom{-1 / 2}{n} = (-1)^n\dfrac{(2n)!}{4^n n! n!} = \dfrac{(-1)^n}{4^n}\dbinom{2n}{n} = \dbinom{2n}{n}\left(-\dfrac{1}{4}\right)^n ,
$$&lt;/p&gt;

&lt;p&gt;tal y como queríamos demostrar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refinando el ejercicio del último día</title>
      <link>https://imalexissaez.github.io/2019/05/15/refinando-el-ejercicio-del-ultimo-dia/</link>
      <pubDate>Wed, 15 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/15/refinando-el-ejercicio-del-ultimo-dia/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 77:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Calcula el número de soluciones enteras no negativas de $$x_1+x_2+x_3+x_4+x_5+x_6=10.$$&lt;/li&gt;
&lt;li&gt;(b) ¿Cuántas soluciones enteras no negativas posee la inecuación $$x_1+x_2+x_3+x_4+x_5+x_6 &amp;lt; 10 ?$$&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), razonaremos, como viene siendo ya habitual, en términos de urnas indistinguibles y bolas idénticas. Consideraremos que tenemos en nuestro haber seis de dichas urnas, en las que deseamos colocar diez de las mencionadas bolas. Aplicando la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt; necesitamos cinco &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las seis urnas y buscamos ubicar luego diez &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de seis variables puede ascender a diez, equivale a la cantidad de permutaciones con repetición de $15$ elementos, donde uno de ellos se repite cinco veces, mientras que el otro lo hace en diez ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{15}^{5,10} = CR_{6,10} = \dbinom{15}{10} = \dfrac{15\cdot14\cdot13\cdot12\cdot11}{5!} = 3003
$$&lt;/p&gt;

&lt;p&gt;soluciones enteras no negativas para la ecuación propuesta.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (b), nos encontramos en una situación parecida a la del &lt;a href=&#34;https://imalexissaez.github.io/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/&#34;&gt;ejercicio anterior&lt;/a&gt; aunque observamos una desigualdad estricta. En primer lugar, cambiaremos adecuadamente el signo $&amp;lt;$ por $\leq$ y luego procederemos como en aquel problema. Así, como estamos interesados en soluciones enteras no negativas, es cierto que&lt;/p&gt;

&lt;p&gt;$$
x_1+x_2+x_3+x_4+x_5+x_6 &amp;lt; 10 \Leftrightarrow x_1+x_2+x_3+x_4+x_5+x_6\leq 9.
$$&lt;/p&gt;

&lt;p&gt;A continuación, introducimos una urna adicional, en la forma de una nueva variable, $x_7$, para así transformar la inecuación en una ecuación. Por tanto, el problema se reduce a averiguar el número de soluciones enteras no negativas de la ecuación&lt;/p&gt;

&lt;p&gt;$$
x_1+x_2+x_3+x_4+x_5+x_6+x_7=9.
$$&lt;/p&gt;

&lt;p&gt;Aplicando la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt; necesitamos seis &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las siete urnas y buscamos ubicar luego nueve &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de siete variables puede ascender a nueve, equivale a la cantidad de permutaciones con repetición de $15$ elementos, donde uno de ellos se repite seis veces, mientras que el otro lo hace en nueve ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{15}^{6,9} = CR_{7,9} = \dbinom{15}{9} = \dfrac{15\cdot14\cdot13\cdot12\cdot11\cdot10}{6!} = 5005
$$&lt;/p&gt;

&lt;p&gt;soluciones enteras no negativas para la ecuación propuesta y, por tanto, asimismo para la inecuación planteada en el segundo apartado del ejercicio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando el total de soluciones de una inecuación</title>
      <link>https://imalexissaez.github.io/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/</link>
      <pubDate>Sat, 11 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 76:&lt;/strong&gt; Calcula el número de soluciones enteras no negativas de la inecuación&lt;/p&gt;

&lt;p&gt;$$
x+y+z+t\leq 2001.
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A diferencia de ejercicios anteriores, en el presente encontramos una inecuación en lugar de una ecuación. Razonando en términos de urnas indistinguibles y bolas idénticas, esta situación se traduce en que, para ciertos repartos, algunas de las $2001$ bolas pueden quedar fuera de las cuatro urnas que emplearíamos para representar las variables $x$, $y$, $z$ y $t$. Así pues, procederemos generando una urna adicional, para una variable $u$, que será aquella donde depositemos el exceso de bolas del reparto. Por tanto, la inecuación planteada quedaría ahora como la ecuación&lt;/p&gt;

&lt;p&gt;$$
x+y+z+t+u=2001,
$$&lt;/p&gt;

&lt;p&gt;de la cual deseamos encontrar el número de soluciones enteras no negativas.&lt;/p&gt;

&lt;p&gt;Ahora ya estamos en condiciones de volver a utilizar las estrategias vistas en ejercicios previos. Aplicando la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos cuatro &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las cinco urnas y buscamos ubicar luego $2001$ &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de cinco variables puede ascender a $2001$, equivale a la cantidad de permutaciones con repetición de $2005$ elementos, donde uno de ellos se repite cuatro veces, mientras que el otro lo hace en $2001$ ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
PR_{2005}^{4,2001} &amp;amp;= CR_{5,2001} \\ &amp;amp;= \dbinom{2005}{2001} \\ &amp;amp;= \dfrac{2005\cdot2004\cdot2003\cdot2002}{4!} \\ &amp;amp;= 671345179505
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;soluciones enteras no negativas para la ecuación propuesta y, por tanto, asimismo para la inecuación planteada en el enunciado del ejercicio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secantes dos a dos, pero tres a tres no concurrentes</title>
      <link>https://imalexissaez.github.io/2019/05/08/secantes-dos-a-dos-pero-tres-a-tres-no-concurrentes/</link>
      <pubDate>Wed, 08 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/08/secantes-dos-a-dos-pero-tres-a-tres-no-concurrentes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 75:&lt;/strong&gt; Trazamos en un plano $n$ rectas secantes dos a dos, pero tres a tres no concurrentes, ¿en cuántas regiones queda dividido el plano?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Claramente observamos, en la siguiente imagen, que dos rectas secantes dividen el plano en cuatro regiones. Al añadir una nueva recta, de manera que las tres no sean concurrentes en un punto, necesariamente aparecerán dos nuevos puntos de intersección con las rectas originales (puesto que la incorporada no puede ser paralela a las existentes, al existir la restricción de que las rectas sean secantes dos a dos), hecho que implica que la recta subdivide en dos tres de las cuatro regiones en las que se encontraba dividido el plano, produciendo entonces en total siete regiones ($4+3 = 7$).&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190508-img01.png&#34; &gt;

&lt;img src=&#34;20190508-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Representación gráfica.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Una cuarta recta, que fuese secante dos a dos con las tres anteriores, daría lugar a tres nuevos puntos de intersección, situación que provocaría que cuatro de las anteriores regiones quedasen, cada una de ellas, subdividas en dos nuevas regiones. En total, contaríamos pues con once regiones ($7 + 4 = 11$).&lt;/p&gt;

&lt;p&gt;En general, denotemos por $R_n$ al número de regiones en que el plano queda dividido por $n$ rectas que son secantes dos a dos, pero tres a tres no concurrentes. Al incorporar una nueva recta, que será secante dos a dos con todas las anteriores, esta dará lugar a $n$ nuevos puntos de intersección (ya que no será concurrente tres a tres con ninguno de los pares presentes), hecho que provoca que, de las $R_n$ regiones que se contaban antes de introducir la nueva recta, $n+1$ queden, cada una de ellas, subdividas en dos regiones. Así, es cierto que, para cada número natural $n$,&lt;/p&gt;

&lt;p&gt;$$
R_{n+1} = R_n + (n+1),
$$&lt;/p&gt;

&lt;p&gt;dando lugar a una ecuación en diferencias lineal completa de orden uno. Su ecuación homogénea asociada es $R_{n+1} - R_n = 0$, con ecuación característica correspondiente $\lambda - 1 = 0$, esto es, $\lambda = 1$. Así, la solución para dicha ecuación homogénea es $R_h = c_1$, con $c_1\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Ahora, como el término independiente, $n+1$, es un polinomio de grado uno en $n$ y $\lambda = 1$ es una raíz simple de la ecuación característica, proponemos como solución particular $n^1(an+b) = an^2+bn$ y sustituyendo en la ecuación en diferencias inicial, queda&lt;/p&gt;

&lt;p&gt;$$
a(n+1)^2 + b(n+1) - an^2 - bn = n+1.
$$&lt;/p&gt;

&lt;p&gt;Operando, llegamos a que $2an + (a+b) = n+1$ e igualando coeficientes $a = b = 1 / 2$, por lo que la solución particular a la ecuación en diferencias planteada es, para cada número natural $n$, $R_p = (n^2+n)/2$.&lt;/p&gt;

&lt;p&gt;Por consiguiente, la solución general a la ecuación en diferencias propuestas, que es la suma de la solución para la ecuación homogénea y la solución particular, es&lt;/p&gt;

&lt;p&gt;$$
R_n = c_1 + \dfrac{n^2+n}{2},
$$&lt;/p&gt;

&lt;p&gt;con $c_1\in\mathbb{R}$. Dado que para $n = 2$ hemos establecido, al principio del ejercicio, que $R_2 = 4$, sustituyendo podemos averiguar el valor de $c_1$. Así,&lt;/p&gt;

&lt;p&gt;$$
4 = c_1 + \dfrac{2^2+2}{2},
$$&lt;/p&gt;

&lt;p&gt;esto es, $c_1 = 1$ y concluimos que, para cada número natural $n$,&lt;/p&gt;

&lt;p&gt;$$
R_n = \dfrac{n^2+n+2}{2}
$$&lt;/p&gt;

&lt;p&gt;es el número de regiones en que queda dividido un plano cuando trazamos $n$ rectas secantes dos a dos, pero tres a tres no concurrentes.&lt;/p&gt;

&lt;p&gt;Alternativamente, por tanteo de unos cuantos casos particulares para los primeros valores de $n$, obtenemos la siguiente tabla&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$n$&lt;/th&gt;
&lt;th&gt;$1$&lt;/th&gt;
&lt;th&gt;$2$&lt;/th&gt;
&lt;th&gt;$3$&lt;/th&gt;
&lt;th&gt;$4$&lt;/th&gt;
&lt;th&gt;$5$&lt;/th&gt;
&lt;th&gt;$6$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$R_n$&lt;/td&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;td&gt;$4$&lt;/td&gt;
&lt;td&gt;$7$&lt;/td&gt;
&lt;td&gt;$11$&lt;/td&gt;
&lt;td&gt;$16$&lt;/td&gt;
&lt;td&gt;$22$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$\Delta R_n$&lt;/td&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;td&gt;$3$&lt;/td&gt;
&lt;td&gt;$4$&lt;/td&gt;
&lt;td&gt;$5$&lt;/td&gt;
&lt;td&gt;$6$&lt;/td&gt;
&lt;td&gt;$7$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$\Delta^2 R_n$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Por consiguiente, la sucesión $(R_n)$ es una progresión aritmética de orden dos, luego, por los resultados teóricos asociados a este tipo de sucesiones,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
R_n &amp;amp;= \dbinom{n-1}{0}R_1 + \dbinom{n-1}{1}\Delta R_1 + \dbinom{n-1}{2}\Delta^2 R_1\\ &amp;amp;= 1\cdot2 + (n-1)\cdot2 + \dfrac{(n-1)(n-2)}{2}\cdot1\\ &amp;amp;= \dfrac{4 + 4(n-1) + (n-1)(n-2)}{2}\\ &amp;amp;= \dfrac{n^2+n+2}{2},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;arribando al mismo resultado que antes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tres dados buscando sumar diez</title>
      <link>https://imalexissaez.github.io/2019/05/04/tres-dados-buscando-sumar-diez/</link>
      <pubDate>Sat, 04 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/04/tres-dados-buscando-sumar-diez/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 74:&lt;/strong&gt; En el lanzamiento simultáneo de tres dados distintos, ¿de cuántas maneras la suma de las puntuaciones puede ascender a diez?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Si asumimos que trabajamos con tres dados estándar y representamos por $x_i$ la puntuación obtenida en el lanzamiento del $i$-ésimo dado, con $1\leq i\leq 3$, buscamos encontrar el número de soluciones enteras de la ecuación $x_1+x_2+x_3 = 10$, donde $1\leq x_i\leq 6$, para $1\leq i\leq 3$.&lt;/p&gt;

&lt;p&gt;Seguiremos, a continuación, el mismo esquema que figura en el &lt;a href=&#34;https://imalexissaez.github.io/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/&#34;&gt;ejercicio anterior&lt;/a&gt;, esto es, utilizaremos el &lt;em&gt;Principio de complementación&lt;/em&gt;, de forma que calcularemos el número de soluciones enteras no negativas (que satisfagan las restricciones de mayor o igual para las variables involucradas) de la ecuación propuesta y, después, haciendo uso del &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;, descontaremos aquellas que no satisfagan las restricciones impuestas.&lt;/p&gt;

&lt;p&gt;Así pues, empecemos planteando la ecuación $x_1+x_2+x_3=10$, con $x_i\geq 1$ para todo $1\leq i\leq 3$. Pensando en términos de urnas y bolas, hemos de almacenar una bola en cada urna y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3=7$, ahora con $x_i\geq 0$, para $1\leq i\leq 3$. Aplicando la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt;, como en ejercicios previos, sabemos que dicho número equivale al total de permutaciones con repetición de nueve elementos, donde uno de ellos se repite dos veces, mientras que el otro lo hace en siete ocasiones, esto es,&lt;/p&gt;

&lt;p&gt;$$
PR_{9}^{2,7} = CR_{3,7} = \dbinom{9}{7} = \dfrac{9\cdot8}{2!} = 36.
$$&lt;/p&gt;

&lt;p&gt;Definamos, acto seguido, los conjuntos $A_i = \{x_i\geq 7\}$, para $1\leq i\leq 3$, por lo que estamos interesados en hallar el valor de $card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3})$. Por el &lt;em&gt;Principio de complementación&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3}) = card(E) - card(A_1\cup A_2\cup A_3),
$$&lt;/p&gt;

&lt;p&gt;donde por $E$ representamos al &lt;em&gt;conjunto total&lt;/em&gt;, que en este contexto se refiere al total de soluciones enteras no negativas de la ecuación planteada y cuyo cardinal hemos obtenido en párrafos anteriores, $PR_{9}^{2,7} = 36$. Aplicando ahora el &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
card\left(\bigcup_{i=1}^{3}{A_i}\right) = \sum_{i=1}^{3}{card(A_i)} - \sum_{1\leq i&amp;lt;j\leq 3}{card(A_i\cap A_j)} + card\left(\bigcap_{i=1}^{3}{A_i}\right).
$$&lt;/p&gt;

&lt;p&gt;Estudiemos ahora el conjunto $A_1 = \{x_1\geq 7\}$ y averigüemos $card(A_1)$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3=10$, con $x_1\geq 7$, $x_i\geq 1$ para $2\leq i\leq 3$. Pensando en términos de urnas y bolas, hemos de almacenar siete bolas en la primera urna, una en la segunda, una en la tercera y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3=1$, ahora con $x_i\geq 0$, para $1\leq i\leq 3$. Aplicando, de manera análoga a como lo hicimos arriba, la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt;, sabemos que dicho número equivale al total de permutaciones con repetición de tres elementos, donde uno de ellos se repite dos veces, mientras que el otro lo hace en una ocasión, esto es,&lt;/p&gt;

&lt;p&gt;$$
PR_{3}^{1,2} = CR_{3,1} = \dbinom{3}{1} = 3.
$$&lt;/p&gt;

&lt;p&gt;Por simetría, $card(A_1)=card(A_2)=card(A_3)=3$, de manera que&lt;/p&gt;

&lt;p&gt;$$
\sum_{i=1}^{3}{card(A_i)} = 9.
$$&lt;/p&gt;

&lt;p&gt;Por lo que respecta al resto de casos, cuando intersecamos dos o más conjuntos las restricciones imponen una suma mayor o igual que $14$, por lo que es imposible que se satisfaga en enteros no negativos la ecuación $x_1+x_2+x_3=10$, esto es, los cardinales asociados a las correspondientes intersecciones serán nulos.&lt;/p&gt;

&lt;p&gt;Por tanto, recapitulando,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3}) = 36-9 = 27
$$&lt;/p&gt;

&lt;p&gt;son las maneras en las que, en el lanzamiento simultáneo de tres dados distintos, la suma de las puntuaciones asciende a diez.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Una vuelta de tuerca para la estrategia de barras y estrellas</title>
      <link>https://imalexissaez.github.io/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/</link>
      <pubDate>Wed, 01 May 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 73:&lt;/strong&gt; ¿Cuántos números naturales menores que $10000$ cumplen que la suma de sus cifras es $25$?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Los números $n$ que nos interesan satisfacen que $0\leq n\leq 9999$, esto es, pueden tener hasta cuatro cifras. Como la suma de estas debe ascender a $25$, planteamos la ecuación&lt;/p&gt;

&lt;p&gt;$$
x_1+x_2+x_3+x_4=25,
$$&lt;/p&gt;

&lt;p&gt;donde $0\leq x_i\leq 9$, con $1\leq i\leq 4$ y representando cada $x_i$ una de las cifras de los números buscados.&lt;/p&gt;

&lt;p&gt;En ejercicios anteriores analizamos cómo encontrar todas las soluciones enteras no negativas de una ecuación como la planteada, e incluso vimos cuál era la forma de proceder cuando algunas de las variables quedaban afectadas por restricciones de mayor o igual. La forma de resolver este tipo de problemas, cuando surgen restricciones de menor o igual afectando a las variables, será la siguiente: utilizaremos el &lt;em&gt;Principio de complementación&lt;/em&gt;, de forma que calcularemos el número de soluciones enteras no negativas de la ecuación propuesta y, después, haciendo uso del &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;, descontaremos aquellas que no satisfagan las restricciones impuestas.&lt;/p&gt;

&lt;p&gt;Así pues, empecemos planteando la ecuación&lt;/p&gt;

&lt;p&gt;$$
x_1+x_2+x_3+x_4=25,
$$&lt;/p&gt;

&lt;p&gt;con $x_i\geq 0$ para todo $1\leq i\leq 4$. Consideremos ahora las cuatro variables como cuatro &lt;em&gt;urnas&lt;/em&gt; indistinguibles y el valor que aparece en el miembro derecho de la ecuación, $25$, como las $25$ &lt;em&gt;bolas&lt;/em&gt; idénticas que vamos a introducir en las urnas. Utilizando la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos tres &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las cuatro urnas y buscamos ubicar luego $25$ &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de cuatro variables puede ascender a $25$, equivale a la cantidad de permutaciones con repetición de $28$ elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en $25$ ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{28}^{3,25} = CR_{4,25} = \dbinom{28}{25} = \dfrac{28\cdot27\cdot26}{3!} = 3276
$$&lt;/p&gt;

&lt;p&gt;soluciones enteras no negativas para la ecuación que acabamos de plantear. Entre ellas, será válida, por ejemplo, una solución como $x_1=25$ y $x_2=x_3=x_4=0$, que en el contexto que plantea el enunciado del presente ejercicio es absurda, pues recordemos habíamos dotado a cada una de las variables el significado de ser cifras y, por tanto, sus valores han de estar comprendidos entre cero y nueve. Veamos pues, a continuación, como descontar este tipo de soluciones incorrectas.&lt;/p&gt;

&lt;p&gt;Definamos, acto seguido, los conjuntos $A_i=\{x_i\geq 10\}$, por lo que estamos interesados en hallar el valor de $card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3} \cap \overline{A_4})$. Por el &lt;em&gt;Principio de complementación&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3} \cap \overline{A_4}) = card(E) - card(A_1\cup A_2\cup A_3\cup A_4),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;donde por $E$ representamos al &lt;em&gt;conjunto total&lt;/em&gt;, que en este contexto se refiere al total de soluciones enteras no negativas de la ecuación planteada y cuyo cardinal hemos obtenido en párrafos anteriores, $PR_{28}^{3,25} = 3276$. Aplicando ahora el &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
card\left(\bigcup_{i=1}^{4}{A_i}\right) = \sum_{i=1}^{4}{card(A_i)} - \sum_{1\leq i&amp;lt;j\leq 4}{card(A_i\cap A_j)} + \cdots + (-1)^{n+1}card\left(\bigcap_{i=1}^{4}{A_i}\right).
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Estudiemos ahora el conjunto $A_1 = \{x_1\geq 10\}$ y averigüemos $card(A_1)$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3+x_4=25$, con $x_1\geq 10$, $x_i\geq 0$ para $2\leq i\leq 4$. Pensando en términos de urnas y bolas, hemos de almacenar diez bolas en la primera urna y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3+x_4=15$, ahora con $x_i\geq 0$, para $1\leq i\leq 4$. Aplicando, de manera análoga a como lo hicimos arriba, la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt;, sabemos que dicho número equivale al total de permutaciones con repetición de $18$ elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en $15$ ocasiones, esto es,&lt;/p&gt;

&lt;p&gt;$$
PR_{18}^{3,15} = CR_{4,15} = \dbinom{18}{15} = \dfrac{18\cdot17\cdot16}{3!} = 816.
$$&lt;/p&gt;

&lt;p&gt;Por simetría, $card(A_1)=card(A_2)=card(A_3)=card(A_4)=816$, de manera que&lt;/p&gt;

&lt;p&gt;$$
\sum_{i=1}^{4}{card(A_i)} = 4\cdot816 = 3264.
$$&lt;/p&gt;

&lt;p&gt;Acto seguido, hallemos $card(A_1\cap A_2)$, donde $A_1\cap A_2 = \{x_1\geq 10, x_2\geq 10\}$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3+x_4=25$, con $x_1\geq 10$, $x_2\geq 10$ y $x_i\geq 0$ para $3\leq i\leq 4$. Razonando en términos de urnas y bolas, hemos de almacenar diez bolas en la primera urna, otras tantas en la segunda urna y pasar a buscar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3+x_4=5$, ahora con $x_i\geq 0$, para $1\leq i\leq 4$. Utilizando, como antes, la técnica de &lt;em&gt;barras y estrellas&lt;/em&gt;, sabemos que el mencionado número equivale al total de permutaciones con repetición de ocho elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en cinco ocasiones, es decir,&lt;/p&gt;

&lt;p&gt;$$
PR_{8}^{3,5} = CR_{4,5} = \dbinom{8}{5} = \dfrac{8\cdot7\cdot6}{3!} = 56.
$$&lt;/p&gt;

&lt;p&gt;Por simetría, el resto de cardinales de los conjuntos $A_i\cap A_j$, con $1\leq i&amp;lt;j\leq 4$ ascenderán al mismo valor. Como el orden en el que seleccionemos los conjuntos implicados no tiene relevancia y no existe posibilidad de repetir elemento alguno, en total su número será igual a la cantidad de combinaciones de cuatro elementos tomados de dos en dos, $C_{4,2}$, luego&lt;/p&gt;

&lt;p&gt;$$
\sum_{1\leq i&amp;lt;j\leq 4}{card(A_i\cap A_j)} = C_{4,2}\cdot PR_{8}^{3,5} = \dbinom{4}{2}\cdot 56 = 336.
$$&lt;/p&gt;

&lt;p&gt;A continuación, el cardinal de los conjuntos $A_i\cap A_j\cap A_k$, con $1\leq i&amp;lt;j&amp;lt;k\leq 4$ y el del conjunto $A_1\cap A_2\cap A_3\cap A_4$ será cero, pues si tres o más variables poseen un valor mayor o igual que diez, es imposible satisfacer la ecuación $x_1+x_2+x_3+x_4=25$ en los enteros no negativos. Por tanto, recapitulando,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{A_1} \cap \overline{A_2} \cap \overline{A_3} \cap \overline{A_4}) = 3276 - (3264 - 336) = 346
$$&lt;/p&gt;

&lt;p&gt;son los números naturales menores que $10000$ que cumplen que la suma de sus cifras es $25$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curso Python (Nivel básico)</title>
      <link>https://imalexissaez.github.io/proyecto/python-basic/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:01 +0100</pubDate>
      <guid>https://imalexissaez.github.io/proyecto/python-basic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cuando bailar se convierte en un problema matemático</title>
      <link>https://imalexissaez.github.io/2019/04/27/cuando-bailar-se-convierte-en-un-problema-matematico/</link>
      <pubDate>Sat, 27 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/27/cuando-bailar-se-convierte-en-un-problema-matematico/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 72:&lt;/strong&gt; En una fiesta, a la que acuden seis chicos y seis chicas, comienza a sonar la primera canción,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) ¿de cuantas formas pueden organizarse para bailar todos ellos por parejas? (Asume que una pareja está conformada por un chico y una chica).&lt;/li&gt;
&lt;li&gt;(b) Como ninguna chica ha quedado contenta con el desempeño en el baile de su pareja, de cara a la segunda canción, ¿de cuántas maneras pueden organizarse para bailar por parejas de forma que no repitan con la anterior?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), consideremos, sin pérdida de generalidad, que las chicas escogen su pareja. La primera de ellas dispone, para su elección, de seis opciones, tantas como chicos han acudido a la fiesta. La segunda chica, una vez haya escogido la primera, puede seleccionar su pareja de entre los cinco chicos restantes, y así sucesivamente. Por tanto, utilizando la &lt;em&gt;regla del producto&lt;/em&gt;, se pueden organizar de&lt;/p&gt;

&lt;p&gt;$$
6\cdot5\cdot4\cdot3\cdot2\cdot1 = 6! = 720
$$&lt;/p&gt;

&lt;p&gt;formas posibles para bailar por parejas la primera canción.&lt;/p&gt;

&lt;p&gt;Alternativamente, y pensando ya más bien en el próximo apartado, imaginemos que la situación a la hora de emparejarse se produce como sigue: situemos en una fila a los chicos y, en frente de ellos, en otra fila parelela a las chicas. Ellas poseen en sus manos un papel con un número del $1$ al $6$, al igual que ellos. Supongamos que los números de los chicos están ordenados de menor a mayor, situación que, abreviadamente, denotaremos por $123456$. Después, dejamos que las chicas intercambien sus posiciones entre ellas como deseen y saquen a bailar al chico que al final tengan en frente. Así, las chicas podrían ordenarse, en función de los números que llevan entre manos, como $654321$ y se formarían las parejas de baile $(1,6)$, $(2,5)$, $(3,4)$, $(4,3)$, $(5,2)$ y $(6,1)$, que podemos denotar de forma más abreviada como $123456\rightarrow 654321$. La pregunta que surge ahora es, ¿de cuántas maneras pueden ordenarse las seis chicas? Efectivamente, como el orden es importante y no es posible repetir elemento alguno (una chica no puede bailar a la vez con dos chicos), el total de formas coincide con la cantidad de permutaciones de seis elementos, esto es, $P_6 = 6! = 720$ maneras posibles.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (b), comencemos reduciendo un poco la magnitud del problema, para así visualizar cómo abordarlo. Consideremos únicamente tres chicos y tres chicas, y supongamos, por ejemplo, que para la primera canción las parejas se conformaron fueron $123\rightarrow 123$. Como en la segunda canción ninguna de ellas quiere repetir con la pareja anterior, las dos únicas opciones disponibles serían $123\rightarrow 231$ y $123\rightarrow 312$, esto es, los dos desarreglos.&lt;/p&gt;

&lt;p&gt;Por el &lt;a href=&#34;https://imalexissaez.github.io/2019/04/24/presentando-desarreglos/&#34;&gt;ejercicio anterior&lt;/a&gt;, y ya volviendo al problema que contempla seis chicos y seis chicas, sabemos que&lt;/p&gt;

&lt;p&gt;$$
D_6 = 6!\left(\dfrac{1}{2} - \dfrac{1}{6} + \dfrac{1}{24} - \dfrac{1}{120} + \dfrac{1}{720}\right) = 265
$$&lt;/p&gt;

&lt;p&gt;son las maneras en que pueden organizarse, para bailar por parejas los seis chicos y las seis chicas, de forma que no repitan con la anterior.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presentando desarreglos</title>
      <link>https://imalexissaez.github.io/2019/04/24/presentando-desarreglos/</link>
      <pubDate>Wed, 24 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/24/presentando-desarreglos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 71:&lt;/strong&gt; Un desarreglo es una permutación de objetos en la que ningún objeto está en su posición original. Por ejemplo, $234561$ es un desarreglo de $123456$, pero $213645$ no, ya que $3$ está en su posición original.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Escribe los desarreglos de $123$.&lt;/li&gt;
&lt;li&gt;(b) Demuestra que, dados $n$ objetos, el total de desarreglos asciende a $$D_n = n!\left(1-\dfrac{1}{1!} + \dfrac{1}{2!} - \dfrac{1}{3!}+\cdots+(-1)^n\dfrac{1}{n!}\right).$$&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;En cuanto al apartado (a), empecemos escribiendo todas las permutaciones de $123$,&lt;/p&gt;

&lt;p&gt;$$
123,\quad 132,\quad 213,\quad 231,\quad 312,\quad 321.
$$&lt;/p&gt;

&lt;p&gt;De entre ellas, descartamos $123$ y $132$, por mantener $1$ su posición original; asimismo hacemos lo propio con $321$, porque $2$ permanece invariante; y con $213$, ya que $3$ continúa en el mismo lugar. Por tanto, dos son los desarreglos de $123$, a saber, $231$ y $312$.&lt;/p&gt;

&lt;p&gt;Para abordar el apartado (b) haremos uso del &lt;em&gt;Principio de complementación&lt;/em&gt;, y, en lugar de buscar la cantidad de desarreglos, hallaremos el número de permutaciones que al menos mantienen una cifra en su posición original (los &amp;ldquo;arreglos&amp;rdquo;), pues, aunque resulte sorprendente a primera vista, es más fácil contar estas últimas. Una vez encontrado dicho número, se lo sustraeremos al total de permutaciones, obteniendo así la cifra de desarreglos.&lt;/p&gt;

&lt;p&gt;Por consiguiente, para empezar, dados $n$ objetos, sabemos que el total de permutaciones posibles asciende a $P_n = n!$. Ahora, definamos $A_i$ como el total de conjuntos en el que $i$ objetos mantienen su posición original, con $1\leq i\leq n$. Por tanto, el número de desarreglos vendrá dado por&lt;/p&gt;

&lt;p&gt;$$
D_n = n! - card(A_1\cup A_2\cup\cdots\cup A_n).
$$&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿cuántos conjuntos encontramos que se caractericen por mantener un objeto su posición original? De entre los $n$ objetos, seleccionamos uno, acción que podemos llevar a cabo de $C_{n,1}$ maneras posibles. Después, el resto de objetos, $n-1$, simplemente los permutamos, situación que podemos realizar de $P_{n-1} = (n-1)!$ formas posibles. Aplicando la &lt;em&gt;regla del producto&lt;/em&gt; hay&lt;/p&gt;

&lt;p&gt;$$
C_{n,1}(n-1)! = \dbinom{n}{1}(n-1)!
$$&lt;/p&gt;

&lt;p&gt;conjuntos que mantienen un objeto en su posición original. Análogamente, ¿cuántos conjuntos encontramos que se caractericen por mantener dos objetos sus posiciones originales? De entre los $n$ objetos, seleccionamos dos, acción que podemos llevar a cabo de $C_{n,2}$ maneras posibles. Luego, el resto de objetos, $n-2$, simplemente los permutamos, situación que podemos realizar de $P_{n-2} = (n-2)!$ formas posibles. Aplicando la &lt;em&gt;regla del producto&lt;/em&gt; hay&lt;/p&gt;

&lt;p&gt;$$
C_{n,2}(n-2)! = \dbinom{n}{2}(n-2)!
$$&lt;/p&gt;

&lt;p&gt;conjuntos que mantienen dos objetos en sus posiciones originales. El mismo razonamiento se puede aplicar para el caso de tres objetos, cuatro objetos, etc.&lt;/p&gt;

&lt;p&gt;Por consiguiente, aplicando el &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
D_n &amp;amp;= n! - card(A_1\cup A_2\cup\cdots\cup A_n)\\ &amp;amp;= n!-\left(\dbinom{n}{1}(n-1)! - \dbinom{n}{2}(n-2)! + \cdots + (-1)^{n+1}\dbinom{n}{n}\right)\\ &amp;amp;= n! - \left(\dfrac{n}{1}\cdot(n-1)! - \dfrac{n(n-1)}{2}\cdot(n-2)! + \cdots + (-1)^{n+1}\cdot 1\right)\\ &amp;amp;= n! - \left(\dfrac{n!}{1} - \dfrac{n!}{2} + \cdots + (-1)^{n+1}\dfrac{n!}{n!}\right)\\ &amp;amp;= n!\left(1 - \dfrac{1}{1!} + \dfrac{1}{2!} - \cdots + (-1)^n\dfrac{1}{n!}\right),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;tal y como queríamos demostrar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizando las bajadas del ascensor</title>
      <link>https://imalexissaez.github.io/2019/04/20/organizando-las-bajadas-del-ascensor/</link>
      <pubDate>Sat, 20 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/20/organizando-las-bajadas-del-ascensor/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 70:&lt;/strong&gt; Suben dos mujeres y tres hombres a un ascensor en la planta baja de un edificio de seis pisos. Averigua de cuántas maneras se pueden bajar del ascensor, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;En adelante, vamos a considerar que un edificio de seis pisos posee cinco plantas a las que subir en ascensor, esto es, contaremos la planta baja como un piso más y, obviamente, para acceder a ella no necesitamos utilizar el ascensor.&lt;/p&gt;

&lt;p&gt;En primer lugar, asumamos que las mujeres son indistinguibles, así como los hombres, pues parece la interpretación más natural tras una primera lectura del enunciado. Empezaremos organizando la bajada de ellas, pues son menos personas a considerar y únicamente encontramos dos opciones posibles: que bajen juntas o por separado.&lt;/p&gt;

&lt;p&gt;Si ambas bajan juntas en un mismo piso, son cinco las opciones que se les presentan disponibles, desde la planta primera hasta la quinta. A continuación, por lo que respecta a los hombres, cuatro son las plantas que les quedan para bajar los tres. Pueden hacerlo los tres juntos en una misma planta, cada uno por separado en plantas distintas, dos en una misma planta y el tercero en otra diferente, y así sucesivamente. Enseguida apreciamos que el problema es equivalente a uno de los tratados anteriormente: disponer sobre urnas indistinguibles cierto número de bolas idénticas.&lt;/p&gt;

&lt;p&gt;En esta ocasión, las cuatro plantas restantes harían el papel de urnas, mientras que los tres hombres adoptarían el rol de bolas. Utilizando la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos tres &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las cuatro urnas y buscamos ubicar luego tres &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que pueden bajar los tres hombres del ascensor, en las cuatro plantas restantes, equivale a la cantidad de permutaciones con repetición de seis elementos, donde cada uno de ellos se repite en tres ocasiones, esto es,&lt;/p&gt;

&lt;p&gt;$$
PR_{6}^{3,3} = CR_{4,3} = \dbinom{4+3-1}{3} = \dbinom{6}{3} = 20.
$$&lt;/p&gt;

&lt;p&gt;Así, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $5\cdot20=100$ maneras posibles.&lt;/p&gt;

&lt;p&gt;A continuación, asumamos que las mujeres bajan cada una en una planta diferente. Como hemos supuesto que ambas son indistinguibles, esta acción la pueden realizar de tantas formas como número de combinaciones de cinco elementos tomados de dos en dos hay (puesto que el orden no importa, es indiferente que una baje en el primero y otra en el tercero o en el orden contrario), es decir,&lt;/p&gt;

&lt;p&gt;$$
C_{5,2} = \dbinom{5}{2} = 10.
$$&lt;/p&gt;

&lt;p&gt;Así, ahora quedan tres pisos disponibles para que bajen los tres hombres. Por un razonamiento similar al llevado a cabo arriba, el problema sería equivalente al de almacenar tres bolas idénticas en tres urnas indistinguibles. Utilizando la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos dos &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las tres urnas y buscamos ubicar luego tres &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que pueden bajar del ascensor los tres hombres, en las tres plantas restantes, equivale a la cantidad de permutaciones con repetición de cinco elementos, donde uno de ellos se repite en tres ocasiones, mientras que el otro lo hace dos veces, esto es,&lt;/p&gt;

&lt;p&gt;$$
PR_{5}^{3,2} = CR_{3,3} = \dbinom{3+3-1}{3} = \dbinom{5}{3} = 10.
$$&lt;/p&gt;

&lt;p&gt;Así, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, cuando las dos mujeres bajan por separado, las cinco personas pueden bajar del ascensor de $10\cdot10=100$ maneras posibles.&lt;/p&gt;

&lt;p&gt;Finalmente, por el &lt;em&gt;principio de adición&lt;/em&gt;, son $100+100=200$ las maneras en que dos mujeres y tres hombres pueden bajar del ascensor, en un edificio de seis pisos, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.&lt;/p&gt;

&lt;p&gt;En segundo lugar, consideremos que las cinco personas son distinguibles (que sería el caso, por ejemplo, de que nos las hubiesen presentado cada una por su nombre). Actuaremos de forma similar a como hicimos en los párrafos anteriores, empezando por estudiar las formas en las que pueden bajar las mujeres: juntas o separadas.&lt;/p&gt;

&lt;p&gt;Si bajan juntas, como antes, son cinco las opciones que se les presentan disponibles, una por cada una de las cinco plantas. Ahora, por lo que respecta a los hombres, les quedan cuatro plantas donde poder bajar del ascensor. Como el orden en esta ocasión sí es importante y en una misma planta pueden bajar varios de ellos, el número de maneras en que pueden bajar equivale a la cantidad de variaciones con repetición de cuatro elementos tomados de tres en tres, esto es, $VR_{4,3} = 4^3 = 256$. Aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $5\cdot256 = 1280$ maneras posibles.&lt;/p&gt;

&lt;p&gt;Si las mujeres bajan por separado, dado que importa el orden en el que lo hagan, la cantidad de formas en que pueden hacerlo asciende al total de variaciones de cinco elementos tomadas de dos en dos, es decir, $V_{5,2} = 5\cdot4 = 20$. Ahora, por lo que respecta a los hombres, les quedan tres plantas donde poder bajar del ascensor. Como el orden en esta ocasión sí es importante y en una misma planta pueden bajar varios de ellos, el número de maneras en que pueden bajar equivale a la cantidad de variaciones con repetición de tres elementos tomados de tres en tres, esto es, $VR_{3,3} = 3^3 = 27$. Aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $20\cdot27 = 540$ maneras posibles.&lt;/p&gt;

&lt;p&gt;Finalmente, por el &lt;em&gt;principio de adición&lt;/em&gt;, son $1280+540=1820$ las maneras en que dos mujeres y tres hombres (todos ellos distinguibles) pueden bajar del ascensor, en un edificio de seis pisos, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: si interpretamos el enunciado asignando seis plantas al edificio, habremos de llevar a cabo las oportunas correcciones en el argumento expuesto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contando diagonales en un polígono</title>
      <link>https://imalexissaez.github.io/2019/04/17/contando-diagonales-en-un-poligono/</link>
      <pubDate>Wed, 17 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/17/contando-diagonales-en-un-poligono/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 69:&lt;/strong&gt; Obtén el número de diagonales que se pueden trazar en un cuadrado, en un hexágono y en un polígono de $n$ lados. ¿Existe algún polígono tal que el número de lados coincide con el número de diagonales?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A la vista de la figura siguiente, por recuento, concluimos que un cuadrado posee dos diagonales, mientras que en un hexágono el número de diagonales asciende a nueve.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20190417-img01.png&#34; &gt;

&lt;img src=&#34;20190417-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Representación gráfica de dos casos sencillos.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;En general, para poder dibujar una diagonal necesitamos unir dos de los vértices del correspondiente polígono, por lo que hemos de ser capaces de averiguar el número de formas en que podemos seleccionar los mencionados dos vértices. Como no importa el orden en el que los escojamos, el total equivale a la cantidad de combinaciones de $n$ elementos tomados de dos en dos, esto es, a $C_{n,2}$. No obstante, hemos de actuar con cautela, puesto que, de la manera indicada, estaríamos considerando como diagonal también la unión de dos vértices contiguos, es decir, cada uno de los lados. Así pues, sustrayendo estos, la cantidad de diagonales de un polígono de $n$ lados asciende a&lt;/p&gt;

&lt;p&gt;$$
C_{n,2} - n = \dbinom{n}{2} - n = \dfrac{n(n-1)}{2} - n = \dfrac{n^2-n-2n}{2} = \dfrac{n^2-3n}{2}.
$$&lt;/p&gt;

&lt;p&gt;Alternativamente, fijado un vértice del polígono de $n$ lados, generamos diagonales si lo unimos con los vértices que no le son contiguos, es decir, con los restantes $n-3$ vértices. Así, cada vértice posee asociadas $n-3$ diagonales. Como contamos con $n$ vértices, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, hablaríamos de un total de $n(n-3)$ diagonales. Sin embargo, procediendo así, debemos pensar que cada diagonal se cuenta en dos ocasiones, de manera que, corrigiendo por dicho factor, el total de diagonales de un polígono de $n$ lados es&lt;/p&gt;

&lt;p&gt;$$
\dfrac{n(n-3)}{2} = \dfrac{n^2-3n}{2}
$$&lt;/p&gt;

&lt;p&gt;como antes.&lt;/p&gt;

&lt;p&gt;Ahora, para dar respuesta a la pregunta planteada en el enunciado del ejercicio, igualando el total de diagonales de un polígono de $n$ lados con su número de lados, tenemos&lt;/p&gt;

&lt;p&gt;$$
\dfrac{n^2-3n}{2} = n.
$$&lt;/p&gt;

&lt;p&gt;Es decir, se conforma la ecuación $n^2-3n=2n$ o, equivalentemente, $n^2-5n=0$. Esta posee dos soluciones, la trivial, $n=0$, que rechazamos por no conformar un polígono propiamente dicho; y $n=5$, esto es, el pentágono es el único polígono cuyo número de lados coincide con su cantidad de diagonales.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>De astas, banderas y un poco de combinatoria</title>
      <link>https://imalexissaez.github.io/2019/04/13/de-astas-banderas-y-un-poco-de-combinatoria/</link>
      <pubDate>Sat, 13 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/13/de-astas-banderas-y-un-poco-de-combinatoria/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 68:&lt;/strong&gt; En un puesto de mando, para transmitir señales, hay en línea recta cuatro astas. En cada asta solamente se puede colocar una bandera. Las señales consisten en colocar banderas de distintos colores en dichas astas. Según el número de banderas colocadas, colores de las mismas y lugar que ocupen, la señal será distinta. Halla el número de señales que se pueden transmitir si se posee un juego de siete banderas con los colores del arco iris.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Una de las claves de este ejercicio pasa por darse cuenta de que en cada asta se &amp;ldquo;puede&amp;rdquo; colocar (o no) una bandera para transmitir una determinada señal. Así pues, hemos de discutir las opciones posibles, para las señales disponibles, en función del número de astas empleadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Si emplean las cuatro astas, dado que el orden en el que coloquen las banderas importa y no es posible repetir bandera alguna, la cantidad de señales que pueden transmitir en este caso equivale al número de variaciones de siete elementos tomados de cuatro en cuatro, esto es, $$V_{7,4} = 7\cdot6\cdot5\cdot4 = 840.$$&lt;/li&gt;
&lt;li&gt;Si utilizan tres astas, ello implica que de las cuatro disponibles han de escoger tres, acción que pueden llevar a cabo de $C_{4,3}$ maneras posibles. Una vez escogidas las astas, como el orden en el que coloquen las banderas importa y no pueden repetir bandera alguna, podrían transmitir, para una elección de astas particular, un total de señales que asciende al número de variaciones de siete elementos tomados de tres en tres, es decir, $V_{7,3}$. Ahora, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, utilizando tres astas pueden transmitir un número de señales que asciende a $$C_{4,3}\cdot V_{7,3} = \dbinom{4}{3}\cdot7\cdot6\cdot5 = 840.$$&lt;/li&gt;
&lt;li&gt;Si utilizan dos astas, ello implica que de las cuatro disponibles han de escoger dos, acción que pueden llevar a cabo de $C_{4,2}$ maneras posibles (aquí, como antes, no importa el orden, pues es igual escoger las astas primera y segunda, que las astas segunda y primera, lo importante ahora es seleccionar dos astas). Una vez escogidas las astas, como el orden en el que coloquen las banderas importa y no pueden repetir bandera alguna, podrían transmitir, para una elección de astas particular, un total de señales que asciende al número de variaciones de siete elementos tomados de dos en dos, es decir, $V_{7,2}$. Ahora, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, utilizando dos astas pueden transmitir un número de señales que asciende a $$C_{4,2}\cdot V_{7,2} = \dbinom{4}{2}\cdot7\cdot6 = 252.$$&lt;/li&gt;
&lt;li&gt;Si utilizan una asta, ello implica que de las cuatro disponibles han de escoger una, acción que pueden llevar a cabo de cuatro maneras posibles. Una vez escogida, tienen siete opciones de cara a escoger la bandera que emplearán para transmitir la señal. Ahora, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, utilizando una asta pueden transmitir un número de señales que asciende a $$C_{4,1}\cdot V_{7,1} = 4\cdot7 = 28.$$&lt;/li&gt;
&lt;li&gt;Finalmente, existe una posibilidad adicional que hemos de considerar y consiste en que no utilicen bandera alguna para transmitir una determinada señal (esto es, que no hagan uso de ninguna asta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recapitulando, si se posee un juego de siete banderas con los colores del arco iris y cuatro astas donde colocarlas, podrán transmitir un total de&lt;/p&gt;

&lt;p&gt;$$
840+840+252+28+1 = 1961
$$&lt;/p&gt;

&lt;p&gt;señales.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uno más alrededor de la mesa</title>
      <link>https://imalexissaez.github.io/2019/04/10/uno-mas-alrededor-de-la-mesa/</link>
      <pubDate>Wed, 10 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/10/uno-mas-alrededor-de-la-mesa/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 67:&lt;/strong&gt; Encuentra el número de maneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) hombres y mujeres se alternan.&lt;/li&gt;
&lt;li&gt;(b) cada mujer está sentada al lado de su marido.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a) empecemos sentando, por ejemplo, a los hombres (podríamos haber iniciado la resolución colocando a las mujeres asimismo, pues el número de personas coincide). Sabemos, por ejercicios anteriores, que el total de formas de sentar a $n$ personas alrededor de una mesa asciende al total de permutaciones circulares de $n$ elementos, esto es, hay&lt;/p&gt;

&lt;p&gt;$$
PC_n = (n-1)!
$$&lt;/p&gt;

&lt;p&gt;maneras. A continuación, comencemos a sentar mujeres. La primera de ellas puede hacerlo en cualesquiera de los $n$ huecos que la configuración de los hombres produce. Para la segunda, una vez sentada la primera, son $n-1$ las opciones que tiene a su disposición para ubicarse. En cuanto a la tercera, una vez sentadas las dos anteriores, tiene a su disposición $n-2$ asientos para escoger su sitio, y así sucesivamente. Aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, hay&lt;/p&gt;

&lt;p&gt;$$
(n-1)!\cdot n\cdot(n-1)\cdot(n-2)\cdot\ldots\cdot2\cdot1 = (n-1)!n!
$$&lt;/p&gt;

&lt;p&gt;maneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si hombres y mujeres han de alternar sus sitios.&lt;/p&gt;

&lt;p&gt;Para el apartado (b), consideremos cada matrimonio como una unidad indivisible. Sabemos, por ejercicios anteriores, que el número de formas de disponer $n$ elementos alrededor de una mesa equivale al total de permutaciones circulares de $n$ elementos, es decir, $PC_n = (n-1)!$. Ahora bien, el primer matrimonio puede sentarse de dos maneras posibles (hombre - mujer o mujer - hombre), hecho que hemos de tener en cuenta. Lo mismo sucede para el segundo matrimonio, para el tercero, y así sucesivamente. Por consiguiente, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;, existen&lt;/p&gt;

&lt;p&gt;$$
(n-1)!\cdot2\cdot2\cdot\ldots\cdot2 = (n-1)!\cdot2^n
$$&lt;/p&gt;

&lt;p&gt;maneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si cada mujer ha de estar sentada al lado de su marido. Alternativamente, podemos abordar este apartado sentando primero a los hombres, acción que sabemos podemos llevar a cabo de $PC_n=(n-1)!$ formas posibles y luego considerar que cada mujer tiene sus opciones bastante limitadas a la hora de sentarse, pues únicamente puede hacerlo de dos manera posibles (a la izquierda o a la derecha de su marido). Como hemos de colocar $n$ mujeres asumiendo la restricción anterior, son $2^n$ las formas posibles y aplicando la &lt;em&gt;regla del producto&lt;/em&gt; se llega al resultado alcanzado arriba.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¡A la mesa! ¡Todos a la mesa!</title>
      <link>https://imalexissaez.github.io/2019/04/06/a-la-mesa-todos-a-la-mesa/</link>
      <pubDate>Sat, 06 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/06/a-la-mesa-todos-a-la-mesa/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 66:&lt;/strong&gt; ¿De cuántas maneras pueden cinco chicos y tres chicas sentarse alrededor de una mesa si&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) no hay restricción alguna?&lt;/li&gt;
&lt;li&gt;b) el chico $H_1$ y la chica $M_1$ no pueden estar juntos?&lt;/li&gt;
&lt;li&gt;c) ninguna chica ha de tener a otra a su lado?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado a), al no imponer restricción alguna sobre la disposición de los ocho integrantes del grupo, el número de formas en las que pueden sentarse alrededor de una mesa equivale al total de permutaciones circulares de ocho elementos. Así, tienen&lt;/p&gt;

&lt;p&gt;$$
PC_8 = (8-1)! = 7! = 5040
$$&lt;/p&gt;

&lt;p&gt;maneras de sentarse alrededor de la mesa.&lt;/p&gt;

&lt;p&gt;Por lo que respecta al apartado b), ya que acabamos de calcular en el párrafo anterior el total de maneras en que pueden sentarse, resulta más sencillo utilizar ahora el &lt;em&gt;Principio de complementación&lt;/em&gt;, que recordemos dice &lt;em&gt;si $A$ es un subconjunto de un conjunto finito universal $U$, entonces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$$
card(U - A) = card(U) - card(A).
$$&lt;/p&gt;

&lt;p&gt;De esta forma, en lugar de contar el número de formas en que $H_1$ y $M_1$ pueden sentarse estando separados (es decir, con al menos un integrante del grupo entre ellos), averigüemos de cuántas maneras pueden sentarse todos alrededor de la mesa estando $H_1$ y $M_1$ juntos. Así, si consideramos la pareja como una unidad, el nuevo problema se reduce a encontrar el número de formas en que pueden disponerse siete elementos alrededor de una mesa, que sabemos equivale al total de permutaciones circulares de siete elementos, esto es,&lt;/p&gt;

&lt;p&gt;$$
PC_7 = (7-1)! = 6! = 720.
$$&lt;/p&gt;

&lt;p&gt;Ahora bien, como la pareja puede sentarse de maneras posibles, ($H_1M_1$ y $M_1H_1$), hemos de incorporar las permutaciones de dos elementos ($2! = 2$) al anterior resultado, aplicando la &lt;em&gt;regla del producto&lt;/em&gt;. Por consiguiente, existen $720\cdot2 = 1440$ formas de sentarse los ocho integrantes del grupo asumiendo que $H_1$ y $M_1$ se colocaron uno al lado del otro. Luego, por el &lt;em&gt;Principio de complementación&lt;/em&gt; hay&lt;/p&gt;

&lt;p&gt;$$
7! - 1440 = 3600
$$&lt;/p&gt;

&lt;p&gt;maneras de disponer a los miembros del grupo donde $H_1$ y $M_1$ no están juntos.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado c), comencemos sentando a los chicos en la tabla, ya que su número es más elevado que el de chicas. Por apartados anteriores, sabemos que el número de formas de sentar cinco personas alrededor de una tabla asciende al total de permutaciones circulares de cinco elementos, esto es,&lt;/p&gt;

&lt;p&gt;$$
PC_5 = (5-1)! = 4! = 24
$$&lt;/p&gt;

&lt;p&gt;maneras posibles. A continuación, en los huecos que quedan entre ellos, empecemos a sentar chicas. Para la primera de ella encontramos cinco opciones disponibles, pues tal es el número de huecos que quedan entre los chicos. Para la segunda chica, una vez sentada la primera, dichas opciones se reducen a cuatro. Por último, la tercera chica, una vez sentadas las otras dos, puede escoger entre las tres posiciones disponibles que restan. Luego, aplicando la &lt;em&gt;regla del producto&lt;/em&gt; hay&lt;/p&gt;

&lt;p&gt;$$
4! \cdot 5\cdot 4\cdot3 = 1440
$$&lt;/p&gt;

&lt;p&gt;maneras de disponer a los ocho integrantes del grupo de forma que ninguna chica tenga a otra a su lado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando el número de términos ando</title>
      <link>https://imalexissaez.github.io/2019/04/03/buscando-el-numero-de-terminos-ando/</link>
      <pubDate>Wed, 03 Apr 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/04/03/buscando-el-numero-de-terminos-ando/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 65:&lt;/strong&gt; ¿Cuántos términos tiene la expansión de $(x_1+x_2+\cdots+x_s)^n$?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Empecemos estudiando algunos casos sencillos para comprobar si podemos inferir algún patrón de comportamiento. Por ejemplo, sabemos que&lt;/p&gt;

&lt;p&gt;$$
(x+y)^2 = x^2 + y^2 + xy,
$$&lt;/p&gt;

&lt;p&gt;es decir, la expansión de $(x+y)^2$ posee tres términos. Análogamente,&lt;/p&gt;

&lt;p&gt;$$
(x+y)^3 = x^3 + 3x^2y + 3xy^2 + y^3,
$$&lt;/p&gt;

&lt;p&gt;esto es, la expansión de $(x+y)^3$ posee cuatro términos. En general, por el &lt;em&gt;Teorema del binomio&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
(x+y)^n = \dbinom{n}{0}x^ny^0 + \dbinom{n}{1}x^{n-1}y^1+\cdots+\dbinom{n}{n}x^0y^n.
$$&lt;/p&gt;

&lt;p&gt;Rápidamente observamos que cada uno de los sumandos del anterior desarrollo posee una peculiar característica: la suma de las potencias de $x$ e $y$ asciende a $n$, el grado del binomio. Esto es cierto asimismo para los dos primeros ejemplos que consideramos arriba, sin más que escribirlos de la siguiente manera para que quede patente,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
(x+y)^2 &amp;amp;= x^2y^0 + y^2x^0 + x^1y^1,\\ (x+y)^3 &amp;amp;= x^3y^0 + 3x^2y^1 + 3x^1y^2 + y^3x^0.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Así pues, estamos interesados en saber de cuántas maneras podemos repartir el grado entre las variables involucradas en el desarrollo. En los ejemplos anteriores, $x$ e $y$ jugarían el papel de dos urnas indistinguibles, mientras que el grado $n$ adoptaría el rol de las $n$ bolas idénticas. Utilizando la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos una &lt;em&gt;barra&lt;/em&gt; para representar sobre la recta real las dos urnas y buscamos ubicar luego $n$ &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por consiguiente, el número de términos en la expansión de un binomio de grado $n$, equivale a la cantidad de permutaciones con repetición de $n+1$ elementos, donde uno de ellos se repite una vez, mientras que el otro lo hace en $n$ ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{n+1}^{1,n} = \dfrac{(n+1)!}{1!\cdot n!} = n+1
$$&lt;/p&gt;

&lt;p&gt;términos en el desarrollo de un binomio de grado $n$.&lt;/p&gt;

&lt;p&gt;Por otro lado,&lt;/p&gt;

&lt;p&gt;$$
(x+y+z)^2 = x^2+y^2+z^2+2xy+2xz+2yz,
$$&lt;/p&gt;

&lt;p&gt;esto es, el desarrollo de $(x+y+z)^2$ posee seis términos. Si lo escribimos como&lt;/p&gt;

&lt;p&gt;$$
(x+y+z)^2 = x^2y^0z^0 + x^0y^2z^0 + x^0y^0z^2 + 2x^1y^1z^0 + 2x^1y^0z^1 + 2x^0y^1z^1,
$$&lt;/p&gt;

&lt;p&gt;rápidamente apreciamos que estamos repartiendo el grado, $2$, en tres urnas indistinguibles, $x$, $y$ y $z$. Aplicando, como antes, la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, dicha acción la podemos llevar a cabo de&lt;/p&gt;

&lt;p&gt;$$
PR_{2+2}^{2,2} = PR_{4}^{2,2} = \dfrac{4!}{2!\cdot 2!} = 6
$$&lt;/p&gt;

&lt;p&gt;formas posibles.&lt;/p&gt;

&lt;p&gt;En general, para la expresión $(x_1+x_2+\cdots+x_s)^n$ vamos a considerar que disponemos de $s$ urnas indistinguibles, las respectivas variables $x_1,x_2,\ldots,x_s$. En ellas buscamos repartir $n$ bolas idénticas, el grado $n$. Utilizando la estrategia de &lt;em&gt;barras y estrellas&lt;/em&gt;, necesitamos $s-1$ &lt;em&gt;barras&lt;/em&gt; para representar sobre la recta real las $s$ urnas y buscamos ubicar luego $n$ &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Por tanto, el número de términos del desarrollo de $(x_1+x_2+\cdots+x_s)^n$, equivale a la cantidad de permutaciones con repetición de $s-1+n$ elementos, donde uno de ellos se repite $s-1$ veces, mientras que el otro hace en $n$ ocasiones. Así, hay&lt;/p&gt;

&lt;p&gt;$$
PR_{s-1+n}^{s-1,n} = \dfrac{(n+s-1)!}{n!(s-1)!}
$$&lt;/p&gt;

&lt;p&gt;términos en el desarrollo de $(x_1+x_2+\cdots+x_s)^n$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un curioso múltiplo que todo número posee</title>
      <link>https://imalexissaez.github.io/2019/03/30/un-curioso-multiplo-que-todo-numero-posee/</link>
      <pubDate>Sat, 30 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/30/un-curioso-multiplo-que-todo-numero-posee/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 64:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Demuestra que escogidos siete números enteros al azar, la diferencia entre dos de ellos es múltiplo de seis.&lt;/li&gt;
&lt;li&gt;(b) Demuestra que todo número entero $n$ tiene un múltiplo cuya expresión decimal está compuesta por ceros y unos.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), empecemos considerando un ejemplo concreto: sean los números enteros, escogidos al azar, $53$, $75$, $32$, $7$, $83$, $1$ y $10$. Si obtenemos el valor de la congruencia de cada uno de ellos módulo seis, es cierto que&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
53&amp;amp;\equiv 5\pmod{6},\\ 75&amp;amp;\equiv 3\pmod{6},\\ 32&amp;amp;\equiv 2\pmod{6},\\  7&amp;amp;\equiv 1\pmod{6},\\ 83&amp;amp;\equiv 5\pmod{6},\\  1&amp;amp;\equiv 1\pmod{6},\\ 10&amp;amp;\equiv 4\pmod{6}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Basta ahora tomar dos cuyo valor de la congruencia módulo seis coincida para encontrar un múltiplo de seis. Efectivamente, por ejemplo, $83-53=30 = 6\cdot5$.&lt;/p&gt;

&lt;p&gt;En general, como el &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $6$ está conformado por seis valores, $\{0,1,2,3,4,5\}$, dados siete números escogidos al azar sabemos, por el &lt;em&gt;Principio del palomar&lt;/em&gt;, que al menos dos de ellos poseerán el mismo valor de la congruencia módulo seis. Esto es, existen $x, y\in\mathbb{Z}$ tal que $x\equiv a\pmod{6}$ e $y\equiv a\pmod{6}$, con $a\in\{0,1,2,3,4,5\}$. Por consiguiente,&lt;/p&gt;

&lt;p&gt;$$
(x-y)\equiv (a-a)\pmod{6}\equiv 0\pmod{6},
$$&lt;/p&gt;

&lt;p&gt;es decir, la diferencia es múltiplo de seis.&lt;/p&gt;

&lt;p&gt;Para el apartado (b) utilizaremos la misma estrategia, pero escogiendo los números con cautela, ya que buscamos que el múltiplo que nos interesa únicamente posea en su expresión decimal ceros y unos. Como antes, empecemos considerando un ejemplo concreto: sea $n=6$. Trabajemos pues con el conjunto de siete números $$\{1,11,111,1111,11111,111111,1111111\},$$ para el que, por el &lt;em&gt;Principio del palomar&lt;/em&gt;, sabemos que al menos dos de ellos poseerán el mismo valor de su congruencia módulo seis. Efectivamente,&lt;/p&gt;

&lt;p&gt;$$
1\equiv 1\pmod{6}\qquad\text{y}\qquad 1111\equiv 1\pmod{6}.
$$&lt;/p&gt;

&lt;p&gt;Así, $(1111 - 1)\equiv 0\pmod{6}$, esto es, $1110 = 6\cdot185$ es múltiplo de $6$ y en su expresión decimal únicamente aparecen ceros y unos.&lt;/p&gt;

&lt;p&gt;En general, dado un número natural $n$, consideramos el conjunto $\{1,11,111,1111,\ldots\}$ de $n+1$ elementos. Por el &lt;em&gt;Principio del palomar&lt;/em&gt;, al menos dos de dichos elementos poseerán el mismo valor de su congruencia módulo $n$. Designemos por $a$ y $b$ a tales elementos que verifican $a\equiv x\pmod{n}$ y $b\equiv x\pmod{n}$, entonces $(a-b)\equiv 0\pmod{n}$, esto es, la diferencia entre ellos es múltiplo de $n$, y, por tal y como hemos construido el anterior conjunto, su expresión únicamente poseerá ceros y unos.&lt;/p&gt;

&lt;p&gt;A modo anecdótico, si en el problema nos hubiesen solicitado demostrar que todo número entero $n$ tiene un múltiplo cuya expresión decimal está compuesta por ceros y doses, habría bastado considerar un conjunto del tipo $\{2,22,222,2222,\ldots\}$. Variantes similares del problema únicamente exigen encontrar un conjunto adecuado al que aplicar la estrategia esbozada en párrafos anteriores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contando múltiplos a través del PIE</title>
      <link>https://imalexissaez.github.io/2019/03/27/contando-multiplos-a-traves-del-pie/</link>
      <pubDate>Wed, 27 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/27/contando-multiplos-a-traves-del-pie/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 63:&lt;/strong&gt; ¿Cuántos números entre $1$ y $600$ no son divisibles por $3$, ni por $5$, ni por $7$?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Emplearemos el &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt; para resolver el presente problema. Así, definamos los conjuntos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$3$ como &amp;ldquo;conjunto de números menores o iguales que $600$ que son divisibles por $3$&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;$5$ como &amp;ldquo;conjunto de números menores o iguales que $600$ que son divisibles por $5$&amp;rdquo;, y&lt;/li&gt;
&lt;li&gt;$7$ como &amp;ldquo;conjunto de números menores o iguales que $600$ que son divisibles por $7$&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estamos interesados en el cardinal del conjunto de números que, precisamente, no son divisibles por $3$, ni por $5$, ni por $7$, esto es, $card(\overline{3}\cap\overline{5}\cap\overline{7})$ . Ahora bien, por las &lt;em&gt;Leyes de DeMorgan&lt;/em&gt;, trabajaremos con el suceso complementario, ya que es más fácil contar múltiplos que números que no son múltiplos,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{3}\cap\overline{5}\cap\overline{7}) = card(\overline{3\cup 5\cup 7}) = card(E) - card(3\cup 5\cup 7),
$$&lt;/p&gt;

&lt;p&gt;donde por $E$ representamos el conjunto de los números enteros positivos menores o iguales que $600$, es decir, el conjunto &lt;em&gt;total&lt;/em&gt;, cuyo cardinal asciende, en esta ocasión concreta, a $600$. Por tanto,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{3}\cap\overline{5}\cap\overline{7}) = 600 - card(3\cup 5\cup 7).
$$&lt;/p&gt;

&lt;p&gt;A continuación, por el &lt;em&gt;Principio de inclusión-exclusión&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
card(3\cup 5\cup 7) &amp;amp;= card(3) + card(5) + card(7)\\ &amp;amp;\quad -card(3\cap 5) - card(3\cap 7) - card(5\cap 7)\\ &amp;amp;\quad +card(3\cap 5\cap 7),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;donde&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$card(3)$ representa el total de múltiplos de $3$ menores o iguales que $600$, esto es, $$card(3) = \left\lfloor\dfrac{600}{3}\right\rfloor=200.$$&lt;/li&gt;
&lt;li&gt;$card(5)$ representa el total de múltiplos de $5$ menores o iguales que $600$, esto es, $$card(5) = \left\lfloor\dfrac{600}{5}\right\rfloor=120.$$&lt;/li&gt;
&lt;li&gt;$card(7)$ representa el total de múltiplos de $7$ menores o iguales que $600$, esto es, $$card(7) = \left\lfloor\dfrac{600}{7}\right\rfloor=85.$$&lt;/li&gt;
&lt;li&gt;$card(3\cap 5)$ representa el total de múltiplos de $3$ y de $5$ menores o iguales que $600$, esto es, $$card(3\cap 5) = \left\lfloor\dfrac{600}{3\cdot 5}\right\rfloor=40.$$&lt;/li&gt;
&lt;li&gt;$card(3\cap 7)$ representa el total de múltiplos de $3$ y de $7$ menores o iguales que $600$, esto es, $$card(3\cap 7) = \left\lfloor\dfrac{600}{3\cdot 7}\right\rfloor=28.$$&lt;/li&gt;
&lt;li&gt;$card(5\cap 7)$ representa el total de múltiplos de $5$ y de $7$ menores o iguales que $600$, esto es, $$card(5\cap 7) = \left\lfloor\dfrac{600}{5\cdot 7}\right\rfloor=17.$$&lt;/li&gt;
&lt;li&gt;$card(3\cap 5\cap 7)$ representa el total de múltiplos de $3$, de $5$ y de $7$ menores o iguales que $600$, esto es, $$card(3\cap 5\cap 7) = \left\lfloor\dfrac{600}{3\cdot 5\cdot 7}\right\rfloor=5.$$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por consiguiente,&lt;/p&gt;

&lt;p&gt;$$
card(\overline{3}\cap\overline{5}\cap\overline{7}) = 600 - (200 + 120 + 85 - 40 - 28 - 17 + 5) = 275,
$$&lt;/p&gt;

&lt;p&gt;es decir, hay $275$ números entre $1$ y $600$, ambos inclusive, que no son divisibles por $3$, ni por $5$, ni por $7$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comenzando con la combinatoria (IV)</title>
      <link>https://imalexissaez.github.io/2019/03/23/comenzando-con-la-combinatoria-iv/</link>
      <pubDate>Sat, 23 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/23/comenzando-con-la-combinatoria-iv/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 62:&lt;/strong&gt; Calcula el número de soluciones enteras de la ecuación&lt;/p&gt;

&lt;p&gt;$$
x_1+x_2+\cdots+x_8=24,
$$&lt;/p&gt;

&lt;p&gt;donde $x_i\geq 2$, para $1\leq i\leq 8$.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A diferencia del ejercicio anterior, aquí no buscamos hallar el total de soluciones enteras no negativas de la ecuación, pues nos indican que $x_i\geq 2$, para todo $1\leq i\leq 8$. No obstante, podemos razonar de la siguiente forma: asumamos que disponemos de ocho urnas indistinguibles entre sí y almacenemos dos bolas en cada una de ellas para empezar. De esta manera, quedarán $24 - 2\cdot8 = 8$ bolas idénticas por introducir en las urnas, acción que podemos llevar a cabo de&lt;/p&gt;

&lt;p&gt;$$
PR_{15}^{8,7} = \dfrac{15!}{8!\cdot 7!} = \dfrac{15\cdot14\cdot13\cdot12\cdot11\cdot10\cdot9}{7!} = 6435
$$&lt;/p&gt;

&lt;p&gt;maneras posibles. A este resultado hemos arribado, recordemos, dado que son necesarias siete &lt;em&gt;barras&lt;/em&gt;, para representar las ocho urnas sobre la recta real, y hemos de almacenar ocho &lt;em&gt;estrellas&lt;/em&gt; en los huecos que dicha configuración produce. Así pues, son $6435$ el número de soluciones enteras para la ecuación planteada, considerando que $x_i\geq 2$, para todo $1\leq i\leq 8$.&lt;/p&gt;

&lt;p&gt;Si nos damos cuenta, simplemente hemos ignorado aquella parte del problema que sabemos está fija. Técnicamente, esta acción es equivalente a llevar a cabo un cambio de variable del tipo&lt;/p&gt;

&lt;p&gt;$$
x_i = x^{\prime}_i + 2,
$$&lt;/p&gt;

&lt;p&gt;para $1\leq i\leq 8$, que transforma la ecuación inicial planteada en&lt;/p&gt;

&lt;p&gt;$$
(x^{\prime}_1 + 2) + (x^{\prime}_2 + 2) + \cdots + (x^{\prime}_8+2) = 24,
$$&lt;/p&gt;

&lt;p&gt;que es equivalente a $x^{\prime}_1+x^{\prime}_2+\cdots+x^{\prime}_8=8$, con la salvedad de que ahora $x^{\prime}_i\geq 0$, para todo $1\leq i\leq 8$ y entonces ahora basta con aplicar los métodos que utilizamos en ejercicios anteriores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comenzando con la combinatoria (III)</title>
      <link>https://imalexissaez.github.io/2019/03/20/comenzando-con-la-combinatoria-iii/</link>
      <pubDate>Wed, 20 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/20/comenzando-con-la-combinatoria-iii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 61:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) ¿Cuántas fichas tiene el dominó?&lt;/li&gt;
&lt;li&gt;(b) Tenemos siete urnas indistinguibles entre sí y dos bolas idénticas, ¿de cuántas formas se pueden meter las bolas en las urnas?&lt;/li&gt;
&lt;li&gt;(c ) Calcula el número de soluciones enteras no negativas de la ecuación $x_1+x_2+\cdots+x_7=2$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), en las fichas del dominó encontramos representados los números desde el $0$ (blanca) al $6$, que aparecen de dos en dos. Por ejemplo, son fichas de este juego los pares $(1,2)$ o $(6,0)$. Por otro lado, el orden en que escojamos los números para conformar una ficha no importa, pues, por ejemplo, los pares $(1,2)$ y $(2,1)$ representan una única ficha del dominó. Finalmente, el juego incorpora fichas en la que se repiten los elementos, como $(0,0)$ o $(5,5)$, por nombrar algunas. Por tanto, estamos interesados en el total de combinaciones con repetición de siete elementos tomados de dos en eso y, entonces, hay $$CR_{7,2} = \dbinom{7+2-1}{2} = \dbinom{8}{2} = \dfrac{8\cdot7}{2} = 28$$ fichas en el juego del dominó.&lt;/p&gt;

&lt;p&gt;A continuación, en el apartado (b), si representamos gráficamente nuestras siete urnas indistinguibles como sigue&lt;/p&gt;

&lt;p&gt;$$
(\ \ |\ \ |\ \ |\ \ |\ \ |\ \ |\ \ ),
$$&lt;/p&gt;

&lt;p&gt;esto es, como si pusiéramos seis rayas sobre la recta real y representamos las bolas como $*$, una posible configuración sería&lt;/p&gt;

&lt;p&gt;$$
(\ \ |*|\ \ |*|\ \ |\ \ |\ \ ).
$$&lt;/p&gt;

&lt;p&gt;No obstante, si ahora movemos la última raya al principio, la anterior configuración se convierte en&lt;/p&gt;

&lt;p&gt;$$
(\ \ |\ \ |*|\ \ |*|\ \ |\ \ ).
$$&lt;/p&gt;

&lt;p&gt;Así pues, observamos que, de cara a contar posibilidades en este apartado, es como si tuviéramos ocho elementos (las dos bolas, $*$, y las seis rayas, $|$) de dos tipos. Uno de ellos se repite dos veces (las bolas), mientras que el otro se repite en seis ocasiones (las rayas). Por tanto, hay $$PR_{8}^{2,6} = \dfrac{8!}{2!\cdot6!} = \dfrac{8\cdot7}{2}=28$$ formas de introducir dos bolas idénticas en siete urnas indistinguibles entre sí.&lt;/p&gt;

&lt;p&gt;Finalmente, para el apartado (c ), de cara a encontrar las soluciones enteras no negativas de la ecuación $x_1+x_2+\cdots+x_7=2$, observamos rápidamente que cada variable puede tomar, como máximo, los valores $0$, $1$ o $2$. Así pues, podemos representar la situación como hicimos en el apartado anterior, donde ahora cada &amp;ldquo;urna&amp;rdquo; sería cierta variable $x_i$, con $i=1,2,\ldots,7$, y el valor de dicha variable vendría dado por el número de &amp;ldquo;bolas&amp;rdquo; que tuviese en su interior (para un $i$ dado, con $0$ bolas, $x_i=0$; con $1$ bola, $x_i=1$; y con $2$ bolas, $x_i=2$). Por tanto, razonando como antes, la ecuación dada posee $$PR_{8}^{2,6} = \dfrac{8!}{2!\cdot6!} = \dfrac{8\cdot7}{2}=28$$ soluciones enteras no negativas.&lt;/p&gt;

&lt;p&gt;Por otro lado, si recordamos de ejercicios anteriores, podemos utilizar las combinaciones con repetición como herramienta para contar el número de bolas idénticas que introducimos en urnas indistinguibles entre sí. Considerando esto, el presente ejercicio se reduce a calcular $CR_{7,2}$. En resumen,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hallar el número de soluciones de la ecuación $x_1+x_2+\cdots+x_n=r$, con $x_i\geq 0$ para $1\leq i\leq n$ y $r$ entero no negativo,&lt;/li&gt;
&lt;li&gt;encontrar el número de maneras de seleccionar una muestra de tamaño $r$, con elementos repetidos o no, de una colección de tamaño $n$, y&lt;/li&gt;
&lt;li&gt;calcular el número de formas de distribuir $r$ objetos idénticos entre $n$ destinatarios distintos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;es lo mismo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comenzando con la combinatoria (II)</title>
      <link>https://imalexissaez.github.io/2019/03/16/comenzando-con-la-combinatoria-ii/</link>
      <pubDate>Sat, 16 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/16/comenzando-con-la-combinatoria-ii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 60:&lt;/strong&gt; Considerando una baraja de póquer de $52$ cartas,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) ¿cuántas manos de cinco cartas se pueden extraer?&lt;/li&gt;
&lt;li&gt;(b) De las manos anteriores, ¿cuántas tienen tres ases?&lt;/li&gt;
&lt;li&gt;(c) De estas últimas, ¿cuántas serán &lt;em&gt;full&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;(d) En general, ¿cuántos &lt;em&gt;full&lt;/em&gt; podemos extraer de la baraja?&lt;/li&gt;
&lt;li&gt;(e) ¿Y cuántas manos contienen una &lt;em&gt;doble pareja&lt;/em&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;De cara al apartado (a), como no importa el orden en el que recibamos las cartas en una mano cualquiera y no existe la posibilidad de recibir cartas recibidas, estamos interesados en calcular el número de combinaciones de $52$ elementos tomados de cinco en cinco. Así, hay&lt;/p&gt;

&lt;p&gt;$$
\dbinom{52}{5} = \dfrac{52!}{5!\cdot47!} = \dfrac{52\cdot51\cdot50\cdot49\cdot48}{5!} = 2598960
$$&lt;/p&gt;

&lt;p&gt;manos posibles de cinco cartas que podemos extraer de una baraja de póquer de $52$ cartas.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (b), razonaremos como sigue: de los cuatro ases que posee la baraja, tomamos tres de ellos. Como no importa el orden en el que los extraigamos y no habrá ninguno repetido, esta acción la podemos llevar a cabo de&lt;/p&gt;

&lt;p&gt;$$
\dbinom{4}{3} = \dfrac{4!}{3!\cdot1!} = 4
$$&lt;/p&gt;

&lt;p&gt;formas posibles. Ahora, del resto de cartas de la baraja que no son ases, $52-4=48$, simplemente hemos de tomar dos cartas adicionales, situación que puede darse de&lt;/p&gt;

&lt;p&gt;$$
\dbinom{48}{2} = \dfrac{48!}{2!\cdot46!} = \dfrac{48\cdot47}{2} = 1128
$$&lt;/p&gt;

&lt;p&gt;maneras posibles. Aplicando la regla del producto, hay&lt;/p&gt;

&lt;p&gt;$$
\dbinom{4}{3}\cdot\dbinom{48}{2} = 4\cdot1128 = 4512
$$&lt;/p&gt;

&lt;p&gt;manos que poseen tres ases.&lt;/p&gt;

&lt;p&gt;Siguiendo con el apartado (c), para conformar un &lt;em&gt;full&lt;/em&gt; a partir de tres ases necesitamos que las otras dos cartas (distintas ambas del as) posean idéntico número. Así, empecemos tomando nuestros tres ases, que sabemos es una acción que podemos llevar a cabo de&lt;/p&gt;

&lt;p&gt;$$
\dbinom{4}{3} = \dfrac{4!}{3!\cdot1!} = 4
$$&lt;/p&gt;

&lt;p&gt;formas posibles. Ahora, de los doce números distintos de cartas que restan, seleccionamos uno en particular ($C_{12,1}$) y, de las cuatro cartas posibles asociadas a dicho número, tomamos dos ($C_{4,2}$). Aplicando la regla del producto, existen&lt;/p&gt;

&lt;p&gt;$$
\dbinom{12}{1}\cdot\dbinom{4}{2} = 12\cdot\dfrac{4!}{2!\cdot2!} = 72
$$&lt;/p&gt;

&lt;p&gt;maneras de realizar la anterior elección. Finalmente, utilizando de nuevo la regla del producto, hay&lt;/p&gt;

&lt;p&gt;$$
\dbinom{4}{3}\cdot\dbinom{12}{1}\cdot\dbinom{4}{2} = 4\cdot72 = 288
$$&lt;/p&gt;

&lt;p&gt;manos con $3$ ases que son &lt;em&gt;full&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para el apartado (d), la manera de razonar es muy similar a la mostrada en el párrafo anterior. De los $13$ números posibles, seleccionamos uno de ellos ($C_{13,1}$) y será de este del que tomaremos tres cartas iguales ($C_{4,3}$). Ahora de los $12$ números restantes, escogemos uno ($C_{12,1}$) y extraemos dos cartas idénticas ($C_{4,2}$). Aplicando la regla del producto, hay&lt;/p&gt;

&lt;p&gt;$$
\dbinom{13}{1}\cdot\dbinom{4}{3}\cdot\dbinom{12}{1}\cdot\dbinom{4}{2} = 13\cdot4\cdot12\cdot6 = 3744
$$&lt;/p&gt;

&lt;p&gt;manos que son &lt;em&gt;full&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado (e), de los $13$ números disponibles en la baraja seleccionamos dos de ellos ($C_{13,2}$), de los cuales, de entre las cuatro cartas asociadas a cada uno de ellos, escogeremos dos idénticas ($C_{4,2}\cdot C_{4,2}$). Por último, de las restantes cartas, $52-4-4=44$, tomaremos una cualquiera ($C_{44,1}$). Aplicando la regla del producto hay&lt;/p&gt;

&lt;p&gt;$$
\dbinom{13}{2}\cdot\dbinom{4}{2}\cdot\dbinom{4}{2}\cdot\dbinom{44}{1} = 78\cdot6\cdot6\cdot44 = 123552
$$&lt;/p&gt;

&lt;p&gt;manos que son &lt;em&gt;doble pareja&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comenzando con la combinatoria (I)</title>
      <link>https://imalexissaez.github.io/2019/03/13/comenzando-con-la-combinatoria-i/</link>
      <pubDate>Wed, 13 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/13/comenzando-con-la-combinatoria-i/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 59:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) ¿De cuántas formas se pueden sentar ocho personas en una fila de ocho asientos?&lt;/li&gt;
&lt;li&gt;(b) ¿Cuántas palabras distintas de diez letras se pueden formar con las letras $A$, $B$, $C$ y $D$?&lt;/li&gt;
&lt;li&gt;(c) ¿De cuántas formas pueden huir diez niños de la policía en un cruce de calles?&lt;/li&gt;
&lt;li&gt;(d) ¿Cuántas distribuciones se pueden conseguir lanzando diez monedas?&lt;/li&gt;
&lt;li&gt;(e) ¿De cuántas formas se pueden obtener cinco caras y cinco cruces en el apartado anterior?&lt;/li&gt;
&lt;li&gt;(f) ¿Cuántos números de $4$ cifras se pueden formar con los dígitos $1,2,3,\ldots, 9$?&lt;/li&gt;
&lt;li&gt;(g) ¿Cuántas distribuciones de cumpleaños pueden darse entre diez amigos?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), dado que el orden importa y utilizamos todos los elementos, sin que ninguno de ellos se repita, buscamos la cantidad de permutaciones de ocho elementos. Así, $P_8 = 8! = 40320$ es el número de formas en que se pueden sentar ocho personas en una fila de ocho asientos.&lt;/p&gt;

&lt;p&gt;En el apartado (b), el orden vuelve a importar y, obviamente, hemos de permitir la repetición de las letras para conformar las palabras, por lo que ahora la herramienta adecuada para contar será el total de variaciones de cuatro elementos tomadas de diez en diez. Por tanto, hay $VR_{4,10} = 4^{10} = 1048576$ palabras distintas de diez letras conformadas a partir de las letras $A$, $B$, $C$ y $D$.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (c), hemos de ser cautos a la hora de escoger quién juega el papel de los &amp;ldquo;elementos&amp;rdquo; para contabilizar el total de maneras en que realizar la acción. En esta ocasión, son las calles. Si consideramos un cruce estándar de cuatro de ellas (y las denotamos por $a$, $b$, $c$ y $d$), una posible forma de escapar de la policía consistiría en que todos los niños optasen por la calle $a$, generando así el valor $(a,a,\ldots,a)$. Si el primer niño escogiese la calle $b$ y el resto la $a$, tendríamos el valor $(b,a,a,\ldots,a)$, y así sucesivamente. Por tanto, como importa el orden y alguna de las calles estará repetida dentro de las opciones de la huida, buscamos el número de variaciones con repetición de cuatro elementos tomados de diez en diez. Como antes, $VR_{4,10} = 4^{10}$ es el número de formas en que pueden huir diez niños de la policía en un cruce de calles.&lt;/p&gt;

&lt;p&gt;Para el apartado (d), un tanto ambiguo, asumiremos que están interesados en conocer el número de secuencias de caras y cruces que se pueden encontrar lanzando diez monedas. Con esta reformulación, es claro que son dos los elementos protagonistas, cara y cruz, y consideraremos que el orden importa porque, suponemos, las monedas son distinguibles. Por tanto, buscamos el número de variaciones con repetición de dos elementos tomados de diez en diez, esto es, hay $VR_{2,10} = 2^{10} = 1024$ posibles secuencias de caras y cruces cuando se lanzan diez monedas.&lt;/p&gt;

&lt;p&gt;A continuación, en el apartado (e), como el orden continúa siendo importante y cada elemento se repite un número fijo de veces, estamos interesados en la cantidad de permutaciones con repetición de diez elementos, donde tanto un elemento, como el otro, se repite en cinco ocasiones. Es decir, hay&lt;/p&gt;

&lt;p&gt;$$
P(10;5,5) = PR_{10}^{5,5} = \dfrac{10!}{5!\cdot 5!} = \dfrac{10\cdot9\cdot8\cdot7\cdot6}{5!} = 252
$$&lt;/p&gt;

&lt;p&gt;formas de obtener cinco caras y cinco cruces al lanzar diez monedas.&lt;/p&gt;

&lt;p&gt;En el apartado (f) hemos de considerar dos opciones posibles, en función de si admitimos o no repetición de los números. En caso afirmativo, al importar el orden y permitir repetición de los números, estamos interesados en el número de variaciones con repetición de nueve elementos tomados de cuatro en cuatro, esto es, hay $VR_{9,4} = 9^4 = 6561$ números de cuatro cifras conformados a partir de los dígitos $1,2,3,\ldots,9$ que pueden poseer, además, dígitos repetidos. En caso negativo, el orden continúa siendo importante, pero ahora no permitimos la repetición de cifras, por lo que estamos interesados en hallar el número de variaciones de nueve elementos tomados de cuatro en cuatro, es decir, $V_{9,4} = 9\cdot8\cdot7\cdot6 = 3024$ posibilidades.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado (g), si todos los amigos celebrasen su cumpleaños el primer día del año, se generaría el valor $(1,1,\ldots,1)$. Si el primer amigo lo celebrase el quinto día del año y el resto el tercer día, se conformaría el valor $(5,3,3\ldots,3)$. Así, vemos que los elementos son los días del año, $365$, que los vamos a tomar de diez en diez. Como admitimos la posibilidad de que dos amigos cumplan año el mismo día, esto es, de repetir elemento, e importa el orden, estamos interesados en hallar el número de variaciones con repetición de $365$ elementos tomados de diez en diez. Así, hay $VR_{365,10} = 365^{10}$ distribuciones de cumpleaños posibles entre los diez amigos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Midiendo cuadrados en palmos</title>
      <link>https://imalexissaez.github.io/2019/03/09/midiendo-cuadrados-en-palmos/</link>
      <pubDate>Sat, 09 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/09/midiendo-cuadrados-en-palmos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 58:&lt;/strong&gt; Determina las dimensiones de un rectángulo sabiendo que sus lados miden un número entero de centímetros, pero no un número entero de palmos, y que su área expresada en palmos cuadrados es igual a su perímetro expresado en palmos lineales. Considera que un palmo equivale a $20$ centímetros.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sean $x$ e $y$ las medidas de los lados del rectángulo expresadas en centímetros, mientras que denotemos por $a$ y $b$ las correspondientes medidas obtenidas en palmos. El área del rectángulo, en palmos cuadrados, es $a\cdot b$, cantidad que nos dicen ha de ser igual a su perímetro en palmos lineales, que viene dado por $2a+2b = 2(a+b)$. Por tanto, resulta que&lt;/p&gt;

&lt;p&gt;$$
a\cdot b = 2(a + b).
$$&lt;/p&gt;

&lt;p&gt;Dado que un palmo equivale a $20$ centímetros, es cierto que $x = 20a$ e $y = 20b$, y despejando $a$ y $b$, hallamos que&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
a &amp;amp;= \dfrac{x}{20},\\ b &amp;amp;= \dfrac{y}{20}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Sustituyendo los resultados alcanzados, tenemos que&lt;/p&gt;

&lt;p&gt;$$
\dfrac{x}{20}\cdot\dfrac{y}{20} = 2\left(\dfrac{x}{20} + \dfrac{y}{20}\right),
$$&lt;/p&gt;

&lt;p&gt;esto es, $xy = 40x+40y$, ecuación diofántica no lineal que abordaremos despejando una de las variables y forzando a que la restante tome valores enteros. Así, $xy-40x = 40y$, es decir, $x(y-40) = 40y$, de donde&lt;/p&gt;

&lt;p&gt;$$
x = \dfrac{40y}{y-40}.
$$&lt;/p&gt;

&lt;p&gt;Como $x$ ha de tomar valores enteros, estudiaremos, a continuación, las posibilidades para la fracción que acabamos de obtener. Si llevamos a cabo la división de polinomios, es cierto que&lt;/p&gt;

&lt;p&gt;$$
\dfrac{40y}{y-40} = 40 + \dfrac{1600}{y-40},
$$&lt;/p&gt;

&lt;p&gt;con $y\neq 40$ ($y=40$ no es una solución aceptable en este contexto, pues al ser múltiplo de $20$, uno de los lados del rectángulo poseería una longitud igual a un número entero de palmos). Hemos llegado entonces a que $y-40$ debe ser un divisor de $1600$.&lt;/p&gt;

&lt;p&gt;Ahora bien, $1600 = 2^6\cdot 5^2$, situación que produce un total de $(6+1)\cdot(2+1) = 21$ divisores, por lo que, acto seguido, analizaremos todos y cada uno de los casos. Para empezar, listemos el conjunto de divisores. Para llevar a cabo tal tarea de forma relativamente sencilla, recordemos que la expresión de la suma de los divisores era $(1+2+2^2+\cdots+2^6)\cdot(1+5+5^2)$, de manera que si prescindimos de la operación suma, cada uno de los productos resulta ser un divisor de $1600$. Por ejemplo, multiplicando $1$ por $1,2,2^2,\ldots, 2^6$ aparecen los divisores $\{1,2,4,8,16,32,64\}$. Multiplicando ahora $5$ por $1,2,2^2,\ldots, 2^6$, obtenemos los divisores $\{5,10,20,40,80,160,320\}$. Finalmente, multiplicando $5^2$ por $1,2,2^2,\ldots,2^6$, encontramos los divisores $\{25,50,100,200,400,800,1600\}$. En definitiva, el conjunto de divisores de $1600$ es&lt;/p&gt;

&lt;p&gt;$$
\{1, 2, 4, 5, 8, 10, 16, 20, 25, 32, 40, 50, 64, 80, 100, 160, 200, 320, 400, 800, 1600\}.
$$&lt;/p&gt;

&lt;p&gt;A continuación, vemos que algunos casos los podemos descartar rápidamente. ¿Es válida la solución $y-40=20$? No, ya que implicaría $y=60 = 3\cdot20$, es decir, $y$ sería entonces un múltiplo entero de palmos, longitud no permitida por las restricciones que impone el enunciado del ejercicio. El mismo razonamiento es válido para los valores $40$, $80$, $160$, $320$, $100$, $200$, $400$, $800$ y $1600$.&lt;/p&gt;

&lt;p&gt;Para el resto de casos, conformamos la siguiente tabla&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$y-40$&lt;/th&gt;
&lt;th&gt;$x$&lt;/th&gt;
&lt;th&gt;Nota&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{1} = 1640$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{2} = 840$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$4$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{4} = 440$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$5$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{5} = 360$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$8$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{8} = 240$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$10$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{10} = 200$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$16$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{16} = 140$&lt;/td&gt;
&lt;td&gt;Solución no válida: $x$ es múltiplo de $20$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$25$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{25} = 104$&lt;/td&gt;
&lt;td&gt;Solución válida.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$32$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{32} = 90$&lt;/td&gt;
&lt;td&gt;Solución válida.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$50$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{50} = 72$&lt;/td&gt;
&lt;td&gt;Solución válida.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$64$&lt;/td&gt;
&lt;td&gt;$40 + \dfrac{1600}{64} = 65$&lt;/td&gt;
&lt;td&gt;Solución válida.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Por tanto, las dimensiones del rectángulo vienen dadas por los pares $(104, 65)$, $(90, 72)$, $(72, 90)$ y $(65, 104)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cuando un problema viene con muy mala leche</title>
      <link>https://imalexissaez.github.io/2019/03/06/cuando-un-problema-viene-con-muy-mala-leche/</link>
      <pubDate>Wed, 06 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/06/cuando-un-problema-viene-con-muy-mala-leche/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 57:&lt;/strong&gt; En un verde prado, la hierba crece de forma uniforme y constante. Se sabe que $70$ vacas lo consumirían en $24$ días y que $30$ vacas lo harían en $60$ días. ¿Cuántas vacas se comerían la hierba en $96$ días?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;El comienzo del enunciado de este ejercicio, aunque en apariencia tan poético como irrelevante, nos ofrece una importante pista para llevar a buen término la resolución del problema. &amp;ldquo;En un verde prado&amp;rdquo; nos indica que, inicialmente, el mencionado prado posee cierta cantidad de hierba (en otro caso, las vacas ni se molestarían en realizarle una visita el primer día). Consideremos pues, por ejemplo, que dicho prado posee $1$ unidad de hierba (equivalentemente, podríamos decir que está conformado por $a$ unidades de hierba, con $a\in\mathbb{N}$; o que simplemente posee un porcentaje de hierba igual a $100\%$).&lt;/p&gt;

&lt;p&gt;Dado que la hierba crece de forma uniforme y constante, designemos por $x$ la altura que gana a diario la hierba en nuestro verde prado. Así, ¿qué cantidad de hierba acumulará dicho prado en $24$ días? Efectivamente, $1+24x$, la unidad de hierba con la que contaba inicialmente más el crecimiento uniforme y constante de esta durante el período de tiempo considerado.&lt;/p&gt;

&lt;p&gt;La siguiente cuestión que nos planteamos, acto seguido, es: ¿cuánto come una vaca al día? Dado que las $70$ vacas consumen toda la hierba disponible del verde prado en $24$ días, cada vaca es responsable de la desaparición diaria de la siguiente fracción de hierba:&lt;/p&gt;

&lt;p&gt;$$
\dfrac{1 + 24x}{24\cdot 70}.
$$&lt;/p&gt;

&lt;p&gt;Ahora bien, $30$ vacas consumen la misma cantidad de hierba en $60$ días, situación que da lugar a que cada vaca disfruta, a diario, de la siguiente fracción de hierba:&lt;/p&gt;

&lt;p&gt;$$
\dfrac{1+60x}{60\cdot 30}.
$$&lt;/p&gt;

&lt;p&gt;Igualando ambas expresiones, seremos capaces de encontrar cuánto crece la hierba en nuestro querido verde prado a diario, es decir, el valor de $x$. Así,&lt;/p&gt;

&lt;p&gt;$$
\dfrac{1 + 24x}{24\cdot 70} = \dfrac{1+60x}{60\cdot 30},
$$&lt;/p&gt;

&lt;p&gt;esto es, $1800 + 43200x = 1680 + 100800x$, es decir,&lt;/p&gt;

&lt;p&gt;$$
x = \dfrac{1}{480}.
$$&lt;/p&gt;

&lt;p&gt;Sustituyendo ahora, el consumo diario de hierba de una vaca asciende a la fracción&lt;/p&gt;

&lt;p&gt;$$
\dfrac{1 + 24\cdot\dfrac{1}{480}}{24\cdot70} = \dfrac{504}{480\cdot1680} = \dfrac{1}{1600}.
$$&lt;/p&gt;

&lt;p&gt;Por consiguiente, si cada vaca devora tal fracción de hierba a diario y designamos por $y$ la cantidad de vacas que consumirían nuestro amado verde prado en $96$ días, tendrá que satisfacerse que&lt;/p&gt;

&lt;p&gt;$$
\dfrac{1 + 96\cdot\dfrac{1}{480}}{96y} = \dfrac{1}{1600} \Leftrightarrow \dfrac{576}{480\cdot96y} = \dfrac{1}{1600} \Leftrightarrow \dfrac{1}{80y} = \dfrac{1}{1600},
$$&lt;/p&gt;

&lt;p&gt;esto es, $20$ serán las vacas que consuman el verde prado en $96$ días.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convocatoria de oposiciones para secundaria en la Comunidad Valenciana (2019)</title>
      <link>https://imalexissaez.github.io/2019/03/04/convocatoria-de-oposiciones-para-secundaria-en-la-comunidad-valenciana-2019/</link>
      <pubDate>Mon, 04 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/04/convocatoria-de-oposiciones-para-secundaria-en-la-comunidad-valenciana-2019/</guid>
      <description>&lt;p&gt;Acaba de salir la convocatoria del proceso selectivo de ingreso en los cuerpos docentes de profesores de Enseñanza Secundaria. Echémosle un vistazo, destacando alguna de sus partes.&lt;/p&gt;

&lt;p&gt;El título completo del documento es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ORDEN 7 / 2019, de 28 de febrero de 2019, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/03/04/pdf/2019_2095.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 2095&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Algunos de sus fragmentos que me han resultado de interés son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Presentación de solicitudes&lt;/em&gt;: Quienes deseen tomar parte en este proceso selectivo deberán cumplimentar el modelo oficial de solicitud que estará disponible en la sede electrónica de la Generalitat Valenciana (&lt;a href=&#34;http://sede.gva.es&#34; target=&#34;_blank&#34;&gt;http://sede.gva.es&lt;/a&gt;) y en la página web de la Conselleria de Educación, Investigación, Cultura y Deporte (&lt;a href=&#34;http://www.ceice.gva.es/es/web/rrhh-educacion/oposiciones&#34; target=&#34;_blank&#34;&gt;http://www.ceice.gva.es/es/web/rrhh-educacion/oposiciones&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plazo de presentación&lt;/em&gt;: El plazo de presentación de la solicitud será del 5 al 29 de marzo de 2019. La no presentación de la misma en tiempo y forma supondrá la exclusión de la persona aspirante.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Importe&lt;/em&gt;: 28,10 €, aunque varía dependiendo de ciertos supuestos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fecha de comienzo&lt;/em&gt;: La realización de la primera prueba de la fase de oposición para las personas aspirantes en los procedimientos de ingreso libre y de reserva de personas con diversidad funcional tendrá lugar a partir del
día 26 de junio de 2019.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Acreditación de idiomas oficiales&lt;/em&gt;: Habrá pruebas previas, tanto para evaluar el nivel C1 de valenciano, como para adquirir el &amp;ldquo;Certificat de Capacitació per a l’Ensenyament en Valencià&amp;rdquo; (en las páginas 18 a 20 del documento).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Directrices para la segunda prueba&lt;/em&gt;: Se dispondrá de un máximo de una hora para la defensa oral de la programación didáctica o de la guía docente presentada y la exposición oral de la unidad didáctica o del bloque temático, iniciando su exposición con la defensa de la programación didáctica o de la guía docente, que no podrá exceder de treinta minutos, y a continuación se realizará la exposición de la unidad didáctica o del bloque temático.

&lt;ul&gt;
&lt;li&gt;Las programaciones didácticas o las guías docentes se presentarán de forma telemática a través de la sede electrónica de la Generalitat Valenciana (&lt;a href=&#34;http://sede.gva.es&#34; target=&#34;_blank&#34;&gt;http://sede.gva.es&lt;/a&gt;), siendo necesario identificarse por cualquiera de los sistemas de identificación o firma electrónica admitidos en la propia sede electrónica. La entrega de las programaciones didácticas se deberá efectuar en un único documento con formato PDF que no supere los 20 MB.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Distribución de plazas por sistemas de acceso&lt;/em&gt;: El correspondiente cuadro se encuentra en la página 31 del documento. Por ejemplo, para matemáticas se convocan 460 plazas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Programación didáctica&lt;/em&gt;: La programación didáctica, que tendrá carácter personal, deberá ser elaborada de forma individual por la persona aspirante, y tener una extensión máxima de 60 páginas, en formato DIN-A4, escritas a doble espacio, con letra Arial (no se admitirá ninguna otra tipología de Arial) y con un cuerpo de letra de 12 puntos, sin comprimir. La portada contendrá los datos de identificación de la persona aspirante, el cuerpo y la especialidad por la cual se presenta (no se contabilizará en las 60 páginas). No podrá contener hipervínculos. Los anexos no podrán superar las 15 páginas (que no se computarán en las 60 iniciales establecidas). En el caso de utilizar tablas, el cuerpo de la letra podrá reducirse hasta 9 puntos, sin comprimir. La presentación deberá efectuarse en un único documento en formato PDF que no superará los 20 MB.

&lt;ul&gt;
&lt;li&gt;La programación didáctica deberá organizarse en un mínimo de 10 y un máximo de 15 unidades didácticas que deberán estar numeradas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actualización:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CORRECCIÓN de errores de la Orden 7 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición
de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/03/18/pdf/2019_2648.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 2648&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;CORRECCIÓN de errores de la Orden 7 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/03/29/pdf/2019_3122.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 3122&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;RESOLUCIÓN de 2 de abril de 2019, del director general de Centros y Personal Docente, por la que se declaran aprobadas las listas provisionales de personas admitidas y excluidas para participar en los procedimientos selectivos de ingreso y adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/04/04/pdf/2019_3373.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 3373&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;RESOLUCIÓN de 2 de abril de 2019, del director general de Centros y Personal Docente, por la que se convoca a las personas aspirantes no exentas de la realización de la prueba de valenciano nivel C1 y se nombra el tribunal que ha de evaluarla, en el marco del procedimiento selectivo para ingreso en los cuerpos docentes del profesorado de Enseñanza Secundaria, profesorado de escuelas oficiales de idiomas, profesorado de Música y Artes Escénicas, profesorado de Artes Plásticas y Diseño y profesorado técnico de Formación Profesional. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/04/04/pdf/2019_3379.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 3379&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;RESOLUCIÓN de 9 de mayo de 2019, del director general de Centros y Personal Docente, por la que se convoca a los aspirantes no exentos de la realización de la prueba de castellano para extranjeros y se nombra el tribunal que ha de juzgar la prueba previa de castellano para extranjeros, en el marco del procedimiento selectivo convocado por las Órdenes 7 / 2019 y 6 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte.
[&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/05/13/pdf/2019_4840.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 4840&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;RESOLUCIÓN de 9 de mayo de 2019, del director general de Centros y Personal Docente, por la que se convoca a las personas aspirantes no exentas, a la realización de la prueba para la obtención del Certificado de Capacitación para la Enseñanza en Valenciano y se nombra el tribunal que ha de evaluarla, en el marco del procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional, convocado por Orden 7 / 2019, de 28 de febrero. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/05/13/pdf/2019_4842.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 4842&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceice.gva.es/documents/162909733/168320500/206+Matematicas.pdf/6f691d36-27b1-45ed-96e4-b24891b8d3c5&#34; target=&#34;_blank&#34;&gt;Criterios de evaluación&lt;/a&gt; para la especialidad de matemáticas. Para acceder a los del resto de especialidades, seguid &lt;a href=&#34;http://www.ceice.gva.es/va/web/rrhh-educacion/2019-cos-de-professors-d-ensenyament-secundari/-/asset_publisher/dzJb8av1wCgh/content/criterios-de-evaluaci-4?redirect=http%3A%2F%2Fwww.ceice.gva.es%2Fca%2Fweb%2Frrhh-educacion%2F2019-cos-de-professors-d-ensenyament-secundari%3Fp_p_id%3D101_INSTANCE_dzJb8av1wCgh%26p_p_lifecycle%3D0%26p_p_state%3Dnormal%26p_p_mode%3Dview%26p_p_col_id%3Dcolumn-2%26p_p_col_count%3D1&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Midiendo metros con duros y pesetas</title>
      <link>https://imalexissaez.github.io/2019/03/02/midiendo-metros-con-duros-y-pesetas/</link>
      <pubDate>Sat, 02 Mar 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/03/02/midiendo-metros-con-duros-y-pesetas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 56:&lt;/strong&gt; El diámetro de una moneda de $5$ pesetas es de $37$ mm y el de una peseta es de $23$ mm, ¿de cuántas maneras puede obtenerse la longitud de un metro alineando monedas de $5$ pesetas y de pesetas?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sea $x$ el número de monedas de $5$ pesetas e $y$ la cifra total de monedas de $1$ peseta. Expresando todas las cantidades involucradas en el enunciado del ejercicio en milímetros, para así trabajar con números enteros, hemos de resolver la ecuación diofántica&lt;/p&gt;

&lt;p&gt;$$
37x+23y=1000,
$$&lt;/p&gt;

&lt;p&gt;para encontrar el número de maneras en las que puede obtenerse un metro alineando monedas de los dos tipos indicados.&lt;/p&gt;

&lt;p&gt;Como $23$ y $37$ son números primos, tenemos que $mcd(23,37)=1$, y dado que, trivialmente, $1|1000$, estamos en condiciones de asegurar que la anterior ecuación diofántica planteada admite solución entera. De cara a su resolución, para empezar, llevemos a cabo el cambio de variable&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 1000x^{\prime},\\ y &amp;amp;= 1000y^{\prime}
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;de manera que la ecuación diofántica se transforma en $37x^{\prime} + 23y^{\prime} = 1$. Utilizando el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt;, como&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
37 &amp;amp;= 23\cdot1 + 14,\\ 23 &amp;amp;= 14\cdot1 +  9,\\ 14 &amp;amp;=  9\cdot1 +  5,\\  9 &amp;amp;=  5\cdot1 +  4,\\  5 &amp;amp;=  4\cdot1 +  1,\\  4 &amp;amp;=  1\cdot4,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;además de haber comprobado que $mcd(23,37)=1$, podemos encontrar una solución particular a la ecuación diofántica sin más que expresar dicho máximo común divisor como combinación lineal de $23$ y $37$. Para ello,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
1 &amp;amp;= 5 - 4\cdot1\\ &amp;amp;= 5 - 1\cdot(9\cdot1 - 5) \\ &amp;amp;= (-9) + 2\cdot5 = (-9) + 2(14\cdot1 - 9) \\ &amp;amp;= 2\cdot14 - 3\cdot9 \\ &amp;amp;= 2\cdot14 - 3(23\cdot1 - 14) \\ &amp;amp;= (-3)\cdot23 + 5\cdot14 \\ &amp;amp;= (-3)\cdot23 + 5(37 - 23\cdot1) \\ &amp;amp;= 5\cdot37 - 8\cdot23,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y dado que, recordemos, la ecuación diofántica es $37x^{\prime}+23y^{\prime}=1$, igualando, arribamos a que $x^{\prime}_0=5$ e $y^{\prime}_0=(-8)$. Deshaciendo ahora el cambio de variable realizado,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x_0 &amp;amp;= 1000x^{\prime}_0 = 5000,\\ y_0 &amp;amp;= 1000y^{\prime}_0 = (-8000),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;es una solución particular para la ecuación diofántica $37x+23y=1000$. Por tanto, su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 5000 + 23t,\\ y &amp;amp;= (-8000) - 37t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero. Dado que el número de monedas que alineamos ha de ser mayor o igual que cero, planteamos las inecuaciones,&lt;/p&gt;

&lt;p&gt;$$
5000 + 23t\geq 0\qquad\text{y}\qquad (-8000) - 37t\geq 0,
$$&lt;/p&gt;

&lt;p&gt;esto es,&lt;/p&gt;

&lt;p&gt;$$
-\dfrac{5000}{23}\leq t\leq -\dfrac{8000}{37},
$$&lt;/p&gt;

&lt;p&gt;es decir, $(-217.4)\leq t\leq (-216.2)$ y como $t$ ha de ser un número entero, únicamente deja como solución $t=(-217)$. Por tanto,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 5000 + 23\cdot(-217) = 9,\\ y &amp;amp;= (-8000) - 37\cdot(-217) = 29,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es, solamente podemos obtener un metro alineando las monedas indicadas de una manera y es utilizando $9$ monedas de $5$ pesetas y $29$ monedas de $1$ peseta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mezclando cuadrados y ecuaciones diofánticas</title>
      <link>https://imalexissaez.github.io/2019/02/27/mezclando-cuadrados-y-ecuaciones-diofanticas/</link>
      <pubDate>Wed, 27 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/27/mezclando-cuadrados-y-ecuaciones-diofanticas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 55:&lt;/strong&gt; Halla un cuadrado de cinco cifras que sea igual a cinco veces otro cuadrado, más uno.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;El enunciado del ejercicio nos lleva a plantear la ecuación $x^2 = 5y^2+1$, equivalente a $x^2-5y^2=1$, &lt;em&gt;ecuación de Pell&lt;/em&gt; que sabemos posee infinitas soluciones en los enteros al no ser $5$ un cuadrado perfecto. Por tanteo, hallamos la solución particular $x=9$ e $y=4$, ya que $9^2 - 5\cdot4^2=1$. Expresamos ahora la diferencia de cuadrados como producto de una suma y una diferencia, de forma que&lt;/p&gt;

&lt;p&gt;$$
9^2 - 5\cdot4^2=1 \Leftrightarrow (9+4\sqrt{5})(9-4\sqrt{5}) = 1.
$$&lt;/p&gt;

&lt;p&gt;Análogamente, la sucesión de soluciones enteras, que denotaremos por $(x_n,y_n)$, debe cumplir que $(x_n+y_n\sqrt{5})(x_n-y_n\sqrt{5})=1$. Expresamos la solución general utilizando recurrencias, de manera que,&lt;/p&gt;

&lt;p&gt;$$
x_{n+1} + y_{n+1}\sqrt{5} = (x_n + y_n\sqrt{5})(9+4\sqrt{5}) = 9x_n + 4\sqrt{5}x_n + 9\sqrt{5}y_n + 20y_n,
$$&lt;/p&gt;

&lt;p&gt;luego&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x_{n+1} &amp;amp;= 9x_n + 20y_n,\\ y_{n+1} &amp;amp;= 4x_n + 9y_n.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Utilizando notación matricial,&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
x_{n+1}\\ y_{n+1}
\end{bmatrix}
= \begin{bmatrix}
9 &amp;amp; 20\\ 4 &amp;amp; 9
\end{bmatrix}
\begin{bmatrix}
x_n\\ y_n
\end{bmatrix},
$$&lt;/p&gt;

&lt;p&gt;con $(x_1,y_1) = (9,4)$. La solución particular hallada no cumple los requisitos impuestos en el enunciado del ejercicio, por lo que procederemos a obtener la siguiente.&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
x_2\\ y_2
\end{bmatrix}
= \begin{bmatrix}
9 &amp;amp; 20\\ 4 &amp;amp; 9
\end{bmatrix}
\begin{bmatrix}
9\\ 4
\end{bmatrix}
= \begin{bmatrix}
161\\ 72
\end{bmatrix},
$$&lt;/p&gt;

&lt;p&gt;que es la solución que estamos persiguiendo, pues $161^2 = 25921 = 5\cdot72^2+1$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>En la granja de Pepito</title>
      <link>https://imalexissaez.github.io/2019/02/23/en-la-granja-de-pepito/</link>
      <pubDate>Sat, 23 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/23/en-la-granja-de-pepito/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 54:&lt;/strong&gt; Un granjero compró vacas, cerdos y pollos. En total $100$ animales por $100$ euros. Hay al menos uno de cada. Si una vaca cuesta $10$ euros, un cerdo $3$ euros y un pollo $0.50$ euros, ¿cuántos animales de cada clase compró?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sea $x$ el número de vacas, $y$ el total de cerdos y $z$ la cantidad de pollos adquiridos. Como se compran $100$ animales, tenemos la ecuación lineal $x+y+z=100$, con la restricción de que $x\geq1$, $y\geq1$ y $z\geq1$ ya que nos indican que, al menos, se compra un animal de cada tipo. Finalmente, dados los precios suministrados y el desembolso llevado a cabo, encontramos la ecuación $10x+3y + 0.5z = 100$. Así pues, hemos de resolver el sistema de ecuaciones&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
10x+3y+0.5z &amp;amp;= 100,\\ x+y+z &amp;amp;= 100,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con la restricción adicional indicada arriba. Despejando la variable $z$ de la segunda ecuación, $z = 100-x-y$, y sustituyéndola en la primera ecuación del sistema,&lt;/p&gt;

&lt;p&gt;$$
10x + 3y + 50 - 0.5x - 0.5y = 100,
$$&lt;/p&gt;

&lt;p&gt;esto es, $10x+3y-0.5x-0.5y=50$, o bien $19x+5y=100$, ecuación diofántica que sabemos admite solución entera, puesto que $mcd(5,19)=1$ y, obviamente, $1|100$. Así, despejando la variable $y$, por ser aquella cuyo coeficiente asociado es más reducido,&lt;/p&gt;

&lt;p&gt;$$
y = \dfrac{100 - 19x}{5},
$$&lt;/p&gt;

&lt;p&gt;por lo que basta probar, para $x$, valores pertenecientes al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $5$. Para $x_0=0$, hallamos que $y_0 = 20$, siendo esta una solución particular de la ecuación diofántica propuesta. Su solución general, por tanto, queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 5t,\\ y &amp;amp;= 20-19t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero. Como hemos de comprar, al menos, un animal de cada tipo, tanto $x$ como $y$ han de ser positivas. De $5t&amp;gt;0$ concluimos que $t&amp;gt;0$; mientras que de $20-19t&amp;gt;0$ deducimos que $t\leq 1$. Así, como $t$ es un número entero, únicamente puede tomar el valor $t=1$, dejando así $x=5$, $y=1$ y $z = 100-x-y = 100-5-1=94$. Es decir, el granjero compró $5$ vacas, un cerdo y $94$ pollos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Volvemos a los tiempos de libras, marcos y pesetas</title>
      <link>https://imalexissaez.github.io/2019/02/20/volvemos-a-los-tiempos-de-libras-marcos-y-pesetas/</link>
      <pubDate>Wed, 20 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/20/volvemos-a-los-tiempos-de-libras-marcos-y-pesetas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 53:&lt;/strong&gt; Para abonar una factura de $1840$ pesetas se entregan libras esterlinas y dan la vuelta en marcos. Calcula las libras esterlinas entregadas y los marcos devueltos suponiendo que se ha entregado la cantidad mínima de libras necesarias para pagar y que la devolución es en marcos ($1$ marco $=$ $70$ pesetas, $1$ libra $=$ $180$ pesetas).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sea $x$ la cantidad de libras esterlinas entregadas e $y$ el total de marcos recibidos en la devolución. Como la factura viene dada en pesetas y tenemos indicadas las tasas de conversión de las otras dos monedas en relación a las pesetas, trabajaremos durante el resto del ejercicio con esta unidad monetaria.&lt;/p&gt;

&lt;p&gt;Con ello en mente, la cantidad que desembolso en libras para cumplir con la factura más el total de marcos que recibo en concepto de devolución ha de ascender a $1840$ pesetas, esto es,&lt;/p&gt;

&lt;p&gt;$$
180x + 70y = 1840.
$$&lt;/p&gt;

&lt;p&gt;Ahora bien, como $70 = 2\cdot5\cdot7$ y $180 = 2^2\cdot3^2\cdot5$, entonces $mcd(70, 180) = 10$. Dado que, trivialmente, $10|1840$, la ecuación diofántica propuesta admite solución entera. Simplificando dicha ecuación por $10$, tenemos que $18x + 7y = 184$, expresión que nos invita, para empezar, a llevar a cabo el cambio de variable&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 184x^{\prime},\\ y &amp;amp;= 184y^{\prime}
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;que la transforma en $18x^{\prime}+7y^{\prime}=1$. Ahora, despejando la variable $y^{\prime}$, por ser aquella cuyo coeficiente asociado es más reducido, hallamos que&lt;/p&gt;

&lt;p&gt;$$
y^{\prime} = \dfrac{1-18x^{\prime}}{7},
$$&lt;/p&gt;

&lt;p&gt;por lo que basta probar, para $x^{\prime}$, valores pertenecientes al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $7$. Para $x^{\prime}_0 = 2$, resulta que $y^{\prime}_0 = (-5)$, y deshaciendo el anterior cambio de variable,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x_0 &amp;amp;= 184x^{\prime} = 184\cdot2 = 368,\\ y_0 &amp;amp;= 184y^{\prime} = 184\cdot(-5) = (-920),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;es una solución particular para la ecuación diofántica planteada. Su solución genera queda, entonces,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 368 + 7t,\\ y &amp;amp;= (-920) - 18t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;

&lt;p&gt;De entre las infinitas soluciones que tenemos a nuestra disposición, busquemos aquella que se ajusta a los dictados del enunciado del ejercicio, es decir, aquella para la cual se desembolsa la mínima cantidad de libras esterlinas necesarias para abonar la factura. Esta situación se traduce en averiguar el valor de $x$ tal que, $18x \geq 184$. Sustituyendo,&lt;/p&gt;

&lt;p&gt;$$
18(368 + 7t)\geq 184,
$$&lt;/p&gt;

&lt;p&gt;es decir, $6624 + 126t \geq 184$. Por tanto, $126t \geq (-6498)$, luego $t\geq (-51.6)$ y como $t$ ha de ser entero, la inecuación entonces queda $t\geq (-51)$. Como buscamos el menor valor para el que satisface la inecuación, este será, evidentemente, $t=(-51)$, resultando entonces&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 368 + 7\cdot(-51) = 11,\\ y &amp;amp;= (-920) - 18\cdot(-51) = -2,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es, abonaremos la factura con $11$ libras esterlinas y nos devolverán $2$ marcos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un primer contacto con ecuaciones diofánticas (V)</title>
      <link>https://imalexissaez.github.io/2019/02/16/un-primer-contacto-con-ecuaciones-diofanticas-v/</link>
      <pubDate>Sat, 16 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/16/un-primer-contacto-con-ecuaciones-diofanticas-v/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 52:&lt;/strong&gt; Halla las soluciones enteras de la ecuación&lt;/p&gt;

&lt;p&gt;$$
30x+42y+70z-105u=(-3).
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Como&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
30 &amp;amp;= 2\cdot3\cdot5,\\ 42 &amp;amp;= 2\cdot3\cdot7,\\ 70 &amp;amp;= 2\cdot5\cdot7,\\ 105 &amp;amp;= 3\cdot5\cdot7,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;entonces $mcd(30,42,70,105)=1$, por lo que estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. A diferencia del &lt;a href=&#34;https://imalexissaez.github.io/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/&#34;&gt;problema anterior&lt;/a&gt;, en esta ocasión ningún par de coeficientes está conformado por números primos entre sí. El procedimiento que seguiremos será entonces:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Escogeremos dos coeficientes cualesquiera.&lt;/li&gt;
&lt;li&gt;Despejaremos para conseguir una ecuación diofántica con dos variables.&lt;/li&gt;
&lt;li&gt;Dividiremos por el máximo común divisor de los mencionados coeficientes y resolveremos dicha ecuación.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta manera, si empezamos considerando los coeficientes asociados a las variables $x$ e $y$, como $mcd(30,42)=6$, la ecuación $30x+42y = (-3) - 70z + 105u$ la podemos simplificar por $6$, llegando así a&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
5x+7y = \dfrac{(-3)-70z+105u}{6} = v,\quad\text{con}\quad v = \dfrac{(-3)-70z+105u}{6}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Llevando a cabo el cambio de variable $x = vx^{\prime}$ e $y = vy^{\prime}$, la ecuación queda $5x^{\prime}+7y^{\prime}=1$, y despejando la variable $x^{\prime}$, por ser aquella cuyo coeficiente asociado es más reducido,&lt;/p&gt;

&lt;p&gt;$$
x^{\prime} = \dfrac{1-7y^{\prime}}{5},
$$&lt;/p&gt;

&lt;p&gt;hallando que para $y^{\prime}_0 = (-2)$, entonces $x^{\prime}_0 = 3$. Deshaciendo el cambio de variable efectuado, $x_0 = 3v$ e $y_0 = -2v$ es una solución particular para la ecuación diofántica planteada unas líneas arriba, por lo que su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 3v + 7t,\\ y &amp;amp;= -2v - 5t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;

&lt;p&gt;No obstante, recordemos que declaramos antes que $$v = \dfrac{(-3) - 70z + 105u}{6},$$ esto es $105u - 70z - 6v = 3$, que resulta ser una ecuación diofántica de tres variables del mismo tipo que aquella con la cual iniciamos este ejercicio (el máximo común divisor de sus coeficientes asciende a $1$, pero no existe algún par de ellos que sean primos entre sí), pero con una incógnita menos. Como $mcd(6,70,105) = 1$, estamos en condiciones de asegurar que esta última ecuación diofántica planteada admite solución entera. Tomando, por ejemplo, los coeficientes asociados a las variables $u$ y $z$, escribimos entonces la ecuación $105u-70z = 3+6v$, que podemos simplificar por $35$, quedando así&lt;/p&gt;

&lt;p&gt;$$
3u-2z = \dfrac{3+6v}{35} = w,\quad\text{con}\quad w = \dfrac{3+6v}{35}.
$$&lt;/p&gt;

&lt;p&gt;Al igual que antes, si consideramos el cambio de variable $u = wu^{\prime}$ y $z = wz^{\prime}$, la anterior ecuación se convierte en $3u^{\prime}-2z^{\prime}=1$. Despejando la variable $z^{\prime}$, por ser aquella cuyo coeficiente asociado es más reducido, $$z^{\prime} = \dfrac{1-3u^{\prime}}{2}.$$ Luego, para $u^{\prime}_0=(-1)$ hallamos que $z^{\prime}_0=(-2)$, y deshaciendo el cambio de variable efectuado, $u_0 = -w$ y $z_0 = -2w$ es una solución particular de esta ecuación diofántica, por lo que su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
u &amp;amp;= -w+2t^{\prime},\\ z &amp;amp;= -2w+3t^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t^{\prime}$ número entero.&lt;/p&gt;

&lt;p&gt;Finalmente, como definimos antes $$w = \dfrac{3+6v}{35},$$ generamos al ecuación diofántica $35w-6v=3$, que sabemos admite solución entera pues $mcd(6,35) = 1$. Así, despejando ahora la variable $w$, $$w=\dfrac{3+6v}{35},$$ y entonces $v_0 = (-18)$ y $w_0=3$ es una solución particular para ella. De esta manera, su solución general es&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
v &amp;amp;= (-18)+35t^{\prime\prime},\\ w &amp;amp;= 3+6t^{\prime\prime}
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t^{\prime\prime}$ número entero. Únicamente nos resta reemplazar adecuadamente los resultados alcanzados para que así la solución quede expresada en función de valores enteros. Así,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 3v+7t = (-54) + 7t + 105t^{\prime\prime},\\ y &amp;amp;= -2v-5t = 36 - 5t - 70t^{\prime\prime},\\ z &amp;amp;= -2w + 3t^{\prime} = (-6) + 3t^{\prime} - 12t^{\prime\prime},\\ u &amp;amp;= -w+2t^{\prime} = (-3) + 2t^{\prime} - 6t^{\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$, $t^{\prime}$ y $t^{\prime\prime}$ números enteros.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un primer contacto con ecuaciones diofánticas (IV)</title>
      <link>https://imalexissaez.github.io/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/</link>
      <pubDate>Wed, 13 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 51:&lt;/strong&gt; Halla las soluciones enteras de la ecuación $3x+2y+9z=12$.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Dado que $mcd(2,3,9)=1$, estamos en condiciones de asegurar que la ecuación diofántica planteada admite solución entera. Al encontrar tres incógnitas, para empezar, hemos de comprobar si algún par de coeficientes está compuesto por números primos entre sí. En esta ocasión, como $mcd(2,3)=1$ podemos, por ejemplo, fijar como variables $x$ e $y$, de manera que escribimos la ecuación diofántica como sigue,&lt;/p&gt;

&lt;p&gt;$$
3x+2y=12-9z.
$$&lt;/p&gt;

&lt;p&gt;A continuación, trabajamos con la ecuación $3x+2y=1$, para la cual, despejando la variable $y$ por ser aquella cuyo coeficiente es más reducido, hallamos que&lt;/p&gt;

&lt;p&gt;$$
y = \dfrac{1-3x}{2},
$$&lt;/p&gt;

&lt;p&gt;por lo que basta probar, para $x$, valores pertenecientes al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $2$. Así, para $x=1$ es cierto que $y = (-1)$, y entonces la solución particular a la ecuación diofántica propuesta arriba queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x_0 &amp;amp;= 1\cdot(12-9z) = 12-9z,\\ y_0 &amp;amp;= (-1)\cdot(12-9z) = (-12) + 9z,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que su solución general es&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 12 - 9z + 2t,\\ y &amp;amp;= (-12) + 9z - 3t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ y $z$ números enteros.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¡Qué difícil es la vida sana!</title>
      <link>https://imalexissaez.github.io/2019/02/09/que-dificil-es-la-vida-sana/</link>
      <pubDate>Sat, 09 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/09/que-dificil-es-la-vida-sana/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 50:&lt;/strong&gt; Se compran manzanas y naranjas, en total $12$ piezas de fruta y cuestan $1.32$ euros. Si una manzana vale $3$ céntimos más que una naranja y hay más manzanas que naranjas, ¿cuántas piezas de cada fruta compramos?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sea $x$ el número de manzanas ($M$) compradas, de manera que el total de naranjas ($N$) adquiridas será $12-x$. Por otro lado, si denotamos por $y$ el precio de las naranjas ($P_N$), será $y+3$ el precio de las manzanas ($P_M$). Expresemos el desembolso realizado, $1.32$ euros, en céntimos, esto es, $132$ céntimos, para así trabajar con números enteros. De esta manera, multiplicando las cantidades por los precios e igualando al mencionado desembolso, podemos plantear la siguiente ecuación diofántica,&lt;/p&gt;

&lt;p&gt;$$
x(y+3) + (12-x)y=132,
$$&lt;/p&gt;

&lt;p&gt;es decir, $xy+3x+12y-xy=132$, que, simplificando, queda $3x+12y=132$. Como $mcd(3,12) = 3$ y $3|132$, estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. Así pues, simplificando por el máximo común divisor queda&lt;/p&gt;

&lt;p&gt;$$
x+4y=44.
$$&lt;/p&gt;

&lt;p&gt;Como, en total, se adquieren $12$ piezas de frutas y se compran más manzanas que naranjas, resulta que $7\leq x\leq 11$. Luego,&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$x$ ($M$)&lt;/th&gt;
&lt;th&gt;$12-x$ ($N$)&lt;/th&gt;
&lt;th&gt;$y+3$ ($P_M$)&lt;/th&gt;
&lt;th&gt;$y$ ($P_N$)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$7$&lt;/td&gt;
&lt;td&gt;$5$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$8$&lt;/td&gt;
&lt;td&gt;$4$&lt;/td&gt;
&lt;td&gt;$12$&lt;/td&gt;
&lt;td&gt;$9$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$9$&lt;/td&gt;
&lt;td&gt;$3$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$10$&lt;/td&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$11$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;td&gt;$\notin\mathbb{N}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Por tanto, compramos $8$ manzanas, a $12$ céntimos cada una, y $4$ naranjas, a $9$ céntimos la unidad. A modo anecdótico, es cierto que para $x=12$ también encontraríamos solución entera al problema. No obstante, si interpretamos el enunciado de manera que al menos ha comprado una unidad de cada tipo de fruta, esta solución quedaría descartada automáticamente, pues impide la adquisición de naranjas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando números triangulares que son cuadrados perfectos</title>
      <link>https://imalexissaez.github.io/2019/02/06/buscando-numeros-triangulares-que-son-cuadrados-perfectos/</link>
      <pubDate>Wed, 06 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/06/buscando-numeros-triangulares-que-son-cuadrados-perfectos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 49:&lt;/strong&gt; Halla los números naturales $n$ de manera que se cumpla que&lt;/p&gt;

&lt;p&gt;$$
1+2+\cdots+n = k^2,
$$&lt;/p&gt;

&lt;p&gt;con $k$ número natural.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Observamos rápidamente que para $n = 1$ se verifica la propiedad, sin más que tomar asimismo $k = 1$. El enunciado propuesto en el ejercicio es equivalente a hallar los números triangulares que son cuadrados perfectos. La ecuación diofántica $1+2+\cdots+n = k^2$ podemos escribirla de manera más compacta utilizando la conocida expresión para la suma de los primeros $n$ números naturales. Así,&lt;/p&gt;

&lt;p&gt;$$
\dfrac{n(n+1)}{2} = k^2,
$$&lt;/p&gt;

&lt;p&gt;o, equivalentemente, $n^2+n=2k^2$, dando lugar pues a la siguiente ecuación de segundo grado en $n$, $n^2+n-2k^2=0$. Por tanto,&lt;/p&gt;

&lt;p&gt;$$
n = \dfrac{(-1)\pm\sqrt{1+8k^2}}{2}.
$$&lt;/p&gt;

&lt;p&gt;Como buscamos valores naturales para $n$, podemos prescindir del signo $-$ que aparece en el numerador. Además, $1+8k^2$ ha de ser un cuadrado perfecto, que también necesitaremos sea impar, para que el numerador sea par y así $n$, efectivamente, pertenezca al conjunto de los números naturales. De esta manera, como ha de ser $1+8k^2$ un cuadrado perfecto, planteamos la ecuación $1+8k^2 = p^2$, que nos lleva a la &lt;em&gt;ecuación de Pell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$$
p^2-8k^2=1,
$$&lt;/p&gt;

&lt;p&gt;de la cual sabemos posee infinitas soluciones en los enteros, pues $8$ no es un cuadrado perfecto. Por tanteo, una solución particular es $p=3$ y $k=1$, ya que $3^2 - 8\cdot1^2=1$. Expresamos ahora la diferencia de cuadrados como producto de una suma y una diferencia, de forma que&lt;/p&gt;

&lt;p&gt;$$
3^2 - 8\cdot1^2=1\Leftrightarrow (3+\sqrt{8})(3-\sqrt{8})=1.
$$&lt;/p&gt;

&lt;p&gt;Análogamente, la sucesión de soluciones enteras, que denotaremos por $(p_n,k_n)$, debe cumplir que $(p_n + k_n\sqrt{8})(p_n - k_n\sqrt{8})=1$. Obtengamos la solución general utilizando recurrencias, de manera que,&lt;/p&gt;

&lt;p&gt;$$
p_{n+1} + k_{n+1}\sqrt{8} = (p_n+k_n\sqrt{8})(3+\sqrt{8}) = 3p_n + \sqrt{8}p_n + 3\sqrt{8}k_n + 8k_n,
$$&lt;/p&gt;

&lt;p&gt;luego&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
p_{n+1} &amp;amp;= 3p_n + 8k_n,\\ k_{n+1} &amp;amp;=  p_n + 3k_n.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Utilizando notación matricial,&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
p_{n+1}\\ k_{n+1}
\end{bmatrix}
= \begin{bmatrix}
3 &amp;amp; 8\\ 1 &amp;amp; 3
\end{bmatrix}
\begin{bmatrix}
p_n\\ k_n
\end{bmatrix}.
$$&lt;/p&gt;

&lt;p&gt;Ahora, $$n = \dfrac{(-1) + p}{2},$$ por lo que la solución general del ejercicio queda como&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
p_{n+1}\\ k_{n+1}
\end{bmatrix}
= \begin{bmatrix}
3 &amp;amp; 8\\ 1 &amp;amp; 3
\end{bmatrix}
\begin{bmatrix}
p_n\\ k_n
\end{bmatrix},
$$&lt;/p&gt;

&lt;p&gt;con $(p_1,k_1) = (3,1)$ y $$n = \dfrac{(-1) + p_n}{2}.$$&lt;/p&gt;

&lt;p&gt;Así, para $p_1 = 3$, tenemos que $n = ((-1)+3)/2 = 1$. Obtengamos algunas soluciones adicionales,&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
p_{2}\\ k_{2}
\end{bmatrix}
= \begin{bmatrix}
3 &amp;amp; 8\\ 1 &amp;amp; 3
\end{bmatrix}
\begin{bmatrix}
3\\ 1
\end{bmatrix}
= \begin{bmatrix}
17 \\ 6
\end{bmatrix},
$$&lt;/p&gt;

&lt;p&gt;y entonces, para $p_2=17$ queda $n = ((-1) + 17)/2 = 8$, esto es,&lt;/p&gt;

&lt;p&gt;$$
1+2+\cdots+7+8 = 6^2.
$$&lt;/p&gt;

&lt;p&gt;Ahora,&lt;/p&gt;

&lt;p&gt;$$
\begin{bmatrix}
p_3\\ k_3
\end{bmatrix}
= \begin{bmatrix}
3 &amp;amp; 8\\ 1 &amp;amp; 3
\end{bmatrix}
\begin{bmatrix}
17\\ 6
\end{bmatrix}
= \begin{bmatrix}
99\\ 35
\end{bmatrix},
$$&lt;/p&gt;

&lt;p&gt;y, por tanto, para $p=99$ queda $n = ((-1) + 99)/2 = 49$, es decir,&lt;/p&gt;

&lt;p&gt;$$
1+2+\cdots+48+49 = 35^2,
$$&lt;/p&gt;

&lt;p&gt;bastando aplicar el procedimiento tantas veces como soluciones deseemos encontrar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un primer contacto con ecuaciones diofánticas (III)</title>
      <link>https://imalexissaez.github.io/2019/02/02/un-primer-contacto-con-ecuaciones-diofanticas-iii/</link>
      <pubDate>Sat, 02 Feb 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/02/02/un-primer-contacto-con-ecuaciones-diofanticas-iii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 48:&lt;/strong&gt; Halla las soluciones enteras de la ecuación $x^2-y^2=36$.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Al ser $36$ par y múltiplo de $4$, $36 = 2^2\cdot3^2$, estamos en condiciones de asegurar que la ecuación diofántica planteada admite solución entera. Escribimos $x^2-y^2=36$ como $(x+y)(x-y)=36$, y consideramos&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
36 &amp;amp;= 36\cdot1 \\ &amp;amp;= 18\cdot2 \\ &amp;amp;= 12\cdot3 \\ &amp;amp;= 9\cdot4 \\ &amp;amp;= 6\cdot6 \\ &amp;amp;= 4\cdot9 \\ &amp;amp;= 3\cdot12 \\ &amp;amp;= 2\cdot18 \\ &amp;amp;= 1\cdot36,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;descartando automáticamente aquellos casos en los que la paridad de ambos términos no coincide.&lt;/p&gt;

&lt;p&gt;Así, para $36 = 18\cdot2$, tenemos el sistema de ecuaciones lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x+y &amp;amp;= 18,\\ x-y &amp;amp;=  2,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con solución $x = 10$ e $y = 8$. Para la descomposición $36 = (-18)\cdot(-2)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-10)$ e $y = (-8)$.&lt;/p&gt;

&lt;p&gt;A continuación, si $36 = 6\cdot6$, tenemos el sistema de ecuaciones lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x+y &amp;amp;= 6,\\ x-y &amp;amp;= 6,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con solución $x = 6$ e $y = 0$. Para la descomposición $36 = (-6)\cdot(-6)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-6)$ e $y = 0$.&lt;/p&gt;

&lt;p&gt;Acto seguido, si $36 = 2\cdot18$, tenemos el sistema de ecuaciones lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x+y &amp;amp;=  2,\\ x-y &amp;amp;= 18,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con solución $x = 10$ e $y = (-8)$. Para la descomposición $36 = (-2)\cdot(-18)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-10)$ e $y = 8$.&lt;/p&gt;

&lt;p&gt;Queda así resuelta la ecuación diofántica planteada en el enunciado del ejercicio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¡Nos vamos al cine!</title>
      <link>https://imalexissaez.github.io/2019/01/30/nos-vamos-al-cine/</link>
      <pubDate>Wed, 30 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/30/nos-vamos-al-cine/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 47:&lt;/strong&gt; Una persona ha comprado entradas para el cine para personas adultas por un precio de $640$ unidades monetarias (&lt;em&gt;um&lt;/em&gt;) cada una y para menores de edad a $330$ &lt;em&gt;um&lt;/em&gt;. Sabiendo que invirtió $7140$ &lt;em&gt;um&lt;/em&gt; y que compró menos entradas de adultos que de menores, hallar el número de entradas que adquirió.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sean $x$ el número de entradas para personas adultas compradas e $y$ el número de entradas para menores de edad compradas, con $x,y\in\mathbb{N}$. Dados los precios del enunciado y la cantidad total invertida, planteamos la siguiente ecuación diofántica:&lt;/p&gt;

&lt;p&gt;$$
640x + 330y = 7140,
$$&lt;/p&gt;

&lt;p&gt;que es equivalente, simplificando por $10$, a&lt;/p&gt;

&lt;p&gt;$$
64x + 33y = 714.
$$&lt;/p&gt;

&lt;p&gt;Utilicemos el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt; para hallar el $mcd(64,33)$ y decidir así si la ecuación admite o no solución entera. Tenemos que:&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
64 &amp;amp;= 33\cdot 1 + 31,\\ 33 &amp;amp;= 31\cdot 1 + 2,\\ 31 &amp;amp;= 2\cdot 15 + 1,\\ 2 &amp;amp;= 1\cdot 2,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;luego $mcd(64,33) = 1$, y como $1|714$, estamos en condiciones de asegurar que la ecuación diofántica admite solución entera. Como $714$ es un número ciertamente elevado, comencemos llevando a cabo el cambio de variable&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 714x^{\prime},\\ y &amp;amp;= 714y^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;de manera que la ecuación diofántica queda $64x^{\prime} + 33y^{\prime} = 1$ y nos invita a despejar $y^{\prime}$, por ser la variable cuyo coeficiente asociado es más reducido, de forma que $$y^{\prime} = \dfrac{1-64x^{\prime}}{33}.$$ Ahora, como el valor que figura en el denominador de la igualdad anterior es $33$, a continuación, tendríamos que darle a $x^{\prime}$, de manera ordenada, valores del &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $33$ hasta hallar una solución particular.&lt;/p&gt;

&lt;p&gt;No obstante, en lugar de llevar a cabo tan titánica labor, aprovecharemos las operaciones realizadas durante el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt; para descomponer la anterior fracción como sigue:&lt;/p&gt;

&lt;p&gt;$$
y^{\prime} = -x^{\prime} + \dfrac{1 - 31x^{\prime}}{33} = -x^{\prime} + y^{\prime\prime},
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
y^{\prime\prime} = \dfrac{1 - 31x^{\prime}}{33},
$$&lt;/p&gt;

&lt;p&gt;que equivale a $33y^{\prime\prime} = 1 - 31x^{\prime}$, de manera que ahora tendríamos que despejar $x^{\prime}$, quedando:&lt;/p&gt;

&lt;p&gt;$$
x^{\prime} = \dfrac{1-33y^{\prime\prime}}{31} = -y^{\prime\prime} + \dfrac{1-2y^{\prime\prime}}{31}=-y^{\prime\prime} + x^{\prime\prime},
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime\prime} = \dfrac{1-2y^{\prime\prime}}{31},
$$&lt;/p&gt;

&lt;p&gt;que equivale a $31x^{\prime\prime} = 1-2y^{\prime\prime}$, y despejando $y^{\prime\prime}$ tenemos que&lt;/p&gt;

&lt;p&gt;$$
y^{\prime\prime} = \dfrac{1-31x^{\prime\prime}}{2}.
$$&lt;/p&gt;

&lt;p&gt;Tras aplicar en retiradas ocasiones la misma estrategia de descomposición, hemos alcanzado un valor razonable para el denominador de la anterior ecuación. Podemos así dar valores a $x^{\prime\prime}$, ya que únicamente tendríamos que probar $x^{\prime\prime}=0$, y $x^{\prime\prime}=1$ (que conforma el &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $2$). Para $x^{\prime\prime}=0$, $y^{\prime\prime}\notin\mathbb{Z}$, pero para $x^{\prime\prime}=1$, $y^{\prime\prime} = -15$. Ahora,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} &amp;amp;= -y^{\prime\prime} + x^{\prime\prime} = 15+1 = 16,\\ y^{\prime} &amp;amp;= -x^{\prime} + y^{\prime\prime} = -16 -15 = -31,\\ x  &amp;amp;= 714x^{\prime} = 714\cdot 16 = 11424,\\ y  &amp;amp;= 714y^{\prime} = 714\cdot(-31) = -22134,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que la solución particular queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x_0 &amp;amp;= 11424,\\ y_0 &amp;amp;= -22134,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;mientras que la solución general es&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x  &amp;amp;= 11424 + 33t,\\ y  &amp;amp;= -22134 - 64t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t\in\mathbb{Z}$.&lt;/p&gt;

&lt;p&gt;Ahora que hemos resuelto la ecuación diofántica, centrémonos en sacar el número de entradas. Por un lado, en ambos casos debe tratarse de un número mayor o igual que cero, es decir, tanto $x\geq0$, como $y\geq0$. Además, nos dicen que compró menos entradas de adultos que de menores, es decir, que $x&amp;lt;y$. Todo esto da lugar a las siguientes condiciones:&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x  = 11424 + 33t&amp;amp;\geq0,\\ y  = -22134 - 64t&amp;amp;\geq0,\\ 11424 + 33t &amp;amp;&amp;lt; -22134 - 64t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t\in\mathbb{Z}$. De la primera inecuación, se llega a que&lt;/p&gt;

&lt;p&gt;$$
t\geq -\dfrac{11424}{33},
$$&lt;/p&gt;

&lt;p&gt;luego $t\geq -346$. De la segunda inecuación, se llega a que&lt;/p&gt;

&lt;p&gt;$$
t\leq -\dfrac{22134}{64},
$$&lt;/p&gt;

&lt;p&gt;luego $t\leq -346$, con lo cual $t=346$, cantidad que, efectivamente, también verifica la tercera inecuación. Así,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 11424 + 33\cdot(-346) = 6,\\ y &amp;amp;= -22134 - 64\cdot(-346) = 10,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;es decir, compró $6$ entradas para adultos y $10$ entradas para menores de edad.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un primer contacto con ecuaciones diofánticas (II)</title>
      <link>https://imalexissaez.github.io/2019/01/26/un-primer-contacto-con-ecuaciones-diofanticas-ii/</link>
      <pubDate>Sat, 26 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/26/un-primer-contacto-con-ecuaciones-diofanticas-ii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 46:&lt;/strong&gt; Estudia cuáles de estas ecuaciones diofánticas tiene solución entera y, en su caso, calcúlala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $25x+36y=10$.&lt;/li&gt;
&lt;li&gt;(b) $200x+1768y=8$.&lt;/li&gt;
&lt;li&gt;(c) $40x+50y=3$.&lt;/li&gt;
&lt;li&gt;(d) $213x+1123y=18$.&lt;/li&gt;
&lt;li&gt;(e) $14x+165y=1$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), como $25=5^2$ y $36 = 2^2\cdot3^2$, entonces $mcd(25,36)=1$, y, dado que $1|10$, estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. Empecemos despejando la variable $x$, por ser aquella cuyo coeficiente asociado es más reducido. Así,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x = \dfrac{10-36y}{25} = -y + \dfrac{10-11y}{25} = -y+x^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime}=\dfrac{10-11y}{25},
$$&lt;/p&gt;

&lt;p&gt;esto es, $25x^{\prime} + 11y = 10$, luego&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y = \dfrac{10-25x^{\prime}}{11} = -2x^{\prime} + \dfrac{10-3x^{\prime}}{11} = -2x^{\prime}+y^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
y^{\prime}=\dfrac{10-3x^{\prime}}{11},
$$&lt;/p&gt;

&lt;p&gt;es decir, $3x^{\prime}+11y^{\prime}=10$. Finalmente,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} = \dfrac{10-11y^{\prime}}{3},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que basta probar para $y^{\prime}$ valores pertenecientes al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $3$. Para $y^{\prime}=2$, tenemos que $x^{\prime} = (-4)$, y deshaciendo ahora los cambios de variable llevados a cabo anteriormente,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y &amp;amp;= -2x^{\prime} + y^{\prime} = 8+2=10,\\ x &amp;amp;= -y + x^{\prime} = (-10) - 4 = -14,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es, una solución particular para la ecuación diofántica planteada es $(x_0,y_0) = ((-14), 10)$, mientras que su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= (-14) + 36t,\\ y &amp;amp;= 10 - 25t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;

&lt;p&gt;De cara al apartado (b), comencemos calculando el máximo común divisor de $200$ y $1768$ por el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt;. Tenemos que,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
1768 &amp;amp;= 200\cdot8 + 168,\\  200 &amp;amp;= 168\cdot1 +  32,\\  168 &amp;amp;=  32\cdot5 +   8,\\ 32 &amp;amp;=   8\cdot4,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que $mcd(200,1768) = 8$ y, evidentemente, $8|8$, por lo que estamos en condiciones de asegurar que la ecuación diofántica propuesta en este apartado admite solución entera. Simplificando dicha ecuación por $8$ queda $25x + 221y = 1$. Despejemos la variable $x$, por ser aquella cuyo coeficiente es más reducido,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x = \dfrac{1-221y}{25} = -8y + \dfrac{1-21y}{25} = -8y + x^{\prime},\quad\text{con}\quad x^{\prime} = \dfrac{1-21y}{25},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es, $25x^{\prime} +21y = 1$, luego&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y = \dfrac{1-25x^{\prime}}{21} = -x^{\prime} + \dfrac{1-4x^{\prime}}{21} = -x^{\prime}+y^{\prime},\quad\text{con}\quad y^{\prime} = \dfrac{1-4x^{\prime}}{21},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;es decir, $4x^{\prime} + 21y^{\prime} = 1$, por lo que&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} = \dfrac{1-21y^{\prime}}{4},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y ya únicamente basta probar valores para $y^{\prime}$ que pertenezcan al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $4$. Así, para $y^{\prime} = 1$, tenemos que $x^{\prime} = (-5)$, y deshaciendo los cambios de variable llevados a cabo arriba,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y &amp;amp;= -x^{\prime}+y^{\prime} = 5+1=6,\\ x &amp;amp;= -8y+x^{\prime} = (-48)-5 = (-53),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es, una solución para la ecuación diofántica planteada es $(x_0,y_0) = ((-53), 6)$, y su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= (-53) + 1768t,\\ y &amp;amp;= 6-200t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;

&lt;p&gt;A continuación, en el apartado (c), como $40 = 2^3\cdot5$ y $50 = 2\cdot5^2$, resulta que $mcd(40,50) = 10$, y dado que $10\nmid 3$, estamos en condiciones de asegurar que la ecuación diofántica propuesta no admite solución entera.&lt;/p&gt;

&lt;p&gt;Para el apartado (d), empecemos calculando el máximo común divisor de $213$ y $1123$ utilizando el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
1123 &amp;amp;= 213\cdot5 + 58,\\  213 &amp;amp;=  58\cdot3 + 39,\\ 58 &amp;amp;=  39\cdot1 + 19,\\ 39 &amp;amp;=  19\cdot2 +  1,\\ 19 &amp;amp;=   1\cdot19,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que $mcd(213, 1123)=1$, esto es, la ecuación diofántica admite solución entera, ya que, obviamente, $1|18$. Por comodidad en los cálculos, empecemos llevando a cabo el cambio de variable&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 18x^{\prime},\\ y &amp;amp;= 18y^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y así queda, $213x^{\prime} + 1123y^{\prime}=1$. Despejando la variable $x^{\prime}$, por ser aquella cuyo coeficiente asociado es más reducido, llegamos a que&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} = \dfrac{1-1123y^{\prime}}{213} = -5y^{\prime} + \dfrac{1-58y^{\prime}}{213} = -5y^{\prime}+x^{\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime\prime} = \dfrac{1-58y^{\prime}}{213},
$$&lt;/p&gt;

&lt;p&gt;esto es, $213x^{\prime\prime} + 58y^{\prime} = 1$. Ahora,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y^{\prime} = \dfrac{1-213x^{\prime\prime}}{58} = -3x^{\prime\prime} + \dfrac{1-39x^{\prime\prime}}{58} = -3x^{\prime\prime} + y^{\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
y^{\prime\prime} = \dfrac{1-39x^{\prime\prime}}{58},
$$&lt;/p&gt;

&lt;p&gt;es decir, $39x^{\prime\prime} + 58y^{\prime\prime} = 1$. A continuación,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime\prime} = \dfrac{1-58y^{\prime\prime}}{39} = -y^{\prime\prime} + \dfrac{1-19y^{\prime\prime}}{39} = -y^{\prime\prime} + x^{\prime\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime\prime\prime} = \dfrac{1-19y^{\prime\prime}}{39},
$$&lt;/p&gt;

&lt;p&gt;esto es, $39x^{\prime\prime\prime} + 19y^{\prime\prime}=1$. Acto seguido,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y^{\prime\prime} = \dfrac{1-39x^{\prime\prime\prime}}{19} = -2x^{\prime\prime\prime} + \dfrac{1-x^{\prime\prime\prime}}{19} = -2x^{\prime\prime\prime} + y^{\prime\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
y^{\prime\prime\prime} = \dfrac{1-x^{\prime\prime\prime}}{19},
$$&lt;/p&gt;

&lt;p&gt;es decir, $x^{\prime\prime\prime}+19y^{\prime\prime\prime} = 1$, luego $x^{\prime\prime\prime} = 1-19y^{\prime\prime\prime}$. Una solución particular para esta última es $(x^{\prime\prime\prime}_0, y^{\prime\prime\prime}_0) = (1,0)$, y así, deshaciendo los cambios de variable realizados, arribamos a&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y^{\prime\prime}_0 &amp;amp;= -2x^{\prime\prime\prime}_0 + y^{\prime\prime\prime}_0 = (-2)+0 = (-2),\\ x^{\prime\prime}_0 &amp;amp;= -y^{\prime\prime}_0 + x^{\prime\prime\prime}_0 = 2+1 = 3,\\ y^{\prime}_0  &amp;amp;= -3x^{\prime\prime}_0 + y^{\prime\prime}_0 = (-9) - 2 = (-11),\\ x^{\prime}_0  &amp;amp;= -5y^{\prime}_0 + x^{\prime\prime}_0 = 55 + 3 = 58,\\ y_0   &amp;amp;= 18y^{\prime}_0 = (-198),\\ x_0   &amp;amp;= 18x^{\prime}_0 = 1044,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que la solución general a la ecuación diofántica planteada es&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 1044 + 1123t,\\ y &amp;amp;= (-198) - 213t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado (e), como&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
14 &amp;amp;= 2\cdot7,\\ 165 &amp;amp;= 3\cdot5\cdot11,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;entonces $mcd(14,165)=1$, por lo que la ecuación diofántica propuesta admite solución entera. Despejando la variable $x$, por ser aquella cuyo coeficiente asociado es más reducido, tenemos que&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x=\dfrac{1-165y}{14}=-11y+\dfrac{1-11y}{14}=-11y+x^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime}=\dfrac{1-11y}{14},
$$&lt;/p&gt;

&lt;p&gt;esto es, $14x^{\prime}+11y=1$. Ahora,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y=\dfrac{1-14x^{\prime}}{11}=-x^{\prime}+\dfrac{1-3x^{\prime}}{11}=-x^{\prime}+y^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
y^{\prime}=\dfrac{1-3x^{\prime}}{11},
$$&lt;/p&gt;

&lt;p&gt;es decir, $3x^{\prime}+11y^{\prime}=1$. A continuación,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime}=\dfrac{1-11y^{\prime}}{3},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;por lo que basta probar, para $y^{\prime}$, valores pertenecientes al &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $3$. Para $y^{\prime}_0=2$, es cierto que $x^{\prime}_0 = (-7)$, y deshaciendo los cambios de variable llevados a cabo,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y_0 &amp;amp;= -x^{\prime}_0 + y^{\prime}_0 = 7+2=9,\\ x_0 &amp;amp;= -11y_0 + x^{\prime}_0 = (-99)-7 = (-106),
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;llegamos a una solución particular para la ecuación diofántica planteada. Así, su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= (-106) + 165t,\\ y &amp;amp;= 9-14t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un primer contacto con ecuaciones diofánticas (I)</title>
      <link>https://imalexissaez.github.io/2019/01/23/un-primer-contacto-con-ecuaciones-diofanticas-i/</link>
      <pubDate>Wed, 23 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/23/un-primer-contacto-con-ecuaciones-diofanticas-i/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 45:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Sea $c$ un número entero positivo tal que $10\leq c\leq 100$. ¿Cuál es el valor mínimo de $c$ para el cual la ecuación $84x+990y=c$ admite  solución entera?&lt;/li&gt;
&lt;li&gt;(b) Un hombre compra caballos y vacas, pagando $1770$ euros. Una vaca cuesta $21$ euros y un caballo $31$ euros. ¿Cuántos caballos y vacas ha comprado?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Para el apartado (a), como&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
 84 &amp;amp;= 2^2\cdot3\cdot7,\\ 990 &amp;amp;= 2\cdot3^2\cdot5\cdot11,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;entonces $mcd(84, 990) = 6$. Para que la ecuación diofántica planteada admita soluciones enteras, $6$ ha de dividir a $c$ y, dado que buscamos el valor mínimo de $c$, nuestra tarea se reduce pues a encontrar el primer múltiplo de $6$ que pertenezca al intervalo $[10,100]$. La solución será, por tanto, $c=12$.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (b), consideremos $x$ el número de vacas compradas e $y$ el total de caballos adquiridos. Dados sus respectivos precios y el importe total desembolsado, planteamos la ecuación diofántica&lt;/p&gt;

&lt;p&gt;$$
21x + 31y = 1770.
$$&lt;/p&gt;

&lt;p&gt;Como $mcd(21,31) = 1$ y $1|1770$, estamos en condiciones de asegurar que la anterior ecuación diofántica admite solución entera. Para aliviar cálculos, empecemos llevando a cabo el cambio de variable&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 1770x^{\prime},\\ y &amp;amp;= 1770y^{\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con lo cual queda $21x^{\prime} + 31y^{\prime} = 1$. Despejando ahora la variable $x^{\prime}$,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} = \dfrac{1-31y^{\prime}}{21} = -y^{\prime} + \dfrac{1 - 10y^{\prime}}{21} = -y^{\prime} + x^{\prime\prime},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;$$
x^{\prime\prime} = \dfrac{1-10y^{\prime}}{21},
$$&lt;/p&gt;

&lt;p&gt;es decir, $21x^{\prime\prime} = 1-10y^{\prime}$, y despejando ahora la variable $y^{\prime}$,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
y^{\prime} = \dfrac{1-21x^{\prime\prime}}{10},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;ecuación para la que, por tanteo, rápidamente observamos que si $x^{\prime\prime} = 1$, entonces $y^{\prime} = (-2)$. Deshaciendo ahora los cambios de variable realizados,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x^{\prime} &amp;amp;= -y^{\prime} + x^{\prime\prime} = 2 + 1 = 3,\\ x  &amp;amp;= 1770x^{\prime} = 1770\cdot3 = 5310,\\ y  &amp;amp;= 1770y^{\prime} = 1770\cdot(-2) = -3540,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;llegamos a una solución particular de la ecuación diofántica propuesta. Así, su solución general queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x &amp;amp;= 5310 + 31t,\\ y &amp;amp;= (-3540) - 21t,
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;con $t$ número entero. El número de animales que ha comprado de cada clase ha de ser, necesariamente, mayor o igual que cero, por lo que planteamos las inecuaciones,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
5310 + 31t &amp;amp;\geq 0\Rightarrow t\geq -\dfrac{5310}{31} = -171.29,\\ -3540-21t  &amp;amp;\geq 0\Rightarrow t\leq -\dfrac{3540}{21} = -168.57.
\end{aligned}
$$
Como $t$ ha de ser entero, concluimos que $-171\leq t\leq -169$. Por tanto,&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$t$&lt;/th&gt;
&lt;th&gt;$x$ (vacas)&lt;/th&gt;
&lt;th&gt;$y$ (caballos)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$-171$&lt;/td&gt;
&lt;td&gt;$9$&lt;/td&gt;
&lt;td&gt;$51$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$-170$&lt;/td&gt;
&lt;td&gt;$40$&lt;/td&gt;
&lt;td&gt;$30$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$-169$&lt;/td&gt;
&lt;td&gt;$71$&lt;/td&gt;
&lt;td&gt;$9$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Siendo así la posible respuesta, al interrogante planteado en el enunciado del ejercicio, cualquiera de las anteriores tres posibilidades.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2019, año de las torres de potencias</title>
      <link>https://imalexissaez.github.io/2019/01/19/2019-anno-de-las-torres-de-potencias/</link>
      <pubDate>Sat, 19 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/19/2019-anno-de-las-torres-de-potencias/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 44:&lt;/strong&gt; Encuentra los dos últimos dígitos de&lt;/p&gt;

&lt;p&gt;$$
2017^{2018^{2019}} + 2018^{2019^{2020}} + 2019^{2020^{2021}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Para encontrar las dos últimas cifras de la operación indicada en el enunciado del ejercicio, un posible enfoque pasa por trabajar con el valor de las congruencias módulo $100$. Estudiemos el valor de dichas congruencias para cada uno de los tres sumandos por separado.&lt;/p&gt;

&lt;p&gt;En primer lugar, es cierto que&lt;/p&gt;

&lt;p&gt;$$
2017^{2018^{2019}}\equiv 17^{2018^{2019}}\pmod{100}.
$$&lt;/p&gt;

&lt;p&gt;Ahora, como $mcd(17,100) = 1$, por el &lt;em&gt;Teorema de Euler-Fermat&lt;/em&gt;, sabemos que&lt;/p&gt;

&lt;p&gt;$$
17^{\varphi(100)}\equiv 1\pmod{100},
$$&lt;/p&gt;

&lt;p&gt;y como $100 = 2^2\cdot5^2$,&lt;/p&gt;

&lt;p&gt;$$
\varphi(100) = 100\cdot\left(1-\dfrac{1}{2}\right)\cdot\left(1-\dfrac{1}{5}\right) = 40,
$$&lt;/p&gt;

&lt;p&gt;esto es, $17^{40}\equiv 1\pmod{100}$. Estudiemos pues el valor de la congruencia módulo $40$ para el exponente, $2018^{2019}$. Por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, la ecuación de congruencia lineal $x\equiv 2018^{2019}\pmod{40}$ es equivalente al sistema de ecuaciones de congruencia lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 2018^{2019}\pmod{5},\\ x&amp;amp;\equiv 2018^{2019}\pmod{8},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;ya que $mcd(5,8)=1$ y $5\cdot8 = 40$. No obstante,&lt;/p&gt;

&lt;p&gt;$$
2018^{2019}\equiv 3^{2019}\pmod{5},
$$&lt;/p&gt;

&lt;p&gt;y como $5$ es un número primo y $mcd(3,5) = 1$, por el &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, $3^4\equiv 1\pmod{5}$. Como $2019 = 4\cdot 504 + 3$, es cierto que&lt;/p&gt;

&lt;p&gt;$$
3^{2019} = 3^3\cdot (3^4)^{504}\equiv (3^3\cdot 1^{504})\pmod{5} \equiv 2\pmod{5}.
$$&lt;/p&gt;

&lt;p&gt;Por otro lado, $2018 = 2\cdot1009$, por lo que,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
2018^{2019} &amp;amp;= (2\cdot1009)^{2019} \\ &amp;amp;= 2^{2019}\cdot1009^{2019} \\ &amp;amp;= 2^3\cdot2^{2016}\cdot1009^{2019} \\ &amp;amp;= 8\cdot2^{2016}\cdot1009^{2019},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y así, podemos concluir que $2018^{2019}\equiv 0\pmod{8}$. Por consiguiente, el sistema de ecuaciones de congruencia lineales planteado arriba es equivalente a&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 2\pmod{5},\\ x&amp;amp;\equiv 0\pmod{8}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Este último podemos resolverlo, de forma mecánica, con el procedimiento habitual que nos proporciona el &lt;em&gt;Teorema chino del resto&lt;/em&gt; o razonando sin más. Buscamos aquí un múltiplo de $8$ (menor que $40$) que al dividirlo entre $5$ devuelva un resto de valor $2$. Tras unos rápidos cálculos mentales, encontramos que el número $32$ satisface las restricciones impuestas y, por tanto, la solución al sistema planteado arriba es $x\equiv 32\pmod{40}$. Con todo, hemos llegado a que&lt;/p&gt;

&lt;p&gt;$$
2017^{2018^{2019}}\equiv 17^{2018^{2019}}\pmod{100}\equiv 17^{32}\pmod{100}.
$$&lt;/p&gt;

&lt;p&gt;Ahora bien, $17^{32} = (17^2)^{16} = 189^{16}\equiv 89^{16}\pmod{100}$. Aplicando esta forma de proceder de manera recurrente, podemos reducir, en unos pocos pasos, $17^{32}$ a un número para el que el cálculo de su congruencia módulo $100$ sea razonable. Así,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
17^{32}&amp;amp;\equiv 89^{16}\pmod{100} \\ &amp;amp;\equiv (-11)^{16}\pmod{100} \\ &amp;amp;\equiv 11^{16}\pmod{100} \\ &amp;amp;\equiv 21^8\pmod{100}\\ &amp;amp;\equiv 41^4\pmod{100} \\ &amp;amp;\equiv 81^2\pmod{100} \\ &amp;amp;\equiv 61\pmod{100},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;esto es,&lt;/p&gt;

&lt;p&gt;$$
2017^{2018^{2019}}\equiv 61\pmod{100}.
$$&lt;/p&gt;

&lt;p&gt;Para el segundo sumando, utilizaremos el &lt;em&gt;Teorema chino del resto&lt;/em&gt; desde el principio. Así, la ecuación de congruencia lineal&lt;/p&gt;

&lt;p&gt;$$
x\equiv 2018^{2019^{2020}}\pmod{100}
$$&lt;/p&gt;

&lt;p&gt;es equivalente al sistema de ecuaciones de congruencia lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 2018^{2019^{2020}}\pmod{4},\\ x&amp;amp;\equiv 2018^{2019^{2020}}\pmod{25},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;puesto que $mcd(4,25)=1$ y $4\cdot25=100$. Ahora bien, por lo que respecta a la primera de ellas,&lt;/p&gt;

&lt;p&gt;$$
2018^{2019^{2020}}\equiv 0\pmod{4},
$$&lt;/p&gt;

&lt;p&gt;pues $2018 = 2\cdot1009$ y, gracias a ese dos que figura en la descomposición en factores primos de $2018$, operando adecuadamente con las propiedades de los exponentes (de una forma similar a como actuamos en el caso anterior) es fácil ver que la torre de potencias es múltiplo de cuatro. Por otro lado,&lt;/p&gt;

&lt;p&gt;$$
2018^{2019^{2020}}\equiv 18^{2019^{2020}}\pmod{25},
$$&lt;/p&gt;

&lt;p&gt;y como $mcd(18,25)=1$ estamos en condiciones de volver a aplicar el &lt;em&gt;Teorema de Euler-Fermat&lt;/em&gt;. Así,&lt;/p&gt;

&lt;p&gt;$$
18^{\varphi(25)}\equiv 1\pmod{25},
$$&lt;/p&gt;

&lt;p&gt;y, dado que $25=5^2$, es cierto que&lt;/p&gt;

&lt;p&gt;$$
\varphi(25) = 25\cdot\left(1-\dfrac{1}{5}\right) = 20.
$$&lt;/p&gt;

&lt;p&gt;Por consiguiente, únicamente nos resta explorar el valor de la congruencia módulo $20$ del exponente, $2019^{2020}$. Sin embargo,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
2019^{2020} &amp;amp;\equiv (-1)^{2020}\pmod{20} \\ &amp;amp;\equiv 1^{2020}\pmod{20} \\ &amp;amp;\equiv 1\pmod{20},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y entonces&lt;/p&gt;

&lt;p&gt;$$
2018^{2019^{2020}}\equiv 18^{2019^{2020}}\pmod{25}\equiv 18\pmod{25}.
$$&lt;/p&gt;

&lt;p&gt;Por tanto, el sistema de ecuaciones de congruencia lineales planteado queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 0\pmod{4},\\ x&amp;amp;\equiv 18\pmod{25}.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;Este último podemos resolverlo, de forma mecánica, por el clásico procedimiento asociado al &lt;em&gt;Teorema chino del resto&lt;/em&gt; o simplemente razonando sin más. En esta ocasión, buscamos un múltiplo de cuatro (menor que $100$), tal que al dividirlo por $25$ deje un resto que asciende a $18$. Tras unos rápidos cálculos mentales, deducimos que dicho valor es $68$, luego la solución al sistema de ecuaciones planteado es $x\equiv 68\pmod{100}$.&lt;/p&gt;

&lt;p&gt;Finalmente, el modo de actuar con el tercer sumando es similar al llevado a cabo para el primero. Así,&lt;/p&gt;

&lt;p&gt;$$
2019^{2020^{2021}}\equiv 19^{2020^{2021}}\pmod{100},
$$&lt;/p&gt;

&lt;p&gt;y como $mcd(19,100)=1$ sabemos, por el &lt;em&gt;Teorema de Euler-Fermat&lt;/em&gt;, que $19^{\varphi(100)} = 19^{40}\equiv 1\pmod{100}$, por lo que únicamente nos resta averiguar el valor de la congruencia módulo $40$ de exponente, $2020^{2021}$. Para ello utilizaremos, de nuevo, el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que nos garantiza que la ecuación de congruencia lineal&lt;/p&gt;

&lt;p&gt;$$
x\equiv 2020^{2021}\pmod{40}
$$&lt;/p&gt;

&lt;p&gt;es equivalente al sistema de ecuaciones de congruencia lineales&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 2020^{2021}\pmod{5},\\ x&amp;amp;\equiv 2020^{2021}\pmod{8},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;pues $mcd(5,8)=1$ y $5\cdot8=40$. Ahora bien, como $2020 = 2^2\cdot5\cdot101$, el exponente es, directamente, múltiplo de $5$ y, por otra parte, operando adecuadamente con las propiedades de las potencias, deducimos rápidamente que asimismo será múltiplo de $8$, esto es, el sistema de ecuaciones de congruencia lineales queda&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
x&amp;amp;\equiv 0\pmod{5},\\ x&amp;amp;\equiv 0\pmod{8},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;y su solución, trivialmente, es $x\equiv 0\pmod{40}$. Por consiguiente,&lt;/p&gt;

&lt;p&gt;$$
2019^{2020^{2021}}\equiv 19^{2020^{2021}}\pmod{100}\equiv 1\pmod{100}.
$$&lt;/p&gt;

&lt;p&gt;Recapitulando,&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
2017^{2018^{2019}}&amp;amp;\equiv 61\pmod{100},\\ 2018^{2019^{2020}}&amp;amp;\equiv 68\pmod{100},\\ 2019^{2020^{2021}}&amp;amp;\equiv  1\pmod{100},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;luego&lt;/p&gt;

&lt;p&gt;$$
\begin{aligned}
\left(2017^{2018^{2019}} + 2018^{2019^{2020}} + 2019^{2020^{2021}}\right)&amp;amp;\equiv (61+68+1)\pmod{100}\\ &amp;amp;\equiv 30\pmod{100},
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;es decir, las dos últimas cifras de la operación indicada en el enunciado del ejercicio son $30$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando dígitos no nulos en números factoriales</title>
      <link>https://imalexissaez.github.io/2019/01/16/buscando-digitos-no-nulos-en-numeros-factoriales/</link>
      <pubDate>Wed, 16 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/16/buscando-digitos-no-nulos-en-numeros-factoriales/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 43:&lt;/strong&gt; Encuentra los dos últimos dígitos no nulos de $2017!$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Dado que hay menos potencias de $5$ que de $2$ en $n!$ para cada $n&amp;gt;1$, el número de ceros al final de $n!$ es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\left\lfloor\dfrac{n}{5}\right\rfloor + \left\lfloor\dfrac{n}{5^2}\right\rfloor + \left\lfloor\dfrac{n}{5^3}\right\rfloor + \cdots.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para $n=2017$, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\left\lfloor\dfrac{2017}{5}\right\rfloor + \left\lfloor\dfrac{2017}{25}\right\rfloor + \left\lfloor\dfrac{2017}{125}\right\rfloor + \left\lfloor\dfrac{2017}{625}\right\rfloor &amp;= 403 + 80 + 16 + 3 \\
&amp;= 502,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es $2017!$ acaba en $502$ ceros, situación que nos obliga a encontrar entonces el valor de la congruencia&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
x \equiv \dfrac{2017!}{2^{502}\cdot 5^{502}}\pmod{100}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $100=4\cdot25$ y $mcd(4,25)=1$, es decir, son primos entre sí, hallaremos el valor de las congruencias para estos dos módulos y, después, aplicaremos el &lt;em&gt;Teorema chino del resto&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{2017!}{2^{502} \cdot 5^{502}}\equiv 0\pmod{4},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;debido a que en el numerador encontramos muchas más potencias de $2$ que las $502$ que hay de $5$ (de hecho, aplicando la fórmula anterior, podríamos calcular el exponente del número primo $2$ en la factorización de $2017!$ si fuese preciso).&lt;/p&gt;

&lt;p&gt;Por comodidad, consideremos&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = \dfrac{x!}{5^k}\pmod{25},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;donde $5^k$ es la mayor potencia de $5$ que divide a $x$, valor que podemos hallar haciendo uso de la expresión que figura unos párrafos arriba.&lt;/p&gt;

&lt;p&gt;Ahora bien, resulta que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(5k+1)(5k+2)(5k+3)(5k+4)&amp;= 625k^4 + 1250k^3 + 875k^2 + 250k + 24\\
&amp;\equiv (-1)\pmod{25},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;hecho que nos permite escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
f(2017)&amp;=\dfrac{2017!}{5^{502}}\pmod{25}\\
&amp;=\dfrac{(1\cdot2\cdot3\cdot4)\cdot1\cdot(1\cdot2\cdot3\cdot4)\cdot2\cdots(1\cdot2\cdot3\cdot4)\cdot403\cdot(16\cdot17)}{5^{99}}\pmod{25}\\
&amp;=(-1)^{403}\cdot22\cdot f(403)\pmod{25}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Veamos en detalle la anterior cadena de igualdades:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los primeros términos de $2017!$ son $1\cdot2\cdot3\cdot4\cdot5$, de manera que ese $5$ se simplifica con uno de los que aparece en el denominador, quedando $1$. Por otra parte, por lo visto anteriormente, $(1\cdot2\cdot3\cdot4)\equiv(-1)\pmod{25}$.&lt;/li&gt;
&lt;li&gt;A continuación, aparecería el producto $6\cdot7\cdot8\cdot9\cdot10$. Por lo que respecta al $10=2\cdot5$, queda como $2$ al simplificar el $5$ con uno de los que figura en el denominador. Por otro lado, $6\cdot7\cdot8\cdot9$ $=$ $(5\cdot1+1)$ $(5\cdot1+2)$ $(5\cdot1+3)$ $(5\cdot1+4)\equiv (-1)\pmod{25}$, tal y como vimos anteriormente. Al ser cierta esa congruencia podemos, por ejemplo, sustituir el anterior producto simplemente por $1\cdot2\cdot3\cdot4$, del que también sabemos es congruente con $(-1)$ módulo $25$.&lt;/li&gt;
&lt;li&gt;Como $2017 = 5\cdot403+2$, esta manera de proceder la podemos llevar a cabo en $403$ ocasiones (hecho que explica el $(-1)^{403}$ que aparece posteriormente), quedando sin &#39;&#39;agrupar&#39;&#39; los dos últimos términos (dado el orden que hemos establecido) de $2017!$, esto es, $2016$ y $2017$. Sin embargo, $2016\equiv 16\pmod{25}$ y $2017\equiv 17\pmod{25}$. Además, $16\cdot17 = 272\equiv 22\pmod{25}$, cifra que figura en la última igualdad.&lt;/li&gt;
&lt;li&gt;Los anteriores $403$ grupos nombrados provocan el mismo número de simplificaciones de cincos, por lo que el denominador pasa lógicamente de ser $5^{502}$ a $5^{99}$.&lt;/li&gt;
&lt;li&gt;Finalmente, en el numerador aparece $1\cdot2\cdots403 = 403!$, cifra que podemos comprobar fácilmente que acaba en $99$ ceros, quedando así justificada la presencia de $f(403)$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Razonando de manera similar,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
f(403)&amp;=\dfrac{403!}{5^{99}}\pmod{25}\\
&amp;=\dfrac{(1\cdot2\cdot3\cdot4)\cdot1\cdot(1\cdot2\cdot3\cdot4)\cdot2\cdots(1\cdot2\cdot3\cdot4)\cdot80\cdot(1\cdot2\cdot3)}{5^{19}}\pmod{25}\\
&amp;=(-1)^{80}\cdot6\cdot f(80)\pmod{25},\\
f(80)&amp;=\dfrac{80!}{5^{19}}\pmod{25}\\
&amp;=\dfrac{(1\cdot2\cdot3\cdot4)\cdot1\cdot(1\cdot2\cdot3\cdot4)\cdot2\cdots(1\cdot2\cdot3\cdot4)\cdot16}{5^{3}}\pmod{25}\\
&amp;=(-1)^{16}\cdot f(16)\pmod{25},\\
f(16)&amp;=\dfrac{16!}{5^{3}}\pmod{25}\\
&amp;=((1\cdot2\cdot3\cdot4)\cdot1\cdot(1\cdot2\cdot3\cdot4)\cdot2\cdot(1\cdot2\cdot3\cdot4)\cdot3\cdot16)\pmod{25}\\
&amp;=(-1)^{3}\cdot16\cdot 3!\pmod{25},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y realizando ahorra las correspondientes sustituciones,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
f(2017) &amp;= (-1)^{502}\cdot22\cdot6\cdot16\cdot6\pmod{25}\\
&amp;\equiv 12672\pmod{25}\\
&amp;\equiv 22\pmod{25},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{2017!}{5^{502}}\equiv 22\pmod{25}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Recordemos en este instante que, en realidad, estamos interesados en hallar el valor de la congruencia&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{2017!}{2^{502}\cdot 5^{502}}\pmod{25},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de forma que todavía queda un poco de trabajo que llevar a cabo. Sin embargo, por el &lt;em&gt;Teorema de Euler-Fermat&lt;/em&gt;, como $mcd(2,25)=1$, es decir, son primos entre sí, entonces $2^{\varphi(25)}\equiv 1\pmod{25}$. Dado que,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\varphi(25) = 25\cdot\left(1-\dfrac{1}{5}\right) = 20,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y $502 = 20\cdot25+2$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{502} = (2^{20})^{25}\cdot2^2\equiv 4\cdot1^{25}\pmod{25}\equiv 4\pmod{25}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Así, sabemos que el resto de dividir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a = \dfrac{2017!}{5^{502}}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entre $25$ asciende a $22$. Como el número que nos interesa, en términos del resto, es $4$ veces el anterior, esto es, $4a$, para hallar el resto al dividir por $25$ planteamos la ecuación de congruencia lineal,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
4a\equiv 22\pmod{25}&amp;\Leftrightarrow 24a\equiv 132\pmod{25}\\
&amp;\Leftrightarrow (-a)\equiv 7\pmod{25}\\
&amp;\Leftrightarrow a\equiv 18\pmod{25},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, finalmente hemos llegado a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{2017!}{2^{502}\cdot 5^{502}}\equiv 18\pmod{25}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Combinando este último resultado alcanzado con el anterior, es cierto que la ecuación de congruencia lineal&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
x \equiv \dfrac{2017!}{2^{502}\cdot 5^{502}}\pmod{100},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es equivalente al sistema de ecuaciones de congruencias lineales&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 0\pmod{4},\\
x&amp;\equiv 18\pmod{25}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=4$ y $m_2=25$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=4\cdot25 = 100$. Podemos hallar esta vía el procedimiento habitual; sin embargo, dado que la primera ecuación indica que la solución es múltiplo de $4$ y la segunda ecuación se traduce en que al dividir dicho múltiplo por $25$ ha de dejar un resto igual a $18$, llegamos, por tanteo, a que $x\equiv 68\pmod{100}$. Es decir, $68$ son los dos últimos dígitos no nulos de $2017!$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tiempo de generalizar problemas al año 2019</title>
      <link>https://imalexissaez.github.io/2019/01/12/tiempo-de-generalizar-problemas-al-anno-2019/</link>
      <pubDate>Sat, 12 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/12/tiempo-de-generalizar-problemas-al-anno-2019/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 42:&lt;/strong&gt; Encuentra los tres últimos dígitos del número&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
N=3\times7\times11\times15\times\cdots\times2019.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Como estamos interesados en encontrar los tres últimos dígitos del producto de números dado, un posible enfoque de cara a la resolución de este ejercicio es encontrar el valor de la congruencia de dicho producto módulo $1000$, esto es, resolver $x\equiv N\pmod{1000}$. Ahora bien, como $1000 = 2^3 \cdot 5^3 = 8\cdot 125$ y $mcd(8,125)=1$ sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que la anterior ecuación de congruencia lineal es equivalente al siguiente sistema de ecuaciones de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv N\pmod{8},\\
x&amp;\equiv N\pmod{125}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Sin embargo, dado que en el producto $N$ aparecen, por ejemplo, los números $15 = 3\cdot5$, $35 = 5\cdot7$ y $55 = 5\cdot11$, resulta que encontraríamos $5^3$ en dicho producto, provocando que $N\equiv 0\pmod{125}$, esto es, $N$ es múltiplo de $125$. Por otro lado,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3&amp;\equiv 3\pmod{8},\\
7&amp;\equiv (-1)\pmod{8},\\
11&amp;\equiv 3\pmod{8},\\
15&amp;\equiv (-1)\pmod{8},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;por tanto&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(3\cdot7\cdot11\cdot15)&amp;\equiv (3\cdot(-1)\cdot3\cdot(-1))\pmod{8}\\
&amp;\equiv 9\pmod{8}\equiv 1\pmod{8}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Al ser los términos del producto $N$ de la forma $3+4t$, con $t$ número entero mayor o igual que cero, la anterior situación se reproduce cada cuatro términos del mencionado producto. Así, como $3+4t=2019$ implica que $t=504$ y empezamos la sucesión en $t=0$, $N$ está compuesto por $505$ términos, de forma que podemos conseguir $126$ grupos de $4$ elementos, quedando sin agrupar el último término, $2019$, que sabemos cumple $2019\equiv 3\pmod{8}$, por lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
N\equiv (1^{126} \cdot3)\pmod{8}\equiv 3\pmod{8}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Recapitulando, buscamos un múltiplo de $125$ que sea congruente con $3$ módulo $8$, es decir, hemos de resolver la ecuación, $125x\equiv 3\pmod{8}$. No obstante,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
125x\equiv 3\pmod{8}&amp;\Leftrightarrow 5x\equiv 3\pmod{8}\\
&amp;\Leftrightarrow 15x\equiv 9\pmod{8}\\
&amp;\Leftrightarrow (-x)\equiv 1\pmod{8}\\
&amp;\Leftrightarrow x\equiv 7\pmod{8},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $125\cdot7=875$ son las tres últimas cifras de $N$.&lt;/p&gt;

&lt;p&gt;De manera más clásica, una vez hallado el valor de las anteriores dos congruencias, el sistema de ecuaciones de congruencias lineales propuesto es equivalente a&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 3\pmod{8},\\
x&amp;\equiv 0\pmod{125}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=8$ y $m_2=125$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=8\cdot125 = 1000$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
M_1 &amp;= \dfrac{M}{m_1} = \dfrac{1000}{8} = 125,\\
M_2 &amp;= \dfrac{M}{m_2} = \dfrac{1000}{125} = 4,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
125x\equiv 1\pmod{8}&amp;\Leftrightarrow 5x\equiv 1\pmod{8}\\
&amp;\Leftrightarrow 25x\equiv 5\pmod{8}\\
&amp;\Leftrightarrow x\equiv 5\pmod{8},\\
4x\equiv 1\pmod{125}&amp;\Leftrightarrow 376x\equiv 94\pmod{125}\\
&amp;\Leftrightarrow x\equiv 94\pmod{125}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 3\pmod{8},&amp; 125x&amp;\equiv 1\pmod{8},&amp; x&amp;\equiv 5\pmod{8},\\
x&amp;\equiv 0\pmod{125},&amp; 4x&amp;\equiv 1\pmod{125},&amp; x&amp;\equiv 94\pmod{125},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces la solución es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x &amp;\equiv (3\cdot125\cdot5 + 0\cdot4\cdot94)\pmod{1000}\\
&amp;\equiv 1875\pmod{1000}\\
&amp;\equiv 875\pmod{1000},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $875$ son los tres últimos dígitos de $N$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>De cometas y sus perihelios</title>
      <link>https://imalexissaez.github.io/2019/01/09/de-cometas-y-sus-perihelios/</link>
      <pubDate>Wed, 09 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/09/de-cometas-y-sus-perihelios/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 41:&lt;/strong&gt; Los cometas &lt;em&gt;2p/Encke&lt;/em&gt;, &lt;em&gt;4P/Faye&lt;/em&gt; y &lt;em&gt;8p/Tuttle&lt;/em&gt; tienen períodos orbitales de $3$, $8$ y $13$ años, respectivamente. Los últimos perihelios (punto más cercano de la órbita de un cuerpo celeste alrededor del Sol) de cada uno de ellos fueron en $2017$, $2014$ y $2008$, respectivamente. ¿Cuál será el siguiente año en el cual coincidan sus perihelios? (Para este problema, asume que el tiempo se mide en años completos y que cada período orbital es constante.)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Sea $x$ el valor entero del siguiente año en el cual coinciden los perihelios. Como el cometa &lt;em&gt;2p/Encke&lt;/em&gt; tiene una órbita de la forma $2017+3t$, con $t$ un número entero, entonces $x\equiv 2017\pmod{3}$. Análogamente, dado el cometa &lt;em&gt;4p/Faye&lt;/em&gt; posee una órbita de la forma $2014+8u$, con $u$ número entero, entonces $x\equiv 2014\pmod{8}$. Finalmente, debido a que el cometa &lt;em&gt;8p/Tuttle&lt;/em&gt; tiene una órbita de la forma $2008+13v$, con $v$ número entero, entonces $x\equiv 2008\pmod{13}$.&lt;/p&gt;

&lt;p&gt;Así pues, hemos de resolver el siguiente sistema de ecuaciones de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 2017\pmod{3}\equiv 1\pmod{3},\\
x&amp;\equiv 2014\pmod{8}\equiv 6\pmod{8}\\
x&amp;\equiv 2008\pmod{13}\equiv 6\pmod{13}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=3$, $m_2=8$ y $m_3=13$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=3\cdot8\cdot13 = 312$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
M_1 &amp;= \dfrac{M}{m_1} = \dfrac{312}{3} = 8\cdot13 = 104,\\
M_2 &amp;= \dfrac{M}{m_2} = \dfrac{312}{8} = 3\cdot13 = 39,\\
M_3 &amp;= \dfrac{M}{m_3} = \dfrac{312}{13} = 3\cdot8 = 24,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
104x\equiv 1\pmod{3}&amp;\Leftrightarrow 2x\equiv 1\pmod{3}\\
&amp;\Leftrightarrow x\equiv 2\pmod{3},\\
39x\equiv 1\pmod{8}&amp;\Leftrightarrow (-x)\equiv 1\pmod{8}\\
&amp;\Leftrightarrow x\equiv (-1)\pmod{8},\\
24x\equiv 1\pmod{13}&amp;\Leftrightarrow (-2x)\equiv 1\pmod{13}\\
&amp;\Leftrightarrow (-12x)\equiv 6\pmod{13}\\
&amp;\Leftrightarrow x\equiv 6\pmod{13}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 1\pmod{3},&amp; 104x&amp;\equiv 1\pmod{3},&amp; x&amp;\equiv 2\pmod{3},\\
x&amp;\equiv 6\pmod{8},&amp; 39x&amp;\equiv 1\pmod{8},&amp; x&amp;\equiv (-1)\pmod{8},\\
x&amp;\equiv 6\pmod{13},&amp; 24x&amp;\equiv 1\pmod{13},&amp; x&amp;\equiv 6\pmod{13},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces la solución es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x &amp;\equiv (1\cdot104\cdot2 + 6\cdot39\cdot(-1) + 6\cdot24\cdot1)\pmod{312}\\
&amp;\equiv 838\pmod{312}\equiv 214\pmod{312},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, en los años de la forma $214+316w$, con $w$ número entero, coinciden los tres perihelios. Para $w=5$, encontramos que el año $1794$ fue el último en el que coincidieron, mientras que si $w=6$, hallamos que $2086$ será el próximo año en el que coincidan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>La cesta de huevos de Brahmagupta</title>
      <link>https://imalexissaez.github.io/2019/01/05/la-cesta-de-huevos-de-brahmagupta/</link>
      <pubDate>Sat, 05 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/05/la-cesta-de-huevos-de-brahmagupta/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 40:&lt;/strong&gt; Brahmagupta tiene una enorme cesta repleta de huevos camperos. Si los saca de $2$ en $2$, resulta que queda un huevo en la cesta. Si opta por extraerlos de $3$ en $3$, ahora $2$ son los huevos que restan en la cesta. Análogamente, si realiza el proceso utilizando grupos de $4$, $5$ y $6$ huevos, quedan en la cesta, respectivamente, $3$, $4$ y $5$ huevos. Sin embargo, si los saca de $7$ en $7$, la cesta se vacía por completo. ¿Cuál es la menor cantidad de huevos que puede haber en la cesta de Brahmagupta?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Consideremos $x$ el número de huevos que se encuentran en la cesta de Brahmagupta. Los distintos modos de extracción dan lugar al siguiente sistema de ecuaciones de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 1\pmod{2},\\
x&amp;\equiv 2\pmod{3},\\
x&amp;\equiv 3\pmod{4},\\
x&amp;\equiv 4\pmod{5},\\
x&amp;\equiv 5\pmod{6},\\
x&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por desgracia, no podemos aplicar directamente el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, pues algunos módulos no son primos entre sí. No obstante, como estamos en las condiciones de la proposición que generaliza este resultado teórico (las comprobaciones sobre los pares de congruencias se pueden llevar a cabo mentalmente de forma sencilla), sabemos que el sistema de ecuaciones de congruencias lineales posee solución. Para hallarla, desdoblando la ecuación de congruencia lineal $x\equiv 5\pmod{6}$, queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 1\pmod{2},\\
x&amp;\equiv 2\pmod{3},\\
x&amp;\equiv 3\pmod{4},\\
x&amp;\equiv 4\pmod{5},\\
x&amp;\equiv 5\pmod{2}\equiv 1\pmod{2},\\
x&amp;\equiv 5\pmod{3}\equiv 2\pmod{3},\\
x&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Encontramos dos ecuaciones de congruencias lineales repetidas, cuya escritura podemos ahorrarnos, de manera que llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 1\pmod{2},\\
x&amp;\equiv 2\pmod{3},\\
x&amp;\equiv 3\pmod{4},\\
x&amp;\equiv 4\pmod{5},\\
x&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Llegados a este punto, la primera y la tercera ecuación involucran módulos de manera que uno es un factor del otro $4=2^2$. Por tanto, tenemos entre manos una posible contradicción aquí que hemos de investigar para hallar si existe o no dicha contradicción. No obstante, para cierto número entero $t$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x\equiv 3\pmod{4}&amp;\Rightarrow x = 3+4t\Rightarrow x = 1 + 2(1+2t)\\
&amp;\Rightarrow x\equiv 1\pmod{2},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;luego la primera ecuación de congruencia lineal es redundante y la podremos suprimir del sistema, quedando pues&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 2\pmod{3},\\ 
x&amp;\equiv 3\pmod{4},\\
x&amp;\equiv 4\pmod{5},\\
x&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=3$, $m_2=4$, $m_3=5$ y $m_4=7$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=3\cdot4\cdot5\cdot7 = 420$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
M_1 &amp;= \dfrac{M}{m_1} = \dfrac{420}{3} = 4\cdot5\cdot7 = 140,\\
M_2 &amp;= \dfrac{M}{m_2} = \dfrac{420}{4} = 3\cdot5\cdot7 = 105,\\
M_3 &amp;= \dfrac{M}{m_3} = \dfrac{420}{5} = 3\cdot4\cdot7 = 84,\\
M_4 &amp;= \dfrac{M}{m_4} = \dfrac{420}{7} = 3\cdot4\cdot5 = 60,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
140x\equiv 1\pmod{3}&amp;\Leftrightarrow 2x\equiv 1\pmod{3}\Leftrightarrow 4x\equiv 2\pmod{3}\\
&amp;\Leftrightarrow x\equiv 2\pmod{3},\\
105x\equiv 1\pmod{4}&amp;\Leftrightarrow x\equiv 1\pmod{4},\\
84x\equiv 1\pmod{5}&amp;\Leftrightarrow (-x)\equiv 1\pmod{5}\Leftrightarrow x\equiv 4\pmod{5},\\
60x\equiv 1\pmod{7}&amp;\Leftrightarrow 4x\equiv 1\pmod{7}\Leftrightarrow 8x\equiv 2\pmod{7}\\
&amp;\Leftrightarrow x\equiv 2\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 2\pmod{3},&amp; 140x&amp;\equiv 1\pmod{3},&amp; x&amp;\equiv 2\pmod{3},\\
x&amp;\equiv 3\pmod{4},&amp; 105x&amp;\equiv 1\pmod{4},&amp; x&amp;\equiv 1\pmod{4},\\
x&amp;\equiv 4\pmod{5},&amp; 84x&amp;\equiv 1\pmod{5},&amp; x&amp;\equiv 4\pmod{5},\\
x&amp;\equiv 0\pmod{7},&amp; 60x&amp;\equiv 1\pmod{7},&amp; x&amp;\equiv 2\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces la solución es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x &amp;\equiv (2\cdot140\cdot2 + 3\cdot105\cdot1 + 4\cdot84\cdot4 + 0\cdot60\cdot1)\pmod{420}\\
&amp;\equiv 2219\pmod{420}\equiv 119\pmod{420},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, la cesta de Brahmagupta contaba con $119$ huevos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cuatro amigos, un concierto y poco dinero</title>
      <link>https://imalexissaez.github.io/2019/01/02/cuatro-amigos-un-concierto-y-poco-dinero/</link>
      <pubDate>Wed, 02 Jan 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/01/02/cuatro-amigos-un-concierto-y-poco-dinero/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 39:&lt;/strong&gt; Ana, Belén, Carlos y David acuden, con bastante ilusión y mucha algarabía, a un concierto de &lt;em&gt;31Knots&lt;/em&gt;; pero, en mitad de la cola, tras un rápido y certero cálculo de Ana, desgraciadamente se dan cuenta de que les faltan algunos euros para poder comprar las entradas, cuyo precio asciende a $50$ euros por tique.&lt;/p&gt;

&lt;p&gt;Cada uno de ellos posee una cifra entera mayor o igual que cero de euros y, curiosamente, además&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;si Belén le pide un euro a Ana, consigue acumular dos tercios de la cantidad que le quedaría a Ana;&lt;/li&gt;
&lt;li&gt;si Carlos toma prestados dos euros de Belén, llega a acumular tres quintos de la cantidad que le quedaría a Belén;&lt;/li&gt;
&lt;li&gt;si David le pide tres euros a Carlos, consigue acumular cinco séptimos de la cantidad que le quedaría a Carlos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¿Cuál es la mínima cantidad de euros que necesitarían entre todos para poder así permitirse la adquisición de las cuatro entradas?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Por comodidad en la escritura, denotemos el dinero que posee cada uno, en euros, de los cuatro protagonistas del enunciado del ejercicio por sus iniciales en minúscula, esto es, $a$, $b$, $c$ y $d$. Sabemos, dado que no pueden comprar las cuatro entradas para disfrutar del concierto, que $a+b+c+d&amp;lt;4\cdot50=200$. Hallemos cuánto dinero lleva encima cada uno de ellos haciendo uso de las condiciones que aparecen, que, matemáticamente, podemos expresar como sigue:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b+1 &amp;= \dfrac{2}{3}(a-1),\\
c+2 &amp;= \dfrac{3}{5}(b-2),\\
d+3 &amp;= \dfrac{5}{7}(c-3).
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Despejando $b$, $c$ y $d$, encontramos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b&amp;=\dfrac{2a-5}{3},\\
c&amp;=\dfrac{3b-16}{5},\\
d&amp;=\dfrac{5c-36}{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que, expresadas todas ellas en función del valor de $a$, equivalen a&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b&amp;=\dfrac{2a-5}{3},\\
c&amp;=\dfrac{3b-16}{5} = \dfrac{3\cdot\dfrac{2a-5}{3} - 16}{5}=\dfrac{2a-21}{5},\\
d&amp;=\dfrac{5c-36}{7} = \dfrac{5\cdot\dfrac{2a-21}{5} - 36}{7} = \dfrac{2a-57}{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Recordemos ahora que $b$, $c$ y $d$ llevan encima una cantidad entera mayor o igual que cero de euros, hecho que se traduce en que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(2a-5)&amp;\equiv 0\pmod{3},\\
(2a-21)&amp;\equiv 0\pmod{5},\\
(2a-57)&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Llegados a este momento, comenzamos a sospechar que el camino nos lleva, irremediablemente, a buscar el valor de $a$ vía el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, por lo que, previamente, vamos a adaptar la forma del sistema de ecuaciones de congruencias lineales a la que figura en el resultado teórico. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(2a-5)\equiv 0\pmod{3}&amp;\Leftrightarrow 2a\equiv 5\pmod{3}\Leftrightarrow 4a\equiv 10\pmod{3}\\
&amp;\Leftrightarrow a\equiv 1\pmod{3},\\
(2a-21)\equiv 0\pmod{5}&amp;\Leftrightarrow 2a\equiv 1\pmod{5}\Leftrightarrow 6a\equiv 3\pmod{5}\\
&amp;\Leftrightarrow a\equiv 3\pmod{5},\\
(2a-57)\equiv 0\pmod{7}&amp;\Leftrightarrow 2a\equiv 1\pmod{7}\Leftrightarrow 8a\equiv 4\pmod{7}\\
&amp;\Leftrightarrow a\equiv 4\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esto es, recapitulando, la cantidad total de euros que lleva encima Ana (es decir, el valor de $a$), resulta ser la solución del siguiente sistema de ecuaciones de congruencias lineales&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a&amp;\equiv 1\pmod{3},\\
a&amp;\equiv 3\pmod{5},\\
a&amp;\equiv 4\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=3, m_2=5$ y $m_3=7$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=3\cdot5\cdot7 = 105$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
M_1 &amp;= \dfrac{M}{m_1} = \dfrac{105}{3} = 5\cdot7 = 35,\\
M_2 &amp;= \dfrac{M}{m_2} = \dfrac{105}{5} = 3\cdot7 = 21,\\
M_3 &amp;= \dfrac{M}{m_3} = \dfrac{105}{7} = 3\cdot5 = 15,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
35a\equiv 1\pmod{3}&amp;\Leftrightarrow (-a)\equiv 1\pmod{3}\Leftrightarrow a\equiv 2\pmod{3},\\
21a\equiv 1\pmod{5}&amp;\Leftrightarrow a\equiv 1\pmod{5},\\
15a\equiv 1\pmod{7}&amp;\Leftrightarrow a\equiv 1\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a&amp;\equiv 1\pmod{3},&amp; 35a&amp;\equiv 1\pmod{3},&amp; a&amp;\equiv 2\pmod{3},\\
a&amp;\equiv 3\pmod{5},&amp; 21a&amp;\equiv 1\pmod{5},&amp; a&amp;\equiv 1\pmod{5},\\
a&amp;\equiv 4\pmod{7},&amp; 15a&amp;\equiv 1\pmod{7},&amp; a&amp;\equiv 1\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces la solución es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a &amp;\equiv (1\cdot35\cdot2 + 3\cdot21\cdot1 + 4\cdot15\cdot1)\pmod{105}\\
&amp;\equiv 193\pmod{105}\\
&amp;\equiv 88\pmod{105},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, Ana lleva encima $88$ euros. Como $a=88$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b&amp;=\dfrac{2\cdot88-5}{3} = 57,\\
c&amp;=\dfrac{2\cdot88-21}{5} = 31,\\
d&amp;=\dfrac{2\cdot88-57}{7} = 17,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, Belén, Carlos y David llevan encima, respectivamente, $57$, $31$ y $17$ euros. En total suman $88+57+31+17=193$ euros, por lo que les faltan $200-193=7$ euros para poder comprar las cuatro entradas y así disfrutar del concierto.&lt;/p&gt;

&lt;p&gt;Alternativamente, volvamos al momento del ejercicio en el que declaramos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b+1 &amp;= \dfrac{2}{3}(a-1),\\
c+2 &amp;= \dfrac{3}{5}(b-2),\\
d+3 &amp;= \dfrac{5}{7}(c-3).
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Si operamos algebraicamente las ecuaciones&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3b+3 &amp;= 2a-2 \Rightarrow 3b-2a = -5,\\
5c+10 &amp;= 3b-6 \Rightarrow 5c-3b=-16,\\
7d+21 &amp;= 5c-15 \Rightarrow 7d-5c=-36,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y sumamos ahora las tres, llegamos a la ecuación diofántica $7d-2a=-57$, que, despejando la variable $a$ por ser aquella cuyo coeficiente asociado es más reducido, se tiene que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a = \dfrac{7d+57}{2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para $d=1$, encontramos que $a=32$, arribando así a la solución particular de dicha ecuación diofántica. Su solución general es pues&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a &amp;= 32 + 7t,\\
d &amp;= 1 + 2t,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $t$ número entero. Sustituyendo estos resultados alcanzados en las ecuaciones de arriba, estamos en condiciones de encontrar las expresiones para $b$ y $c$. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
b &amp;= \dfrac{-5 + 2(32+7t)}{3},\\
c &amp;= \dfrac{36 + 7(1+2t)}{5}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, estamos interesados en el valor entero de $t$ que nos proporciona la mínima cantidad de euros que necesitarían entre todos para poder así permitirse la adquisición de las cuatro entradas (y con la restricción añadida implícita de que las soluciones han de ser enteras). Como inicialmente no disponen de la cantidad necesaria, ello implica que $a+b+c+d&amp;lt;200$, y, sustituyendo las anteriores expresiones alcanzadas para cada una de las cuatro variables, generamos la inecuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
32+7t+1+2t+\dfrac{-5 + 2(32+7t)}{3}+\dfrac{36 + 7(1+2t)}{5}&amp;&lt;200\\
480+105t+15+30t-25+320+70t+108+21+42t&amp;&lt;3000,\\
247t&amp;&lt;2081,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $t&amp;lt;8.43$. Así pues, empezando por $t=8$ (y continuando con $t=7$, $t=6$, etc.), sustituiremos arriba, hasta dar con el primer valor que genere cifras enteras para $a$, $b$, $c$ y $d$. Por tanto, si $t=8$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a &amp;= 32+7\cdot8 = 88,\\
b &amp;= \dfrac{-5 + 2(32+7\cdot8)}{3} = 57,\\
c &amp;= \dfrac{36 + 7(1+2\cdot8)}{5} = 31,\\
d &amp;= 1+2\cdot8 = 17,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;llegando, afortunadamente, en el primer intento a la solución alcanzada por el método de las congruencias.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capacitació en valencià</title>
      <link>https://imalexissaez.github.io/proyecto/capacitacion/</link>
      <pubDate>Tue, 01 Jan 2019 15:57:28 +0100</pubDate>
      <guid>https://imalexissaez.github.io/proyecto/capacitacion/</guid>
      <description>

&lt;p&gt;En aquesta pàgina compilaré diversos recursos i informació relacionats amb el &lt;em&gt;Certificat de Capacitació&lt;/em&gt; en valencià (CC d&amp;rsquo;ara endavant). Cada universitat de la Comunitat Valenciana ofereix cursos per obtindre aquesta certificació (i també moltes acadèmies privades de la zona); no obstant això, ací em centraré específicament en les proves lliures, que són gratuïtes i es convoquen ordinàriament un parell de vegades a l&amp;rsquo;any (i extraordinàriament alguna volta més, sobretot quan s&amp;rsquo;apropen oposicions que requereixen el CC).&lt;/p&gt;

&lt;h2 id=&#34;1-temari&#34;&gt;1. Temari&lt;/h2&gt;

&lt;p&gt;Per a preparar les esmentades proves, és recomanable utilitzar les unitats disponibles a la web del curs que ofereix el &lt;a href=&#34;http://cefire.edu.gva.es/course/view.php?id=14644&#34; target=&#34;_blank&#34;&gt;cefire&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Núm.&lt;/th&gt;
&lt;th&gt;Títol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1Uqlpuac6Q9KIvDcX09XEuPvs0m0ztIZz/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;Qüestions de llengua oralitat, escriptura i sociolingüística.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1eqhBY83sP4PK7lIpvjXNLP3m0AWlf5ZM/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;El plurilingüisme en el sistema educatiu. El marc legal.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1IEnl35Y7Wo2_qFOp-m3T2H1weFalobFN/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;Teories sobre l&amp;rsquo;aprenentatge de segones llengües i enfocament TILC.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1dd4Z9GgdyjZNEShUNUNXDdBk4sn7cZdk/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;L&amp;rsquo;avaluació en el procés d&amp;rsquo;ensenyament i aprenentatge.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1QFVTUxaD0xy9E2PN_PuMLpO2gp7U5-f8/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;Materials i espais per a un ensenyament TILC.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;2-descripció-de-la-prova&#34;&gt;2. Descripció de la prova&lt;/h2&gt;

&lt;p&gt;La informació més rellevant es resumeix a continuació:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;La prova durarà dos hores i mitja.&lt;/li&gt;
&lt;li&gt;Conté dos parts: una oral i una escrita.

&lt;ul&gt;
&lt;li&gt;En la part escrita cal elaborar un text, de 250 paraules almenys, relacionat amb un dels dos temes proposats. A més a més, s&amp;rsquo;ha d&amp;rsquo;omplir un qüestionari de 20 preguntes: 10 d&amp;rsquo;opció múltiple i 10 de verdader o fals.&lt;/li&gt;
&lt;li&gt;En la part oral cal exposar un monòleg, que no serà gravat i durarà cinc minuts aproximadament, associat amb un dels dos temes proposats.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;S&amp;rsquo;ha de superar la part escrita i la part oral de manera independent.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aquest és un &lt;a href=&#34;https://drive.google.com/file/d/1escXF8Bu6j8tV_ECL-Z9EUvq0XVC0j28/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;model de la prova&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3-criteris-d-avaluació&#34;&gt;3. Criteris d&amp;rsquo;avaluació&lt;/h2&gt;

&lt;p&gt;En relació amb la part escrita:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El text té una valoració màxima de 80 punts i es descompta un punt per cada errada gramatical o ortogràfica comesa. Els textos de menys de 250 paraules (una paraula és una unitat lingüística que se separa de la resta mitjançant un espai en blanc en l&amp;rsquo;escriptura) obtindran una qualificació de zero punts.&lt;/li&gt;
&lt;li&gt;En el qüestionari:

&lt;ul&gt;
&lt;li&gt;Cada encert sumarà un punt.&lt;/li&gt;
&lt;li&gt;Cada errada restarà bé 0,5 punts (per a les qüestions de verdader o fals) bé 0,25 punts (per a les d&amp;rsquo;opció múltiple).&lt;/li&gt;
&lt;li&gt;Cada resposta en blanc ni sumarà ni restarà punts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S&amp;rsquo;obtindrà un apte en aquesta part si la qualificació total és superior a 60 punts&lt;/p&gt;

&lt;p&gt;Pel que fa a la intervenció oral, aquesta té una valoració màxima de 30 punts, dividits com s&amp;rsquo;indica a continuació:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pronunciació: 3 punts.&lt;/li&gt;
&lt;li&gt;Lèxic: 3 punts.&lt;/li&gt;
&lt;li&gt;Morfosintaxi: 3 punts.&lt;/li&gt;
&lt;li&gt;Cohesió i coherència textual: 3 punts.&lt;/li&gt;
&lt;li&gt;Adequació: 3 punts.&lt;/li&gt;
&lt;li&gt;Contingut: 15 punts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S&amp;rsquo;obtindrà un apte en aquesta part si la qualificació total és superior a 18 punts.&lt;/p&gt;

&lt;h2 id=&#34;4-convocatòries&#34;&gt;4. Convocatòries&lt;/h2&gt;

&lt;p&gt;Convé que revisem amb freqüència la &lt;a href=&#34;http://www.ceice.gva.es/va/web/formacion-profesorado/pruebas/cursos-ccdm?fbclid=IwAR26Aw0-IwsRvb9Te-NsjX1SokH-uWo_e2mCjgfjLPJvZY2P_oAgtDg60cM&#34; target=&#34;_blank&#34;&gt;pàgina web&lt;/a&gt; del Servei de Formació del Professorat associada amb l&amp;rsquo;oferta lingüística (i més concretament la corresponent a les proves de CC i DM). Els detalls de l&amp;rsquo;última convocatòria són els següents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceice.gva.es/documents/162880217/166879173/Convocat%C3%B2ria+Capacitaci%C3%B3%2027+de+maig+de+2019+def.pdf/3c3f6d1e-a03e-4567-b21c-cbd331fa6bb8&#34; target=&#34;_blank&#34;&gt;Convocatòria&lt;/a&gt; de 27 de maig de 2019, de la Secretaria Autonòmica d&amp;rsquo;Educació i Investigació, per la qual es convoquen proves adreçades a l&amp;rsquo;obtenció de les titulacions administratives de Certificat de Capacitació per a l&amp;rsquo;Ensenyament en Valencià, Certificat de Capacitació per a l&amp;rsquo;Ensenyament en Llengua estrangera i del Diploma de Mestre de Valencià.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceice.gva.es/documents/162880217/166879173/CAS_Diagrama+pruebas+CCDM+septiembre+%2719.pdf/a4fc20d1-1bd4-4c7e-a425-4b9f27acef14&#34; target=&#34;_blank&#34;&gt;Diagrama&lt;/a&gt; explicatiu del procediment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El termini d&amp;rsquo;inscripció d&amp;rsquo;aquesta ja està tancat, però els documents poden servir de referència i orientació per a futures convocatòries.&lt;/p&gt;

&lt;h2 id=&#34;5-recursos-addicionals&#34;&gt;5. Recursos addicionals&lt;/h2&gt;

&lt;p&gt;El grup de &lt;em&gt;Facebook&lt;/em&gt; &amp;lsquo;&lt;em&gt;Opositores sin Capacitació en Valencià. Noticias y recursos&lt;/em&gt;&amp;rsquo; (&lt;a href=&#34;https://www.facebook.com/groups/1615777152003844/&#34; target=&#34;_blank&#34;&gt;enllaç&lt;/a&gt;) és, possiblement, el millor lloc on estar al dia de totes les novetats relacionades amb el CC (notícies, cursos, proves, qualificacions&amp;hellip;). Els seus membres comparteixen interessants recursos com ara:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1DHWatcZuwCNyj9fBYLqRqIDmbdmz-N8w?fbclid=IwAR397Adq7rWAP_4B15xUwICRi8Y9XH7HI5D3D_nIog7zZzMscuIIX2ue5Lo&#34; target=&#34;_blank&#34;&gt;Directori&lt;/a&gt; en &lt;em&gt;Google Drive&lt;/em&gt; amb qüestionaris associats a les unitats 3 i 4, així com de caràcter general, que es proposen als cursos presencials del CEFIRE. Pel que fa a la convocatòria de maig d&amp;rsquo;enguany, la majoria de les preguntes eren idèntiques a les que figuren en aquest recurs.&lt;/li&gt;
&lt;li&gt;Un altre &lt;a href=&#34;https://drive.google.com/drive/folders/1PPZyFgQrSwiNj4eYal_BfXJNytOwcCrh?fbclid=IwAR23uMSFylr3-EyAbYXuDNaiG8nZcBNBSX4xGqhGTTM8Et3g2xRoVxFpI6E&#34; target=&#34;_blank&#34;&gt;directori&lt;/a&gt; en &lt;em&gt;Google Drive&lt;/em&gt; amb els apunts personals d&amp;rsquo;una integrant del grup de &lt;em&gt;Facebook&lt;/em&gt; (qüestionaris, redaccions, esquemes&amp;hellip;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;D&amp;rsquo;altra banda, el canal de &lt;em&gt;YouTube&lt;/em&gt; d&amp;rsquo;en &lt;em&gt;Salva Pérez&lt;/em&gt;, &lt;a href=&#34;https://www.youtube.com/channel/UCzE7J6b2d5qmEKnQeabE1hA&#34; target=&#34;_blank&#34;&gt;Per no frenar&lt;/a&gt;, recull excel·lents consells de cara a les parts orals i escrites de les proves de la cieaCOVA, JQCV i EOI. Són una referència molt recomanable a tindre en compte per a fer un bon paper a les proves lliures de CC.&lt;/p&gt;

&lt;p&gt;A més a més, destaque els següents vídeos enfocats al CC d&amp;rsquo;enguany:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Cz-AJM3iOuI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/KskXErywWwQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;Així mateix, en deixe uns altres corresponents a les convocatòries de l&amp;rsquo;any 2018, però que encara són recomanables perquè la prova té la mateixa estructura:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/vP9afKD3zHE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Cz-kwmVei3g&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/T669ztYmqjo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OMNgbSWmIWw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/AMS-170EoVw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;hr /&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/8uaRaQnzyp4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Valencià (nivell C1)</title>
      <link>https://imalexissaez.github.io/proyecto/valenciano-c1/</link>
      <pubDate>Tue, 01 Jan 2019 15:57:28 +0100</pubDate>
      <guid>https://imalexissaez.github.io/proyecto/valenciano-c1/</guid>
      <description>

&lt;p&gt;En aquest projecte compilaré recursos útils a l&amp;rsquo;hora d&amp;rsquo;estudiar valencià per superar les proves que avaluen el nivell C1 del &lt;em&gt;Marc Europeu Comú de Referència&lt;/em&gt; (MECR d&amp;rsquo;ara endavant) per a les llengües.&lt;/p&gt;

&lt;h2 id=&#34;1-cursos&#34;&gt;1. Cursos&lt;/h2&gt;

&lt;h3 id=&#34;1-1-punt-per-punt&#34;&gt;1.1. Punt per Punt&lt;/h3&gt;

&lt;p&gt;En la següent graella trobem els enllaços a una excel·lent col·lecció de fascicles relacionats amb el valencià i agrupats segons els diferents nivells que proposa el MECR. En particular, els exercicis proposats per al nivell C1 ens ajudaran a preparar la corresponent prova, ja que són representatius d&amp;rsquo;aquesta.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Nivell&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Fascicles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://comunidad.diarioinformacion.com/servicios/Promociones/promocion.jsp?pIdPromocion=1798&#34; target=&#34;_blank&#34;&gt;A2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-1.pdf&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-2.pdf&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-3.pdf&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-4.pdf&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-5.pdf&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-6.pdf&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-7.pdf&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-8.pdf&#34; target=&#34;_blank&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-9.pdf&#34; target=&#34;_blank&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-10.pdf&#34; target=&#34;_blank&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-11.pdf&#34; target=&#34;_blank&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-12.pdf&#34; target=&#34;_blank&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-13.pdf&#34; target=&#34;_blank&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-14.pdf&#34; target=&#34;_blank&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-15.pdf&#34; target=&#34;_blank&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-16.pdf&#34; target=&#34;_blank&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-17.pdf&#34; target=&#34;_blank&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpunt/fasciculo-18.pdf&#34; target=&#34;_blank&#34;&gt;18&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://comunidad.diarioinformacion.com/servicios/Promociones/promocion.jsp?pIdPromocion=1876&#34; target=&#34;_blank&#34;&gt;B1&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo1.pdf&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo2.pdf&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo3.pdf&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo4.pdf&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo5.pdf&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo6.pdf&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo7.pdf&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo8.pdf&#34; target=&#34;_blank&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo9.pdf&#34; target=&#34;_blank&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo10.pdf&#34; target=&#34;_blank&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo11.pdf&#34; target=&#34;_blank&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo12.pdf&#34; target=&#34;_blank&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo13.pdf&#34; target=&#34;_blank&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo14.pdf&#34; target=&#34;_blank&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo15.pdf&#34; target=&#34;_blank&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo16.pdf&#34; target=&#34;_blank&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo17.pdf&#34; target=&#34;_blank&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb1/fasciculo18.pdf&#34; target=&#34;_blank&#34;&gt;18&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://comunidad.diarioinformacion.com/servicios/Promociones/promocion.jsp?pIdPromocion=1993&#34; target=&#34;_blank&#34;&gt;B2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_1.pdf&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_2.pdf&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_3.pdf&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_4.pdf&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_5.pdf&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_6.pdf&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_7.pdf&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_8.pdf&#34; target=&#34;_blank&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_9.pdf&#34; target=&#34;_blank&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_10.pdf&#34; target=&#34;_blank&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_11.pdf&#34; target=&#34;_blank&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_12.pdf&#34; target=&#34;_blank&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_13.pdf&#34; target=&#34;_blank&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_14.pdf&#34; target=&#34;_blank&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_15.pdf&#34; target=&#34;_blank&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_16.pdf&#34; target=&#34;_blank&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_17.pdf&#34; target=&#34;_blank&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntb2/fasciculo_18.pdf&#34; target=&#34;_blank&#34;&gt;18&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://comunidad.diarioinformacion.com/servicios/Promociones/promocion.jsp?pIdPromocion=2058&#34; target=&#34;_blank&#34;&gt;C1&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_1.pdf&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_2.pdf&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_3.pdf&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_4.pdf&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_5.pdf&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_6.pdf&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_7.pdf&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_8.pdf&#34; target=&#34;_blank&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_9.pdf&#34; target=&#34;_blank&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_10.pdf&#34; target=&#34;_blank&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_11.pdf&#34; target=&#34;_blank&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_12.pdf&#34; target=&#34;_blank&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_13.pdf&#34; target=&#34;_blank&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_14.pdf&#34; target=&#34;_blank&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_15.pdf&#34; target=&#34;_blank&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_16.pdf&#34; target=&#34;_blank&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_17.pdf&#34; target=&#34;_blank&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc1/fasciculo_18.pdf&#34; target=&#34;_blank&#34;&gt;18&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://comunidad.diarioinformacion.com/servicios/Promociones/promocion.jsp?pIdPromocion=2159&#34; target=&#34;_blank&#34;&gt;C2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_1.pdf&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_2.pdf&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_3.pdf&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_4.pdf&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_5.pdf&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_6.pdf&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_7.pdf&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_8.pdf&#34; target=&#34;_blank&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_9.pdf&#34; target=&#34;_blank&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_10.pdf&#34; target=&#34;_blank&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_11.pdf&#34; target=&#34;_blank&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_12.pdf&#34; target=&#34;_blank&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_13.pdf&#34; target=&#34;_blank&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_14.pdf&#34; target=&#34;_blank&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_15.pdf&#34; target=&#34;_blank&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;http://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_16.pdf&#34; target=&#34;_blank&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;https://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_17.pdf&#34; target=&#34;_blank&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;https://www.diarioinformacion.com/estaticos/publicidad/promocionpuntperpuntc2/fasciculo_18.pdf&#34; target=&#34;_blank&#34;&gt;18&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-2-universitat-politècnica-de-valència&#34;&gt;1.2. Universitat Politècnica de València&lt;/h3&gt;

&lt;p&gt;La &lt;em&gt;Universitat Politècnica de València&lt;/em&gt; (UPV d&amp;rsquo;ara endavant) ha elaborat un parell de MOOC (&lt;em&gt;Massive Online Open Course&lt;/em&gt;) gratuïts per als estudiants dels nivells B2, C1 i C2. Els podem trobar fàcilment en el seu portal en línia &lt;a href=&#34;https://www.upvx.es/&#34; target=&#34;_blank&#34;&gt;UPV[X]&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.upvx.es/courses/course-v1:LinguisticaGeneral+valenciab2+2018-01/about&#34; target=&#34;_blank&#34;&gt;Preparació nivell B2 (Intermedi) de Valencià&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.upvx.es/courses/course-v1:LinguisticaGeneral+valenciac1+2018-01/about&#34; target=&#34;_blank&#34;&gt;Preparació nivell C1 (Suficiència) de Valencià&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.upvx.es/courses/course-v1:LinguisticaGeneral+valenciac2+2018-01/about&#34; target=&#34;_blank&#34;&gt;Preparació nivell C2 (Superior) de Valencià&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hem d&amp;rsquo;anar amb cura, perquè no cobreixen la totalitat del temari, sinó aquelles parts d&amp;rsquo;aquest que resulten més complicades als alumnes.&lt;/p&gt;

&lt;p&gt;D&amp;rsquo;altra banda, si únicament estem interessats en els recursos audiovisuals dels esmentats MOOC, la majoria els trobem en el portal &lt;a href=&#34;https://media.upv.es/#/portal&#34; target=&#34;_blank&#34;&gt;UPV[Media]&lt;/a&gt;, agrupats sota l&amp;rsquo;etiqueta &lt;a href=&#34;https://media.upv.es/#/portal/channel/eda03965-19d6-1a4e-abaf-cf5b04ce1a6e&#34; target=&#34;_blank&#34;&gt;Aprèn valencià&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;2-diccionaris-i-gramàtiques&#34;&gt;2. Diccionaris i gramàtiques&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;&lt;em&gt;Acadèmia Valenciana de la Llengua&lt;/em&gt; (AVL d&amp;rsquo;ara endavant) comparteix en el seu &lt;a href=&#34;http://www.avl.gva.es/web/avl/inici&#34; target=&#34;_blank&#34;&gt;portal&lt;/a&gt; els documents normatius que han de ser la nostra referència a l&amp;rsquo;hora d&amp;rsquo;estudiar valencià:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/lexicval&#34; target=&#34;_blank&#34;&gt;Diccionari Normatiu Valencià (DNV)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/web/documents-normatius/diccionari-ortografic-i-de-pronunciacio-del-valencia-dopv-&#34; target=&#34;_blank&#34;&gt;Diccionari ortogràfic i de pronunciació del valencià (DOPV)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/documents/31987/65233/GNV&#34; target=&#34;_blank&#34;&gt;Gramàtica normativa valenciana (GNV)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/documents/35882/40728/GVB.pdf/5f11842c-9b6c-4909-8a91-cfc115aec30f&#34; target=&#34;_blank&#34;&gt;Gramàtica valenciana bàsica (GVB)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A més a més, ens poden resultar d&amp;rsquo;utilitat els següents documents publicats per l&amp;rsquo;AVL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/documents/35882/40728/Ortograf.pdf/5a4e9e3e-b04e-43f0-85d1-61debac551ff&#34; target=&#34;_blank&#34;&gt;La normativa ortogràfica del valencià&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/documents/35882/40728/Oral.pdf/97c04880-4477-48b2-a314-00e626f43674&#34; target=&#34;_blank&#34;&gt;L&amp;rsquo;estàndard oral del valencià&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.avl.gva.es/documents/35882/40728/Gentilici.pdf/0952e532-10c3-4f06-b2af-22e97d3e1245&#34; target=&#34;_blank&#34;&gt;Els gentilicis valencians&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Altres recursos que ens ajudaran són:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dlc.iec.cat/&#34; target=&#34;_blank&#34;&gt;Diccionari de la llengua catalana (DIEC2)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sinonims.iec.cat/&#34; target=&#34;_blank&#34;&gt;Diccionari de sinònims&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dcvb.iec.cat/&#34; target=&#34;_blank&#34;&gt;Diccionari català-valencià-balear&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geiec.iec.cat/&#34; target=&#34;_blank&#34;&gt;Gramàtica essencial de la llengua catalana&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ca.oslin.org/index.php&#34; target=&#34;_blank&#34;&gt;Lèxic Obert Flexionat de Català&lt;/a&gt;: pàgina web que recull diversos diccionaris i respon a preguntes del tipus: com es conjuga el verb &lt;em&gt;dirigir&lt;/em&gt;? Quin és el plural de &lt;em&gt;llapis&lt;/em&gt;? Quin és el gentilici per a &lt;em&gt;Àustria&lt;/em&gt;? Amb quines síl·labes es divideix la paraula &lt;em&gt;abstrusament&lt;/em&gt;? Quantes síl·labes té &lt;em&gt;intuïció&lt;/em&gt;? Quin substantiu s’utilitza per denominar l’acció del verb &lt;em&gt;aclucar&lt;/em&gt;? De quina llengua prové el manlleu &lt;em&gt;afrikaans&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html&#34; target=&#34;_blank&#34;&gt;Optimot&lt;/a&gt;: cercador d&amp;rsquo;informació lingüística que ajuda a resoldre dubtes sobre la llengua catalana.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iec.cat/llengua/documents/ortografia_catalana_versio_digital.pdf&#34; target=&#34;_blank&#34;&gt;Ortografia catalana&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-lèxics&#34;&gt;3. Lèxics&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;AVL té en la seua web oficial una sèrie de fitxes de vocabulari dels més diversos assumptes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/08_fitxaactivitatsrecreatives/d6628292-fb4e-4088-a8b4-a7d9c44ae9a1&#34; target=&#34;_blank&#34;&gt;d&amp;rsquo;activitats recreatives i a l&amp;rsquo;aire lliure&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/02_fitxaastronomia/bd1f0a4e-d492-4fb2-8f18-d8a6ea44ce97&#34; target=&#34;_blank&#34;&gt;de l&amp;rsquo;astronomia&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/23_fitxaautomobil/56769b55-c4f8-46f8-8c44-a35d65e734ea&#34; target=&#34;_blank&#34;&gt;de l&amp;rsquo;automòbil&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/12_fitxacasa/39fc9024-7af0-4054-ad40-b331f11d3cb7&#34; target=&#34;_blank&#34;&gt;de la casa&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/04_fitxacarnisseria/860f334d-76e9-4c23-9ab8-64b15ca4dfd3&#34; target=&#34;_blank&#34;&gt;de la carnisseria&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/22_fitxa_cultura_religiosa/4b756468-b607-4ddf-92b6-1626ab18bc40&#34; target=&#34;_blank&#34;&gt;de la cultura religiosa&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/21_fitxaferreteria/193377fb-3646-41f0-be32-ee99b56a366c&#34; target=&#34;_blank&#34;&gt;de la ferreteria&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/24_fitxaimatgepersonal/72ba730a-8b48-4480-80c1-0f73fdebee23&#34; target=&#34;_blank&#34;&gt;de la imatge personal&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/10_fitxamusica/16631829-2bfa-4334-adfc-0149712c1ce8&#34; target=&#34;_blank&#34;&gt;de la música&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/09_religiocatolica/474f6cc1-0107-41e3-a4a8-2bd4f7c38906&#34; target=&#34;_blank&#34;&gt;de la religió catòlica&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/20_fitxaroba/8f14840b-238f-4e36-a0af-04e6ac4e69e0&#34; target=&#34;_blank&#34;&gt;de la roba i complements&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/19_fitxasalut/4b13c69a-1749-4635-ab0e-1644a41f0992&#34; target=&#34;_blank&#34;&gt;de la salut i la sanitat&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/05_fitxaxarcuteria/eaec5bcd-f635-4120-a6b8-6f6ba739acd1&#34; target=&#34;_blank&#34;&gt;de la xarcuteria&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/13_fitxafruites/c7774b27-f5db-44a8-8d3e-bf576f8b7736&#34; target=&#34;_blank&#34;&gt;de les fruites i verdures&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/15_fitxamalalties/9763742b-657b-40b6-bb40-9559d1e077f9&#34; target=&#34;_blank&#34;&gt;de les malalties&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/14_fitxaelcarrer/30a3b531-4067-4331-a451-29d8250eb6a5&#34; target=&#34;_blank&#34;&gt;del carrer&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/16_fitxacoshuma/40505884-8042-4e56-aad7-a3ce6b82e7f1&#34; target=&#34;_blank&#34;&gt;del cos humà&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/01_fitxafornipastisseries/be385f39-72c2-411c-8e71-5259ecdb80df&#34; target=&#34;_blank&#34;&gt;del forn i de les pastisseries&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/07_fitxafutbol/dcacae2e-f3d0-4f16-990c-fe915752c962&#34; target=&#34;_blank&#34;&gt;del futbol&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/25_fitxapilota/61e14b7f-e0b7-44f8-9be0-4c129853cec7&#34; target=&#34;_blank&#34;&gt;del joc de pilota&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/17_fitxapeix/a1e2f2e7-6cd5-464b-aae5-9e7f6ee87596&#34; target=&#34;_blank&#34;&gt;del peix i marisc&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/03_fitxarestaurant/56df0b5f-d3c3-4812-bef8-477f4284469d&#34; target=&#34;_blank&#34;&gt;del restaurant&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/06_fitxaesports/c2d37a4f-197c-48be-ae3f-0d00295a3f57&#34; target=&#34;_blank&#34;&gt;dels esports&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/11_fitxainstrumentsmusicals/18aeaad9-2266-4bbe-b83e-0aca80c28eda&#34; target=&#34;_blank&#34;&gt;dels instruments musicals&lt;/a&gt; i&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avl.gva.es/documents/31987/56445/18_fitxaviatges/1574a6c8-d236-4744-9199-ceb389ef0d26&#34; target=&#34;_blank&#34;&gt;dels viatges&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;D&amp;rsquo;altra banda, en el portal &lt;a href=&#34;https://web.gencat.cat/ca/inici/&#34; target=&#34;_blank&#34;&gt;gencat&lt;/a&gt; trobem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://llengua.gencat.cat/web/.content/documents/publicacions/publicacions_en_linia/arxius/50_termes_mon_digital.pdf&#34; target=&#34;_blank&#34;&gt;50 termes del món digital&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llengua.gencat.cat/ca/serveis/empresa_/50-termes-del-mon-de-lempresa/&#34; target=&#34;_blank&#34;&gt;50 termes del món de l&amp;rsquo;empresa&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-jocs-educatius&#34;&gt;4. Jocs educatius&lt;/h2&gt;

&lt;p&gt;Aquests recursos són útils per a reforçar l&amp;rsquo;ortografia, la gramàtica i el vocabulari:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dival.es/enjogassat/&#34; target=&#34;_blank&#34;&gt;Enjogassa&amp;rsquo;t&lt;/a&gt;: t&amp;rsquo;esperen més de tres mil reptes i moltes sorpreses per a fornir el vocabulari, regar l&amp;rsquo;ortografia i enfortir la gramàtica. El valencià estarà més viu gràcies a tu i sentiràs l&amp;rsquo;energia de la teua llengua.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceice.gva.es/va/web/dgplgm/jugallengua&#34; target=&#34;_blank&#34;&gt;Jugallengua&lt;/a&gt;: és una aplicació que ajuda a aprendre valencià de manera lúdica, ja que s&amp;rsquo;ha dissenyat com un joc de preguntes i respostes sobre llengua.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceice.gva.es/va/web/dgplgm/practic&#34; target=&#34;_blank&#34;&gt;Pràctic 2&lt;/a&gt;: és un programa que integra un conjunt d&amp;rsquo;activitats d&amp;rsquo;autoaprenentatge, de manera que l&amp;rsquo;usuari, gràcies al sistema d&amp;rsquo;autocorrecció, pot comprovar immediatament quin és el grau de coneixements de valencià que té assolit i a quins aspectes de la gramàtica ha de dedicar més esforços per a millorar els seus coneixements lingüístics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-convocatòries-d-exàmens&#34;&gt;5. Convocatòries d&amp;rsquo;exàmens&lt;/h2&gt;

&lt;p&gt;En l&amp;rsquo;actualitat, hi ha tres entitats que acrediten els coneixements de valencià: la &lt;em&gt;Comissió Interuniversitària d’Estandardització d’Acreditacions de Coneixements de Valencià&lt;/em&gt; (&lt;a href=&#34;http://cieacova.com/&#34; target=&#34;_blank&#34;&gt;CIEACOVA&lt;/a&gt;), la &lt;em&gt;Junta Qualificadora de Coneixements de Valencià&lt;/em&gt; (&lt;a href=&#34;http://www.jqcv.gva.es/va/inici&#34; target=&#34;_blank&#34;&gt;JQCV&lt;/a&gt;) i l&amp;rsquo;&lt;em&gt;Escola Oficial d&amp;rsquo;Idiomes&lt;/em&gt; (&lt;a href=&#34;http://www.eoi.gva.es/es&#34; target=&#34;_blank&#34;&gt;EOI&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;La inscripció per a les proves es fa amb mesos d&amp;rsquo;antelació, per la qual cosa hem de visitar amb freqüència les webs oficials de les esmentades entitats. Els exàmens i les corresponents preinscripcions tenen lloc, aproximadament, en:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mes&lt;/th&gt;
&lt;th&gt;Entitat que acredita&lt;/th&gt;
&lt;th&gt;Preinscripció (aproximadament)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Gener&lt;/td&gt;
&lt;td&gt;CIEACOVA&lt;/td&gt;
&lt;td&gt;Novembre&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Juny&lt;/td&gt;
&lt;td&gt;CIEACOVA, EOI, JQCV&lt;/td&gt;
&lt;td&gt;Febrer - abril&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Setembre&lt;/td&gt;
&lt;td&gt;EOI&lt;/td&gt;
&lt;td&gt;Febrer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Exemples de convocatòries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CIEACOVA: ACORD de 17 de gener de 2019, del Ple de la Comissió Interuniversitària d’Estandardització d’Acreditacions de Coneixements de Valencià (CIEACOVA), que estableix la convocatòria marc de les proves de maig-juny de 2019 per a l’obtenció dels certificats oficials d’acreditació de coneixements de valencià de les universitats valencianes i es nomena el Tribunal Central. [&lt;a href=&#34;http://cieacova.com/files/2019/02/convocato%CC%80ria-marc-de-les-proves-de-maig-juny-2019.pdf&#34; target=&#34;_blank&#34;&gt;Enllaç&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;EOI: RESOLUCIÓ de 6 de febrer de 2019, de la Direcció General de Política Lingüística i Gestió del Multilingüisme, per la qual s’estableixen el calendari i el procés d’inscripció i matriculació per a la realització de la prova de certificació dels nivells del Marc Europeu Comú de Referència per
a l’aprenentatge, l’ensenyament i l’avaluació de llengües (MECR) dels ensenyaments d’idiomes de règim especial en les escoles oficials d’idiomes de la Comunitat Valenciana, corresponent a la convocatòria 2019. [&lt;a href=&#34;https://www.dogv.gva.es/datos/2019/02/08/pdf/2019_1213.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 1213&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;JQCV: RESOLUCIÓ de 26 de febrer de 2019, de la Direcció General de Política Lingüística i Gestió del Multilingüisme, per la qual es convoquen les proves per a l’obtenció dels certificats oficials administratius de coneixements de valencià i es nomena la Comissió Coordinadora i les comissions examinadores. [&lt;a href=&#34;http://www.dogv.gva.es/datos/2019/03/01/pdf/2019_2070.pdf&#34; target=&#34;_blank&#34;&gt;2019 / 2070&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contando soldados de una manera curiosa</title>
      <link>https://imalexissaez.github.io/2018/12/29/contando-soldados-de-una-manera-curiosa/</link>
      <pubDate>Sat, 29 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/29/contando-soldados-de-una-manera-curiosa/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 38:&lt;/strong&gt; Un general cuenta el número de soldados supervivientes de una batalla alineándolos, sucesivamente, en filas de diferentes tamaños. En cada ocasión, anota el total que quedaron sin poder completar una fila. Disponía de $1200$ combatientes antes de la refriega. Tras el encuentro si los alineaba en filas de $5$, quedaban $3$ sin poder completar una fila; si lo hacía en filas de $6$, volvían a quedar $3$ sin poder completar una fila; si los repartía en filas de $7$, únicamente uno quedaba fuera de las filas y si los alineaba en filas de $11$, no quedaba soldado alguno que no estuviese en una fila ¿Cuántos soldados sobrevivieron la batalla?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Consideremos $x$ el número de soldados supervivientes de la batalla, cantidad que sabemos es menor o igual que $1200$ por ser este el número de los que disponía el general inicialmente, es decir, $0\leq x\leq 1200$.&lt;/p&gt;

&lt;p&gt;Las sucesivas alineaciones de los soldados, las traducimos en el siguiente sistema de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 3\pmod{5},\\
x&amp;\equiv 3\pmod{6},\\
x&amp;\equiv 1\pmod{7},\\
x&amp;\equiv 0\pmod{11}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por la estructura que presenta el anterior sistema y dado que $m_1=5$, $m_2=6$, $m_3=7$ y $m_4=11$ son primos entre sí, sabemos, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, que dicho sistema admite solución módulo $M=5\cdot6\cdot7\cdot11 = 2310$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
M_1 &amp;= \dfrac{M}{m_1} = \dfrac{2310}{5} = 6\cdot7\cdot11 = 462,\\
M_2 &amp;= \dfrac{M}{m_2} = \dfrac{2310}{6} = 5\cdot7\cdot11 = 385,\\
M_3 &amp;= \dfrac{M}{m_3} = \dfrac{2310}{7} = 5\cdot6\cdot11 = 330,\\
M_4 &amp;= \dfrac{M}{m_4} = \dfrac{2310}{11} = 5\cdot6\cdot7 = 210,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
462x\equiv 1\pmod{5}&amp;\Leftrightarrow 2x\equiv 1\pmod{5}\Leftrightarrow 6x\equiv 3\pmod{5}\Leftrightarrow x\equiv 3\pmod{5},\\
385x\equiv 1\pmod{6}&amp;\Leftrightarrow x\equiv 1\pmod{6},\\
330x\equiv 1\pmod{7}&amp;\Leftrightarrow x\equiv 1\pmod{7},\\
210x\equiv 1\pmod{11}&amp;\Leftrightarrow x\equiv 1\pmod{11}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 3\pmod{5},&amp; 462x&amp;\equiv 1\pmod{5},&amp; x&amp;\equiv 3\pmod{5},\\
x&amp;\equiv 3\pmod{6},&amp; 385x&amp;\equiv 1\pmod{6},&amp; x&amp;\equiv 1\pmod{6},\\
x&amp;\equiv 1\pmod{7},&amp; 330x&amp;\equiv 1\pmod{7},&amp; x&amp;\equiv 1\pmod{7},\\
x&amp;\equiv 0\pmod{11},&amp; 210x&amp;\equiv 1\pmod{11},&amp; x&amp;\equiv 1\pmod{11},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces la solución es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x &amp;\equiv (3\cdot462\cdot3 + 3\cdot385\cdot1 + 1\cdot330\cdot1 + 0\cdot210\cdot1)\pmod{2310}\\
&amp;\equiv 5643\pmod{2310}\equiv 1023\pmod{2310},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, asciende a $1023$ el número de soldados que sobrevivieron a la batalla.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repartiendo el aguinaldo de la empresa</title>
      <link>https://imalexissaez.github.io/2018/12/26/repartiendo-el-aguinaldo-de-la-empresa/</link>
      <pubDate>Wed, 26 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/26/repartiendo-el-aguinaldo-de-la-empresa/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 37:&lt;/strong&gt; Un cierto número de billetes se reparten entre siete subalternos y dos jefes, teniendo en cuenta que un jefe cobra el doble que un subalterno. Tras el reparto, sobran seis billetes; pero si hubiese faltado un jefe, el reparto habría salido exacto. Por otro lado, si hubiera faltado un subalterno, serían entonces ocho los billetes que habrían sobrado. Calcular el menor número positivo de billetes que cobraron cada uno.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;La clave para resolver este ejercicio es plantearse la cuestión: &#39;&#39;¿entre cuántas partes hay que repartir el total de billetes?&#39;&#39;. Como cada jefe cobra por dos subalternos, en verdad son once las partes entre las que repartir.&lt;/p&gt;

&lt;p&gt;Así, si denotamos por $x$ el número de billetes, la primera ecuación de congruencia lineal es $x\equiv 6\pmod{11}$, pues se reparte entre las once partes y sobran (es decir, el resto asciende a) seis. Cuando falta un jefe, son entonces nueve las partes entre las que repartir, y al ser exacto dicho reparto se traduce entonces en la ecuación de congruencia lineal $x\equiv 0\pmod{9}$. Finalmente, cuando falta un subalterno, son diez las partes entre las que repartir, y como sobran ocho billetes, la correspondiente ecuación de congruencia lineal es $x\equiv 8\pmod{10}$.&lt;/p&gt;

&lt;p&gt;En resumen, hemos de resolver el sistema de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 6\pmod{11},\\
x&amp;\equiv 0\pmod{9},\\
x&amp;\equiv 8\pmod{10}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $mcd(9,10,11)=1$, esto es, son primos entre sí los tres números, por el &lt;em&gt;Teorema chino del resto&lt;/em&gt; estamos en condiciones de asegurar que existe solución módulo $9\cdot10\cdot11 = 990$. Ahora bien,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
M_1=90,\qquad M_2=110,\qquad M_3=99,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;por lo que el siguiente paso es resolver las ecuaciones de congruencias lineales,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
90x&amp;\equiv 1\pmod{11}\Leftrightarrow 2x\equiv 1\pmod{11}\Leftrightarrow x\equiv 1\pmod{11},\\
110x&amp;\equiv 1\pmod{9}\Leftrightarrow 2x\equiv 1\pmod{9}\Leftrightarrow x\equiv 5\pmod{11},\\
99x&amp;\equiv 1\pmod{10}\Leftrightarrow (-x)\equiv 1\pmod{10}\Leftrightarrow x\equiv (-1)\pmod{11}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Agrupando ahora toda la información adecuadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x&amp;\equiv 6\pmod{11},&amp; 90x&amp;\equiv 1\pmod{11},&amp; x&amp;\equiv 6\pmod{11},\\
x&amp;\equiv 0\pmod{9},&amp; 110x&amp;\equiv 1\pmod{9},&amp; x&amp;\equiv 5 \pmod{9},\\
x&amp;\equiv 8\pmod{10},&amp; 99x&amp;\equiv 1\pmod{10},&amp; x&amp;\equiv (-1)\pmod{10},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;la solución al sistema queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x &amp;\equiv (6\cdot90\cdot6 + 0\cdot110\cdot5 + 8\cdot99\cdot(-1))\pmod{990}\\ 
&amp;\equiv 2448\pmod{990}\equiv 468\pmod{990}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nótese que podíamos habernos ahorrado los cálculos asociados a la segunda ecuación del sistema, por aquel $0$ que figura en la misma. Por tanto, el menor número positivo de billetes a repartir es $468$, y como $468 = 11\cdot42 + 6$, concluimos que los subalternos cobran $42$ billetes, mientras que los jefes $84$ billetes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Y volvemos con los problemas de mover dígitos</title>
      <link>https://imalexissaez.github.io/2018/12/22/y-volvemos-con-los-problemas-de-mover-digitos/</link>
      <pubDate>Sat, 22 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/22/y-volvemos-con-los-problemas-de-mover-digitos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 36:&lt;/strong&gt; ¿Cuántas cifras tiene el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Antes de abordar la resolución del ejercicio propiamente dicho, veamos con un par de ejemplos la manera de proceder, para así intentar detectar patrones. Por ejemplo, si consideramos el número $354$, podemos aislar la primera cifra escribiéndolo como $300 + 54$, es decir, $3 \cdot 10^2 + 54$. Ahora, si colocamos la primera cifra en el último lugar de la derecha, el número pasa a ser $543$, y como deseamos aislar de nuevo el $3$, podemos escribirlo como $540 + 3$ o, equivalentemente, como $54\cdot10 + 3$. Por desgracia, no se cumple para este ejemplo la condición exigida en el enunciado del ejercicio, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{3}{2}\cdot 354 = 531\neq 543.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Si ahora consideramos el número $4537 = 4\cdot10^3 + 537$, después conformaríamos el número $5374=537\cdot10 + 4$ y, desgraciadamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{3}{2}\cdot4537 = 6805.5\neq 5374.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;No obstante, estos dos intentos fallidos nos permiten atisbar los protagonistas de este ejercicio: la primera cifra del número buscado, que denotaremos como $A$ y el resto del número, que señalaremos como $B$. Así, dado un número de $n$ cifras, buscamos que se satisfaga la ecuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{3}{2}(A\cdot10^{n-1} + B) = B\cdot10 + A.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Operando algebraicamente, llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3A\cdot10^{n-1} + 3B &amp;= 20B+2A,\\
17B &amp;= 3A\cdot10^{n-1} - 2A,\\
17B &amp;= A(3\cdot10^{n-1} - 2),\\
B &amp;= \dfrac{A(3\cdot10^{n-1} - 2)}{17}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como $A$ es la primera cifra del número buscado, es cierto que $1\leq A\leq 9$, luego no puede ser múltiplo de $17$, hecho que nos permite concluir que $3\cdot10^{n-1} - 2$ es divisible por $17$. Para hallar el valor de $n$, podemos optar por dividir, sucesivamente, números de la forma $30, 300, 3000,\ldots$, entre $17$ hasta dar con el dividendo adecuado que arroja un resto para la división que ascienda a $2$.&lt;/p&gt;

&lt;p&gt;Alternativamente, usando congruencias, que $3\cdot10^{n-1} - 2$ sea múltiplo de $17$ es equivalente a escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(3\cdot10^{n-1} - 2)\equiv 0\pmod{17},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
3\cdot10^{n-1} \equiv 2\pmod{17}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Multiplicando toda la ecuación de congruencia lineal por $6$ (ya que $3\cdot6=18$, cifra que queda muy cercana a un múltiplo de $17$) queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
18\cdot10^{n-1} \equiv 12\pmod{17},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
10^{n-1} \equiv 12\pmod{17}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nos aproximamos a la estructura de un resultado muy conocido de &lt;em&gt;Teoría de números&lt;/em&gt;, por lo que podemos investigar qué sucede al multiplicar ahora por $10$ la ecuación de congruencia lineal. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
10^{n-1} \equiv 12\pmod{17}\Leftrightarrow 10^n\equiv 120\pmod{17}\equiv 1\pmod{17},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y como $17$ es un número primo y $mcd(10,17)=1$, entonces, por el &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, sabemos que $10^{16} \equiv 1\pmod{17}$.&lt;/p&gt;

&lt;p&gt;Igualando términos con la anterior ecuación de congruencia lineal, concluimos que $n=16$. No obstante, dicho resultado no garantiza haber encontrado el menor número natural que verifica esa propiedad, por lo que hemos de proceder con cautela y seguir investigando. No obstante, como $10^8 \equiv (-1)\pmod{17}$ (a modo anecdótico, si hubiera salido $10^8 \equiv 1\pmod{17}$, hubiésemos tenido que probar con $10^4$ y así sucesivamente), en esta ocasión sí podemos concluir que el resultado teórico nos ha llevado al menor valor de $n$ para el que se satisface la propiedad. Así, el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial posee $16$ cifras.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cuadrado perfecto, cubo perfecto, potencia quinta perfecta...</title>
      <link>https://imalexissaez.github.io/2018/12/19/cuadrado-perfecto-cubo-perfecto-potencia-quinta-perfecta/</link>
      <pubDate>Wed, 19 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/19/cuadrado-perfecto-cubo-perfecto-potencia-quinta-perfecta/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 35:&lt;/strong&gt; Encuentra el menor número natural $n$ tal que $n / 2$ es cuadrado perfecto, $n / 3$ es cubo perfecto y $n / 5$ es potencia quinta perfecta.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Dado que podemos dividir $n$ por $2$, $3$ y $5$ y el resultado de dichas operaciones continúa siendo un número natural (porque se trata, respectivamente de cuadrado, cubo y potencia quinta perfectos), ello implica que en su descomposición en factores primos aparecerán los términos $2^x$, $3^y$ y $5^z$, con $x, y, z\geq 1$. En ejercicios anteriores también considerábamos la posibilidad de un término entero $k$ que agrupaba potencias de números primos distintos a los tres mencionados anteriormente, pero, en esta ocasión, como nuestro objetivo es hallar el menor natural $n$ que satisface las condiciones del enunciado del ejercicio, asumiremos que $k=1$. Así, $n=2^x 3^y 5^z$.&lt;/p&gt;

&lt;p&gt;Ahora bien, como $n / 2 = 2^{x-1} 3^y 5^z$ es un cuadrado perfecto, los exponentes de la factorización dada serán múltiplos de dos ($x-1=\dot{2}$, $y=\dot{2}$, $z=\dot{2}$). Al ser $n / 3 = 2^x 3^{y-1} 5^z$ un cubo perfecto, los exponentes anteriores serán múltiplos de $3$ ($x=\dot{3}$, $y-1=\dot{3}$, $z=\dot{3}$). Finalmente, como $n / 5 = 2^x 3^y 5^{z-1}$ es una potencia quinta perfecta, los exponentes previos serán múltiplos de $5$ ($x=\dot{5}$, $y=\dot{5}$, $z-1=\dot{5}$).&lt;/p&gt;

&lt;p&gt;Así pues, para $x$ surge el siguiente sistema de congruencias lineales&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
x-1&amp;\equiv 0\pmod{2},\\
x&amp;\equiv 0\pmod{3},\\
x&amp;\equiv 0\pmod{5},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que podemos resolver utilizando el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $3$ y $5$, lo será de $15$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $2$. Son candidatos $15,45,75,\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $x=15$.&lt;/p&gt;

&lt;p&gt;Análogamente, para $y$ aparece el siguiente sistema de congruencias lineales&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
y&amp;\equiv 0\pmod{2},\\
y-1&amp;\equiv 0\pmod{3},\\
y&amp;\equiv 0\pmod{5},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que podemos resolver utilizando el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $2$ y $5$, lo será de $10$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $3$. Son candidatos $10,40,70,\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $y=10$.&lt;/p&gt;

&lt;p&gt;Finalmente, para $z$ encontramos el siguiente sistema de congruencias lineales&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
z&amp;\equiv 0\pmod{2},\\
z&amp;\equiv 0\pmod{3},\\
z-1&amp;\equiv 0\pmod{5},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que podemos resolver utilizando el &lt;em&gt;Teorema chino del resto&lt;/em&gt;, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $2$ y $3$, lo será de $6$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $5$. Son candidatos $6,36,66,\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $z=6$.&lt;/p&gt;

&lt;p&gt;Por tanto, el menor número natural $n$ tal que $n/2$ es cuadrado perfecto, $n/3$ es cubo perfecto y $n/5$ es potencia quinta perfecta es $n=2^{15} \cdot 3^{10} \cdot 5^6$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Y si el número de divisores es impar?</title>
      <link>https://imalexissaez.github.io/2018/12/15/y-si-el-numero-de-divisores-es-impar/</link>
      <pubDate>Sat, 15 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/15/y-si-el-numero-de-divisores-es-impar/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 34:&lt;/strong&gt; Caracteriza aquellos números naturales cuyo número de divisores es impar.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;De partida, sabemos que los números naturales buscados no serán primos, puestos estos últimos siempre poseen una cantidad par de divisores, dos para ser más concretos: $1$ y el propio número primo. Así pues, consideremos un número natural $m$ expresado mediante su factorización en factores primos,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
m=a^x b^y c^z\cdots,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $a,b,c,\ldots$ números primos y $x,y,z,\ldots$ números naturales. Sabemos que el número de divisores de $m$ es, en total,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(x + 1)(y + 1)(z + 1)\cdots.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, nos indican que dicho producto ha de ser un número impar, hecho que traduce en que todos y cada uno de sus términos han de ser números impares (ya que bastaría con que únicamente uno fuese par para que todo el producto resultase un número par). Como $x+1, y+1, z+1,\ldots$ son números impares, inmediatamente deducimos que $x,y,z,\ldots$ serán números pares, que podrán escribirse como $x=2p, y=2q, z=2r,\ldots$ para ciertos enteros $p,q,r,\ldots$. De esta manera,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
m = a^x b^y c^z\cdots = a^{2p} b^{2q} c^{2r}\cdots = (a^p b^q c^r\cdots)^2,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, los números naturales que se caracterizan por poseer una cifra impar de divisores son cuadrados perfectos. Con ello, en función de la cantidad de divisores de un número, contamos así con un criterio para decidir rápidamente si dicho número es o no un cuadrado perfecto, según su total de divisores sea o no una cifra impar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando ceros, muchos ceros, en un factorial</title>
      <link>https://imalexissaez.github.io/2018/12/12/buscando-ceros-muchos-ceros-en-un-factorial/</link>
      <pubDate>Wed, 12 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/12/buscando-ceros-muchos-ceros-en-un-factorial/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 33:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) ¿En cuántos ceros acaba el número $1000!$?&lt;/li&gt;
&lt;li&gt;(b) Demuestra que $1000!$ no es divisible por $2^{995}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Para el apartado (a), nuestra labor consistiría en contar el número de dieces que podemos encontrar en la expresión de $1000! = 1\cdot2\cdot3\cdots999\cdot1000$. No estamos en condiciones de emplear directamente la &lt;em&gt;Fórmula de Legendre&lt;/em&gt;, puesto que $10$ no es un número primo, pero $10=2\cdot5$, de manera que nuestra tarea se reduce a buscar el número de veces que figura $5$ en la factorización en números primos de $1000!$ (porque $2$ aparecerá con mayor frecuencia, al ser menor que $5$, por ello nos interesa solamente hallar el número de cincos).&lt;/p&gt;

&lt;p&gt;Así, aplicando la mencionada fórmula,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
v_5(1000!) &amp;= \left\lfloor\dfrac{1000}{5}\right\rfloor + \left\lfloor\dfrac{1000}{5^2}\right\rfloor + \left\lfloor\dfrac{1000}{5^3}\right\rfloor + \left\lfloor\dfrac{1000}{5^4}\right\rfloor\\
&amp;= 200 + 40 + 8 + 1 = 249,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $1000!$ acaba en $249$ ceros.&lt;/p&gt;

&lt;p&gt;Para el apartado (b), quizá de forma un tanto rebuscada, simplemente nos preguntan por el número de veces que aparece $2$ en la factorización en números primos de $1000!$, puesto que tal valor nos permitirá verificar la propiedad enunciada. Aplicando, de nuevo, la &lt;em&gt;Fórmula de Legendre&lt;/em&gt;, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
v_2(1000!) &amp;= \left\lfloor\dfrac{1000}{2}\right\rfloor + \left\lfloor\dfrac{1000}{2^2}\right\rfloor + \cdots + \left\lfloor\dfrac{1000}{2^9}\right\rfloor\\
&amp;= 500 + 250 + 125 + 62 + 31 + 15 + 7 + 3 + 1 \\
&amp;= 994,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;luego $2^{994}|1000!$, pero $2^{995}\nmid 1000!$, como queríamos demostrar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moviendo cifras de posición en un número</title>
      <link>https://imalexissaez.github.io/2018/12/08/moviendo-cifras-de-posicion-en-un-numero/</link>
      <pubDate>Sat, 08 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/08/moviendo-cifras-de-posicion-en-un-numero/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 32:&lt;/strong&gt; Encuentra el número natural más pequeño con $6$ como cifra de las unidades de manera que si el $6$ se mueve al principio, el número queda multiplicado por cuatro.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Antes de abordar la resolución del ejercicio propiamente en sí, analicemos el movimiento del $6$ con un par de números en concreto para intentar detectar posibles patrones.&lt;/p&gt;

&lt;p&gt;Por ejemplo, un número como el $326$ es cierto que podemos escribirlo como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
326 = 320 + 6 = 32\cdot10 + 6.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Al mover la cifra de las unidades al principio queda entonces el número $632$, que podemos escribir como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
632 = 600 + 32 = 6\cdot 10^2 + 32.\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;La idea, como vemos, es intentar aislar la cifra $6$ de alguna forma posible, que luego nos permita construir una ecuación que satisfaga las condiciones impuestas en el enunciado del ejercicio.&lt;/p&gt;

&lt;p&gt;Consideremos ahora el número $8886$, actuando como antes, lo podemos escribir como $8886 = 8880 + 6 = 888\cdot10 + 6 = 10n + 6$, donde $n = 888$. Al mover la cifra de las unidades al principio del número queda $6888$, que podemos escribir como $6888 = 6000 + 888 = 6\cdot 10^3 + n = 6\cdot 10^m + n$, con $m + 1$ como número de dígitos del número inicial.&lt;/p&gt;

&lt;p&gt;Así pues, el número inicial vamos a denotarlo como $10n + 6$, mientras que el resultado de llevar a cabo el movimiento de la cifra de las unidades al principio del número será $6\cdot10^m + n$. Como el enunciado marca que este último es cuatro veces más grande que el considerado en principio, planteamos así la ecuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4(10n + 6) = 6\cdot10^m + n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;o, equivalentemente, $39n = 6\cdot10^m - 24$, ecuación diofántica que podemos simplificar por $3$, quedando pues&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
13n = 2\cdot10^m - 8.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como el miembro derecho de esta última ecuación es un número par y $13$ es un número impar, necesariamente $n$ ha de ser un número par, es decir, de la forma $n=2x$, para algún $x\in\mathbb{Z}$. Sustituyendo arriba y despejando la variable queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
13(2x) &amp;= 2\cdot10^m - 8,\\
13x &amp;= 10^m - 4,\\
x &amp;= \dfrac{10^m - 4}{13}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Podemos ahora introducir la expresión en una calculadora científica y generar una tabla de valores para ella en función de $m$, quedándonos con el primero para el cual $x$ sea un número natural. Alternativamente, podemos actuar por tanteo, dividiendo las potencias de $10$ entre $13$ hasta dar con la primera en la que el resto de esta operación matemática sea $4$. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
10 &amp;= 13\cdot 0 + 10,\\
100 &amp;= 13\cdot 7 + 9,\\
1000 &amp;= 13\cdot 76 + 12,\\
10000 &amp;= 13\cdot 769 + 3,\\
100000 &amp;= 13\cdot 7692 + 4,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;por tanto $x = 7692$, de manera que $n = 2x = 15384$, es decir, el número que buscamos es, recordando la expresión que generamos al principio de la resolución del ejercicio, $10n + 6 = 153846$ (y es el menor por ser el primero que satisface la ecuación diofántica). Como nota anecdótica, si estuviéramos interesados en hallar el siguiente valor que cumple con los dictados del enunciado, seguiríamos dividiendo potencias de $10$, encontrando que el siguiente que verifica la condición de interés es $x = 76927692$.&lt;/p&gt;

&lt;p&gt;Alternativamente, veamos cómo resolver la ecuación $13x = 10^m - 4$ de forma técnica. Tal y como viene planteada dicha ecuación, es cierto que $10^m - 4$ es múltiplo de $13$, por lo que hemos de resolver la ecuación de congruencia $10^m - 4\equiv 0\pmod{13}$, o, equivalentemente, $10^m\equiv 4\pmod{13}$.&lt;/p&gt;

&lt;p&gt;Ahora bien, como $10\equiv(-3)\pmod{13}$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
10^2\equiv (-3)^2\pmod{13}\equiv 9\pmod{13}\equiv (-4)\pmod{13},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y así podemos escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
10^m\equiv 4\pmod{13}&amp;\Leftrightarrow 10^2\cdot10^{m-2}\equiv 4\pmod{13}\\
&amp;\Leftrightarrow 10^{m - 2}\equiv (-1)\pmod{13}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $13$ es un número primo y $mcd(10, 13) = 1$, el &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt; afirma que $10^{12}\equiv 1\pmod{13}$. La expresión que figura en la ecuación previa no se ajusta exactamente a la anterior estructura, pero si la elevamos al cuadrado queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(10^{m-2})^2\equiv (-1)^2\pmod{13}\Leftrightarrow 10^{2m-4}\equiv 1\pmod{13},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;e, igualando exponentes, $2m-4 = 12$, de donde $m = 8$. Este valor, lo introduciríamos en la expresión que nos permite calcular el número $x$, hallando entonces $76927692$, cifra que sabemos no es la menor. Hemos de ser cautos aquí, puesto que el resultado asociado a &lt;em&gt;Fermat&lt;/em&gt; en ningún momento afirma que el exponente dado es el menor para el que se cumple que sea congruente con uno módulo $13$. No obstante, de haber uno más pequeño, sí que será cierto que dividirá a $12$.&lt;/p&gt;

&lt;p&gt;Por tanto, si probamos con $10^6$, encontramos que $10^6\equiv 1\pmod{13}$, e, igualando como antes exponentes, $2m-4=6$, de donde $m=5$, llegando así a la primera solución que encontramos por tanteo arriba. ¿Podría haber todavía alguna menor? Como $10^3\equiv (-1)\pmod{13}$, estamos en condiciones de descartar esa situación. Por tanto, el asociado a $m=5$ es el valor más pequeño para el que se satisface la ecuación de congruencia lineal, llevándonos a la solución $x=7692$ y permitiéndonos concluir el ejercicio tal y como hicimos por el método de tanteo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Será múltiplo de treinta o no?</title>
      <link>https://imalexissaez.github.io/2018/12/05/sera-multiplo-de-treinta-o-no/</link>
      <pubDate>Wed, 05 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/05/sera-multiplo-de-treinta-o-no/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 31:&lt;/strong&gt; Demuestra que $a^{25} - a$ es divisible entre $30$ para cualquier entero $a$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Hemos de ser capaces de probar que $(a^{25} - a)\equiv 0\pmod{30}$ para todo $a\in\mathbb{Z}$. Como $30=2\cdot3\cdot5$, veremos si la expresión es múltiplo de cada uno de los factores primos de $30$ y, en caso afirmativo, por las propiedades de las congruencias, estaremos en condiciones de concluir que asimismo será múltiplo de $30$.&lt;/p&gt;

&lt;p&gt;Vamos a apoyarnos en el corolario del &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, que afirma que si $p$ es un número primo y $a\in\mathbb{Z}$, entonces $a^p\equiv a\pmod{p}$. Así, para $p=5$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a^{25} &amp;= (a^5)^5\\
&amp;\equiv a^5\pmod{5}\\
&amp;\equiv a\pmod{5},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de manera que $(a^{25} - a)\equiv 0\pmod{5}$, esto es, la expresión es múltiplo de $5$. Procediendo de manera similar, para $p=3$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a^{25} &amp;= a\cdot (a^8)^3\\
&amp;\equiv (a\cdot a^8)\pmod{3}\\
&amp;\equiv (a^3)^3\pmod{3}\\
&amp;\equiv a^3\pmod{3}\\
&amp;\equiv a\pmod{3},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por tanto, $(a^{25} - a)\equiv 0\pmod{3}$, es decir, la expresión es asimismo múltiplo de $3$. Finalmente, para $p=2$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a^{25} &amp;= a\cdot(a^{12})^2\\
&amp;\equiv (a\cdot a^{12})\pmod{2}\\
&amp;\equiv (a\cdot (a^6)^2)\pmod{2}\\
&amp;\equiv (a\cdot a^6)\pmod{2}\\
&amp;\equiv (a\cdot(a^3)^2)\pmod{2}\\
&amp;\equiv (a\cdot a^3)\pmod{2}\\
&amp;\equiv a^4\pmod{2}\\
&amp;\equiv (a^2)^2\pmod{2}\\
&amp;\equiv a^2\pmod{2}\\
&amp;\equiv a\pmod{2},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por consiguiente, $(a^{25} - a)\equiv 0\pmod{2}$, esto es, la expresión también es múltiplo de $2$. Al ser múltiplo de $2$, $3$ y $5$, por las propiedades de las congruencias podemos afirmar que $(a^{25} - a)\equiv 0\pmod{30}$, es decir, la expresión es múltiplo de $30$.&lt;/p&gt;

&lt;p&gt;A modo de nota final, aunque nos hubiese dado la impresión de que escoger la descomposición $30=5\cdot 6$ habría acelerado la resolución de este ejercicio, hemos de ser cautos, pues $6$ no es un número primo, requisito indispensable para aplicar el resultado que nos ha permitido llevar a buen puerto este problema. En este último caso, habría sido necesario recurrir a otras herramientas para verificar la propiedad propuesta en el enunciado del ejercicio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>De fracciones irreducibles y su suma</title>
      <link>https://imalexissaez.github.io/2018/12/01/de-fracciones-irreducibles-y-su-suma/</link>
      <pubDate>Sat, 01 Dec 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/12/01/de-fracciones-irreducibles-y-su-suma/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 30:&lt;/strong&gt; Sea $n$ un número natural no nulo. Dado el conjunto de fracciones&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
A_n = \left\{\dfrac{1}{n},\dfrac{2}{n},\dfrac{3}{n},\ldots,\dfrac{n}{n}\right\}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Calcula el número de fracciones irreducibles y la suma de dichas fracciones.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Acompañemos la resolución de este ejercicio con un caso particular para $n$, con el objetivo de que esta sea así más ilustrativa. Por ejemplo, si $n=8$, el conjunto de fracciones a estudiar es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
A_8 = \left\{\dfrac{1}{8},\dfrac{2}{8},\dfrac{3}{8},\dfrac{4}{8},\dfrac{5}{8},\dfrac{6}{8},\dfrac{7}{8},\dfrac{8}{8}\right\},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que contiene $4$ fracciones irreducibles,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\left\{\dfrac{1}{8},\dfrac{3}{8},\dfrac{5}{8},\dfrac{7}{8}\right\}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Estas se caracterizan por ser aquellas en las que numerador y denominador son coprimos. Así pues, el problema se reduce a encontrar, dado un número natural $n$ no nulo, la cantidad de enteros positivos menores o iguales a $n$ y coprimos con $n$, esto es, $\varphi(n)$.&lt;/p&gt;

&lt;p&gt;En nuestro caso concreto, para $n=8=2^3$, efectivamente,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\varphi(8) = 8\left(1 - \dfrac{1}{2}\right) = 8\cdot\dfrac{1}{2} = 4.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por tanto, recapitulando, dado $n$ un número natural no nulo, la cantidad de fracciones irreducibles que figuran en el conjunto $A_n$ es igual a $\varphi(n)$.&lt;/p&gt;

&lt;p&gt;Para calcular su suma, si volvemos a centrar nuestra atención en el caso particular de $n=8$, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{1}{8} + \dfrac{7}{8} = 1,\qquad \dfrac{3}{8} + \dfrac{5}{8} = 1,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, podemos agrupar las fracciones irreducibles de dos en dos, de manera que su suma es $1$. Efectivamente, haciendo uso del Teorema 1.9 de [1], sabemos que, dados dos números enteros $a$ y $b$, para cualquier número entero $x$ se cumple que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
mcd(a,b) = mcd(b,a) = mcd(a,-b) = mcd(a,b+ax).
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Considerando ahora un número natural $k&amp;lt;n$ coprimo con $n$, se tiene que $mcd(k,n)=1$, y basta tomar en el resultado anterior $a=n$, $b=(-k)$ y $x=1$ para deducir que $1 = mcd(n,k) = mcd(n,(-k))= mcd(n,n-k)$ y, así, concluimos que si la fracción $k / n$ es irreducible, asimismo lo es $(n - k) / n$. Además, trivialmente&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{k}{n} + \dfrac{n-k}{n} = 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por tanto, aplicando el resultado alcanzado, la suma de las fracciones irreducibles del conjunto $A_n$ será&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
S = \dfrac{\varphi(n)}{2},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;quedando resuelto así el ejercicio.&lt;/p&gt;

&lt;h3 id=&#34;referencias&#34;&gt;Referencias&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[1] Ivan Niven, Herbert S. Zuckerman y Hugh L. Montgomery. &lt;em&gt;An Introduction to the Theory of Numbers&lt;/em&gt;. 5ª edición. New York, United States: Wiley, 1991. ISBN: 9780471625469.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Presentando el Teorema de Wilson</title>
      <link>https://imalexissaez.github.io/2018/11/28/presentando-el-teorema-de-wilson/</link>
      <pubDate>Wed, 28 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/28/presentando-el-teorema-de-wilson/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 29:&lt;/strong&gt; Prueba que $437$ es divisor de&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $16^{99} - 1$.&lt;/li&gt;
&lt;li&gt;(b) $18! + 1$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Para ambos apartados, vamos a aprovechar que $437 = 19\cdot 23$ y, de cara a demostrar que es divisor de los números dados en los apartados (a) y (b), estudiaremos si $19$ y $23$ lo son y, en caso afirmativo, por las propiedades de las congruencias, concluiremos que $437$ los divide.&lt;/p&gt;

&lt;p&gt;Para el apartado (a), como $19$ es un número primo y $mcd(16,19)=1$, entonces, por el &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, $16^{18}\equiv 1\pmod{19}$. Ahora, como $99 = 18\cdot5 + 9$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
16^{99} &amp;= 16^9\cdot(16^{18})^5\\
&amp;\equiv (16^9\cdot 1^{18})\pmod{19}\\
&amp;\equiv 16^9\pmod{19}\\
&amp;\equiv 4^{18}\pmod{19},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;pero como $mcd(4,19)=1$, aplicando de nuevo el resultado anterior, $4^{18}\equiv 1\pmod{19}$, luego&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
( 16^{99} - 1 )\equiv (1 - 1)\pmod{19}\equiv 0\pmod{19},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $16^{99}-1$ es múltiplo de $19$. De manera similar, como $23$ es un número primo y $mcd(16,23)=1$, por el mismo teorema que antes sabemos que $16^{22}\equiv 1\pmod{23}$, y como $99=22\cdot4+11$, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
16^{99} &amp;= 16^{11}\cdot(16^{22})^4\\
&amp;\equiv (16^{11}\cdot 1^4)\pmod{23}\\
&amp;\equiv 16^{11}\pmod{23}\\
&amp;\equiv 4^{22}\pmod{23},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y utilizando la estrategia previa, como $mcd(4,23)=1$, sabemos que $4^{22}\equiv 1\pmod{23}$. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
( 16^{99} - 1 )\equiv (1 - 1)\pmod{23}\equiv 0\pmod{23},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $16^{99} - 1$ es múltiplo de $23$ y, por las propiedades de las congruencias, será asimismo múltiplo de $19\cdot23=437$.&lt;/p&gt;

&lt;p&gt;Para el apartado (b), como $19$ es un número primo, aplicando el &lt;em&gt;Teorema de Wilson&lt;/em&gt;, $18!\equiv (-1)\pmod{19}$, luego&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
( 18! + 1 )\equiv (-1+1)\pmod{19}\equiv 0\pmod{19},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $18!+1$ es múltiplo de $19$. Por otro lado, $23$ es asimismo un número primo, de manera que utilizando de nuevo el resultado anterior, $22!\equiv (-1)\pmod{23}$. Ahora bien, $22! = 22\cdot21\cdot20\cdot19\cdot18!$ y como $22\equiv (-1)\pmod{23}$, $21\equiv (-2)\pmod{23}$, $20\equiv (-3)\pmod{23}$ y $19\equiv (-4)\pmod{23}$, llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
22! &amp;= (22\cdot21\cdot20\cdot19\cdot18!)\\
&amp;\equiv ((-1)\cdot(-2)\cdot(-3)\cdot(-4)\cdot18!)\pmod{23}\\
&amp;\equiv (24\cdot18!)\pmod{23}\\
&amp;\equiv (1\cdot18!)\pmod{23}\\
&amp;\equiv 18!\pmod{23},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y juntando ambos resultados, concluimos que $18!\equiv (-1)\pmod{23}$, luego&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
( 18! + 1 )\equiv ( -1 + 1 )\pmod{23}\equiv 0\pmod{23},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $18!+1$ es múltiplo de $23$, y como también lo era de $19$, concluimos que asimismo lo será de $19\cdot23=437$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando números compuestos</title>
      <link>https://imalexissaez.github.io/2018/11/24/buscando-numeros-compuestos/</link>
      <pubDate>Sat, 24 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/24/buscando-numeros-compuestos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 28:&lt;/strong&gt; Encuentra diez números compuestos consecutivos.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Dado que preguntan por diez números compuestos consecutivos cualesquiera (y no, por ejemplo, por los diez primeros números que satisfacen dicha propiedad), existen dos estrategias habituales para abordar la resolución de este tipo de ejercicios.&lt;/p&gt;

&lt;p&gt;En primer lugar, consideremos que buscamos únicamente tres números compuestos consecutivos, en lugar de los diez que solicita el enunciado, de cara a aliviar un tanto la escritura. Tomemos entonces el factorial de $4$, $4! = 1\cdot2\cdot3\cdot4$, de manera que es cierto que:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
4! + 2 &amp;= 2\cdot(1\cdot3\cdot4 + 1),\\
4! + 3 &amp;= 3\cdot(1\cdot2\cdot4 + 1),\\
4! + 4 &amp;= 4\cdot(1\cdot2\cdot3 + 1),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;son tres números consecutivos compuestos. En general, dado $n\in\mathbb{N}$, si buscamos $n$ números compuestos consecutivos, una opción es considerar el número $(n+1)!$ y, a partir de él, generar el conjunto de números compuestos consecutivos siguiente:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\{(n+1)! + k: k\in\mathbb{N}, 2\leq k\leq n+1\}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Así, para $n=10$, siguiendo esta indicación, un conjunto de diez números compuestos consecutivos es $\{11! + k: k\in\mathbb{N}, 2\leq k\leq 11\}$.&lt;/p&gt;

&lt;p&gt;Alternativamente, si no queremos trabajar con números cuya magnitud es tan severa, podemos optar por construir el producto de los primeros números primos hasta encontrar aquel que supere en valor la cantidad de números compuestos consecutivos que deseamos encontrar. Por ejemplo, para $n=3$, el mencionado producto sería $2\cdot3\cdot5$, que satisface que:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
2\cdot3\cdot5 + 2 &amp;= 2(3\cdot 5 + 1),\\
2\cdot3\cdot5 + 3 &amp;= 3(2\cdot 5 + 1),\\
2\cdot3\cdot5 + 4 &amp;= 2(3\cdot 5 + 2),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;son tres números consecutivos compuestos. Para $n=10$, consideraríamos entonces el conjunto&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\{2\cdot3\cdot5\cdot7\cdot11 + k:k\in\mathbb{N}, 2\leq k\leq 11\},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que contiene diez números compuestos consecutivos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Una aplicación rápida del Teorema de Euler-Fermat</title>
      <link>https://imalexissaez.github.io/2018/11/21/una-aplicacion-rapida-del-teorema-de-euler-fermat/</link>
      <pubDate>Wed, 21 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/21/una-aplicacion-rapida-del-teorema-de-euler-fermat/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 27:&lt;/strong&gt; Calcula los dos últimos dígitos de $3^{1492}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Para encontrar los dos últimos dígitos de $3^{1492}$, un posible enfoque es hallar el valor de su congruencia módulo $100$. El número $100$ no es primo, pero sí que es cierto que $mcd(3, 100)=1$, situación que nos permite hacer uso del &lt;em&gt;Teorema de Euler-Fermat&lt;/em&gt;. Este resultado afirma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
3^{\varphi(100)}\equiv 1\pmod{100}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como $100 = 2^2\cdot5$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\varphi(100) = 100\left(1-\dfrac{1}{2}\right)\left(1-\dfrac{1}{5}\right) = 100\cdot\dfrac{1}{2}\cdot\dfrac{4}{5} = 40,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por tanto, $3^{40}\equiv 1\pmod{100}$. De esta manera, como $1492 = 40\cdot 37 + 12$, podemos escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3^{1492} &amp;= 3^{12}\cdot(3^{40})^{37}\\
&amp;\equiv (3^{12}\cdot1^{37})\pmod{100}\\
&amp;\equiv 3^{12}\pmod{100}\\
&amp;\equiv 41\pmod{100},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;sin más que hacer uso de la calculadora para obtener el valor de $3^{12}$.&lt;/p&gt;

&lt;p&gt;Alternativamente, para hallar el valor de esta última congruencia, podemos manipular la potencia, $12$, como sigue:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3^{12} &amp;= (3^4)^3\\
&amp;= 81^3\\
&amp;\equiv(-19)^3\pmod{100}\\
&amp;\equiv (-6859)\pmod{100}\\
&amp;\equiv(-59)\pmod{100}\\
&amp;\equiv 41\pmod{100},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;como antes, pudiéndose optar también por estrategias similares del tipo $3^{12} = 3^5\cdot 3^5\cdot 3^2$ o $3^{12} = 3^6\cdot 3^6$, entre otras.&lt;/p&gt;

&lt;p&gt;Así, finalmente, los dos últimos dígitos de $3^{1492}$ son $41$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buscando la última cifra de una torre de potencias</title>
      <link>https://imalexissaez.github.io/2018/11/17/buscando-la-ultima-cifra-de-una-torre-de-potencias/</link>
      <pubDate>Sat, 17 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/17/buscando-la-ultima-cifra-de-una-torre-de-potencias/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 26:&lt;/strong&gt; Demuestra que la última cifra decimal de&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{2^n} + 1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es $7$, para cada $n\in\mathbb{N}$, con $n&amp;gt;1$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Para hallar la cifra de las unidades del número&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{2^n} + 1,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;un posible enfoque es estudiar el valor de la congruencia de dicho número módulo $10$. Ahora bien, como $10$ no es un número primo y $mcd(2, 10)=2$, no estamos en condiciones de aplicar ninguno de los resultados teóricos asociados a &lt;em&gt;Fermat&lt;/em&gt;. Analicemos, pues, el comportamiento del valor de las congruencias de las potencias de $2$ módulo $10$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
2^1&amp;\equiv 2\pmod{10},\\
2^2&amp;\equiv 4\pmod{10},\\
2^3&amp;\equiv 8\pmod{10},\\
2^4&amp;\equiv 6\pmod{10}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A la vista de este último valor alcanzado, y teniendo en cuenta el resultado al que pretendemos arribar, bastaría comprobar que, para cada número natural, con $n&amp;gt;1$, $2^n$ es múltiplo de $4$.&lt;/p&gt;

&lt;p&gt;Por inducción, para $n=2$, $2^2=4$ que, efectivamente es múltiplo de $4$. Supongamos ahora cierta la afirmación para un número natural dado $n$, con $n\geq 2$, esto es, que existe un número entero $k$ de manera que $2^n=4k$. Sin embargo, $2^{n+1} = 2\cdot 2^n = 2\cdot(4k) = 4\cdot 2k$, es decir, la propiedad asimismo se satisface para $n+1$. El &lt;em&gt;Principio de inducción matemática&lt;/em&gt; nos permite concluir que se verifica para cada número natural $n$, con $n\geq 2$.&lt;/p&gt;

&lt;p&gt;Por tanto, al ser $2^n\equiv 0\pmod{4}$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{2^n}\equiv 6\pmod{10},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;hecho que se traduce en que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
( 2^{2^n} + 1 )\equiv 7\pmod{10}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;o, equivalentemente, que, dadas las condiciones impuestas en el enunciado del ejercicio, la cifra de las unidades del número&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{2^n} + 1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es $7$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un polinomio que solo toma valores enteros</title>
      <link>https://imalexissaez.github.io/2018/11/14/un-polinomio-que-solo-toma-valores-enteros/</link>
      <pubDate>Wed, 14 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/14/un-polinomio-que-solo-toma-valores-enteros/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 25:&lt;/strong&gt; Para cada entero no negativo $n$, se considera el valor $P(n)$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
P(n) = \dfrac{n^7}{7} + \dfrac{n^3}{3} + \dfrac{11n}{21}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Demuestra que en $\mathbb{Z}_3$ y en $\mathbb{Z}_7$ se verifica que $3n^7 + 7n^3 + 11n = 0$.&lt;/li&gt;
&lt;li&gt;(b) Demuestra que $P(n)$ es un entero.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Para el apartado (a), recordemos que el conjunto finito $\mathbb{Z}_3 = \{\overline{0}, \overline{1}, \overline{2}\}$, que es un cuerpo al ser $3$ un número primo, viene definido como el conjunto cociente de $\mathbb{Z}$ por la relación de equivalencia dada por la congruencia módulo $3$. Así, como $3\equiv 0\pmod{3}$, para cada entero no negativo $n$, $3n^7\equiv 0\pmod{3}$. Por otro lado, al ser $3$ un número primo, sabemos, por el corolario del &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, que $n^3\equiv n\pmod{3}$, para cada entero no negativo $n$, por lo que $7n^3\equiv 7n\pmod{3}\equiv n\pmod{3}$. Por tanto,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(3n^7+7n^3+11n)&amp;\equiv (0+n+11n)\pmod{3}\\
&amp;\equiv 12n\pmod{3}\\
&amp;\equiv 0\pmod{3},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;para cada entero no negativo $n$. Alternativamente, en el caso de no recordar el anterior corolario, llegaríamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(3n^7+7n^3+11n)&amp;\equiv (0+7n^3+11n)\pmod{3}\\
&amp;\equiv (n^3-n)\pmod{3},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;pero&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
n^3-n = n(n^2 - 1) = (n - 1)n(n + 1),
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, $n^3 - n$ es el resultado de multiplicar tres números consecutivos, entre los cuales siempre seremos capaces de encontrar un múltiplo de $3$, haciendo pues que se verifique que $(n^3 - n)\equiv 0\pmod{3}$.&lt;/p&gt;

&lt;p&gt;Por lo que respecta al conjunto finito $\mathbb{Z}_7$, cuerpo también al ser $7$ un número primo, que se define siguiendo un procedimiento similar al mostrado para $\mathbb{Z}_3$, la manera de proceder es idéntica. Como $7\equiv 0\pmod{7}$, entonces, para cada entero no negativo $n$, es cierto que $7n^3\equiv 0\pmod{7}$. Además, aplicando el corolario del &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt;, como $7$ es un número primo, $n^7\equiv n\pmod{7}$, por lo que $3n^7\equiv 3n\pmod{7}$ para cada entero no negativo $n$. Luego,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(3n^7+7n^3+11n)&amp;\equiv (3n+0+11n)\pmod{7}\\
&amp;\equiv 14n\pmod{7}\\ 
&amp;\equiv 0\pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En cuanto al apartado (b), operando en la expresión de $P(n)$ llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
P(n) = \dfrac{n^7}{7} + \dfrac{n^3}{3} + \dfrac{11n}{21} = \dfrac{3n^7 + 7n^3 + 11n}{21},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y para que $P(n)\in\mathbb{Z}$, para cada entero no negativo $n$, el numerador de la anterior expresión ha de ser múltiplo de $21$. Sin embargo, en el apartado (a) acabamos de probar que $(3n^7 + 7n^3 + 11n)\equiv 0\pmod{3}$ y $(3n^7 + 7n^3 + 11n)\equiv 0\pmod{7}$, de manera que, aplicando las propiedades de las congruencias, se verifica que $(3n^7 + 7n^3 + 11n)\equiv 0\pmod{21}$, es decir, el numerador es múltiplo de $21$ y, por tanto, $P(n)\in\mathbb{Z}$ para cada entero no negativo $n$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un curioso criterio de divisibilidad</title>
      <link>https://imalexissaez.github.io/2018/11/10/un-curioso-criterio-de-divisibilidad/</link>
      <pubDate>Sat, 10 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/10/un-curioso-criterio-de-divisibilidad/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 24:&lt;/strong&gt; Escribe los divisores de $1001$. Considera ahora&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
N = a_0 + a_1t + \cdots + a_nt^n
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
S = a_0-a_1+a_2-\cdots+(-1)^na_n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;donde $t=1000$ y $a_n\in\mathbb{Z}$ y demuestra que $N\equiv S\pmod{1001}$. Deduce de ello un criterio de divisibilidad por $7$, $11$ o $13$ y aplícalo al número $312879645$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Como $1001 = 7\cdot11\cdot13$, el conjunto de divisores del número $1001$ es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\{1,7,11,13,77,91,143,1001\}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A continuación, si consideramos $t=1000$, como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
t\equiv (-1)\pmod{1001},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces se cumple que $t^2\equiv (-1)^2\pmod{1001}\equiv 1\pmod{1001}$ y, en general, $t^n\equiv (-1)^n\pmod{1001}$, para cada $n\in\mathbb{N}$. Este hecho nos permite concluir que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
N &amp;= a_0 + a_1t + \cdots + a_nt^n \\
&amp;\equiv (a_0-a_1+a_2-\cdots+(-1)^na_n)\pmod{1001},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $N\equiv S\pmod{1001}$, tal y como se nos pedía demostrar.&lt;/p&gt;

&lt;p&gt;Ahora bien, que $N$ sea congruente con $S$ módulo $1001$ implica que existe un $k\in\mathbb{Z}$ de manera que podemos escribir $N = 1001k+S$. Por tanto, dado que $1001=7\cdot11\cdot13$, el número $N$ será divisible por $7$, $11$ o $13$, siempre y cuando $S$ sea divisible por $7$, $11$ o $13$ (por aplicación directa de las propiedades de las congruencias), quedando así establecido el criterio de divisibilidad solicitado.&lt;/p&gt;

&lt;p&gt;Finalmente, si tomamos $N=312879645$, es cierto que lo podemos expresar como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
N = 645 + 879\cdot1000 + 312\cdot1000^2,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;por lo que $a_0 = 645$, $a_1=879$ y $a_2=312$. Esto provoca que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
S = 645 - 879 + 312 = 78 = 13\cdot 6,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y como $S$ es divisible por $13$ concluimos, por lo anterior, que $N$ es asimismo divisible por $13$. Alternativamente, podríamos decir que como $7\nmid S$, entonces $7\nmid N$ y, análogamente, como $11\nmid S$, entonces $11\nmid N$, quedando así únicamente concluir como arriba que como $13|S$, entonces $13|N$.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si consideramos ahora $N=178178$, su expresión en esta base $1000$ que introduce el presente ejercicio es $N = 178 + 178\cdot 1000$, quedando entonces $a_0=178$, $a_1=178$ y, por consiguiente, $S = 178-178 = 0$. Ahora bien, como $7|0$, entonces $7|N$ y, de forma similar, como $11|0$ y $13|0$, entonces $11|N$ y $13|N$. Añadiendo ahora un tres delante de $N$, es decir, $N=3178178$, tenemos $N = 178 + 178\cdot1000 + 3\cdot1000^2$, con $a_0=178$, $a_1=178$, $a_2=3$ y $S=3$. Como $7\nmid 3$, $11\nmid 3$ ni $13\nmid 3$, entonces concluimos que este último número no es divisible por $7$, $11$ ni $13$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo dividir polinomios con LaTeX en conjuntos finitos?</title>
      <link>https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/</link>
      <pubDate>Wed, 07 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/</guid>
      <description>&lt;p&gt;La &lt;a href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/&#34;&gt;semana anterior&lt;/a&gt; analizamos el paquete &lt;code&gt;polynom&lt;/code&gt;, que nos permite fácilmente llevar a cabo la transcripción de divisiones de polinomios con &lt;em&gt;LaTeX&lt;/em&gt;. A continuación, estudiaremos una manera alternativa para lidiar con este asunto que, además, nos permitirá operar en conjuntos finitos.&lt;/p&gt;

&lt;p&gt;Supongamos, sin pérdida de generalidad, que nuestro objetivo es dividir los polinomios&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
5x^5 - 2x^4 + 2x^3 - 5x^2 + 2x + 1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
3x^3 + x^2 - 5x + 2
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;en $\mathbb{Z}_7$. Para ello, &#39;&#39;dibujaremos&#39;&#39; la operación matemática en una matriz, método que nos permitirá organizar fácilmente los pasos y, de paso, imprimir algunas rayas horizontales cuando proceda.&lt;/p&gt;

&lt;p&gt;Para empezar, en el preámbulo del documento, insertamos las dos siguientes líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{tikz}
\usetikzlibrary{matrix}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, donde deseemos ubicar la división de los anteriores polinomios, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dando el resultado que figura en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181107-img01.png&#34; &gt;

&lt;img src=&#34;20181107-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer resultado parcial.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Organizar los monomios del dividendo como elementos individuales de una matriz nos facilitará la empresa de &#39;&#39;alinear&#39;&#39; las posteriores operaciones de la división. Por otro lado, el comando &lt;code&gt;draw&lt;/code&gt; es el que dibuja la &#39;&#39;caja&#39;&#39; de esta operación matemática, tomando como referencia las posiciones de los elementos de la matriz.&lt;/p&gt;

&lt;p&gt;Continuemos la división, siempre teniendo en cuenta que trabajamos en $\mathbb{Z}_7$. Así, para la primera etapa, teclearíamos acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
 5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
-5x^2 &amp;amp; +3x^4 &amp;amp;  -x^3 &amp;amp;  -x^2 &amp;amp;     &amp;amp;    &amp;amp;  &amp;amp; 4x^2\\
      &amp;amp;  +x^4 &amp;amp;  +x^3 &amp;amp;  +x^2 &amp;amp; +2x &amp;amp;    &amp;amp;  &amp;amp; \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\draw (a-2-1.south west) -- (a-2-4.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cuyo resultado se recoge en la siguiente figura:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181107-img02.png&#34; &gt;

&lt;img src=&#34;20181107-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Segundo resultado parcial.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Efectivamente, no queda tan estético como el que conseguíamos la semana pasada con el paquete &lt;code&gt;polynom&lt;/code&gt;. No obstante, funcionalmente hablando, los pequeños desajustes horizontales de signos no molestan en exceso.&lt;/p&gt;

&lt;p&gt;Una vez asimilada la idea del procedimiento a seguir, únicamente nos resta continuar con la división, escribiendo ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
 5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
-5x^2 &amp;amp; +3x^4 &amp;amp;  -x^3 &amp;amp;  -x^2 &amp;amp;     &amp;amp;    &amp;amp;  &amp;amp; 4x^2 + 5x + 1\\
      &amp;amp;  +x^4 &amp;amp;  +x^3 &amp;amp;  +x^2 &amp;amp; +2x &amp;amp;    &amp;amp;  &amp;amp; \\
      &amp;amp;  -x^4 &amp;amp; +2x^3 &amp;amp; -3x^2 &amp;amp; -3x &amp;amp;    &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp; +3x^3 &amp;amp; -2x^2 &amp;amp;  -x &amp;amp; +1 &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp; -3x^3 &amp;amp;  -x^2 &amp;amp; -2x &amp;amp; -2 &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp;       &amp;amp; -3x^2 &amp;amp; -3x &amp;amp; -1 &amp;amp;  &amp;amp; \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\draw (a-2-1.south west) -- (a-2-4.south east);
\draw (a-4-2.south west) -- (a-4-5.south east);
\draw (a-6-3.south west) -- (a-6-6.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obteniendo como resultado el que aparece en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181107-img03.png&#34; &gt;

&lt;img src=&#34;20181107-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Resultado final.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (VII)</title>
      <link>https://imalexissaez.github.io/2018/11/03/empezando-con-teoria-de-numeros-vii/</link>
      <pubDate>Sat, 03 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/03/empezando-con-teoria-de-numeros-vii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 23:&lt;/strong&gt; Sea $n$ un número natural. Sea $A_n = 2^n + 2^{2n} + 2^{3n}$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) Demuestra que para todo $n$, $A_{n+3}\equiv A_n\pmod{7}$.&lt;/li&gt;
&lt;li&gt;b) ¿Para qué valores de $n$, $A_n$ es múltiplo de $7$?&lt;/li&gt;
&lt;li&gt;c) Los números en base $2$, $1110$, $1010100$ y $1001001000$, ¿son divisibles por $7$?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Para el apartado a),&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
A_{n+3} = 2^{n+3} + 2^{2(n+3)} + 2^{3(n+3)} = 2^{n+3} + 2^{2n+6} + 2^{3n+9}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, aprovechando que $2^3=8\equiv 1\pmod{7}$, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
A_{n+3} = 2^3\cdot2^n + (2^3)^2\cdot2^{2n} + (2^3)^3\cdot 2^{3n} \equiv (2^n + 2^{2n} + 2^{3n})\pmod{7},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $A_{n+3}\equiv A_n\pmod{7}$, como queríamos demostrar.&lt;/p&gt;

&lt;p&gt;En cuanto al apartado b), teniendo presente el resultado alcanzado en el apartado anterior, estudiemos qué sucede para tres números consecutivos. Por comodidad de cara a los cálculos, tomaremos $1$, $2$ y $3$ como valores para $n$, y así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
A_1 &amp;= 2^1+2^2+2^3 = 14\equiv 0\pmod{7},\\
A_2 &amp;= 2^2+2^4+2^6 = 84\equiv 0\pmod{7},\\
A_3 &amp;= 2^3+2^6+2^9 = 584\equiv 3\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, como $A_{1}$ es múltiplo de $7$ y se satisface la propiedad dada en a), que podemos escribir como $( A_{n + 3} - A_{n} ) \equiv 0 \pmod{7}$, concluimos que $A_{4}$ será múltiplo de $7$ también, así como $A_{7}, A_{10}, A_{13}$ y, en general, los números de la forma $n=3k+1$, con $k\in\mathbb{Z}$, sin más que aplicar reiteradamente la citada propiedad. Un argumento similar se podría esgrimir para los números de la forma $n=3k+2$, con $k\in\mathbb{Z}$, a la vista del resultado alcanzado para $A_2$. De igual manera, este cauce de pensamiento nos llevaría a descartar que cualquier número de la forma $n=3k$, con $k\in\mathbb{Z}$, vaya a ser múltiplo de $7$, ya que $A_3$ no lo es. En conclusión, $A_n$ será múltiplo de $7$ para todos aquellos valores de $n$ que no sean múltiplo de $3$.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado c), por el &lt;em&gt;Teorema Fundamental de la Numeración&lt;/em&gt;, sabemos que podemos escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
1110_{(2} &amp;= 2^1+2^2+2^3 = A_1,\\
1010100_{(2} &amp;= 2^2+2^4+2^6 = A_2,\\ 
1001001000_{(2} &amp;= 2^3+2^6+2^9 = A_3,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y por lo establecido para el apartado anterior, $A_{1}$ y $A_{2}$ son divisibles por $7$, mientras que $A_{3}$ no lo es. De esta manera, los números $1110_{(2}$ y $1010100_{(2}$ son divisibles por $7$, mientras que $1001001000_{(2}$ no lo es.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo dividir polinomios con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/</link>
      <pubDate>Wed, 31 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/</guid>
      <description>&lt;p&gt;Escribiendo unos apuntes sobre polinomios, llegó el momento de mostrar un ejemplo de la división de un par de ellos. La clásica pregunta no se hizo esperar, ¿cómo transcribo en &lt;em&gt;LaTeX&lt;/em&gt; esa operación matemática?&lt;/p&gt;

&lt;p&gt;Acompañemos este artículo con un ejemplo concreto. Sean&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
P = x^4 + 3x^3 - 2x^2 + x - 1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
Q = x^2 + x - 1
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;los polinomios implicados en la división, siendo nuestro objetivo mostrar la mencionada operación paso por paso (y no simplemente ofrecer el resultado final, acción que no entraña misterio a la hora de llevarla a cabo con &lt;em&gt;LaTeX&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Como suele ser habitual, tras una rápida búsqueda con &lt;em&gt;Google&lt;/em&gt;, no soy la primera persona que se ha encontrado en esta encrucijada. En los foros que consulté, la recomendación estándar era emplear el paquete &lt;a href=&#34;https://ctan.org/pkg/polynom&#34;&gt;polynom&lt;/a&gt;, que a través del comando &lt;code&gt;\polylongdiv&lt;/code&gt; nos facilita enormemente la tarea. De forma automática, se ocupa de realizar y organizar (con &lt;em&gt;LaTeX&lt;/em&gt;) todos los pasos involucrados en una división de polinomios.&lt;/p&gt;

&lt;p&gt;Así pues, empecemos ubicando en el preámbulo de nuestro documento la siguiente instrucción:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{polynom}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Antes de proceder a realizar división alguna, conviene que declaremos personalmente el valor de ciertos argumentos opcionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\polyset{style=C, div=:, vars=x}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: declara el estilo con el que efectuará la división de polinomios, pudiendo escoger entre los valores &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; y &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt;: señala el símbolo con el que se expresará la división (dependiendo del estilo escogido, la asignación de este parámetro es importante).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt;: indica el valor de la variable del polinomio. Generalmente utilizamos &lt;code&gt;x&lt;/code&gt;, pero no es descabellado emplear &lt;code&gt;n&lt;/code&gt; cuando estamos lidiando con temas asociados a números enteros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora, allí donde deseemos ubicar la división de los polinomios $P$ y $Q$ definidos arriba, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\polylongdiv{x^4+3x^3-2x^2+x-1}{x^2+x-1}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obteniendo como resultado:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181031-img01.png&#34; &gt;

&lt;img src=&#34;20181031-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Resultado de la división de polinomios.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Estudiemos el resultado visual de la operación bajo los distintos estilos que nos ofrece el paquete &lt;code&gt;polynom&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estilo A&lt;/strong&gt;:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181031-img02.png&#34; &gt;

&lt;img src=&#34;20181031-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Estilo para la división A.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Estilo B&lt;/strong&gt;:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181031-img03.png&#34; &gt;

&lt;img src=&#34;20181031-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Estilo para la división B.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Estilo C&lt;/strong&gt;:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20181031-img01.png&#34; &gt;

&lt;img src=&#34;20181031-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Estilo para la división C.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Personalmente, el último de los mostrados es el estilo que me resulta más atractivo para mostrar cómo realizar paso a paso una división de polinomios con &lt;em&gt;LaTeX&lt;/em&gt;. No obstante, como siempre, &#39;&#39;para gustos, los colores&#39;&#39;.&lt;/p&gt;

&lt;p&gt;Para finalizar, me gustaría comentar que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aun siendo bastante satisfactoria esta solución, ninguno de los estilos que ofrece el paquete &lt;code&gt;polynom&lt;/code&gt; se ajusta exactamente a como habitualmente organizamos la división por estos lares.&lt;/li&gt;
&lt;li&gt;Por limitaciones de &lt;em&gt;TeX&lt;/em&gt;, no podemos llevar a cabo la división de polinomios en conjuntos finitos como, por ejemplo, $\mathbb{Z}_4$ o en el cuerpo $\mathbb{Z}_7$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En ambos casos, una posible vía de escape que he encontrado es recurrir al paquete &lt;code&gt;tikz&lt;/code&gt; y, manualmente, &#39;&#39;dibujar&#39;&#39; la propia división de polinomios. No es un proceso demasiado complejo y quizá lo ilustre en una futura entrada.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (VI)</title>
      <link>https://imalexissaez.github.io/2018/10/27/empezando-con-teoria-de-numeros-vi/</link>
      <pubDate>Sat, 27 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/27/empezando-con-teoria-de-numeros-vi/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 22 (Comunidad Valenciana, 2006):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) Halla la base en que &lt;span  class=&#34;math&#34;&gt;\(3753_{(x} - 3586_{(x} = 189_{(x}.\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;b) Una vez hallado el valor de $x$, deduce el criterio de divisibilidad entre $x-1$ de dicha base.&lt;/li&gt;
&lt;li&gt;c) Después, justifica si alguno de los números dados es divisible por $x-1$ en dicha base.&lt;/li&gt;
&lt;li&gt;d) Por último, pasa el primero de los números dados a base $9$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Para el apartado a), por el &lt;em&gt;Teorema Fundamental de la Numeración&lt;/em&gt;, sabemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3753_{(x} &amp;= 3x^0 + 5x^1 + 7x^2 + 3x^3 = 3+5x+7x^2+3x^3,\\
3586_{(x} &amp;= 6x^0 + 8x^1 + 5x^2 + 3x^3 = 6+8x+5x^2+3x^3,\\
189_{(x} &amp;= 9x^0 + 8x^1 + 1x^2 = 9+8x+x^2,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;por lo que la igualdad planteada en el enunciado es equivalente a:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
3+5x+7x^2 + 3x^3 - (6+8x+5x^2 + 3x^3) = 9+8x+x^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Operando, esta se convierte en $x^2 - 11x-12=0$, y como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
x^2 - 11x-12 = (x-12)(x+1),
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;concluimos que la base del sistema de numeración en la que se satisface la anterior igualdad es $x=12$ ($x=-1$ queda descartada automáticamente pues toda base ha de ser un número natural estrictamente mayor que $1$. Es más, a modo anecdótico, si las soluciones hubiesen sido $x=7$ y $x=12$, también habríamos descartado de forma automática la primera, pues en la expresión de los números implicados en la igualdad hay dígitos mayores o iguales que $7$).&lt;/p&gt;

&lt;p&gt;Para el apartado b), consideremos el número de $n$ cifras $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ en base $12$. Utilizando el mismo resultado anterior, sabemos que podemos expresarlo como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n-1}a_{n-2}\cdots a_1a_0 = a_0+a_112+\cdots+a_{n-2}12^{n-1}+a_{n-1}12^{n-1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;De cara a encontrar el criterio de divisibilidad del $11$ emplearemos las propiedades de las congruencias sobre las potencias de $12$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_112+a_212^2+\cdots+a_{n-1}12^{n-1}\equiv 0\pmod{11}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, como $12\equiv 1\pmod{11}$, fácilmente apreciamos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
12^2\equiv 1^2\pmod{11}\equiv 1\pmod{11}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, en general, $12^i\equiv 1\pmod{11}$, para cada $i\in\mathbb{N}$, por lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_112+\cdots+a_{n-1}12^{n-1}\equiv (a_0+a_1+\cdots+a_{n-1})\pmod{11},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, el número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$, en base $12$, es divisible por $11$ siempre y cuando la suma de sus dígitos sea múltiplo de $11$.&lt;/p&gt;

&lt;p&gt;En el apartado c), a partir de la condición obtenida arriba, podemos concluir que&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$3+7+5+3 = 18\equiv 7\pmod{11}$,&lt;/li&gt;
&lt;li&gt;$3+5+8+6 = 22\equiv 0\pmod{11}$,&lt;/li&gt;
&lt;li&gt;$1+8+9 = 18\equiv 7\pmod{11}$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;esto es, $3586_{(12}$ es el único número, de entre los tres propuestos, divisible por $11$.&lt;/p&gt;

&lt;p&gt;Finalmente, en el apartado d) tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3753_{(12} &amp;= 3\cdot12^0 + 5\cdot12^1 + 7\cdot12^2 + 3\cdot12^3 \\
&amp;= 5184+1008+60+3 \\
&amp;= 6255_{(10},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y dividiendo ahora sucesivamente por $9$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
6255 &amp;= 9\cdot 695 + 0,\\
695 &amp;= 9\cdot 77 + 2,\\
77 &amp;= 9\cdot 8 + 5,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;arribamos a que $6255_{(10} = 8520_{(9}$, de manera que $3753_{(12} = 8520_{(9}$ por la unicidad que nos concede el &lt;em&gt;Teorema Fundamental de la Numeración&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (V)</title>
      <link>https://imalexissaez.github.io/2018/10/24/empezando-con-teoria-de-numeros-v/</link>
      <pubDate>Wed, 24 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/24/empezando-con-teoria-de-numeros-v/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 21:&lt;/strong&gt; Calcula la regla de divisibilidad por $7$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Veamos que, en esta ocasión, proceder como en ejercicios anteriores no dará lugar a establecer una sencilla regla para el criterio de divisibilidad del $7$. En efecto, consideremos el número de $n$ cifras $a_{n - 1} a_{n - 2}\cdots a_2a_1a_0$ en base $10$. Sabemos, por el &lt;em&gt;Teorema Fundamental de la Numeración&lt;/em&gt;, que podemos expresarlo como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n-1}a_{n-2}\cdots a_1a_0 = a_0+a_110+ \cdots + a_{n-2}10^{n-2}+a_{n-1}10^{n-1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para encontrar el criterio de divisibilidad del $7$ utilizaremos las propiedades de las congruencias sobre las potencias de $10$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+a_210^2 + \cdots + a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\equiv 0\pmod{7},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, dicho número sea múltiplo de $7$.&lt;/p&gt;

&lt;p&gt;Ahora bien,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
10&amp;\equiv 3\pmod{7},\\
10^2&amp;\equiv 3^2\pmod{7}\equiv 9\pmod{7}\equiv 2\pmod{7},\\
10^3&amp;\equiv 3^3\pmod{7}\equiv 27\pmod{7}\equiv 6\pmod{7},\\
10^4&amp;\equiv 3^4\pmod{7}\equiv 81\pmod{7}\equiv 4\pmod{7},\\
&amp;\vdots
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y comenzamos a atisbar que el criterio que podríamos extraer es ciertamente extraño y muy complicado de recordar, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+\cdots + a_{n-1}10^{n-1}\equiv (a_0 + 3a_1 + 2a_2 + \cdots)\pmod{7}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la divisibilidad de un número por $7$, conviene que tengamos a mano el siguiente resultado: &#39;&#39;&lt;em&gt;un número de la forma $n=10d+u$, con $d&amp;gt;0$ y $0\leq u\leq 9$ es múltiplo de $7$ si, y solo si, $d-2u$ es múltiplo de $7$&lt;/em&gt;&#39;&#39;.&lt;/p&gt;

&lt;p&gt;Efectivamente, si suponemos cierto que $(10d+u)\equiv 0\pmod{7}$, es decir, que $n=10d+u$ es múltiplo de $7$, y aplicamos ahora propiedades de las congruencias sobre la forma del número $n$, llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(10d+u)\equiv 0\pmod{7} &amp;\Leftrightarrow (3d-6u)\equiv 0\pmod{7} \\
&amp;\Leftrightarrow (3(d-2u))\equiv 0\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, hemos arribado a que el producto de dos números es múltiplo de $7$, y como sabemos que el número $3$ no lo es, concluimos que $d-2u$ es múltiplo de $7$.&lt;/p&gt;

&lt;p&gt;Recíprocamente, si $d-2u$ es múltiplo de $7$, $(d-2u)\equiv 0\pmod{7}$ y multiplicando por $10$ la ecuación de congruencia, $(10d-20u)\equiv 0\pmod{7}$. Ahora, como $(-20)\equiv 1\pmod{7}$, llegamos a que $(10d+u)\equiv 0\pmod{7}$, es decir, el número $n=10d+u$ es un múltiplo de $7$, quedando así la doble implicación probada.&lt;/p&gt;

&lt;p&gt;Veamos en acción esta proposición con un par de ejemplos sencillos. Si $n=63 = 60+3$, entonces $d = 6$, $u=3$ y $d-2u = 6-2\cdot3=0$ que, efectivamente, es un múltiplo de $7$, luego $63$ asimismo lo es. Si $n = 9009$, tenemos que $d = 900$, $u=9$ y $d-2u = 900-2\cdot9=882 = 7\cdot126$, luego $d-2u$ es un múltiplo de $7$, por lo que podemos concluir que el número $9009$ también lo es.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Referencias de interés sobre la competición matemática Putnam</title>
      <link>https://imalexissaez.github.io/2018/10/20/referencias-de-interes-sobre-la-competicion-matematica-putnam/</link>
      <pubDate>Sat, 20 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/20/referencias-de-interes-sobre-la-competicion-matematica-putnam/</guid>
      <description>&lt;p&gt;En los últimos días he dado, por casualidad, con una serie de problemas que pertenecen a esta competición matemática y que me han resultado ciertamente curiosos, tanto por su complejidad como por la creatividad puesta en escena a la hora de resolverlos.&lt;/p&gt;

&lt;p&gt;Si echamos un rápido vistazo al primer párrafo de la &lt;a href=&#34;https://en.wikipedia.org/wiki/William_Lowell_Putnam_Mathematical_Competition&#34; target=&#34;_blank&#34;&gt;página&lt;/a&gt; de la Wikipedia dedicada a esta competición encontramos:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The William Lowell Putnam Mathematical Competition, often abbreviated to Putnam Competition, is an annual mathematics competition for undergraduate college students enrolled at institutions of higher learning in the United States and Canada (regardless of the students&amp;rsquo; nationalities). It awards a scholarship and cash prizes ranging from $250 to $2,500 for the top students and $5,000 to $25,000 for the top schools, plus one of the top five individual scorers (designated as Putnam Fellows) is awarded a scholarship of up to $12,000 plus tuition at Harvard University (Putnam Fellow Prize Fellowship), the top 100 individual scorers have their names mentioned in the American Mathematical Monthly (alphabetically ordered within rank), and the names and addresses of the top 500 contestants are mailed to all participating institutions. It is widely considered to be the most prestigious university-level mathematics competition in the world, and its difficulty is such that the median score is often zero (out of 120) despite being attempted by students specializing in mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A primera vista, esta competición destaca por:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suculentos premios, tanto en metálico, como en becas de la prestigiosa universidad &lt;em&gt;Harvard&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Unos resultados cuya mediana se sitúa en $0$ puntos, de los $120$ posibles, hecho que advierte de la crudeza de los enunciados a los que se enfrentan los estudiantes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la &lt;a href=&#34;https://www.maa.org/math-competitions/putnam-competition&#34; target=&#34;_blank&#34;&gt;página oficiosa&lt;/a&gt; podemos encontrar los enunciados, con sus respectivas soluciones, de la prueba correspondiente al año pasado (la asociada al 2018 todavía no ha tenido lugar). Además, nos recomiendan tres libros de cara a la preparación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The William Lowell Putnam Mathematical Competition Problems and Solutions 1938-1964&lt;/em&gt; A. M. Gleason, R. E. Greenwood, and L. M. Kelly, Editors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The William Lowell Putnam Mathematical Competition Problems and Solutions 1965-1984&lt;/em&gt; Gerald L. Alexanderson, Leonard F. Klosinski, and Loren C. Larson, Editors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The William Putnam Mathematical Competition 1985-2000: Problems, Solutions and Commentary&lt;/em&gt; Kiran S. Kedlaya, Bjorn Poonen, and Ravi Vakil.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existe una &lt;a href=&#34;http://math.scu.edu/putnam/&#34; target=&#34;_blank&#34;&gt;página oficial&lt;/a&gt; de la competición Putnam, pero, por lo que he podido comprobar tras una rápida exploración, es únicamente informativa, sin ofrecer apenas recursos didácticos de interés.&lt;/p&gt;

&lt;p&gt;Por otro lado, en &lt;a href=&#34;https://kskedlaya.org/putnam-archive/&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; tenemos acceso a una especie de archivo histórico que recoge los enunciados de ediciones anteriores, muchos de ellos con sus soluciones asociadas, remontándose hasta el año 1994.&lt;/p&gt;

&lt;p&gt;Podemos encontrar más referencias y consejos en &lt;a href=&#34;https://math.stackexchange.com/questions/1170456/books-preparatory-for-putnam-exam&#34; target=&#34;_blank&#34;&gt;esta&lt;/a&gt; interesante discusión de la sección dedicada a matemáticas de &lt;em&gt;StackExchange&lt;/em&gt;. En ella nos redirigen a la &lt;a href=&#34;https://faculty.math.illinois.edu/~hildebr/putnam/resources.html&#34; target=&#34;_blank&#34;&gt;web personal&lt;/a&gt; del profesor &lt;em&gt;A. J. Hildebrand&lt;/em&gt;, que es sumamente interesante, sobre todo por la selección guiada de libros (sobre resolución de problemas matemáticos) que ofrece y que reproduzco a continuación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[Principiante] A. Gardiner, &lt;em&gt;The Mathematical Olympiad Handbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Principiante - Intermedio] E. Lozansky and C. Rousseau, &lt;em&gt;Winning solutions&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Principiante - Avanzado] Arthur Engel, &lt;em&gt;Problem solving strategies&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Intermedio - Avanzado] Loren Larson, &lt;em&gt;Problem solving through problems&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;[Intermedio - Avanzado] Paul Zeitz, &lt;em&gt;The Art and Craft of Problem Solving&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Avanzado] D. J. Newman, &lt;em&gt;A problem seminar&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Avanzado] R. Gelca and T. Andreescu, &lt;em&gt;Putnam and Beyond&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Del último libro, además, existe una segunda edición en el mercado, bastante reciente, que también merecería su hueco en el anterior listado.&lt;/p&gt;

&lt;p&gt;Así pues, tenemos a nuestra disposición una ingente cantidad de recursos que, en mi opinión, pueden tenernos entretenidos durante años si los examinamos con el cariño que merecen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (IV)</title>
      <link>https://imalexissaez.github.io/2018/10/17/empezando-con-teoria-de-numeros-iv/</link>
      <pubDate>Wed, 17 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/17/empezando-con-teoria-de-numeros-iv/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 20:&lt;/strong&gt; Calcula las reglas de divisibilidad para $3$ y para $9$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Consideremos el número de $n$ cifras $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ en base $10$. Sabemos, por el &lt;em&gt;Teorema Fundamental de la Numeración&lt;/em&gt;, que podemos expresarlo como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n-1}a_{n-2}\cdots a_1a_0 = a_0+a_110+\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para encontrar el criterio de divisibilidad del $3$ utilizaremos las propiedades de las congruencias sobre las potencias de $10$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+a_210^2+\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\equiv 0\pmod{3},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, dicho número sea múltiplo de $3$.&lt;/p&gt;

&lt;p&gt;Así, como $10\equiv 1\pmod{3}$, fácilmente apreciamos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
10^2\equiv 1^2\pmod{3}\equiv 1\pmod{3}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, en general, $10^i\equiv 1\pmod{3}$, para cada $i\in\mathbb{N}$, por lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+\cdots+a_{n-1}10^{n-1}\equiv (a_0+a_1+\cdots+a_{n-1})\pmod{3},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, el número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ es divisible por $3$ siempre y cuando la suma de sus dígitos sea múltiplo de $3$.&lt;/p&gt;

&lt;p&gt;Por lo que respecta al criterio de divisibilidad del $9$, el modo de proceder es muy similar al mostrado arriba. Volvemos a buscar una condición sobre los dígitos del número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+a_210^2+\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\equiv 0\pmod{9},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;esto es, dicho número sea múltiplo de $9$. Al igual que antes, como $10\equiv 1\pmod{9}$, se sigue que $10^2\equiv 1^2\pmod{9}\equiv 1\pmod{9}$ y, en general, $10^i\equiv 1\pmod{9}$, para cada $i\in\mathbb{N}$, por lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_0+a_110+\cdots+a_{n-1}10^{n-1}\equiv (a_0+a_1+\cdots+a_{n-1})\pmod{9},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, el número $a_{n-1}a_{n-2}\cdots a_2a_1a_0$ es divisible por $9$ siempre y cuando la suma de sus dígitos sea múltiplo de $9$. Expresado de otra manera, todo número es congruente con la suma de sus cifras módulo $9$. Por ejemplo, $162\equiv 0\pmod{9}$, ya que $1+6+2=9$ y $9\equiv 0\pmod{9}$; mientras que $172\equiv 1\pmod{9}$, puesto que $1+7+2=10$ y $10\equiv 1\pmod{9}$.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: es más, el último criterio de divisibilidad hallado se puede generalizar como sigue: &#39;&#39;&lt;em&gt;dado un sistema de numeración cuya base $b$ es mayor que $2$, un número es divisible por $b-1$ siempre que la suma de sus dígitos sea congruente con $0$ módulo $b-1$&lt;/em&gt;&#39;&#39;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (III)</title>
      <link>https://imalexissaez.github.io/2018/10/13/empezando-con-teoria-de-numeros-iii/</link>
      <pubDate>Sat, 13 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/13/empezando-con-teoria-de-numeros-iii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 19:&lt;/strong&gt; Calcula el valor de la expresión&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(1^3 + 2^3 + \cdots + 100^3)\pmod{4}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Si tenemos en cuenta que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
1\equiv 1\pmod{4} &amp;\Rightarrow 1^3\equiv 1^3\pmod{4}\equiv 1\pmod{4},\\
2\equiv 2\pmod{4} &amp;\Rightarrow 2^3\equiv 2^3\pmod{4}\equiv 8\pmod{4}\equiv 0\pmod{4},\\
3\equiv 3\pmod{4} &amp;\Rightarrow 3^3\equiv 3^3\pmod{4}\equiv 27\pmod{4}\equiv 3\pmod{4},\\ 
4\equiv 0\pmod{4} &amp;\Rightarrow 4^3\equiv 0^3\pmod{4}\equiv 0\pmod{4},\\
5\equiv 1\pmod{4} &amp;\Rightarrow 5^3\equiv 1^3\pmod{4}\equiv 1\pmod{4},\\
6\equiv 2\pmod{4} &amp;\Rightarrow 6^3\equiv 2^3\pmod{4}\equiv 8\pmod{4}\equiv 0\pmod{4},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;enseguida atisbamos cómo se repetiría el mismo patrón cada cuatro sumandos. Ahora bien,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(1^3 + 2^3 + 3^3 + 4^3)\pmod{4}&amp;\equiv (1 + 0 + 3 + 0)\pmod{4}\\
&amp;\equiv 4\pmod{4}\\
&amp;\equiv 0\pmod{4},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y como en la suma de cubos propuesta en el enunciado del ejercicio hemos de sumar $25$ veces el resultado del patrón anterior, llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(1^3 + 2^3 + \cdots+100^3)\pmod{4} \equiv 0\pmod{4},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, la suma de los cubos de los cien primeros números naturales es múltiplo de $4$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (II)</title>
      <link>https://imalexissaez.github.io/2018/10/11/empezando-con-teoria-de-numeros-ii/</link>
      <pubDate>Thu, 11 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/11/empezando-con-teoria-de-numeros-ii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 18:&lt;/strong&gt; Calcula el inverso de $3$ módulo $7$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;El enunciado nos plantea resolver&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
3x\equiv 1\pmod{7}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $mcd(3,7)=1$, es decir, $3$ y $7$ son coprimos, estamos en condiciones de asegurar que seremos capaces de encontrar el inverso de $3$ módulo $7$, $x$. Para ello, como los números involucrados son pequeños, podemos simplemente optar por emplear la &#39;&#39;cuenta de la vieja&#39;&#39; y extraer el valor de $x$ por fuerza bruta. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3\cdot 1 &amp;= 3\equiv 3\pmod{7},\\
3\cdot 2 &amp;= 6\equiv 6\pmod{7},\\
3\cdot 3 &amp;= 9\equiv 2\pmod{7},\\
3\cdot 4 &amp;= 12\equiv 5\pmod{7},\\
3\cdot 5 &amp;= 15\equiv 1\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;luego $x=5$ es el inverso de $3$ módulo $7$.&lt;/p&gt;

&lt;p&gt;Alternativamente, podemos llevar a cabo operaciones elementales sobre la propia ecuación de congruencia. Como $2\cdot3=6$, que es un valor muy cercano a $7$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
3x\equiv 1\pmod{7}&amp;\Leftrightarrow 6x\equiv 2\pmod{7}\\
&amp;\Leftrightarrow -x\equiv 2\pmod{7}\\
&amp;\Leftrightarrow x\equiv (-2)\pmod{7}\\
&amp;\Leftrightarrow x\equiv 5\pmod{7},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;arribando así al mismo resultado que antes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empezando con teoría de números (I)</title>
      <link>https://imalexissaez.github.io/2018/10/09/empezando-con-teoria-de-numeros-i/</link>
      <pubDate>Tue, 09 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/09/empezando-con-teoria-de-numeros-i/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 17:&lt;/strong&gt; Calcula el resto de la división de&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{1538}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entre $5$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Estudiemos, utilizando la teoría de congruencias, el comportamiento del valor de las primeras potencias de $2$.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
2^1&amp;\equiv 2 \pmod{5},\\
2^2&amp;\equiv 4 \pmod{5}\equiv(-1) \pmod{5},\\
2^3&amp;\equiv 3 \pmod{5},\\
2^4&amp;\equiv 1 \pmod{5}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Este resulta un buen punto en el que detener nuestro análisis, ya que ahora sabemos que las potencias de $2$ que son múltiplo de $4$ son congruentes con $1$ módulo $5$. Es decir, $2^8\equiv 1 \pmod{5}$, $2^{12}\equiv 1 \pmod{5}$, etc. Antes de continuar, cabe señalar que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Podíamos habernos ahorrado algunos cálculos, ya que como $p=5$ es un número primo y $mcd(2,5)=1$, entonces, por el &lt;em&gt;Pequeño Teorema de Fermat&lt;/em&gt; (ver abajo), $2^{5-1} = 2^4\equiv 1 \pmod{5}$.&lt;/li&gt;
&lt;li&gt;Además, en el momento en el que hemos obtenido la potencia para la cual $(-1)\pmod{5}$ ya podíamos intuir cuándo llegaríamos al resultado deseado, ya que $(-1)^2=1$, lo que indica que al elevar al cuadrado la potencia asociada ($2^2$ en este caso) tendríamos que sería congruente $1$ módulo $5$. Es decir $( 2^{2} )^{2} = 2^{4} \equiv 1\pmod{5}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora, dividiendo, sabemos que $1538 = 384\cdot 4 + 2$ y, por tanto,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2^{1538} = 2^{384\cdot 4 + 2} = (2^4)^{384}\cdot 2^2\equiv (1\cdot 4)\pmod{5}\equiv 4\pmod{5},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y así, el resto de la división de $2^{1538}$ entre $5$ asciende a $4$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema (Pequeño Teorema de Fermat)&lt;/strong&gt;: sea $p$ un número primo y supongamos que $p$ no divide a $a$. Entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a^{p - 1}\equiv 1\pmod{p}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Repasando ecuaciones en diferencias lineales (V)</title>
      <link>https://imalexissaez.github.io/2018/10/06/repasando-ecuaciones-en-diferencias-lineales-v/</link>
      <pubDate>Sat, 06 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/06/repasando-ecuaciones-en-diferencias-lineales-v/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 16:&lt;/strong&gt; Resuelve&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $a_{n+2}+a_n = \sin{(\pi n)}$.&lt;/li&gt;
&lt;li&gt;(b) $a_{n+2}+a_n = \sin{\left(\dfrac{\pi}{2}n\right)}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;El apartado (a) nos plantea la ecuación en diferencias lineal completa de orden 2,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}+a_n = \sin{(\pi n)}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esta tiene como ecuación en diferencias lineal homogénea asociada&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}+a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;cuya ecuación característica correspondiente es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2+1=0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $\lambda^2+1 = (\lambda - i)(\lambda + i)$, estamos en el caso de raíces complejas conjugadas simples, para las que $\varrho = 1$ y $\theta = \pi/2$, de manera que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_h(n) &amp;= 1^n\left(A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)}\right)\\
&amp;= A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $A,B\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Ahora, para hallar una solución particular, $a_p(n)$, como $b(n) = \sin{(\pi n)}$ y $\lambda = \cos{(\pi)} + i\sin{(\pi)} = -1$ no es raíz de la ecuación característica, proponemos $a_p(n) = a\cos{(\pi n)} + b\sin{(\pi n)}$, de manera que, sustituyendo en la ecuación inicial&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a\cos{(\pi(n+2))} + b\sin{(\pi(n+2))} + a\cos{(\pi n)} + b\sin{(\pi n)} &amp;= \sin{(\pi n)},\\
a\cos{(\pi n+2\pi)} + b\sin{(\pi n+2\pi)} + a\cos{(\pi n)} + b\sin{(\pi n)} &amp;= \sin{(\pi n)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y recordando que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\cos{(k_1+k_2)} &amp;= \cos{(k_1)}\cos{(k_2)}-\sin{(k_1)}\sin{(k_2)},\\
\sin{(k_1+k_2)} &amp;= \sin{(k_1)}\cos{(k_2)}+\cos{(k_1)}\sin{(k_2)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces $\cos{(\pi n+2\pi)} = \cos{(\pi n)}$ y $\sin{(\pi n+2\pi)} = \sin{(\pi n)}$, con lo que la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a\cos{(\pi n)} + b\sin{(\pi n)} + a\cos{(\pi n)} + b\sin{(\pi n)} &amp;= \sin{(\pi n)},\\
2a\cos{(\pi n)} + 2b\sin{(\pi n)} &amp;= \sin{(\pi n)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;e, igualando coeficientes, llegamos a que $2a=0$, de donde $a=0$, y $2b=1$, con lo que $b=1 / 2$, de forma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n) = \dfrac{1}{2}\sin{(\pi n)}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general de la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a(n) = a_h(n) + a_p(n) = A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)} + \dfrac{1}{2}\sin{(\pi n)},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $A,B\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;En el apartado (b), tenemos la ecuación en diferencias lineal completa de orden 2,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}+a_n = \sin{\left(\dfrac{\pi}{2}n\right)},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;cuya correspondiente ecuación lineal homogénea es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}+a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con ecuación característica asociada&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2 + 1=0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $\lambda^2+1 = (\lambda - i)(\lambda + i)$, estamos en el caso de raíces complejas conjugadas simples, para las que $\varrho = 1$ y $\theta = \pi/2$, de manera que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_h(n) &amp;= 1^n\left(
A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)}
\right)\\
&amp;= A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $A,B\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Ahora, para hallar una solución particular, $a_p(n)$, como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
b(n) = \sin{\left(\dfrac{\pi}{2}n\right)}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda = \cos{\left(\dfrac{\pi}{2}\right)} + i\sin{\left(\dfrac{\pi}{2}\right)} = i
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es raíz simple ($m=1$) de la ecuación característica, proponemos&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_p(n) &amp;= n^1\left(a\cos{\left(\dfrac{\pi}{2}n\right)} + b\sin{\left(\dfrac{\pi}{2}n\right)}\right)\\
&amp;= n\left(a\cos{\left(\dfrac{\pi}{2}n\right)} + b\sin{\left(\dfrac{\pi}{2}n\right)}\right),
\end{aligned} 
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de manera que, sustituyendo en la ecuación inicial,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(n+2)\left(a\cos{\left(\dfrac{\pi}{2}(n+2)\right)} + b\sin{\left(\dfrac{\pi}{2}(n+2)\right)}\right)+n\left(a\cos{\left(\dfrac{\pi}{2}n\right)} + b\sin{\left(\dfrac{\pi}{2}n\right)}\right) = \sin{\left(\dfrac{\pi}{2}n\right)}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y recordando que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\cos{(k_1+k_2)} &amp;= \cos{(k_1)}\cos{(k_2)}-\sin{(k_1)}\sin{(k_2)},\\
\sin{(k_1+k_2)} &amp;= \sin{(k_1)}\cos{(k_2)}+\cos{(k_1)}\sin{(k_2)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\cos{\left(\dfrac{\pi}{2}(n+2)\right)} &amp;= \cos{\left(\dfrac{\pi}{2}n+\pi\right)} = -\cos{\left(\dfrac{\pi}{2}n\right)},\\
\sin{\left(\dfrac{\pi}{2}(n+2)\right)} &amp;= \sin{\left(\dfrac{\pi}{2}n+\pi\right)} = -\sin{\left(\dfrac{\pi}{2}n\right)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con lo que la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
(n+2)\left(-a\cos{\left(\dfrac{\pi}{2}n\right)} - b\sin{\left(\dfrac{\pi}{2}n\right)}\right)+ n\left(a\cos{\left(\dfrac{\pi}{2}n\right)} + b\sin{\left(\dfrac{\pi}{2}n\right)}\right) = \sin{\left(\dfrac{\pi}{2}n\right)}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;e, igualando coeficientes, llegamos a que $-2a=0$, de donde $a=0$, y $-2b=1$, por lo que $b = -1 / 2$, de forma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n) = -\dfrac{1}{2}\sin{\left(\dfrac{\pi}{2}n\right)}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general de la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a(n) = a_h(n) + a_p(n) &amp;= A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)} -\dfrac{1}{2}\sin{\left(\dfrac{\pi}{2}n\right)}\\
&amp;=A\cos{\left(\dfrac{\pi}{2}n\right)} + \left(B-\dfrac{1}2{}\right)\sin{\left(\dfrac{\pi}{2}n\right)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $A,B\in\mathbb{R}$.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Repasando ecuaciones en diferencias lineales (IV)</title>
      <link>https://imalexissaez.github.io/2018/10/04/repasando-ecuaciones-en-diferencias-lineales-iv/</link>
      <pubDate>Thu, 04 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/04/repasando-ecuaciones-en-diferencias-lineales-iv/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 15:&lt;/strong&gt; Resuelve&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $a_{n+2}-3a_{n+1}-2a_n = 3^n$.&lt;/li&gt;
&lt;li&gt;(b) $a_{n+2}-3a_{n+1}+2a_n = 2^n$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;En el apartado (a), encontramos la ecuación en diferencias lineal completa de orden 2,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}-2a_n = 3^n.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Su ecuación en diferencias lineal homogénea asociada es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}-2a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con ecuación característica&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2 - 3\lambda - 2 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, como $\lambda^2 - 3\lambda - 2=(\lambda - 2)(\lambda - 1)$, estamos en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_11^n + c_22^n = c_1+c_22^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;A continuación, para encontrar una solución particular, $a_p(n)$, como $b(n) = 3^n$ y $\lambda = 3$ no es raíz de la ecuación característica, proponemos $a_p(n) = k3^n$, de manera que, sustituyendo en la ecuación inicial,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k3^{n+2} - 3k3^{n+1} + 2k3^n &amp;= 3^n,\\ 
9k - 9k + 2k &amp;= 1,\\
2k &amp;= 1,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $k = 1 / 2$, con lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n) = \dfrac{1}{2}3^n.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general de la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a(n) = a_h(n) + a_p(n) = c_1+c_22^n + \dfrac{1}{2}3^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;En el apartado (b), la ecuación en diferencias lineal&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}+2a_n = 2^n
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es completa de orden 2. Su ecuación en diferencial lineal homogénea asociada es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}+2a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con ecuación característica correspondiente&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2 - 3\lambda + 2 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $\lambda^2 - 3\lambda + 2 = (\lambda - 2)(\lambda - 1)$, estamos en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_11^n + c_22^n=c_1+c_22^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Ahora, para encontrar una solución particular, $a_p(n)$, como $b(n) = 2^n$ y $\lambda=2$ es una raíz simple ($m=1$) de la ecuación característica, proponemos $a_p(n) = kn&lt;sup&gt;12&lt;/sup&gt;n = kn2^n$, de forma que, sustituyendo en la ecuación inicial,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
k(n+2)2^{n+2} - 3k(n+1)2^{n+1}+2kn2^n &amp;= 2^n,\\
4k(n+2) - 6k(n+1) + 2kn &amp;= 1,\\
4kn + 8k - 6kn - 6k + 2kn &amp;=1,\\
2k &amp;= 1,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $k=1 / 2$, con lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n) = \dfrac{1}{2}n2^n = n2^{n-1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general de la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a(n) = a_h(n) + a_p(n) = c_1+c_22^n+n2^{n-1},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repasando ecuaciones en diferencias lineales (III)</title>
      <link>https://imalexissaez.github.io/2018/10/02/repasando-ecuaciones-en-diferencias-lineales-iii/</link>
      <pubDate>Tue, 02 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/02/repasando-ecuaciones-en-diferencias-lineales-iii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 14:&lt;/strong&gt; Resuelve&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $a_{n+2}-5a_{n+1}+6a_n = 10$.&lt;/li&gt;
&lt;li&gt;(b) $a_{n+2}-3a_{n+1}+2a_n = 4$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;En el apartado (a), encontramos la ecuación en diferencias lineal completa de orden 2,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-5a_{n+1}+6a_n = 10.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Empecemos abordando su ecuación en diferencias lineal homogénea asociada,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-5a_{n+1}+6a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;cuya ecuación característica correspondiente es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2 - 5\lambda + 6 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, como $\lambda^2 - 5\lambda + 6=(\lambda - 3)(\lambda - 2)$, estamos en el caso de raíces reales simples, de manera que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_12^n + c_23^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;A continuación, de cara a encontrar una solución particular, $a_p(n)$, como $b(n)=10$ y $\lambda=1$ no es raíz de la ecuación característica, proponemos $a_p(n) = k$, de forma que, sustituyendo esta en la ecuación inicial,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
k - 5k + 6k = 10,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $k=5$, con lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n)=5.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general para la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a(n) = a_h(n) + a_p(n) = c_12^n + c_23^n + 5,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;En el apartado (b), la ecuación en diferencias lineal&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}+2a_n = 4
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es completa de orden 2. Procediendo como antes, abordamos su ecuación en diferencias lineal homogénea correspondiente&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+2}-3a_{n+1}+2a_n = 0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con ecuación característica asociada&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^2 - 3\lambda + 2 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $\lambda^2 - 3\lambda + 2 = (\lambda - 2)(\lambda - 1)$, volvemos a estar en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_11^n + c_22^n=c_1 + c_22^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Acto seguido, para encontrar una solución particular, $a_p(n)$, como $b(n)=4$ y $\lambda=1$ es raíz simple ($m=1$) de la ecuación característica, proponemos $a_p(n) = kn^1 = kn$, de forma que, sustituyendo en la ecuación inicial,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
k(n+2)-3k(n+1)+2kn = kn+2k-3kn-3k+2kn= -k = 4,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, $k = -4$, con lo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_p(n) = -4n.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, la solución general de la ecuación inicial la obtenemos haciendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a(n) = a_h(n) + a_p(n) = c_1+c_22^n-4n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2\in\mathbb{R}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repasando ecuaciones en diferencias lineales (II)</title>
      <link>https://imalexissaez.github.io/2018/09/29/repasando-ecuaciones-en-diferencias-lineales-ii/</link>
      <pubDate>Sat, 29 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/29/repasando-ecuaciones-en-diferencias-lineales-ii/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 13:&lt;/strong&gt; Resuelve&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $a_{n+3} - 3a_{n+2} + 4a_{n+1} - 12a_n = 0$.&lt;/li&gt;
&lt;li&gt;(b) $a_{n+4} + 2a_{n+2} + a_n = 0$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;En el apartado (a), $a_{n+3} - 3a_{n+2} + 4a_{n+1} - 12a_n = 0$ es una ecuación en diferencias lineal homogénea de orden 3, que tiene por ecuación característica&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^3 - 3\lambda^2 + 4\lambda - 12 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como $\lambda^3 - 3\lambda^2 + 4\lambda - 12 = (\lambda - 3)(\lambda - 2i)(\lambda + 2i)$, tenemos una raíz real simple y dos raíces complejas conjugadas simples, para las que $\varrho = 2$ y $\theta = \pi/2$, de manera que la solución queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_13^n + 2^n\left(A\cos{\left(\dfrac{\pi}{2}n\right)} + B\sin{\left(\dfrac{\pi}{2}n\right)}\right),
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1, A, B\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;A continuación, en el apartado (b), $a_{n+4} + 2a_{n+2} + a_n = 0$ es homogénea de orden 4, con ecuación característica&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^4 + 2\lambda^2 + 1 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esta ecuación bicuadrada en $\lambda$ la podemos resolver mediante el cambio de variable $t = \lambda^2$, de forma que la ecuación queda como $t^2+2t+1=0$ y posee $t=-1$ como raíz real de multiplicidad $m=2$, es decir,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
t^2+2t+1 = (t+1)^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Así, si deshacemos ahora el cambio de variable, resulta que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^4 + 2\lambda^2 + 1 = (\lambda - i)^2(\lambda + i)^2,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con lo cual tenemos dos raíces complejas conjugadas de multiplicidad $m=2$, para las que $\varrho=1$ y $\theta = \pi/2$, por lo que la solución queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_h(n) &amp;= 1^n\left(
(An+B)cos{\left(\dfrac{\pi}{2}n\right)} + (Cn+D)\sin{\left(\dfrac{\pi}{2}n\right)}
\right)\\
&amp;= (An+B)cos{\left(\dfrac{\pi}{2}n\right)} + (Cn+D)\sin{\left(\dfrac{\pi}{2}n\right)},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $A,B,C,D\in\mathbb{R}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repasando ecuaciones en diferencias lineales (I)</title>
      <link>https://imalexissaez.github.io/2018/09/27/repasando-ecuaciones-en-diferencias-lineales-i/</link>
      <pubDate>Thu, 27 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/27/repasando-ecuaciones-en-diferencias-lineales-i/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 12:&lt;/strong&gt; Resuelve&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) $a_{n+3} - 3a_{n+2} - 4a_{n+1} + 12a_n = 0$.&lt;/li&gt;
&lt;li&gt;(b) $a_{n+3} - 4a_{n+2} + 5a_{n+1} - 2a_n = 0$.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;En el apartado (a), encontramos la ecuación en diferencias lineal homogénea de orden 3 dada por $a_{n+3} - 3a_{n+2} - 4a_{n+1} + 12a_n = 0$, cuya ecuación característica asociada es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^3-3\lambda^2-4\lambda+12=0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como $\lambda^3 - 3\lambda^2 - 4\lambda + 12 = (\lambda - 3)(\lambda - 2)(\lambda + 2)$, estamos ante el caso de raíces reales simples, de manera que la solución queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_1(-2)^n + c_22^n + c_33^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2,c_3\in\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;Para el apartado (b), $a_{n+3} - 4a_{n+2} + 5a_{n+1} - 2a_n = 0$ es homogénea de orden 3, con ecuación característica&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\lambda^3 - 4\lambda^2 + 5\lambda - 2 = 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como $\lambda^3 - 4\lambda^2 + 5\lambda - 2 = (\lambda - 2)(\lambda - 1)^2$, $\lambda=1$ es una raíz real de multiplicidad $m=2$, mientras que $\lambda=2$ es una raíz real simple, por lo que la solución queda&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_h(n) = c_11^n + c_2n1^n + c_32^n = c_1+c_2n+c_32^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $c_1,c_2,c_3\in\mathbb{R}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo evitar que las ecuaciones en línea superen los márgenes?</title>
      <link>https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/</link>
      <pubDate>Tue, 25 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/</guid>
      <description>&lt;p&gt;Cierto es que &lt;em&gt;LaTeX&lt;/em&gt; genera unos documentos matemáticos realmente vistosos. No menos cierto es que el comportamiento de &lt;em&gt;LaTeX&lt;/em&gt;, en ocasiones, es un tanto peculiar, ofreciendo duras batallas para solventar ciertos problemas.&lt;/p&gt;

&lt;p&gt;En esta ocasión, me encontraba esta misma mañana redactando unos apuntes de teoría de grafos cuando, en un ejemplo trivial donde los haya, he hallado este desbarajuste:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180925-img01.png&#34; &gt;

&lt;img src=&#34;20180925-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;La definición del conjunto excede el margen ampliamente.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;He definido el conjunto de aristas del grafo casi en el borde del margen y &lt;em&gt;LaTeX&lt;/em&gt;, en lugar de romper la expresión matemática como en otras ocasiones hace de manera automática, ha decidido rebasar el margen derecho. El resultado, estéticamente, es horroroso, por mucho que el mencionado conjunto este bien agrupado y su lectura resulte cómoda.&lt;/p&gt;

&lt;p&gt;Generalmente, cuando me encuentro en este tipo de situaciones, opto por reescribir la oración, de manera que añado o suprimo texto y, al final, se produce un buen encaje del contenido matemático en los márgenes.&lt;/p&gt;

&lt;p&gt;No obstante, quizá buscando pretextos absurdos para descansar un rato de la transcripción de apuntes, me he decantado esta mañana por investigar las posibilidades que ofrece &lt;em&gt;LaTeX&lt;/em&gt; para evitar que este comportamiento tenga lugar. Tras una rápida búsqueda en &lt;em&gt;Google&lt;/em&gt;, he dado con &lt;a href=&#34;https://tex.stackexchange.com/questions/28818/how-can-i-prevent-inline-math-formulas-from-overflowing-into-the-margin&#34;&gt;esta entrada&lt;/a&gt;, cuya lectura es más que recomendable.&lt;/p&gt;

&lt;p&gt;Una de las primeras opciones que tenemos a nuestra disposición, lógicamente, es escribir la problemática expresión matemática en una línea independiente. En mi caso, el resultado sería el siguiente:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180925-img02.png&#34; &gt;

&lt;img src=&#34;20180925-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Definición del conjunto en su propia línea.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Sin embargo, ¿no adquiere así un protagonismo inmerecido el conjunto de aristas del grafo? No termina de convencerme, para esta situación particular, la solución propuesta.&lt;/p&gt;

&lt;p&gt;Una alternativa es emplear el comando &lt;code&gt;\sloppy&lt;/code&gt; antecediendo el párrafo donde reside la expresión matemática que ha decidido realizar una excursión por los márgenes del documento. Esta instrucción juega con el espaciado entre las palabras, siendo su resultado el que muestro a continuación:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180925-img03.png&#34; &gt;

&lt;img src=&#34;20180925-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Definición del conjunto utilizando &lt;code&gt;\sloppy&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Sinceramente, tampoco resulta de mi agrado. ¿Qué más opciones tenemos? Utilizar el comando &lt;code&gt;\allowbreak&lt;/code&gt; allá donde queramos se produzca la separación en nuestra expresión matemática. Volviendo a la situación original, parece que sería adecuado cortar la declaración del conjunto de aristas del grafo tras el elemento $(2, 3)$ y el resultado ahora es&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180925-img04.png&#34; &gt;

&lt;img src=&#34;20180925-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Definición del conjunto utilizando &lt;code&gt;\allowbreak&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Esta solución, en mi opinión, es la más agradable visualmente hablando. No obstante:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Insertar el comando &lt;code&gt;\allowbreak&lt;/code&gt; resta bastante legibilidad al código fuente del documento.&lt;/li&gt;
&lt;li&gt;Si &lt;em&gt;LaTeX&lt;/em&gt; no ha decido &amp;quot;romper&amp;quot; automáticamente la declaración de un conjunto, debemos sospechar que algún buen motivo tendrá. Efectivamente, con este enfoque, resulta un tanto más complicado seguir la definición del conjunto de aristas del grafo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En conclusión, arriba tenemos tres estrategias que resuelven el problema planteado de mejor o peor manera. No obstante, es posible que al final me decante por la reescritura de la línea y evite recurrir a alguna de ellas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Una historia de cheques de viaje</title>
      <link>https://imalexissaez.github.io/2018/09/22/una-historia-de-cheques-de-viaje/</link>
      <pubDate>Sat, 22 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/22/una-historia-de-cheques-de-viaje/</guid>
      <description>&lt;p&gt;En el presente artículo abordaremos con sumo detalle un problema propuesto en la convocatoria de oposiciones de Extremadura, de este mismo año 2018, para la especialidad de matemáticas.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Problema 11:&lt;/strong&gt; En su último viaje a Estados Unidos, el señor Martínez cambió un cheque de viaje. El cajero, al pagarle, confundió el número de dólares con los centavos y viceversa. El señor Martínez gastó 68 centavos en sellos y comprobó que el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado. ¿Qué valor mínimo tenía el cheque de viaje?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Al leer el enunciado, enseguida apreciamos dos partes que nos sirven de pista hacia el tipo de problema que tenemos entre manos. Para empezar, cuando aparece &#39;&#39;el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado&#39;&#39;, debemos sospechar que, en algún momento de la resolución del ejercicio, plantearemos una ecuación algebraica, posiblemente lineal. Esta poseerá múltiples soluciones, quizá incluso infinitas, ya que en la cuestión se interesan por el &#39;&#39;valor mínimo&#39;&#39;. Al estar trabajando con dólares y centavos, cantidades monetarias que usualmente se representan utilizando números enteros, todo ello nos va a hacer pensar rápidamente en ecuaciones diofánticas.&lt;/p&gt;

&lt;p&gt;Así pues, una de las claves de este ejercicio reside en trabajar en centavos, para evitar así operar con decimales. De esta manera, si el señor Martínez viajó a Estados con un cheque de viaje cuyo valor ascendía a $a$ dólares y $b$ centavos, con $a$ y $b$ números enteros mayores o iguales de cero, en total el valor de dicho cheque era de $100a + b$ centavos.&lt;/p&gt;

&lt;p&gt;Ahora, en el banco se equivocaron al cambiarle el cheque de viaje, intercambiando los papeles de dólares y centavos, de forma que, al final, el señor Martínez recibió $100b + a$ centavos. De estos, gastó 68 centavos en sellos, quedándole entonces disponible $100b + a - 68$ centavos.&lt;/p&gt;

&lt;p&gt;La anterior cantidad nos dicen que equivalía al doble del importe del cheque de viaje que había cambiado ($2(100a + b)$), es decir, tenemos la ecuación diofántica&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
100b + a - 68 = 200a + 2b,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que queda, operando,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
199a-98b=-68.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Obtengamos el $mcd(199,98)$ utilizando el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
199 &amp;= 98\cdot 2 + 3,\\ 
98 &amp;= 3\cdot 32 + 2,\\
3 &amp;= 2\cdot 1 + 1,\\
2 &amp;= 1\cdot 2,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;luego $mcd(199, 98) = 1$ y como $1|68$ sabemos que la ecuación diofántica admite solución entera.&lt;/p&gt;

&lt;p&gt;Despejamos entonces $b$, por ser la variable cuyo coeficiente asociado es más pequeño, quedando así&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
b = \dfrac{199a + 68}{98}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, como el valor que figura en el denominador de la igualdad anterior es $98$, a continuación, tendríamos que darle a $a$, de manera ordenada, valores del &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $98$ hasta hallar una solución particular.&lt;/p&gt;

&lt;p&gt;No obstante, en lugar de llevar a cabo tan titánica labor, aprovecharemos las operaciones realizadas durante el &lt;em&gt;Algoritmo de Euclides&lt;/em&gt; para descomponer la anterior fracción como sigue:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
b = 2a + \dfrac{3a+68}{98} = 2a + b^{\prime},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
b^{\prime} = \dfrac{3a+68}{98},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que equivale a $98b^{\prime} = 3a + 68$, ecuación en la que ahora despejaremos $a$, teniendo que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a = \dfrac{98b^{\prime} - 68}{3}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Podemos así dar valores a $b^{\prime}$, ya que únicamente tendríamos que probar $b^{\prime}=0$, $b^{\prime}=1$ y $b^{\prime}=2$ (que conforma el &lt;em&gt;menor sistema completo de restos módulo&lt;/em&gt; $3$). Para $b^{\prime}=0$, $a\notin\mathbb{Z}$, pero si $b^{\prime}=1$, entonces $a=10$ y, por tanto, $b = 2a+b^{\prime} = 21$, quedando así la solución particular como sigue:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_0 &amp;= 10,\\
b_0 &amp;= 21,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;mientras que la solución general es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a &amp;= 10 - 98t,\\
b &amp;= 21 - 199t,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $t\in\mathbb{Z}$.&lt;/p&gt;

&lt;p&gt;Una vez resuelta la ecuación diofántica, centrémonos de nuevo en aquello que nos pedían en el enunciado: &#39;&#39;¿Qué valor mínimo tenía el cheque de viaje?&#39;&#39;. Como hablamos de cantidades monetarias, tanto $a$, como $b$, han de ser mayores o iguales que cero, es decir,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a &amp;= 10 -98t \geq0 \Rightarrow t\leq\dfrac{10}{98},\\
b &amp;= 21 - 199t \geq0 \Rightarrow t\leq\dfrac{21}{199},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y $t\in\mathbb{Z}$. Por consiguiente, el valor mínimo se alcanza cuando $t=0$, donde $a=10$ y $b=21$. Así, el señor Martínez viajó a Estados Unidos con un cheque de viaje cuyo valor ascendía a 10 dólares y 21 centavos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mejorando la estética de los bloques de código</title>
      <link>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</link>
      <pubDate>Thu, 20 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</guid>
      <description>&lt;p&gt;Por uno de esos casuales de la vida, me ha dado por revisar el sitio web con el móvil y ha sido entonces cuando he presenciado un horror sin parangón: ¿por qué se ven así mis bloques de código?&lt;/p&gt;

&lt;p&gt;Al parecer, me caracterizo por ser un animal de costumbres y cualquier desviación que me lleve mucho más allá de mi zona de confort me produce hasta angustia. Habitualmente, con los temas para páginas web con los que he trabajado, los bloques de código tienen habilitada la aparición de una barra de desplazamiento horizontal cuando figuran instrucciones de longitud considerable.&lt;/p&gt;

&lt;p&gt;Este es un comportamiento que me parece adecuado, ya que incrementa, en mi opinión, la legibilidad de los mencionados bloques de código. Por desgracia, en el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; no viene configurado así por defecto, de manera que una instrucción de longitud considerable se llega a dividir en varias líneas, dificultando en exceso la lectura.&lt;/p&gt;

&lt;p&gt;Las opciones de estilo para los bloques de código, curiosamente, no están declaradas en el archivo &lt;code&gt;main.css&lt;/code&gt;, como sería de esperar, sino en un fichero denominado &lt;code&gt;codeblock.css&lt;/code&gt;, que se encuentra en la ruta &lt;code&gt;\static\css\&lt;/code&gt; del directorio donde hayamos decidido almacenar localmente nuestro sitio web. Su contenido original es&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tras investigar un rato, he conseguido que aparezca la deseada barra de desplazamiento horizontal añadiendo unas cuantas líneas al anterior archivo, de forma que ahora presenta el siguiente aspecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}

pre {
    overflow-x: auto;
}

pre code {
    word-wrap: normal;
    white-space: pre;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El único inconveniente de este enfoque es que solo afecta a los bloques de código escritos usando &lt;em&gt;fences&lt;/em&gt; y no a los que generamos mediante el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; de &lt;em&gt;Hugo&lt;/em&gt;. No obstante, como habitualmente no recurro a este último, no he decido indagar más al respecto.&lt;/p&gt;

&lt;p&gt;En los próximos artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el comportamiento de KaTeX</title>
      <link>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</link>
      <pubDate>Tue, 18 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</guid>
      <description>&lt;p&gt;El tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene, por defecto, configurado para que podamos escribir expresiones matemáticas utilizando &lt;a href=&#34;https://khan.github.io/KaTeX/&#34; target=&#34;_blank&#34;&gt;KaTeX&lt;/a&gt;. Tras unos minutos experimentando con esta tecnología surge enseguida la primera duda: ¿cómo puedo escribir ecuaciones en línea?&lt;/p&gt;

&lt;p&gt;Para empezar, recomiendo encarecidamente que acudamos a la página de &lt;a href=&#34;https://github.com/Khan/KaTeX/releases&#34; target=&#34;_blank&#34;&gt;versiones&lt;/a&gt; de &lt;em&gt;KaTeX&lt;/em&gt; y nos hagamos con la última de ellas, para estar al día en las opciones que ofrece esta herramienta. A la hora de escribir estas líneas, dicha versión venía etiquetada como &lt;code&gt;v0.10.0-rc.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ello, hacemos clic sobre el enlace denominado &lt;code&gt;katex.zip&lt;/code&gt; y así iniciaremos la descarga de un archivo comprimido, del cual nos interesan especialmente dos archivos contenidos en su interior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;katex.min.css&lt;/code&gt; y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;katex.min.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El primero de ellos lo ubicaremos, dentro del directorio donde hayamos decidido almacenar localmente el sitio web, en la ruta &lt;code&gt;\static\css\&lt;/code&gt;, mientras que el segundo en &lt;code&gt;\static\js\&lt;/code&gt;, sobrescribiendo en ambos casos las antiguas versiones que existiesen en dichas carpetas.&lt;/p&gt;

&lt;p&gt;Una vez al día, la siguiente tarea implica la modificación de una de las plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, concretamente la denominada como &lt;code&gt;footer.html&lt;/code&gt;, ubicada en la ruta &lt;code&gt;\layouts\partials\&lt;/code&gt;. Editamos el mencionado fichero con &lt;em&gt;Sublime Text 3&lt;/em&gt; y buscamos la siguiente línea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt; renderMathInElement(document.body); &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos a configurar &lt;em&gt;KaTeX&lt;/em&gt; de manera que reconozca las expresiones encerradas entre &lt;code&gt;$&lt;/code&gt; o &lt;code&gt;\\(&lt;/code&gt; como ecuaciones en línea, mientras que las delimitadas por &lt;code&gt;$$&lt;/code&gt; o &lt;code&gt;\\[&lt;/code&gt; como ecuaciones centradas en sus propias líneas. Para ello, tecleamos en el lugar de la anterior instrucción el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  renderMathInElement(
    document.body,
    {
      delimiters: [
        {left: &amp;quot;$$&amp;quot;, right: &amp;quot;$$&amp;quot;, display: true},
        {left: &amp;quot;\\[&amp;quot;, right: &amp;quot;\\]&amp;quot;, display: true},
        {left: &amp;quot;$&amp;quot;, right: &amp;quot;$&amp;quot;, display: false},
        {left: &amp;quot;\\(&amp;quot;, right: &amp;quot;\\)&amp;quot;, display: false}
      ]
    }
  );
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez habilitada la opción de escribir ecuaciones en línea, un hecho salta a la vista de inmediato: ¿no parece que el tamaño de letra para las expresiones matemáticas es mayor que el declarado para el texto estándar? Efectivamente, peculiaridad que, en mi opinión, desluce bastante el aspecto (e incluso diría que dificulta la lectura) de los artículos.&lt;/p&gt;

&lt;p&gt;La solución pasa por modificar la hoja de estilos del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, almacenada en el archivo &lt;code&gt;main.css&lt;/code&gt;, que está ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;. Tras experimentar con cierto rango de valores para el tamaño de fuente de los objetos de la clase &lt;code&gt;.katex&lt;/code&gt;, al final me he decantado por la siguiente solución, que he colocado al principio del fichero &lt;code&gt;main.css&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Modificación para hacer que el tamaño de letra de KaTeX sea similar al de la web */
.katex { font-size: 1.1em !important; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En los próximos artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Múltiplos de 21 en Ceuta (versión congruencias)</title>
      <link>https://imalexissaez.github.io/2018/09/15/multiplos-de-21-en-ceuta-version-congruencias/</link>
      <pubDate>Sat, 15 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/15/multiplos-de-21-en-ceuta-version-congruencias/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 10:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$, &lt;span  class=&#34;math&#34;&gt;\(4^{n+1} + 5^{2n-1}\)&lt;/span&gt; es un múltiplo de 21.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Aunque ya planteamos, hace un par de días, la resolución de este enunciado empleando el &lt;em&gt;principio de inducción matemática&lt;/em&gt; en el &lt;a href=&#34;https://imalexissaez.github.io/2018/09/13/multiplos-de-21-en-ceuta/&#34;&gt;Problema 9&lt;/a&gt;, vamos a darle aquí un enfoque alternativo a dicha resolución utilizando la teoría de congruencias.&lt;/p&gt;

&lt;p&gt;Para empezar, para cada $n\in\mathbb{N}$, $4^{n+1} + 5^{2n-1}$ es un entero mayor o igual que 21 y será múltiplo de este último siempre que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+1} + 5^{2n-1}\equiv 0 \pmod{21}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como $21=3\cdot 7$ y $mcd(3,7)=1$, demostrar la expresión anterior equivale a probar que las expresiones&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+1} + 5^{2n-1}\equiv 0 \pmod{3}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+1} + 5^{2n-1}\equiv 0 \pmod{7},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;se satisfacen conjuntamente, ya que sabemos, por las propiedades de las congruencias, que dados $n,m\in\mathbb{N}$ fijos y $a,b\in\mathbb{Z}$, si $a\equiv b \pmod{n}$, $a\equiv b \pmod{m}$ y $mcd(n,m)=1$, entonces $a\equiv b \pmod{nm}$.&lt;/p&gt;

&lt;p&gt;Así pues, dado que $4\equiv 1 \pmod{3}$ y $5\equiv (-1) \pmod{3}$, entonces, para cada $n\in\mathbb{N}$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
4^{n+1}+5^{2n-1} &amp;\equiv (1^{n+1} + (-1)^{2n-1}) \pmod{3}\\
&amp;\equiv (1-1) \pmod{3}\\
&amp;\equiv 0 \pmod{3},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;quedando así una demostrada. Para verificar la restante tengamos en cuenta que $5\equiv (-2) \pmod{7}$ y así, para cada $n\in\mathbb{N}$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
4^{n+1} + 5^{2n-1} &amp;= 2^{2(n+1)} + 5^{2n-1}\\
&amp;= 2^{2n+2} + 5^{2n-1}\\
&amp;= 2^32^{2n-1} + 5^{2n-1}\\
&amp;\equiv (2^32^{2n-1} + (-2)^{2n-1}) \pmod{7}\\
&amp;\equiv (2^32^{2n-1} + (-1)^{2n-1}2^{2n-1}) \pmod{7}\\
&amp;\equiv (2^32^{2n-1} - 2^{2n-1}) \pmod{7}\\
&amp;\equiv ((2^3-1)2^{2n-1}) \pmod{7}\\
&amp;\equiv 7\cdot 2^{2n-1} \pmod{7}\\
&amp;\equiv 0 \pmod{7}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por tanto, podemos concluir que, para cada $n\in\mathbb{N}$, $4^{n+1} + 5^{2n-1}$ es un múltiplo de 21.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Múltiplos de 21 en Ceuta</title>
      <link>https://imalexissaez.github.io/2018/09/13/multiplos-de-21-en-ceuta/</link>
      <pubDate>Thu, 13 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/13/multiplos-de-21-en-ceuta/</guid>
      <description>&lt;p&gt;En el presente artículo abordaremos con sumo detalle un problema propuesto en la convocatoria de oposiciones de Ceuta, de este mismo año 2018, para la especialidad de matemáticas.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Problema 9:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$, $4^{n+1} + 5^{2n-1}$ es un múltiplo de 21.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Para empezar, decimos que un número $m$ es múltiplo de 21 cuando existe un número $k\in\mathbb{Z}$ de manera que podemos escribir $m=21k$. Así, podemos redactar de nuevo el enunciado del ejemplo como sigue: demuestra que, para cada número $n\in\mathbb{N}$, existe un número $k\in\mathbb{Z}$ tal que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+1} + 5^{2n-1}=21k.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Utilicemos el &lt;em&gt;principio de inducción matemática&lt;/em&gt;, dado en el teorema 1.1 (ver abajo), para comprobar la anterior identidad. Rápidamente apreciamos que se cumple de manera trivial para $n=1$, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{1+1}+5^{2-1} = 4^2 + 5 = 16 + 5 = 21,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y bastaría entonces que tomásemos $k=1$ para constatar que es múltiplo de 21.&lt;/p&gt;

&lt;p&gt;Acto seguido, suponemos cierta la igualdad para un $n\in\mathbb{N}$ dado, con $n\geq 1$, es decir, que efectivamente se cumple que existe un número $k\in\mathbb{Z}$ tal que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+1}+5^{2n-1}=21k,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiamos si se satisface asimismo para $n+1$. De esta manera, nuestro objetivo será demostrar que existe un $k^\prime\in\mathbb{Z}$ tal que se verifica la siguiente identidad,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+2} + 5^{2n+1} = 21k^\prime.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Podemos escribir el miembro izquierdo de la ecuación anterior como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
4^{n+2} + 5^{2n+1} = 4\cdot4^{n+1} + 5^{2n+1},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y utilizar, acto seguido, la &lt;em&gt;hipótesis de inducción&lt;/em&gt;, que afirma que existe $k\in\mathbb{Z}$ tal que $4^{n+1} + 5^{2n-1}=21k$. La clave reside en despejar adecuadamente el término que nos interesa de dicha hipótesis. Así, como $4^{n+1} + 5^{2n-1}=21k$, entonces $4^{n+1}=21k - 5^{2n-1}$ y, sustituyendo arriba, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
4\cdot4^{n+1} + 5^{2n+1} &amp;= 4(21k - 5^{2n-1}) + 5^{2n+1}\\
&amp;= 4\cdot 21k - 4\cdot 5^{2n-1} + 5^{2n+1}\\
&amp;= 4\cdot 21k - 4\cdot 5^{2n-1} + 5^2\cdot5^{2n-1}\\
&amp;= 4\cdot 21k + 5^{2n-1}(5^2-4)\\
&amp;= 4\cdot 21k + 21\cdot5^{2n-1}\\
&amp;= 21(4k + 5^{2n-1})\\
&amp;= 21k^\prime,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;con $k^\prime=4k + 5^{2n-1}\in\mathbb{Z}$ y, por tanto, la identidad se verifica para $n+1$. El &lt;em&gt;principio de inducción matemática&lt;/em&gt; nos permite concluir que es cierta para cada $n\in\mathbb{N}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema 1.1 (Principio de inducción matemática)&lt;/strong&gt;: Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El número 1 pertenece al conjunto $S$.&lt;/li&gt;
&lt;li&gt;Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces todo entero positivo pertenece al conjunto $S$.&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Probando una sencilla desigualdad por inducción</title>
      <link>https://imalexissaez.github.io/2018/09/11/probando-una-sencilla-desigualdad-por-induccion/</link>
      <pubDate>Tue, 11 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/11/probando-una-sencilla-desigualdad-por-induccion/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 8:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
n&lt;2^n.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Hagamos uso del &lt;em&gt;principio de inducción matemática&lt;/em&gt;, dado en el teorema 1.1 (ver abajo), para demostrar la desigualdad planteada en el enunciado del problema. Enseguida apreciamos que esta se cumple de forma trivial para $n=1$, ya que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 &lt; 2^1 = 2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, asumimos cierta la desigualdad para un $n\in\mathbb{N}$ dado, con $n\geq 1$, es decir, que efectivamente se cumple que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
n &lt; 2^n,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiamos si se verifica asimismo para $n+1$. Así pues, el objetivo pasa ahora por demostrar que se satisface la siguiente desigualdad&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
n+1 &lt; 2^{n+1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Apoyándonos en que $n+1\leq n+n = 2n$, para cada $n\in\mathbb{N}$, (siendo una desigualdad estricta cuando $n&amp;gt;1$) y en la &lt;em&gt;hipótesis de inducción&lt;/em&gt;, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
n+1 &amp;\leq n+n\\
&amp;= 2n\\
&amp;&lt; 2\cdot 2^n\\
&amp;= 2^{n+1},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, la desigualdad se verifica para $n+1$. El &lt;em&gt;principio de inducción matemática&lt;/em&gt; nos permite concluir que es cierta para cada $n\in\mathbb{N}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema 1.1 (Principio de inducción matemática)&lt;/strong&gt;: Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El número 1 pertenece al conjunto $S$.&lt;/li&gt;
&lt;li&gt;Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces todo entero positivo pertenece al conjunto $S$.&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Una expresión para la suma de potencias cuartas</title>
      <link>https://imalexissaez.github.io/2018/09/08/una-expresion-para-la-suma-de-potencias-cuartas/</link>
      <pubDate>Sat, 08 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/08/una-expresion-para-la-suma-de-potencias-cuartas/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 7:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^4+2^4+\cdots+n^4=\dfrac{n(n+1)(6n^3+9n^2+n-1)}{30}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Vaya por delante que estamos ante uno de esos problemas que rápidamente se ganan el apelativo de tediosos, no tanto por su dificultad, sino por el elevado número de operaciones algebraicas que debemos llevar a cabo durante el proceso de su resolución.&lt;/p&gt;

&lt;p&gt;Cuando en una propiedad a verificar aparecen involucrados polinomios de grado considerable, la segunda parte del &lt;em&gt;principio de inducción matemática&lt;/em&gt; conlleva el desarrollo de múltiples binomios de la forma $(n+1)^m$, con $m\in\mathbb{N}$. Para reducir un tanto el tedio, siempre es aconsejable que, en primer lugar, factoricemos los mencionados polinomios.&lt;/p&gt;

&lt;p&gt;Como nota curiosa, consultados diferentes recursos didácticos, la fórmula para la suma de las potencias cuartas de los $n$ primeros números naturales suele venir dada por&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^4 + 2^4 + \cdots + n^4=\dfrac{6n^5+15n^4+10n^3-n}{30},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;hecho que nos puede llevar a sospechar que la proporcionada en el enunciado del presente problema ya está completamente factorizada.&lt;/p&gt;

&lt;p&gt;No obstante, como por naturaleza hemos de ser recelosos, utilicemos el &lt;em&gt;Teorema de la raíz racional&lt;/em&gt; para investigar si podemos escribir el polinomio $6n^3 + 9n^2 + n - 1$ de una manera que nos resulte más cómoda de cara a futuras operaciones con él. Recordemos que, dada una ecuación polinómica con coeficientes enteros&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_mn^m + a_{m-1}n^{m-1} + \cdots + a_0=0,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;si $a_0$ y $a_m$ son enteros distintos de cero, entonces las posibles soluciones que son del tipo $n = p/q$ satisfacen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$p$ es divisor de $a_0$.&lt;/li&gt;
&lt;li&gt;$q$ es divisor de $a_m$.&lt;/li&gt;
&lt;li&gt;$p$ y $q$ son primos entre sí.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En nuestro problema, el conjunto de candidatos para $p$ es $\{\pm1\}$, mientras que para $q$ es $\{\pm1,\pm2,\pm3,\pm6\}$ y rápidamente podemos comprobar que $n = -1 / 2$ es solución del polinomio dado. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
6n^3 + 9n^2 + n - 1 = (2n + 1)(3n^2 + 3n - 1),
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\sum_{k=1}^{n}{k^4} &amp;= 1^4+2^4+\cdots+n^4\\
&amp;= \dfrac{n(n+1)(6n^3+9n^2+n-1)}{30}\\
&amp;=\dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Una vez hemos alcanzado una expresión irreducible para el polinomio que figura en el numerador de la identidad anterior, utilizamos el &lt;em&gt;principio de inducción matemática&lt;/em&gt;, dado en el teorema 1.1 (ver abajo), para comprobar dicha igualdad. Enseguida observamos que se satisface de manera trivial para $n=1$, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 = 1^4 = \dfrac{1\cdot2\cdot3\cdot5}{30}=1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A continuación, suponemos verdadera la identidad para un cierto $n\in\mathbb{N}$, con $n\geq 1$, es decir, que efectivamente se verifica que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n}{k^4} = \dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiamos si se satisface para $n+1$. Así pues, el objetivo que tenemos ahora entre manos es comprobar si&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\sum_{k=1}^{n+1}{k^4} &amp;= \dfrac{(n+1)(n+2)(2(n+1)+1)(3(n+1)^2+3(n+1)-1)}{30}\\
&amp;= \dfrac{(n+1)(n+2)(2n+3)(3n^2+9n+5)}{30}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Apliquemos la &lt;em&gt;hipótesis de inducción&lt;/em&gt; y llevemos a cabo algunas operaciones algebraicas elementales, de forma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\sum_{k=1}^{n+1}{k^4} &amp;= (n+1)^4 + \sum_{k=1}^{n}{k^4}\\
&amp;= (n+1)^4 + \dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30}\\
&amp;= \dfrac{30(n+1)^4 + n(n+1)(2n+1)(3n^2+3n-1)}{30}\\
&amp;= \dfrac{(n+1)(30(n+1)^3+n(2n+1)(3n^2+3n-1))}{30}.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por tanto, el resultado quedaría probado siempre y cuando fuesen equivalentes las expresiones de los polinomios $(n+2)(2n+3)(3n^2+9n+5)$ y $30(n+1)^3 + n(2n+1)(3n^2+3n-1)$. Efectivamente, si desarrollamos&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(n+2)(2n+3) &amp;= 2n^2+3n+4n+6 = 2n^2+7n+6,\\
(2n^2+7n+6)(3n^2+9n+5) &amp;= 6n^4+39n^3+91n^2+89n+30,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por otro lado,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
30(n+1)^3 &amp;= 30n^3 + 90n^2 + 90n + 30,\\
n(2n+1)(3n^2+3n-1) &amp;= 6n^4+9n^3+n^2-n,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de manera que la suma de estas dos últimas ecuaciones asciende a $6n^4 + 39n^3 + 91n^2 + 89n + 30,$ y, por tanto, la identidad se verifica para $n+1$. El &lt;em&gt;principio de inducción matemática&lt;/em&gt; nos permite concluir que es cierta para cada $n\in\mathbb{N}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema 1.1 (Principio de inducción matemática)&lt;/strong&gt;: Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El número 1 pertenece al conjunto $S$.&lt;/li&gt;
&lt;li&gt;Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces todo entero positivo pertenece al conjunto $S$.&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>¡Y les llegó el turno a los cubos!</title>
      <link>https://imalexissaez.github.io/2018/09/06/y-les-llego-el-turno-a-los-cubos/</link>
      <pubDate>Thu, 06 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/06/y-les-llego-el-turno-a-los-cubos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 6:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^3 + 2^3 + \cdots + n^3=(1+2+3+\cdots+n)^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Para empezar, y de cara a aliviar ligeramente la escritura en un futuro, podemos plantear de manera más compacta la identidad dada en el enunciado del presente problema como sigue&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^3 + 2^3 + \cdots + n^3 = \sum_{k=1}^{n}{k^3} = \left(\sum_{k=1}^{n}{k}\right)^2 = (1+2+3+\cdots+n)^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En esta ocasión, si optamos por una aproximación similar a la seguida en los problemas anteriores, la demostración puede volverse un tanto tediosa debido a los cálculos implicados. Es por ello que, utilizando el resultado probado en el &lt;a href=&#34;https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/&#34;&gt;problema 1&lt;/a&gt;, la igualdad que buscamos verificar aquí sería equivalente a&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n}{k^3} = \left(\sum_{k=1}^{n}{k}\right)^2
= \left(\dfrac{n(n+1)}{2}\right)^2
= \dfrac{n^2(n+1)^2}{4}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Una vez alcanzada una expresión más manejable para la identidad planteada, empleamos el &lt;em&gt;principio de inducción matemática&lt;/em&gt;, dado en el Teorema 1.1 (ver abajo), para probarla. Rápidamente comprobamos que se verifica de manera trivial para $n=1$, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 = 1^3 = \dfrac{1^2\cdot2^2}{4} = \dfrac{4}{4} = 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, suponemos cierta la identidad para un número dado $n\in\mathbb{N}$, con $n\geq 1$, es decir, que efectivamente se cumple que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n}{k^3} = \dfrac{n^2(n+1)^2}{4},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiamos si se satisface asimismo para $n+1$. Así pues, acto seguido, el objetivo que tenemos entre manos es verificar si es cierta la igualdad&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n+1}{k^3} = \dfrac{(n+1)^2(n+2)^2}{4}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Apliquemos la &lt;em&gt;hipótesis de inducción&lt;/em&gt; y llevemos a cabo algunas operaciones algebraicas elementales, de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\sum_{k=1}^{n+1}{k^3} &amp;= (n+1)^3 + \sum_{k=1}^{n}{k^3}\\
&amp;= (n+1)^3 + \dfrac{n^2(n+1)^2}{4}\\
&amp;= \dfrac{4(n+1)^3 + n^2(n+1)^2}{4}\\
&amp;= \dfrac{(n+1)^2(4(n+1)+n^2)}{4}\\
&amp;= \dfrac{(n+1)^2(n^2+4n+4)}{4}\\
&amp;= \dfrac{(n+1)^2(n+2)^2}{4}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por tanto, la identidad se verifica para $n+1$. El &lt;em&gt;principio de inducción matemática&lt;/em&gt; nos permite concluir que es cierta para cada $n\in\mathbb{N}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema 1.1 (Principio de inducción matemática)&lt;/strong&gt;: Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El número 1 pertenece al conjunto $S$.&lt;/li&gt;
&lt;li&gt;Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces todo entero positivo pertenece al conjunto $S$.&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Sumando cuadrados</title>
      <link>https://imalexissaez.github.io/2018/09/04/sumando-cuadrados/</link>
      <pubDate>Tue, 04 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/04/sumando-cuadrados/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 5:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n}{k^2} = \dfrac{n(n+1)(2n+1)}{6}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Ante nosotros se plantea la tarea de demostrar una propiedad (la identidad sugerida arriba), que supuestamente se satisface para una sucesión de índices enteros que conforman un conjunto cuyo cardinal es infinito ($n\in\mathbb{N}$, con $n\geq 1$, en este caso). Entre las diferentes estrategias que tenemos a nuestra disposición para abordar esta empresa, el &lt;em&gt;principio de inducción matemática&lt;/em&gt;, dado en el Teorema 1.1 (ver abajo), quizá sea el instrumento más aconsejable para una primera aproximación a la resolución del problema.&lt;/p&gt;

&lt;p&gt;Así pues, la manera en la que ahora procederemos será ciertamente similar a la seguida en una &lt;a href=&#34;https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/&#34;&gt;entrada anterior&lt;/a&gt;. Para empezar, a simple vista, podemos apreciar rápidamente que la igualdad se satisface de forma trivial para $n=1$, puesto que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 = \sum_{k=1}^{1}{k^2} = \dfrac{1\cdot2\cdot3}{6} = 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Acto seguido, asumimos verdadera la identidad para un cierto $n\in\mathbb{N}$, con $n\geq 1$, es decir, que efectivamente se verifica que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n}{k^2} = \dfrac{n(n+1)(2n+1)}{6},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiamos si se satisface asimismo para $n+1$. Así pues, ahora comprobaremos si se cumple la igualdad&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\sum_{k=1}^{n+1}{k^2} = \dfrac{(n+1)(n+2)(2n+3)}{6}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para ello, apliquemos la &lt;em&gt;hipótesis de inducción&lt;/em&gt; y llevemos a cabo algunas operaciones algebraicas elementales, de manera que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\sum_{k=1}^{n+1}{k^2} &amp;= (n+1)^2 + \sum_{k=1}^{n}{k^2}\\
&amp; = (n+1)^2 + \dfrac{n(n+1)(2n+1)}{6}\\
&amp; = \dfrac{6(n+1)^2 + n(n+1)(2n+1)}{6}\\
&amp; = \dfrac{(n+1)(6(n+1) + n(2n+1))}{6}\\
&amp; = \dfrac{(n+1)(2n^2+7n+6)}{6}\\
&amp; = \dfrac{(n+1)(n+2)(2n+3)}{6},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por tanto, la identidad se verifica para $n+1$. El &lt;em&gt;principio de inducción matemática&lt;/em&gt; nos permite concluir que es cierta para cada $n\in\mathbb{N}$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Teorema 1.1 (Principio de inducción matemática)&lt;/strong&gt;: Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El número 1 pertenece al conjunto $S$.&lt;/li&gt;
&lt;li&gt;Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces todo entero positivo pertenece al conjunto $S$.&lt;/p&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Alojando nuestro sitio web en GitHub</title>
      <link>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</link>
      <pubDate>Sat, 01 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</guid>
      <description>&lt;p&gt;A estas alturas de la película, seguramente con algún que otro artículo redactado y revisado localmente de manera concienzuda, no nos queda más remedio que ocuparnos de un asunto un tanto tedioso: el alojamiento de nuestro sitio web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para tal empresa he optado por &lt;em&gt;GitHub&lt;/em&gt;, que nos permite alojar páginas web estáticas de manera gratuita (¡y sin publicidad!). Desgraciadamente, el proceso dista de ser intuitivo, por lo que examinaremos todos y cada uno de los pasos de la &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34; target=&#34;_blank&#34;&gt;guía oficial&lt;/a&gt; con sumo detalle.&lt;/p&gt;

&lt;p&gt;Para empezar, existe una serie de requisitos que hemos de cumplir para subir nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt; y son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tener instalado en nuestro equipo una versión de &lt;em&gt;Git&lt;/em&gt; superior a la &lt;code&gt;2.8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Disponer de una cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Contar con una página web lista para ser publicada en &lt;em&gt;Internet&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por lo que respecta a los dos primeros puntos del listado anterior, si estamos siguiendo el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; desde sus orígenes, no supondrán problema alguno, pues fueron abordados en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt; de la serie. En cuanto al tercer punto, con todo el trabajo que llevamos acumulado hasta el momento, es más que posible que entre nuestras manos tengamos ya un esbozo de sitio web que merezca la pena mostrar al resto del mundo.&lt;/p&gt;

&lt;p&gt;Una vez comprobado que satisfacemos los requisitos del procedimiento, el primer paso a realizar consiste en crear dos nuevos repositorios en nuestra cuenta de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, acudimos a la página de nuestro perfil en &lt;em&gt;GitHub&lt;/em&gt; y hacemos clic en el símbolo &lt;code&gt;+&lt;/code&gt; situado en la parte derecha del menú superior, para, a continuación, seleccionar la opción &lt;code&gt;New repositoy&lt;/code&gt;.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180901-img01.png&#34; &gt;

&lt;img src=&#34;20180901-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Creación de un nuevo repositorio en &lt;em&gt;GitHub&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;El primer repositorio que crearemos estará dedicado a almacenar el código fuente de nuestro sitio web y, en un alarde de infinita originalidad, lo denominaremos &lt;code&gt;sitio-web&lt;/code&gt;, tal y como figura en la siguiente imagen. Cuando hayamos rellenado el campo &lt;code&gt;Repository name&lt;/code&gt; haremos clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180901-img02.png&#34; &gt;

&lt;img src=&#34;20180901-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Elección del nombre del repositorio.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A continuación, de las tres opciones que nos ofrece la página que aparece ante nosotros, vamos a escoger la segunda, ya que cuando en &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;esta entrada&lt;/a&gt; generamos nuestro primer sitio web, a la vez iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;. Aquella acción, que en su momento podía parecer un tanto extraña, queda ahora totalmente justificada.&lt;/p&gt;

&lt;p&gt;Así pues, abrimos la terminal del sistema, nos desplazamos hasta el directorio raíz donde hayamos decidido almacenar localmente nuestro sitio web y tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin https://github.com/&amp;lt;USERNAME&amp;gt;/sitio-web.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En mi caso, en lugar de &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt;, aparece directamente &lt;code&gt;ImAlexisSaez&lt;/code&gt;. Cada uno de nosotros tendrá definida esa parte del comando de manera diferente, por lo que recomiendo encarecidamente copiar la instrucción de la página de &lt;em&gt;GitHub&lt;/em&gt; en lugar de la que aparece arriba.&lt;/p&gt;

&lt;p&gt;Acto seguido, escribimos en la terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, transcurridos unos segundos, tendremos disponible en &lt;em&gt;GitHub&lt;/em&gt; una copia del código fuente que permite generar nuestra página web estática.&lt;/p&gt;

&lt;p&gt;A continuación, volvemos a &lt;em&gt;GitHub&lt;/em&gt; y creamos un nuevo repositorio. Este último tendrá un nombre especial que será, además, la dirección de acceso a nuestro sitio web. Hemos de combinar nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; con la extensión &lt;code&gt;.github.io&lt;/code&gt;. Por ejemplo, en mi caso queda &lt;code&gt;ImAlexisSaez.github.io&lt;/code&gt; y así es como rellené en su momento el campo &lt;code&gt;Repository name&lt;/code&gt;. Una vez escrito, simplemente tenemos que hacer clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Volvemos a la terminal del sistema y tecleamos &lt;code&gt;hugo server&lt;/code&gt;, para poder dar así una última revisión local a nuestro sitio web, utilizando la dirección `&lt;code&gt;http://localhost:1313&lt;/code&gt;, y comprobar que todo está en perfecto estado. Cuando estemos satisfechos, acudimos de nuevo a la terminal del sistema y cerramos el servidor local, empleando para ello la combinación de teclas &lt;code&gt;Ctrl + c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este comando borra por completo la carpeta &lt;code&gt;public&lt;/code&gt;, que se encuentra en el directorio donde tenemos almacenado localmente nuestro sitio web. Dicha carpeta se genera automáticamente cada vez que tecleamos &lt;code&gt;hugo server&lt;/code&gt; en la terminal del sistema, y contiene la versión final de nuestra página web.&lt;/p&gt;

&lt;p&gt;El siguiente paso, precisamente, es crear un submódulo de manera que la carpeta &lt;code&gt;public&lt;/code&gt; apunte a otra dirección de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, desde la terminal del sistema, tecleamos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add -b master git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde sustituiremos &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; por el nombre de nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; (por ejemplo, &lt;code&gt;ImAlexisSaez&lt;/code&gt; en mi caso).&lt;/p&gt;

&lt;p&gt;¡Ya casi tenemos todo a punto! Únicamente hemos de abrir &lt;em&gt;Sublime Text 3&lt;/em&gt; y en un archivo, que guardaremos como &lt;code&gt;deploy.sh&lt;/code&gt; en el directorio raíz donde hayamos almacenado localmente nuestro sitio web, copiamos el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add .

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back up to the Project Root
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior bloque de código se encarga, de manera automática, del proceso de subida de nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt;. Para utilizarlo, desde la terminal del sistema, nos situaremos en el directorio raíz donde hayamos decidido almacenar nuestro sitio web y teclearemos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./deploy.sh &amp;quot;Mensaje que resuma los cambios&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En mi caso, no me suelo esforzar mucho en declarar mensajes óptimamente descriptivos y, por ejemplo, cuando suba esta entrada el comando será del estilo &lt;code&gt;./deploy.sh &amp;quot;Añade entrada 20180901&amp;quot;&lt;/code&gt;. Los mensajes asociados al repositorio donde guardo el código fuente sí que intento que sean más expresivos y reflejen adecuadamente los cambios de las diferentes versiones.&lt;/p&gt;

&lt;p&gt;Con esto, damos por finalizado el proceso y nuestro sitio web será ahora accesible para todo el mundo a través de la dirección web que proporciona el segundo repositorio que hemos creado (en mi caso &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;En la siguiente entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; posiblemente empecemos a realizar cambios en la hoja de estilos &lt;em&gt;CSS&lt;/em&gt; y personalizar todavía más el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publicando la primera entrada en nuestro sitio web</title>
      <link>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</link>
      <pubDate>Thu, 30 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</guid>
      <description>&lt;p&gt;Tras haber recorrido, en el &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, las seis estaciones del vía crucis asociado al calvario de la instalación de &lt;em&gt;Hugo&lt;/em&gt; y la personalización del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, llega el momento más anhelado por todos: generar contenido para el sitio web.&lt;/p&gt;

&lt;p&gt;A continuación, examinaremos, con sumo detalle, todo el proceso de elaboración y revisión local de artículos para nuestra página web. Para empezar, me gustaría comentar que, en el apartado de la &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-4-add-some-content&#34; target=&#34;_blank&#34;&gt;guía oficial&lt;/a&gt; asociado a este asunto, se utiliza la combinación de la terminal del sistema y el comando &lt;code&gt;hugo new&lt;/code&gt; para dar a luz, de manera automática, una nueva entrada en el sitio web.&lt;/p&gt;

&lt;p&gt;No obstante, como no podía ser de otra manera y en un acto de la más absurda rebeldía, prefiero llevar a cabo este proceso de forma manual (qué obsesión con el control tengo, ¿verdad?). Si nos fijamos, desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, en la estructura de nuestra página web (heredada del sitio de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;), en el interior del directorio raíz existe una carpeta denominada &lt;code&gt;\content\&lt;/code&gt;, dentro de la cual residen anidadas otras dos: &lt;code&gt;\page\&lt;/code&gt; y &lt;code&gt;\post\&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para respetar este esquema, he decidido ubicar todos los artículos del sitio web que se organicen por alguna taxonomía (recordemos que, en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, incluso añadimos alguna adicional a las que vienen dadas por defecto con &lt;em&gt;Hugo&lt;/em&gt;) en la carpeta &lt;code&gt;\post\&lt;/code&gt;, mientras que el resto irá al directorio &lt;code&gt;\page\&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Siguiendo esta lógica, como seguramente la primera entrada que vayamos a publicar en nuestro sitio web será una especie de presentación en su blog, generaremos, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt;, un nuevo fichero en la carpeta &lt;code&gt;\post\&lt;/code&gt;. Este poseerá la extensión &lt;code&gt;.md&lt;/code&gt;, pues vamos a escribir todos y cada uno de nuestros artículos utilizando el lenguaje de marcado &lt;em&gt;Markdown&lt;/em&gt;. Para aquellas personas que escuchan por primera vez hablar de él, recomiendo encarecidamente que dediquen unos minutos a completar &lt;a href=&#34;https://www.markdowntutorial.com/&#34; target=&#34;_blank&#34;&gt;este tutorial&lt;/a&gt; sobre el mismo.&lt;/p&gt;

&lt;p&gt;La estructura de todo artículo será la que figura acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
Metadatos del artículo.
---

Párrafo (o párrafos) de introducción al artículo.

Cuerpo del artículo.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al comienzo de cada entrada ubicaremos, delimitada por los caracteres &lt;code&gt;---&lt;/code&gt;, cierta información relevante (metadatos) acerca de la misma, que suministraremos en la forma de pares &lt;code&gt;variable: valor&lt;/code&gt;. Las variables disponibles a nuestro alcance vendrán determinadas por el tema que hayamos escogido finalmente para nuestro sitio web, aunque sí que es cierto que algunas de ellas son comunes a la mayoría de los temas (como, por ejemplo, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;draft&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Teniendo en cuenta que nuestra página web hace uso del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, y considerando la definición de taxonomías y la personalización del &lt;em&gt;permalink&lt;/em&gt; que llevamos a cabo en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, utilizo siempre el mismo esquema para la cabecera de mis artículos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:
slug:
date:
draft:
bigimg:
apartados:
etiquetas:
proyectos:
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el caso particular de esta entrada, la anterior cabecera ha quedado como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:  &amp;quot;Publicando la primera entrada en nuestro sitio web&amp;quot;
slug:   &amp;quot;publicando-la-primera-entrada-en-nuestro-sitio-web&amp;quot;
date:   &amp;quot;2018-08-30T05:59:39+02:00&amp;quot;
draft:  false
bigimg: [{src: &amp;quot;img/blog/20180830-cabecera.jpg&amp;quot;}]
apartados: [&amp;quot;Blog&amp;quot;]
etiquetas: [&amp;quot;Hugo&amp;quot;]
proyectos: [&amp;quot;MetaBlog&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos a continuación el cometido de cada una de las variables que figuran en la cabecera:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: contiene el título del artículo. A diferencia de otros temas, por desgracia &lt;em&gt;Beautiful Hugo&lt;/em&gt; no admite la posibilidad de emplear &lt;em&gt;Markdown&lt;/em&gt; o &lt;em&gt;LaTeX&lt;/em&gt; en ciertas partes del título, hecho que debemos tener en consideración.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt;: tal y como comentamos en &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, vamos a configurar manualmente el &lt;em&gt;permalink&lt;/em&gt; de cada entrada. Una de sus partes será, precisamente, la asociada a esta variable. Para generar su valor, sustituyo a mano los espacios por guiones y suprimo cualquier acento, eñe o carácter extraño a los ojos del alfabeto inglés que pudiese figurar en el título del artículo. En particular, para esta entrada, el &lt;em&gt;permalink&lt;/em&gt; será &lt;code&gt;/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/&lt;/code&gt;, es decir, la fecha de publicación junto al valor que hemos asignado a la variable &lt;code&gt;slug&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: fecha y hora de publicación del artículo. Me gustaría comentar aquí que nada nos impide generar contenido para fechas futuras, aunque cuando escribamos en la terminal del sistema &lt;code&gt;hugo server&lt;/code&gt;, no tendremos acceso a su revisión. Para solventar esta situación, tenemos que añadir la etiqueta &lt;code&gt;-F&lt;/code&gt;, es decir, teclear &lt;code&gt;hugo server -F&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: variable que nos permite indicar si la entrada en concreto tiene carácter de borrador (utilizando el valor &lt;code&gt;true&lt;/code&gt;) o si ya está lista para su publicación en nuestro sitio web (empleando el valor &lt;code&gt;false&lt;/code&gt;). Para revisar localmente una página web que contenga artículos en forma de borrador, hemos de escribir en la terminal del sistema &lt;code&gt;hugo server -D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigimg&lt;/code&gt;: esta variable nos permite insertar la ruta hacia una imagen de cabecera para nuestros artículos. En &lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt; está explicado en detalle el funcionamiento de esta característica particular del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apartados&lt;/code&gt;: primera taxonomía que utilizaremos para agrupar contenido según la categoría a la que pertenezca el artículo. No es más que la localización al español de la habitual &lt;code&gt;categories&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etiquetas&lt;/code&gt;: segunda taxonomía que utilizaremos para agrupar contenido según las palabras clave que caractericen a la entrada. No es más que la localización al español de la habitual &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proyectos&lt;/code&gt;: tercera taxonomía (generalmente opcional) que nos permitirá agrupar contenido que pertenezca a distintos apartados y posea diferentes etiquetas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tras declarar la cabecera, redactaremos un párrafo (o varios) de introducción al artículo, tras los cuales escribiremos la instrucción &lt;code&gt;more&lt;/code&gt;, precedida de los símbolos &lt;code&gt;&amp;lt;!--&lt;/code&gt; y seguida de &lt;code&gt;--&amp;gt;&lt;/code&gt;. Dichos párrafos, además de ser aquellos que den comienzo a nuestra entrada, serán los que figuren en las páginas de listado de nuestro sitio web. ¿A qué me refiero con las páginas de listado? Serían, por ejemplo, la principal de acceso al sitio web y todas aquellas que ofrecen un índice que contiene los artículos asociados a una taxonomía en particular.&lt;/p&gt;

&lt;p&gt;Tras dicha instrucción, finalmente, ya solo nos restará explayarnos tanto como deseemos en el cuerpo de la entrada. &lt;em&gt;The sky is the limit!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; estudiaremos cómo utilizar &lt;em&gt;GitHub&lt;/em&gt; para alojar nuestra página web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criterios de evaluación de oposición para la especialidad de matemáticas</title>
      <link>https://imalexissaez.github.io/2018/08/28/criterios-de-evaluacion-de-oposicion-para-la-especialidad-de-matematicas/</link>
      <pubDate>Tue, 28 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/28/criterios-de-evaluacion-de-oposicion-para-la-especialidad-de-matematicas/</guid>
      <description>&lt;p&gt;Opino que una buena manera de encarar unas oposiciones pasa por revisar concienzudamente los criterios de evaluación adoptados en anteriores convocatorias. Echemos un vistazo en este artículo a los seguidos en la última.&lt;/p&gt;

&lt;p&gt;El primer problema que encontramos reside en el acceso a la información de interés. Si acudimos a la sección de &lt;a href=&#34;http://www.ceice.gva.es/es/web/rrhh-educacion/oposiciones&#34; target=&#34;_blank&#34;&gt;oposiciones&lt;/a&gt; de la página web de la &lt;em&gt;Conselleria d&amp;rsquo; Educació, Investigació, Cultura i Esport&lt;/em&gt; de la &lt;em&gt;Generalitat Valenciana&lt;/em&gt;, a la hora de escribir estas líneas, tenemos acceso los apartados que figuran en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180828-img01.png&#34; &gt;

&lt;img src=&#34;20180828-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sección de oposiciones de la página web de la &lt;em&gt;Conselleria&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Como podemos comprobar rápidamente, no aparece sección alguna dedicada al Cuerpo de Profesores de Enseñanza Secundaria, que sería aquella de nuestro interés. No obstante, el portal sí conserva una copia de los criterios de evaluación que se adoptaron para las últimas oposiciones en la especialidad de matemáticas, aunque he sido incapaz de acceder a ellos a través de los diferentes menús que ofrece el sitio web.&lt;/p&gt;

&lt;p&gt;El documento se titula &amp;ldquo;&lt;em&gt;Criterios de evaluación del procedimiento selectivo de ingreso en el cuerpo de profesores de enseñanza de secundaria, especialidad de matemáticas&lt;/em&gt;&amp;rdquo; y entonces, conociendo este dato, basta una búsqueda rápida en &lt;em&gt;Google&lt;/em&gt; para encontrar &lt;a href=&#34;http://www.ceice.gva.es/documents/162909733/163272656/sec_ing_cri_206.pdf/c375ea04-4e6f-4b2f-8d5f-9117de6d434b&#34; target=&#34;_blank&#34;&gt;el enlace&lt;/a&gt; que nos permite su consulta.&lt;/p&gt;

&lt;p&gt;En la segunda página de este recurso encontramos los elementos que se valorarán asociados con la redacción del tema y son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estructura del tema.

&lt;ul&gt;
&lt;li&gt;Presenta un índice.&lt;/li&gt;
&lt;li&gt;Justifica la importancia del tema.&lt;/li&gt;
&lt;li&gt;Hace una introducción del mismo.&lt;/li&gt;
&lt;li&gt;Las distintas partes están compensadas en extensión según su importancia.&lt;/li&gt;
&lt;li&gt;Elabora una conclusión acorde con el planteamiento del tema.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Contenidos específicos.

&lt;ul&gt;
&lt;li&gt;Adapta los contenidos al tema y desarrolla todos los apartados expresados en el título del tema.&lt;/li&gt;
&lt;li&gt;Secuencia de manera lógica y clara sus apartados.&lt;/li&gt;
&lt;li&gt;Argumenta los contenidos.&lt;/li&gt;
&lt;li&gt;Profundiza en los mismos, siendo la información de cada parte lo más completa y exhaustiva posible.&lt;/li&gt;
&lt;li&gt;No existen errores de contenido o concepto.&lt;/li&gt;
&lt;li&gt;Relaciona el tema elegido con otros temas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Expresión.

&lt;ul&gt;
&lt;li&gt;Muestra fluidez en la redacción.&lt;/li&gt;
&lt;li&gt;Hace un uso adecuado del lenguaje, con una correcta ortografía y una buena construcción sintáctica.&lt;/li&gt;
&lt;li&gt;Emplea terminología científica amplia y adecuada al tema tratado.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Presentación.

&lt;ul&gt;
&lt;li&gt;Presenta un escrito con limpieza y claridad.&lt;/li&gt;
&lt;li&gt;Deberá limitarse a la lectura de lo escrito.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bibliografía / documentación.

&lt;ul&gt;
&lt;li&gt;Fundamenta los contenidos con autores o bibliografías.&lt;/li&gt;
&lt;li&gt;Las fuentes y/o bases de datos utilizados están actualizadas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El anterior listado nos puede, e incluso me atrevería a decir que nos debe, orientar de cara a la elaboración de nuestros temas, o bien puede ser un factor que nos decante por uno u otro temario de cara a su adquisición y futura revisión personal.&lt;/p&gt;

&lt;p&gt;Por otro lado, echo en falta una rúbrica detallada, con sus indicadores de logro y las correspondientes ponderaciones para cada una de las variables arriba recogidas. Sinceramente, en algunos puntos no termina de quedarme claro cómo se procederá a la evaluación.&lt;/p&gt;

&lt;p&gt;Cambiando de tercio, por lo que respecta a la resolución de problemas, la información todavía es más escueta, apenas cinco líneas relegadas al final de la tercera página del documento:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resolución de problemas.

&lt;ul&gt;
&lt;li&gt;Desarrollo y resultado correcto en problemas y cuestiones.&lt;/li&gt;
&lt;li&gt;Explica el método de resolución.&lt;/li&gt;
&lt;li&gt;Rigurosidad matemática.&lt;/li&gt;
&lt;li&gt;Demuestra originalidad y destreza en la solución de las cuestiones.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Al igual que antes, aunque tenemos acceso a aquello que se valorará, en algunos puntos me es difícil imaginar cómo se procederá a su evaluación. La originalidad, destreza y rigurosidad me parecen atributos complicados de cuantificar y fuertemente sujetos a la subjetividad de quien examina.&lt;/p&gt;

&lt;p&gt;En cuanto a la defensa de la programación docente, me atrevería a decir que no encontramos demasiadas sorpresas aquí y nuestra labor se limita a exponer, uno por uno, los apartados que en la convocatoria exigen que contenga. Así pues, valorarán:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estructura de la programación.

&lt;ul&gt;
&lt;li&gt;Contextualiza y justifica la programación en el marco legal y la realidad escolar.&lt;/li&gt;
&lt;li&gt;Se adapta al nivel y/o alumnado elegido.&lt;/li&gt;
&lt;li&gt;Está claramente estructurada y hace mención a las unidades didácticas
programadas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Elementos de la programación.

&lt;ul&gt;
&lt;li&gt;Desarrolla y adapta los elementos básicos del currículum: objetivos, contenidos y criterios de evaluación. Se expondrán con claridad y serán adecuados al nivel elegido.&lt;/li&gt;
&lt;li&gt;Hace referencia a las competencias básicas si la programación es de ESO.&lt;/li&gt;
&lt;li&gt;Realiza una buena secuenciación y temporalización de los contenidos.&lt;/li&gt;
&lt;li&gt;Desarrolla una metodología adecuada: estrategias y principios metodológicos claros y concisos.&lt;/li&gt;
&lt;li&gt;Se expresarán y justificarán los criterios y procedimientos de evaluación y calificación así como los mecanismos de refuerzo y recuperación.&lt;/li&gt;
&lt;li&gt;Se tendrá en cuenta la utilización en la programación de otros aspectos educativos como: el uso de las TIC, fomento de la lectura, relación con las familias&amp;hellip;&lt;/li&gt;
&lt;li&gt;Se marcarán las medidas específicas de atención a la diversidad.&lt;/li&gt;
&lt;li&gt;Mostrará originalidad e individualidad.&lt;/li&gt;
&lt;li&gt;Usa mecanismos de autoevaluación de la actividad docente.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Expresión y exposición oral.

&lt;ul&gt;
&lt;li&gt;Muestra seguridad y coherencia en la exposición.&lt;/li&gt;
&lt;li&gt;Hace un uso correcto del lenguaje, siendo fluido, rico y variado.&lt;/li&gt;
&lt;li&gt;Capta la atención con un discurso ameno.&lt;/li&gt;
&lt;li&gt;Deberá ser equilibrada en los tiempos.&lt;/li&gt;
&lt;li&gt;La presentación consistirá en la defensa de la misma y no una mera repetición de lo escrito.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bibliografía. Documentación.

&lt;ul&gt;
&lt;li&gt;Toma como referencia la normativa vigente.&lt;/li&gt;
&lt;li&gt;Hace alusión a autores y bibliografía.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Especial atención merece el tercer punto, que no deja apenas margen para la improvisación. Esta parte requiere una preparación exhaustiva, que maneje los tiempos de manera adecuada y nos proporcione seguridad vía repetición &lt;em&gt;ad infinitum&lt;/em&gt; de la defensa.&lt;/p&gt;

&lt;p&gt;Finalmente, por lo que respecta a la defensa de la unidad didáctica, se valorara:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estructura de la unidad didáctica.

&lt;ul&gt;
&lt;li&gt;Se ajusta a los requisitos de la convocatoria.&lt;/li&gt;
&lt;li&gt;Contextualiza y justifica la unidad en el marco legal y en la realidad escolar.&lt;/li&gt;
&lt;li&gt;Se adapta al nivel y/o alumnado elegido.&lt;/li&gt;
&lt;li&gt;Desarrolla y adapta los elementos básicos de la unidad didáctica.&lt;/li&gt;
&lt;li&gt;Tiene en cuenta las necesidades específicas de apoyo educativo del alumnado.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Elementos de la unidad didáctica.

&lt;ul&gt;
&lt;li&gt;Competencias básicas –sólo en ESO.&lt;/li&gt;
&lt;li&gt;Objetivos y contenidos de aprendizaje. Estarán claramente formulados, con coherencia y serán adecuados al nivel y al momento concreto del curso escolar elegido.&lt;/li&gt;
&lt;li&gt;Actividades de enseñanza y aprendizaje. Serán motivadoras, variadas, graduadas en dificultad y accesibles a la mayoría del alumnado.&lt;/li&gt;
&lt;li&gt;Procedimientos y criterios de evaluación. Flexibilidad y adaptación a la diversidad del alumnado. Mecanismos de recuperación.&lt;/li&gt;
&lt;li&gt;Atención a la diversidad.&lt;/li&gt;
&lt;li&gt;Utilización de nuevas tecnologías.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Expresión y exposición oral.

&lt;ul&gt;
&lt;li&gt;Muestra seguridad y coherencia en la exposición.&lt;/li&gt;
&lt;li&gt;Hace un uso correcto del lenguaje, siendo fluido, rico y variado.&lt;/li&gt;
&lt;li&gt;Capta la atención con un discurso ameno.&lt;/li&gt;
&lt;li&gt;Utiliza material auxiliar sin contenido curricular y recursos didácticos (pizarra, ilustraciones, diagramas, mapas, esquemas, multimedia, TIC.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bibliografía. Documentación.

&lt;ul&gt;
&lt;li&gt;Toma como referencia la normativa vigente.&lt;/li&gt;
&lt;li&gt;Hace alusión a autores y bibliografía.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El documento concluye detallando la fase de concurso, de escaso interés para la temática de este artículo.&lt;/p&gt;

&lt;p&gt;Así pues, sabiendo qué se espera de nosotros, podemos organizar el desarrollo de cada una de las partes de manera adecuada. Si bien es cierto que estos criterios de evaluación corresponden a los de la última convocatoria, no sería descabellado suponer que la mayoría de ellos se extrapolarán a la siguiente. En cualquier caso, podemos echar un rápido vistazo a los asociados a la convocatoria de este año para el Cuerpo de Maestros y comprobar que aquellos definidos para Educación Primaria no distan sobremanera de los listados arriba.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anatomía de una prueba t perfecta</title>
      <link>https://imalexissaez.github.io/2018/08/25/anatomia-de-una-prueba-t-perfecta/</link>
      <pubDate>Sat, 25 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/25/anatomia-de-una-prueba-t-perfecta/</guid>
      <description>&lt;p&gt;En mi reciente vuelta a &lt;em&gt;Twitter&lt;/em&gt;, he empezado a seguir al profesor responsable del excelente &lt;em&gt;MOOC&lt;/em&gt; &amp;ldquo;&lt;em&gt;Improving your statistical inferences&lt;/em&gt;&amp;rdquo; (&lt;a href=&#34;https://www.coursera.org/learn/statistical-inferences&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;), &lt;em&gt;Daniël Lakens&lt;/em&gt; (&lt;a href=&#34;https://twitter.com/lakens&#34; target=&#34;_blank&#34;&gt;@lakens&lt;/a&gt;), que comparte más que interesantes perlas relacionadas con el campo de la estadística.&lt;/p&gt;

&lt;p&gt;Hace unos días anunciaba que había actualizado un &lt;em&gt;script&lt;/em&gt; para &lt;em&gt;R&lt;/em&gt; cuyo nombre no tiene desperdicio: &amp;ldquo;&lt;em&gt;Perfect t-test&lt;/em&gt;&amp;rdquo;. Las principales referencias que tenemos que consultar son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daniellakens.blogspot.com.es/2015/05/the-perfect-t-test.html&#34; target=&#34;_blank&#34;&gt;The perfect t-test&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Lakens/Perfect-t-test&#34; target=&#34;_blank&#34;&gt;Repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt; con el código asociado al anterior artículo.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como no podía ser de otra manera, un recurso así despierta enormemente tanto mi curiosidad, como las ganas de echar un rato explorando las posibilidades que ofrece.&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿de qué trata todo el asunto? Estamos ante un documento escrito con &lt;em&gt;R Markdown&lt;/em&gt; cuyo objetivo es automatizar el proceso de comparación de medias para dos muestras, tanto independientes como dependientes (cada caso tiene su archivo asociado). No obstante, cuando la mayoría de programas informáticos orientados al análisis de datos ya incorporan este tipo de herramienta, ¿qué justifica la existencia de este recurso?&lt;/p&gt;

&lt;p&gt;Según el autor, no todos los investigadores siguen las recomendaciones que los estadísticos indican (o bien no están al día de las mismas), e incluso, hecho que personalmente considero más grave, los propios programas informáticos ignoran dichas recomendaciones en ocasiones.&lt;/p&gt;

&lt;p&gt;Dentro del &amp;ldquo;peligro&amp;rdquo; que supone emplear algoritmos que automatizan análisis de datos, que pueden provocar que llevemos a cabo todo tipo de acciones sin saber muy bien las razones para ello, dado que los vamos a utilizar igualmente, siempre será más recomendable que escojamos aquellos que mejor diseñados estén, ¿verdad?&lt;/p&gt;

&lt;p&gt;Veamos qué nos ofrece el código de &lt;em&gt;Daniël Lakens&lt;/em&gt;. Una vez digerido el &lt;em&gt;README&lt;/em&gt; del repositorio, e instalado los paquetes necesarios (así como actualizado &lt;em&gt;JAGS&lt;/em&gt;, que aún estaba utilizando la versión 3), sólo tengo que encontrar algún conjunto de datos que me permita llevar a cabo una prueba &lt;em&gt;t&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;He escogido el conjunto de datos &lt;code&gt;hsb2&lt;/code&gt; (incluido en el paquete &lt;code&gt;openintro&lt;/code&gt;), que está formado por los registros de una encuesta realizada a 200 estudiantes de secundaria. Vamos a investigar una simple cuestión, ¿existen diferencias en las puntuaciones, asociadas a matemáticas, entre chicos y chicas? Para resolver el interrogante, lo primero que debemos hacer es generar un archivo de texto que contenga los datos de interés, siguiendo el formato que se nos especifica en el archivo &lt;code&gt;perfect_independent_t-test.Rmd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Carga la librería que contiene el conjunto de datos hsb2
library(openintro)

# Carga el conjunto de datos hsb2
data(hsb2)

# Documentación del conjunto de datos
?hsb2

# Exploración básica del conjunto de datos
str(hsb2)

# Crea el archivo que se usará con &amp;quot;perfect_independent_t-test.Rmd&amp;quot;
write.table(hsb2[c(&amp;quot;id&amp;quot;, &amp;quot;gender&amp;quot;, &amp;quot;math&amp;quot;)],
            file = &amp;quot;datos_hsb2_math.txt&amp;quot;,
            row.names = FALSE,
            sep = &amp;quot;,&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en lugar de crear un archivo de texto cuyas columnas estuvieran delimitadas por tabuladores, escogí utilizar comas. Eso luego implica realizar modificaciones menores en el fichero de la prueba &lt;em&gt;t&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ahora, con &lt;code&gt;datos_hsb2_math.txt&lt;/code&gt; ubicado en el mismo directorio que &lt;code&gt;perfect_independent_t-test.Rmd&lt;/code&gt;, únicamente tenemos que actualizar la ruta que aparece en la línea 62 para la variable &lt;code&gt;alldata&lt;/code&gt; (y, en mi caso, añadir &lt;code&gt;sep = &amp;quot;,&amp;quot;&lt;/code&gt;), así como correctamente asignar las variables &lt;code&gt;xlabel&lt;/code&gt;, &lt;code&gt;ylabel&lt;/code&gt;, &lt;code&gt;factorlabel&lt;/code&gt;, &lt;code&gt;measurelabel&lt;/code&gt;, &lt;code&gt;xlabelstring&lt;/code&gt; e &lt;code&gt;ylabelstring&lt;/code&gt; siguiendo las instrucciones. El resto de variables, para una primera aproximación a esta herramienta, podemos dejarlas con los valores que han recibido por defecto.&lt;/p&gt;

&lt;p&gt;En mi caso, he cambiado el formato del documento de salida de &lt;em&gt;Word&lt;/em&gt; a &lt;em&gt;PDF&lt;/em&gt;, y, tras pulsar el botón correspondiente, he acabado con un documento ¡de 15 páginas para una simple prueba &lt;em&gt;t&lt;/em&gt;! A la próxima persona que escuche quejarse de que &lt;em&gt;SPSS&lt;/em&gt; devuelve una miríada de resultados voy a invitarle amablemente a que utilice este &lt;em&gt;script&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, una vez superado el susto inicial, gran parte del documento son explicaciones generales que justifican el modo de proceder seguido. La primera figura que encontramos es el siguiente &lt;em&gt;boxplot&lt;/em&gt; (creo que en español se llama &lt;em&gt;diagrama de caja y bigotes&lt;/em&gt;, pero no estoy completamente seguro), con el objeto de identificar la existencia de posibles valores atípicos:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img01.png&#34; &gt;

&lt;img src=&#34;20180825-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Boxplot.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A continuación, se realizan cuatro contrastes de hipótesis para comprobar si se verifica el supuesto de normalidad para las puntuaciones de ambos grupos (su violación tiene efectos, por ejemplo, sobre el &lt;em&gt;error de tipo I&lt;/em&gt;):&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img02.png&#34; &gt;

&lt;img src=&#34;20180825-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Resultados de los contrastes de hipótesis.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;En uno de los cuatros contrastes, los datos con los que estamos trabajando aportan evidencia suficiente para sospechar de la veracidad de la hipótesis nula (&amp;ldquo;las puntuaciones siguen una distribución normal&amp;rdquo;), por lo que tendríamos que preferiblemente recurrir a métodos no paramétricos o estadísticos robustos. No obstante, en el propio documento nos avisan de que con muestras grandes (y podemos considerar que la dada lo es) este tipo de situaciones pueden presentarse.&lt;/p&gt;

&lt;p&gt;Podemos examinar la distribución de puntuaciones, para cada uno de los grupos, de manera gráfica, a partir de las siguientes figuras, y juzgar así cómo se desvían nuestros datos (línea negra) de la distribución normal asociada (línea discontinua roja):&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img03.png&#34; &gt;

&lt;img src=&#34;20180825-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Distribución de las puntuaciones de los chicos.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img04.png&#34; &gt;

&lt;img src=&#34;20180825-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Distribución de las puntuaciones de las chicas.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Por si las anteriores figuras todavía no resolvieran el interrogante, tenemos a nuestra disposición los siguientes &lt;em&gt;gráficos Q-Q&lt;/em&gt;:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img01.png&#34; &gt;

&lt;img src=&#34;20180825-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gráfico Q-Q.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;No resulta por tanto descabellado aceptar que se verifica el supuesto de normalidad para los datos dados. Pasemos ahora a estudiar la hipótesis de igualdad de varianzas entre los grupos considerados. Para ello, utilizaremos la &lt;em&gt;prueba de Levene&lt;/em&gt;, que en nuestro caso particular concluye:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Levene’s test for equality of variances (p = 0.46) indicates that the assumption that variances are equal is not rejected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A continuación encontramos la sección de resultados donde, siguiendo el estilo de publicación de las revistas científicas, se recogen las conclusiones para la prueba &lt;em&gt;t&lt;/em&gt; que hemos llevado a cabo. Aquí, en función de la filosofía con la que solamos trabajar y de si se verifican las condiciones asociadas a esta prueba, tendremos que escoger entre la sección dedicada a estadísticos frecuentistas, bayesianos o robustos. Por ejemplo, para la primera opción encontraríamos:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The mean math of participants in the male condition (M = 52.95, SD = 9.66, n = 91) was greater than the mean of participants in the female condition (M = 52.39, SD = 9.15, n = 109). The difference between the two measurements (M = 0.55, 95% CI = [-2.09;3.19]) was analyzed with Welch’s t-test, t(187.58) = 0.41, p = 0.682, Hedges’ g = 0.06, 95% CI [-0.22;0.34]. This can be considered a tiny effect. The observed data is not surprising under the assumption that the null-hypothesis is true. The Common Language effect size (McGraw &amp;amp; Wong, 1992) indicates that the likelihood that the math of a random person in the male condition is greater than the math of a random person in the female condition is 52%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tenemos a nuestra disposición la media, la desviación estándar y el tamaño muestral para cada uno de los grupos considerados. A continuación encontramos el valor del estadístico asociado a la prueba &lt;em&gt;t&lt;/em&gt; de &lt;em&gt;Welch&lt;/em&gt;, así como su correspondiente &lt;em&gt;p&lt;/em&gt;-valor. Como indicador del tamaño del efecto encontramos la &lt;em&gt;g&lt;/em&gt; de &lt;em&gt;Hedges&lt;/em&gt;. Sin embargo, al margen del aluvión de valores con el que ya seríamos capaces de dar respuesta al interrogante que ha motivado este artículo (¿seríamos de verdad capaces?), me ha encantado la parte final de este párrafo, donde nos transmiten con palabras llanas qué conclusiones deberíamos extraer.&lt;/p&gt;

&lt;p&gt;El documento añade los gráficos que mostraré a continuación, así como las referencias para las justificaciones vertidas a lo largo de él, el propio conjunto de datos y cierta información técnica de la sesión de trabajo en &lt;em&gt;R&lt;/em&gt;. Es un estupendo recurso para tener siempre disponible a mano, ¿verdad?&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img06.png&#34; &gt;

&lt;img src=&#34;20180825-img06.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Violin plot.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img07.png&#34; &gt;

&lt;img src=&#34;20180825-img07.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gráfico de dispersión.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;








&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180825-img08.png&#34; &gt;

&lt;img src=&#34;20180825-img08.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Intervalos de confianza.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Porqué la mayoría de los resultados en investigación son falsos</title>
      <link>https://imalexissaez.github.io/2018/08/23/porque-la-mayoria-de-los-resultados-en-investigacion-son-falsos/</link>
      <pubDate>Thu, 23 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/23/porque-la-mayoria-de-los-resultados-en-investigacion-son-falsos/</guid>
      <description>&lt;p&gt;Cuanto menos, es ciertamente llamativo, así como invita con fuerza a su lectura, el título de uno de los artículos de &lt;em&gt;John P. A. Ioannidis&lt;/em&gt;: &amp;ldquo;&lt;em&gt;Why Most Published Research Findings Are False&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Estaba echando un vistazo a los contenidos de la primera semana del &lt;em&gt;MOOC&lt;/em&gt; &amp;ldquo;&lt;em&gt;Improving your statistical inferences&lt;/em&gt;&amp;rdquo; (&lt;a href=&#34;https://www.coursera.org/learn/statistical-inferences&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;), disponible en la plataforma &lt;em&gt;Coursera&lt;/em&gt; (curso que, por cierto, me ha dejado muy buenas sensaciones), y en uno de sus vídeos recomiendan la lectura del mencionado artículo.&lt;/p&gt;

&lt;p&gt;Por fortuna, es un texto de acceso abierto que podemos encontrar en este &lt;a href=&#34;http://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.0020124&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;. Tras la introducción técnica, la sección de corolarios no tiene desperdicio alguno. En ella se afirma que es menos probable que los resultados de la investigación en una disciplina científica sean verdaderos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuanto menor sea el tamaño muestral.&lt;/li&gt;
&lt;li&gt;Cuanto menor sea el tamaño del efecto.&lt;/li&gt;
&lt;li&gt;Cuanto mayor sea el número de relaciones y menor sea el conjunto de las que están probadas.&lt;/li&gt;
&lt;li&gt;Cuanto mayor sean la flexibilidad en el diseño, las definiciones, los resultados y los modos de análisis.&lt;/li&gt;
&lt;li&gt;Cuanto mayor sean la financiación y otros intereses y prejuicios.&lt;/li&gt;
&lt;li&gt;Cuanto mayor sea el número de equipos científicos involucrados.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Además, aunque encontramos los anteriores factores expuestos de manera separada, a menudo es cierto que unos poseen influencia sobre otros y pueden presentarse de forma simultánea. El autor finaliza el artículo exponiendo algunas directrices para mejorar la situación planteada.&lt;/p&gt;

&lt;p&gt;Merece la pena dedicar un poco de nuestro tiempo a la lectura y estudio de este texto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aprendiendo de la experiencia de Jacob Cohen</title>
      <link>https://imalexissaez.github.io/2018/08/21/aprendiendo-de-la-experiencia-de-jacob-cohen/</link>
      <pubDate>Tue, 21 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/21/aprendiendo-de-la-experiencia-de-jacob-cohen/</guid>
      <description>&lt;p&gt;Por recomendación, el otro día puse las manos sobre el artículo de &lt;em&gt;Jacob Cohen&lt;/em&gt;: &amp;ldquo;&lt;em&gt;Things I Have Learned (So Far)&lt;/em&gt;&amp;rdquo;, publicado originalmente en diciembre de 1990 en la revista &lt;em&gt;American Psychologist&lt;/em&gt;. Veamos qué impresiones me ha dejado su lectura.&lt;/p&gt;

&lt;p&gt;Es posible que, por su antigüedad, alguien pueda llegar a pensar que no merece demasiado la pena dedicarle tiempo a este texto, ¡nada más lejos de la realidad!&lt;/p&gt;

&lt;p&gt;El acceso al documento original (&lt;a href=&#34;http://psycnet.apa.org/psycinfo/1991-11596-001&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;), desgraciadamente, implica un desembolso de aproximadamente doce dólares. No obstante, a través de una búsqueda rápida en &lt;em&gt;Google&lt;/em&gt; es fácil (y, posiblemente, ilegal) dar con él e, incluso, con una traducción al español, publicada en el año 1992 en la revista &lt;em&gt;Anales de Psicología&lt;/em&gt;. La pregunta natural aquí es, ¿por qué un artículo publicado hace más de dos décadas no ha sido liberado completamente?&lt;/p&gt;

&lt;p&gt;Algunas de las claves que comparte Jacob Cohen y me han parecido interesantes son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En la medida de nuestras posibilidades, debemos evitar el uso inconsciente de las famosas &amp;ldquo;&lt;em&gt;reglas de oro&lt;/em&gt;&amp;rdquo;, que suelen instaurar rígidos criterios universales. Por ejemplo, en lugar de calificar una muestra como pequeña porque su tamaño es menor que treinta, conviene que llevemos a cabo un análisis del poder estadístico del estudio, para decidir si el tamaño muestral es el idóneo para los objetivos que perseguimos.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;em&gt;Menos es más&lt;/em&gt;&amp;rdquo; (salvo cuando hablamos de tamaños muestrales). No es demasiado recomendable que nuestros proyectos se caractericen por tener un número desproporcionado de variables dependientes, o independientes, o de ambos tipos. En esos casos, la cantidad de hipótesis a contrastar crece desmesuradamente, y deberíamos estar muy atentos al control del &lt;em&gt;error de tipo I&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;En relación con lo anterior, es aconsejable que prestemos atención también a la forma de presentar resultados. Los programas informáticos de hoy en día son capaces de arrojar cifras con un alto número de decimales, pero debemos detenernos a pensar hasta qué punto es útil reportarlos todos.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;em&gt;Simple es mejor&lt;/em&gt;&amp;rdquo;. Conviene que describamos gráficamente una variable antes que optar por hacerlo vía sus primeros momentos, así como que utilicemos un diagrama de puntos en lugar de escoger un indicador numérico para transmitir en qué medida están asociadas dos variables.&lt;/li&gt;
&lt;li&gt;Que podamos realizar, de manera sencilla, complejos análisis de datos utilizando programas informáticos, no implica que no sea necesario entender perfectamente qué estamos haciendo en cada momento del proceso.&lt;/li&gt;
&lt;li&gt;Conviene que nos detengamos a estudiar con detalle todo lo relacionado con la correcta interpretación del &lt;em&gt;p&lt;/em&gt;-valor (&amp;rdquo;&lt;em&gt;this result does not tell us about the truth of the null hypothesis, given the data […] What it tells us is the probability of the data, given the truth of the null hypothesis.&lt;/em&gt;&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Continuando con el punto anterior, no tenemos que utilizar el &lt;em&gt;p&lt;/em&gt;-valor como sustituto de un indicador del tamaño del efecto, y es recomendable que reportemos un intervalo de confianza de este último (de hecho, debería ser el principal objetivo de cualquier investigación) en la sección de resultados, para que los hallazgos significativos queden correctamente contextualizados.&lt;/li&gt;
&lt;li&gt;Conviene, antes de llevar a cabo cualquier estudio, que planeemos con atención el tamaño del efecto que buscamos, el nivel de significación que vamos a asumir y el poder estadístico con el que queremos trabajar. A partir de ellos, obtendremos el tamaño muestral necesario y, en el caso de encontrarse éste fuera de nuestras posibilidades, procederemos a realizar ajustes en las anteriores cantidades.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por otra parte, algunas de las citas que me han encantado del artículo son:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I have so heavily emphasized the desirability of working with few variables and large sample sizes that some of my students have spread the rumor that my idea of the perfect study is one with 10,000 cases and no variables. They go too far.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;We sometimes learn more from what we see than from what we compute; sometimes what we learn from what we see is that we shouldn’t compute, at least not on those data as they stand.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The atmosphere that characterizes statistics as applied in the social and biomedical sciences is that of a secular religion (Salsburg, 1985), apparently of Judeo-Christian derivation, as it employs as its most powerful icon a six-pointed cross, often presented multiply for enhanced authority. I confess that I am an agnostic.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Despite widespread misconceptions to the contrary, the rejection of a given null hypothesis gives us no basis for estimating the probability that a replication of the research will again result in rejecting that null hypothesis.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;consider the sanctified (and sanctifying) magic .05 level. […] Its arbitrary unreasonable tyranny has led to data fudging of varying degrees of subtlety from grossly altering data to dropping cases where there &amp;lsquo;must have been&amp;rsquo; errors.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I have learned and taught that the primary product of a research inquiry is one or more measures of effect size, not &lt;em&gt;p&lt;/em&gt; values.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En resumen, una amena lectura aderezada de píldoras de sabiduría que recomendaría a cualquier persona interesada en esta disciplina.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breve introducción a la librería NumPy</title>
      <link>https://imalexissaez.github.io/2018/08/18/breve-introduccion-a-la-libreria-numpy/</link>
      <pubDate>Sat, 18 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/18/breve-introduccion-a-la-libreria-numpy/</guid>
      <description>

&lt;p&gt;Tras la buena experiencia vivida después de la sesión dedicada a &lt;em&gt;machine learning&lt;/em&gt;, de la convención &lt;em&gt;SciPy 2017&lt;/em&gt;, me he animado a seguir explorando la &lt;a href=&#34;https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&#34; target=&#34;_blank&#34;&gt;lista de reproducción&lt;/a&gt; del canal de &lt;em&gt;Youtube&lt;/em&gt; asociado a la cuenta de &lt;em&gt;Enthought&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Varios títulos han captado poderosamente mi atención (a la hora de escribir estas líneas, la mencionada lista de reproducción sobrepasa los noventa vídeos), pero teniendo en cuenta que todo el ecosistema de &lt;em&gt;SciPy&lt;/em&gt; se asienta sobre la librería &lt;em&gt;NumPy&lt;/em&gt;, he terminado considerando que la elección más sensata era optar por &lt;em&gt;&amp;ldquo;Introduction to Numerical Computing with NumPy&amp;rdquo;&lt;/em&gt;, que viene de la mano de Dillon Niederhut.&lt;/p&gt;

&lt;p&gt;Este artículo recoge las notas personales tomadas durante la visualización de dicho tutorial, al cual podemos acceder a través del siguiente &lt;a href=&#34;https://youtu.be/lKcwuPnSHIQ&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;, y que posee asociado un &lt;a href=&#34;https://github.com/enthought/Numpy-Tutorial-SciPyConf-2017&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt; que, principalmente, conviene tener a mano para seguir algunos de los ejercicios planteados durante la sesión.&lt;/p&gt;

&lt;p&gt;Antes de empezar, me gustaría destacar que el material está enfocado a principiantes, por lo que el ritmo es bastante más sosegado que el llevado por aquel de &lt;em&gt;machine learning&lt;/em&gt; que mencionaba en el primer párrafo. Además, me ha parecido ciertamente curiosa la manera de tratar a los participantes, intentando en todo momento que se sientan en un entorno de aprendizaje bastante confortable.&lt;/p&gt;

&lt;h2 id=&#34;1-por-qué-aprender-a-utilizar-la-librería-numpy&#34;&gt;1. ¿Por qué aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;Qué mejor manera de empezar esta entrada que justificando la necesidad de aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;. Introducirse al manejo de un nuevo módulo (y no digamos ya dominarlo) es una tarea que normalmente requiere una buena inversión de horas de estudio y experimentación, y &lt;em&gt;NumPy&lt;/em&gt;, por desgracia, no es la excepción que rompe la mencionada regla. Así pues, ¿por qué aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;La respuesta, &lt;em&gt;grosso modo&lt;/em&gt;, vendría dada por el más que discutible rendimiento del lenguaje de programación &lt;em&gt;Python&lt;/em&gt; a la hora de llevar a cabo cálculos numéricos. Ilustremos este hecho con un sencillo ejemplo: sumaremos los elementos de una lista que contendrá los primeros mil números enteros positivos (que construiremos con la función &lt;code&gt;range()&lt;/code&gt;), midiendo el tiempo que requiere la mencionada operación a través del comando mágico &lt;code&gt;%timeit&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test_list = list(range(1001))

%timeit sum(test_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100000 loops, best of 3: 10.8 µs per loop    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora repitamos la misma operación empleando funciones de la librería &lt;em&gt;NumPy&lt;/em&gt;. Para ello:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;importaremos el módulo siguiendo la convención establecida, es decir, escribiendo &lt;code&gt;import numpy as np&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;creamos una réplica de la anterior lista (que, en breve, empezaremos a llamar &lt;em&gt;array&lt;/em&gt;) utilizando la función &lt;code&gt;arange()&lt;/code&gt;, y&lt;/li&gt;
&lt;li&gt;sumaremos sus elementos mediante la función &lt;code&gt;sum()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

test_array = np.arange(1001)

%timeit np.sum(test_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The slowest run took 14.21 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 5.02 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos reducido a la mitad el tiempo que precisa el sistema para realizar el cálculo numérico requerido. No obstante, quizá no logre impactarnos el hecho de pasar de 11 a 5 microsegundos. Intentemos forzar un tanto el anterior ejemplo incrementando de manera significativa el número de elementos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = 1000001
test_list  = list(range(n)) # Python
test_array = np.arange(n)   # NumPy
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%timeit sum(test_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10 loops, best of 3: 46.3 ms per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%timeit np.sum(test_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 748 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado ahora sí que debería ser una buena justificación de cara a decidir si invertir o no nuestro preciado tiempo en aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;. Esta considerable mejora en el tiempo de ejecución para cálculos numéricos se produce en cualquier tipo de operación matemática que llevemos a cabo empleando funciones de dicho módulo.&lt;/p&gt;

&lt;p&gt;Si tenemos en mente utilizar el lenguaje de programación &lt;em&gt;Python&lt;/em&gt; para analizar datos, considerando que al final casi todo se reduce a realizar cálculos numéricos con matrices de dimensiones considerables, &lt;em&gt;NumPy&lt;/em&gt; se convierte entonces en una herramienta esencial.&lt;/p&gt;

&lt;p&gt;Sin entrar en demasiados detalles técnicos, esta situación se produce debido a que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;es distinta, y mucho más eficiente, la manera en que se accede a los elementos de un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt; con respecto a como &lt;em&gt;Python&lt;/em&gt; procede a realizar tal tarea en sus estructuras de datos básicas,&lt;/li&gt;
&lt;li&gt;el número de comprobaciones intermedias a la hora de llevar a cabo cálculos numéricos es menor en &lt;em&gt;NumPy&lt;/em&gt;, y&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NumPy&lt;/em&gt; está escrito utilizando el lenguaje de programación &lt;em&gt;C&lt;/em&gt;, que es bastante más rápido que &lt;em&gt;Python&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sin embargo, no es oro todo lo que reluce en &lt;em&gt;NumPy&lt;/em&gt;. En futuras secciones veremos que las, &lt;em&gt;a priori&lt;/em&gt;, ventajas expuestas en el listado anterior (sobretodo las dos primeras), conllevan aparejados ciertos inconvenientes de los que hemos de ser conscientes para evitar &lt;em&gt;bugs&lt;/em&gt; en nuestros códigos.&lt;/p&gt;

&lt;h2 id=&#34;2-qué-está-pasando-aquí-primeras-sorpresas-que-nos-regala-numpy&#34;&gt;2. ¿Qué está pasando aquí? Primeras sorpresas que nos regala &lt;em&gt;Numpy&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Para empezar, al utilizar los &lt;em&gt;arrays&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;, vamos a perder ciertas características deseables que poseen las estructuras de datos básicas de &lt;em&gt;Python&lt;/em&gt;. Por ejemplo, los elementos de una lista en &lt;em&gt;Python&lt;/em&gt; pueden ser heterogéneos, es decir, de diversos tipos. En una misma lista podemos almacenar números enteros, cadenas de texto, números decimales y valores lógicos sin problema alguno. No obstante, todos los elementos de un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;, obligatoriamente, deben pertenecer al mismo tipo. Por otro lado, estamos acostumbrados a ampliar o reducir el tamaño de una lista en &lt;em&gt;Python&lt;/em&gt; de manera dinámica, mientras que en &lt;em&gt;NumPy&lt;/em&gt; tendremos que trabajar con &lt;em&gt;arrays&lt;/em&gt; de dimensión fija preestablecida. Esto último no es del todo cierto, pero reajustar el tamaño de un &lt;em&gt;array&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; no es una operación eficiente, por lo que no se suele realizar salvo contadas excepciones.&lt;/p&gt;

&lt;p&gt;Sin embargo, aquello esbozado en el párrafo anterior palidece ante la pérdida de esas &amp;ldquo;redes de seguridad&amp;rdquo; a las que &lt;em&gt;Python&lt;/em&gt; nos tiene acostumbrados. Ilustremos la situación mediante algunos ejemplos: crearemos un &lt;em&gt;array&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; a través de la función &lt;code&gt;array()&lt;/code&gt;, pasándole una lista con los elementos que queremos pertenezcan al mencionado &lt;em&gt;array&lt;/em&gt;. Además, impondremos que dichos elementos sean del tipo &lt;code&gt;int8&lt;/code&gt;, utilizando para ello el argumento &lt;code&gt;dtype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para conocer más detalles sobre los distintos tipos disponibles para los elementos de &lt;em&gt;array&lt;/em&gt;, podemos echar un vistazo a la &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html&#34; target=&#34;_blank&#34;&gt;página&lt;/a&gt; de la documentación oficial asociada al tema.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([-1, 0, 1, 100], dtype=&#39;int8&#39;)

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos llevando a cabo algunas operaciones básicas. Por ejemplo, ¿qué sucede en &lt;em&gt;Python&lt;/em&gt; cuando intentamos dividir un número por cero?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 / 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-7-b710d87c980c&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 1 / 0

ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-8-8ba90f639c23&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 1 // 0

ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; arroja una excepción si encuentra una situación de este tipo, deteniendo por completo el proceso de la que forme parte. Probemos ahora a dividir por cero el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; declarado arriba.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;NumPy&lt;/em&gt; las operaciones aritméticas sobre vectores se realizan elemento a elemento, por lo que una instrucción del estilo &lt;code&gt;a + 1&lt;/code&gt; lo que hace es sumar una unidad a cada una de las componentes del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a / 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([-inf,  nan,  inf,  inf])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([0, 0, 0, 0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos un &lt;em&gt;warning&lt;/em&gt; en la consola, pero el proceso continúa. Es más, incluso devuelve un resultado que es, cuanto menos, curioso. Para la división entera, obtenemos un vector cuyos elementos son todos nulos, mientras que para la división estándar, los elementos son &lt;code&gt;inf&lt;/code&gt; (infinito) o &lt;code&gt;nan&lt;/code&gt; (&lt;em&gt;Not A Number&lt;/em&gt; o, lo que es lo mismo, una entidad indefinida).&lt;/p&gt;

&lt;p&gt;Por mucho que hayamos declarado de tipo entero (&lt;code&gt;int8&lt;/code&gt;) los elementos de nuestro &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, ya no estamos trabajando, por así decirlo, con los &lt;em&gt;integer&lt;/em&gt; de &lt;em&gt;Python&lt;/em&gt;, y son distintas las reglas definidas para ellos. Con &lt;em&gt;NumPy&lt;/em&gt; hemos de ser muy conscientes de este hecho, para evitar todo tipo de &amp;ldquo;situaciones curiosas&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a // 0 + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([1, 1, 1, 1], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La siguiente sorpresa la podemos encontrar si, por el motivo que sea, nos interesa elevar al cuadrado las componentes del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; declarado arriba.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 1,  0,  1, 16], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Todo parece correcto hasta que llegamos a un más que sorprendente $100^2 = 16$. ¿Qué acaba de suceder aquí? &lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_overflow&#34; target=&#34;_blank&#34;&gt;Integer overflow&lt;/a&gt;. Al declarar que el tipo de los elementos de nuestro &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; sería &lt;code&gt;int8&lt;/code&gt;, nos es imposible representar un número tan grande como &lt;code&gt;100 ** 2&lt;/code&gt;. En esta ocasión, ni siquiera recibimos un &lt;em&gt;warning&lt;/em&gt; que nos advierta de que se ha producido tal situación.&lt;/p&gt;

&lt;p&gt;Recuperemos ahora el tema de los &lt;code&gt;nan&lt;/code&gt; que brevemente ha aparecido anteriormente al llevar a cabo una división por cero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a / 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([-inf,  nan,  inf,  inf])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A la hora de analizar tablas de datos, es ciertamente frecuente encontrar que los valores pérdidos se codifiquen como &lt;code&gt;nan&lt;/code&gt;. Curiosamente, en &lt;em&gt;NumPy&lt;/em&gt;, tenemos que:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.nan == np.nan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hecho que, por otra parte, es bastante lógico. Si tenemos una entidad indefinida, difícil será que podamos comparar si es igual a otra entidad indefinida. No obstante, esta filosofía invalida la búsqueda de valores perdidos por la clásica vía de comparación con &lt;code&gt;nan&lt;/code&gt;. En &lt;em&gt;NumPy&lt;/em&gt;, para comprobar la existencia de dichos valores y que han sido codificados como &lt;code&gt;nan&lt;/code&gt;, tendremos que emplear funciones del tipo &lt;code&gt;isnan()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.isnan(np.nan)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.isnan(a / 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([False,  True, False, False], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como tanto los &lt;code&gt;inf&lt;/code&gt; como los &lt;code&gt;nan&lt;/code&gt; se codifican de manera distinta a los números enteros, no vamos a poder tener en un &lt;em&gt;array&lt;/em&gt; de enteros ciertos elementos declarados como &lt;code&gt;nan&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, np.nan], dtype=&#39;int8&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-18-6d8f5ee90faf&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 np.array([1, 2, np.nan], dtype=&#39;int8&#39;)

ValueError: cannot convert float NaN to integer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, con otros tipos de datos, esta situación no se da.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, np.nan], dtype=&#39;float32&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([  1.,   2.,  nan], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así pues, a modo de resumen, la moraleja que extraemos de este apartado sería que, si vamos a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;, tenemos que empezar a prestar más atención a las representaciones binarias de nuestros datos y su efecto a la hora de trabajar numéricamente con ellas.&lt;/p&gt;

&lt;h2 id=&#34;3-creando-arrays-especiales-en-numpy&#34;&gt;3. Creando &lt;em&gt;arrays&lt;/em&gt; especiales en &lt;em&gt;NumPy&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;La librería &lt;em&gt;NumPy&lt;/em&gt; contiene una serie de funciones orientadas a generar &lt;em&gt;arrays&lt;/em&gt; especiales como, por ejemplo, aquellos cuyas componentes son todas nulas, todas unos o, incluso, que consistan en una serie de huecos vacíos a rellenar en un futuro.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.multiarray.zeros&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.numeric.ones&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.empty
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.multiarray.empty&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Las anteriores funciones mostradas requieren como argumento obligatorio, para crear los &lt;em&gt;arrays&lt;/em&gt; asociados, el número total de elementos (si buscamos generar un &lt;em&gt;array&lt;/em&gt; unidimensional) o una &lt;em&gt;tupla&lt;/em&gt; que contenga las distintas dimensiones (si deseamos crear un &lt;em&gt;array&lt;/em&gt; multidimensional).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0.,  0.,  0.,  0.,  0.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((2, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1.,  1.],
       [ 1.,  1.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.empty((3, 3, 3))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[  1.04468097e-311,   1.04464737e-311,   9.34598925e-307],
        [  8.45605478e-307,   1.37962592e-306,   1.24610994e-306],
        [  1.29061821e-306,   4.45057637e-308,   8.90051274e-307]],

       [[  8.45596650e-307,   1.11261434e-306,   4.45061880e-308],
        [  1.69109959e-306,   7.56603882e-307,   4.45063578e-308],
        [  1.24606309e-306,   1.78019625e-306,   9.34610469e-307]],

       [[  8.90051274e-307,   1.95810846e-306,   1.29062229e-306],
        [  1.33506605e-306,   1.37962388e-306,   1.37961302e-306],
        [  8.45596650e-307,   2.44033110e-312,   0.00000000e+000]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En los elementos que componen el &lt;em&gt;array&lt;/em&gt; generado a partir de la función &lt;code&gt;empty()&lt;/code&gt; encontramos aquello que previamente residía en memoria en el instante anterior a la creación de dicho array. Es por ello que, en ocasiones, si procedemos a revisarlos inmediatamente después de su declaración, encontremos valores curiosos tipo &lt;code&gt;9.34598925e-307&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;4-accediendo-a-los-elementos-de-un-array&#34;&gt;4. Accediendo a los elementos de un &lt;em&gt;array&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Partiendo del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; que declaramos en una sección anterior, en esta veremos cómo acceder a sus elementos. En &lt;em&gt;NumPy&lt;/em&gt; podemos utilizar las clásicas estrategias de &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;slice&lt;/em&gt; a las que estamos acostumbrados en &lt;em&gt;Python&lt;/em&gt; para extraer elementos de sus estructuras de datos básicas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, por ejemplo, para acceder al primer elemento de &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, no tenemos más que escribir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(a[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;numpy.int8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como suele ser habitual en &lt;em&gt;Python&lt;/em&gt;, al emplear estrategias de tipo &lt;em&gt;get&lt;/em&gt; perdemos la estructura de datos de la que partíamos. Al ejecutar &lt;code&gt;a[0]&lt;/code&gt; el resultado deja de ser un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt; para convertirse, en este caso, en un número entero. Como ya advertimos en una sección anterior, a la hora de trabajar con &lt;em&gt;NumPy&lt;/em&gt; debemos en todo momento saber con qué tipo de dato estamos trabajando y las reglas bajo las que se rige. El entero que acabamos de extraer del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, como hemos podido comprobar mediante la función &lt;code&gt;type()&lt;/code&gt;, es de tipo &lt;code&gt;numpy.int8&lt;/code&gt;, no de tipo &lt;code&gt;int&lt;/code&gt; como a primera vista podríamos sospechar. Cierta cautela se nos exige si tras la extracción tenemos en mente llevar a cabo cualquier tipo de operación matemática con el mencionado valor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0] // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos utilizar también índices negativos para acceder a los elementos de un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, como comentábamos al principio, es posible emplear estrategias de tipo &lt;em&gt;slice&lt;/em&gt; para recuperar ciertas partes de los &lt;em&gt;arrays&lt;/em&gt; declarados. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-1,  0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En esta ocasión, la estructura de datos se conserva, puesto que el resultado de la extracción continúa siendo un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por otro lado, las reglas habituales del uso de estrategias de tipo &lt;em&gt;slice&lt;/em&gt; se mantienen para los &lt;em&gt;arrays&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-1,  0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[::2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-1,  1], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, aunque los &lt;em&gt;arrays&lt;/em&gt; sean, generalmente, de tamaño fijo, son un tipo de estructura de datos mutable, es decir, podemos modificar en cualquier momento el valor de sus elementos. Por ejemplo, para reemplazar en el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; el elemento &lt;code&gt;100&lt;/code&gt; por un &lt;code&gt;5&lt;/code&gt;, simplemente tendríamos que teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[-1] = 5

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-1,  0,  1,  5], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-trabajando-con-arrays-multidimensionales&#34;&gt;5. Trabajando con &lt;em&gt;arrays&lt;/em&gt; multidimensionales&lt;/h2&gt;

&lt;p&gt;Para generar &lt;em&gt;arrays&lt;/em&gt; multidimensionales no tenemos más que anidar listas (&lt;code&gt;[]&lt;/code&gt;) en la declaración del argumento de la función &lt;code&gt;array()&lt;/code&gt;. Por ejemplo, podemos generar un &lt;em&gt;array&lt;/em&gt; bidimensional siguiendo un patrón similar al que figura a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.array([[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8],
              [9, 10, 11]])

b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; es bidimensional, como bien podemos comprobar a través de sus atributos &lt;code&gt;.ndim&lt;/code&gt; y &lt;code&gt;.shape&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.ndim
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al tratarse &lt;code&gt;b&lt;/code&gt; de los primeros once números enteros positivos (incluyendo el &lt;code&gt;0&lt;/code&gt;), para evitar errores a la hora de introducir los datos, podríamos haber empleado primero la función &lt;code&gt;arange()&lt;/code&gt;, para luego emplear &lt;code&gt;reshape()&lt;/code&gt; y transformar el &lt;em&gt;array&lt;/em&gt; unidimensional en uno bidimensional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.arange(12).reshape(4, 3)

b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es posible que, en este preciso instante, estemos tentados a denominar la primera dimensión del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; como &lt;em&gt;filas&lt;/em&gt; y la segunda como &lt;em&gt;columnas&lt;/em&gt;, por su similaridad con las tablas de datos con las que estamos acostumbrados a lidiar. No obstante, debemos ser cautos con esta nomenclatura, puesto que con &lt;em&gt;NumPy&lt;/em&gt; podemos generar &lt;em&gt;arrays&lt;/em&gt; $n$-dimensionales y, en ese contexto, es un tanto confuso hablar de &lt;em&gt;filas&lt;/em&gt; y &lt;em&gt;columnas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El acceso a los elementos del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; lo podemos llevar a cabo, al igual que en la sección anterior, mediante estrategias de tipo &lt;em&gt;get&lt;/em&gt; o &lt;em&gt;slice&lt;/em&gt;. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[2, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(b[2, 2])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;numpy.int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:2, :2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1],
       [3, 4]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como era de esperar, no tenemos por qué utilizar la misma estrategia en todas las dimensiones del &lt;em&gt;array&lt;/em&gt;, pero sí debemos prestar atención a la estructura de datos resultante (o más bien a su dimensión) cuando empleamos ambos tipos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[1:3, -1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([5, 8])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[1:3, -1:]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[5],
       [8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dependiendo de si acto seguido vamos a utilizar el anterior resultado para llevar a cabo algún tipo de cálculo matemático, este detalle puede resultar de vital relevancia.&lt;/p&gt;

&lt;p&gt;Si estamos interesados en que el resultado de la extracción conserve el número de dimensiones del objeto original, en todas y cada una de las dimensiones hemos de emplear estrategias de tipo &lt;em&gt;slice&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1].ndim
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1].shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; tridimensional &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c = np.arange(24).reshape(2, 3, 4)

c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se pide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extraer el número &lt;code&gt;17&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[ 0,  1,  2,  3],
[ 4,  5,  6,  7],
[ 8,  9, 10, 11]].
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[12, 13, 14, 15]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[1, 1, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[0, :, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[1, 0, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([12, 13, 14, 15])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: este ejercicio resulta trivial si previamente optamos por convertir el &lt;em&gt;array&lt;/em&gt; tridimensional &lt;code&gt;c&lt;/code&gt; en uno unidimensional utilizando la función &lt;code&gt;flatten()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.flatten()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; bidimensional &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(25).reshape(5, 5)

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se pide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[20, 21, 22, 23, 24]&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[ 1,  3],
[ 6,  8],
[11, 13],
[16, 18],
[21, 23]].
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[ 5,  7],
[15, 17]].
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[4, :] # a[-1, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 21, 22, 23, 24])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[:, 1::2] # a[:, 1:4:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  3],
       [ 6,  8],
       [11, 13],
       [16, 18],
       [21, 23]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[1::2, 0:4:2] # a[1::2, :3:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 5,  7],
       [15, 17]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta manera de extraer los elementos de un &lt;em&gt;array&lt;/em&gt; es extremadamente rápida y eficiente (coste de orden constante), característica deseable a hora de llevar a cabo análisis de datos de tablas cuyas dimensiones sean considerables. No obstante, con estrategias de &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;slice&lt;/em&gt; no siempre seremos capaces de acceder fácilmente a cualquier subconjunto de elementos de un &lt;em&gt;array&lt;/em&gt;, teniendo que recurrir entonces a lo que se conoce como &lt;em&gt;fancy indexing&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;6-accediendo-a-los-elementos-de-un-array-mediante-fancy-indexing&#34;&gt;6. Accediendo a los elementos de un &lt;em&gt;array&lt;/em&gt; mediante &lt;em&gt;Fancy indexing&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;La primera estrategia de acceso a los elementos de un &lt;em&gt;array&lt;/em&gt; empleando &lt;em&gt;fancy indexing&lt;/em&gt; consiste, simplemente, en utilizar una llamada de tipo &lt;em&gt;get&lt;/em&gt; donde proporcionaremos una lista (&lt;code&gt;[]&lt;/code&gt;) que contenga los índices de los elementos que deseamos extraer. Ilustremos la manera de proceder mediante algunos ejemplos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(4)

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora buscamos acceder al primer (índice &lt;code&gt;0&lt;/code&gt;) y último (índice &lt;code&gt;3&lt;/code&gt;) elemento de &lt;code&gt;a&lt;/code&gt;, escribiríamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 3]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De la misma forma podemos extraer los elementos primero, segundo y último de &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, 3]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 1, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, -1]] # versión con índices negativos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 1, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos a continuación cómo proceder a la hora de trabajar con &lt;em&gt;arrays&lt;/em&gt; bidimensionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.arange(12).reshape(4, 3)

b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supongamos que buscamos extraer los números &lt;code&gt;2&lt;/code&gt; y &lt;code&gt;6&lt;/code&gt;. Necesitaremos ahora pasar dos listas a la llamada de tipo &lt;em&gt;get&lt;/em&gt; para acceder a dichos números, una con sus índices asociados a la primera dimensión (&lt;code&gt;0&lt;/code&gt; y &lt;code&gt;2&lt;/code&gt; en este caso) y otra con sus correspondientes índices de la segunda dimensión (&lt;code&gt;2&lt;/code&gt; y &lt;code&gt;0&lt;/code&gt; en esta ocasión).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[[0, 2], [2, 0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([2, 6])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seguramente quede más clara la manera de proceder si ilustramos la anterior estrategia para un &lt;em&gt;array&lt;/em&gt; tridimensional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si nos interesa acceder a los números &lt;code&gt;6&lt;/code&gt; y &lt;code&gt;17&lt;/code&gt;, dentro de la estrategia de tipo &lt;em&gt;get&lt;/em&gt; tendríamos que declarar tres listas (porque el array &lt;code&gt;c&lt;/code&gt; es tridimensional), cada una de ellas compuesta por dos elementos (debido a que buscamos extraer dos números), indicando los índices de los mencionados números para todas y cada una de las dimensiones del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para el caso del número &lt;code&gt;6&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Índice de la primera dimensión: &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la segunda dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la tercera dimensión: &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para el caso del número &lt;code&gt;17&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Índice de la primera dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la segunda dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la tercera dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora, la intuición seguramente nos llevaría a escribir una llamada del tipo &lt;code&gt;c[[0, 1, 2], [1, 1, 1]]&lt;/code&gt;, a partir de las &amp;ldquo;coordenadas en el espacio&amp;rdquo; de los números buscados, recibiendo entonces un error en la consola.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[[0, 1, 2], [1, 1, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&amp;lt;ipython-input-63-2310a6526161&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 c[[0, 1, 2], [1, 1, 1]]

IndexError: index 2 is out of bounds for axis 0 with size 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debemos intentar evitar pensar en los elementos de un &lt;em&gt;array&lt;/em&gt; multidimensional a partir de sus coordenadas y hacerlo empleando directamente el número de dimensiones. Para que la anterior instrucción hubiese funcionado, el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; tendría que haber sido bidimensional (porque encontramos declaradas dos listas) y el objetivo acceder a tres elementos (debido a que cada una de las listas posee tres componentes).&lt;/p&gt;

&lt;p&gt;De esta manera, para extraer los números &lt;code&gt;6&lt;/code&gt; y &lt;code&gt;17&lt;/code&gt; de &lt;code&gt;c&lt;/code&gt;, hemos de teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[[0, 1], [1, 1], [2, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 6, 17])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A medida que el número de elementos a los que queremos acceder o la cantidad de dimensiones del &lt;em&gt;array&lt;/em&gt; se incrementan, esta forma de proceder se vuelve ciertamente un tanto tediosa. Es por ello que, en ocasiones, conviene emplear una estrategia alternativa de &lt;em&gt;fancy indexing&lt;/em&gt; cuyo funcionamiento se asienta en el adecuado uso de &lt;em&gt;máscaras&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Supongamos que, trabajando con el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;, estamos interesados en acceder a todos aquellos elementos que sean estrictamente mayores que &lt;code&gt;16&lt;/code&gt;. Si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c &amp;gt; 16
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[False, False, False, False],
        [False, False, False, False],
        [False, False, False, False]],

       [[False, False, False, False],
        [False,  True,  True,  True],
        [ True,  True,  True,  True]]], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos un &lt;em&gt;array&lt;/em&gt; tridimensional formado por valores lógicos, y de la misma dimensión que &lt;code&gt;c&lt;/code&gt;, que, para todos y cada uno de sus elementos, nos informa de si satisface la condición planteada (&lt;code&gt;True&lt;/code&gt;) o no (&lt;code&gt;False&lt;/code&gt;). Dicha información se la podemos suministrar a una estrategia de tipo &lt;em&gt;get&lt;/em&gt; para así acceder a los elementos que nos interese.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[c &amp;gt; 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como no podía ser de otra manera, la concatenación de accesos está también permitida. En el caso de buscar el primer elemento estrictamente mayor que &lt;code&gt;16&lt;/code&gt; podríamos teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[c &amp;gt; 16][0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, en ocasiones resulta un tanto confusa esta forma de proceder, sobretodo si el número de dimensiones con las que trabajamos es considerable y concatenamos varios accesos de este estilo. Posiblemente facilita más la lectura del código escribir la anterior instrucción en dos líneas, de la siguiente manera:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = c[c &amp;gt; 16]

d[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, la pregunta lógica que podríamos plantearnos en este instante es, ¿conviene que declaremos un nuevo objeto, con todo el coste de almacenamiento que ello supone, simplemente por mejorar levemente la legibilidad de nuestros códigos? La respuesta, aunque pueda parecer sorprendente, es afirmativa, dado que, posiblemente, no estaremos creando un nuevo &lt;em&gt;array&lt;/em&gt; sino simplemente una nueva cabecera que apunta al &lt;em&gt;array&lt;/em&gt; del que estamos extrayendo datos.&lt;/p&gt;

&lt;p&gt;Sí, es un tanto confuso el final del anterior párrafo y, para añadir más complejidad al asunto si cabe, es una situación que conlleva ciertos efectos &amp;ldquo;curiosos&amp;rdquo; de los que hemos de ser conscientes para evitar &lt;em&gt;bugs&lt;/em&gt; de difícil detección (qué recuerdos de los tiempos de &lt;em&gt;punteros&lt;/em&gt; con el lenguaje de programación &lt;em&gt;C&lt;/em&gt;). Las líneas que figuran a continuación son dignas de una segunda parte para la sección del tutorial &amp;ldquo;¿Qué está pasando aquí? Primeras sorpresas que nos regala &lt;em&gt;Numpy&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Rescatemos el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y almacenemos en un nuevo objeto &lt;code&gt;d&lt;/code&gt; el resultado de cierta extracción de elementos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = c[:, 1:2, 1:3]

d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[ 5,  6]],

       [[17, 18]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora accedemos a cierta información de interés sobre el objeto &lt;code&gt;d&lt;/code&gt;, a partir de su atributo &lt;code&gt;flags&lt;/code&gt;, encontramos que:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : False
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El atributo &lt;code&gt;OWNDATA&lt;/code&gt; posee como valor &lt;code&gt;False&lt;/code&gt;, es decir, el &lt;em&gt;array&lt;/em&gt; no controla sus propios datos. Hemos generado un nuevo objeto, &lt;code&gt;d&lt;/code&gt;, pero no se ha llevado a cabo ninguna copia independiente de sus elementos en memoria, sino simplemente la creación de una cabecera con información que apunta hacia los elementos de interés del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; que nos permiten construir el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Esta forma de proceder es ciertamente eficiente, porque copiar datos en memoria es una operación costosa tanto en tiempo de ejecución como en espacio para almacenamiento. Sin embargo, conlleva aparejada la siguiente &amp;ldquo;curiosa&amp;rdquo; (y, por otra parte, muy lógica) situación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[0, 0, 0] = 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[1000,    6]],

       [[  17,   18]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[   0,    1,    2,    3],
        [   4, 1000,    6,    7],
        [   8,    9,   10,   11]],

       [[  12,   13,   14,   15],
        [  16,   17,   18,   19],
        [  20,   21,   22,   23]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cambios en el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;d&lt;/code&gt; afectan al &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; del cual se originó, por lo que se exige, como ya viene siendo habitual a estas alturas con la librería &lt;em&gt;NumPy&lt;/em&gt;, cierta cautela a la hora de llevar a cabo algunas operaciones.&lt;/p&gt;

&lt;p&gt;Sin embargo, si utilizamos las estrategias de &lt;em&gt;fancy indexing&lt;/em&gt;, esbozadas en la sección anterior, generalmente no encontraremos este tipo de situaciones. &lt;em&gt;NumPy&lt;/em&gt; tratará de, en un principio, resolver la situación creando únicamente una nueva cabecera, pero, de no ser posible (situación sumamente habitual), procederá a realizar una copia de los datos de interés.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = c[c &amp;gt; 16]

e
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1000,   17,   18,   19,   20,   21,   22,   23])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : True
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e[0] = 5

e
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 5, 17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[[   0,    1,    2,    3],
        [   4, 1000,    6,    7],
        [   8,    9,   10,   11]],

       [[  12,   13,   14,   15],
        [  16,   17,   18,   19],
        [  20,   21,   22,   23]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta situación también se presenta al emplear las funciones &lt;code&gt;reshape()&lt;/code&gt; o al trasponer un &lt;em&gt;array&lt;/em&gt;. En lugar de crear una nueva copia de los datos, únicamente se genera una cabecera en memoria que apunta a las direcciones adecuadas para componer los nuevos &lt;em&gt;arrays&lt;/em&gt;. Esto conlleva, por tanto, que apenas suponga coste alguno el utilizar este tipo de funciones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = np.array([[1, 2], [3, 4]])

f
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [3, 4]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = f.reshape(4, 1)

g
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1],
       [2],
       [3],
       [4]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : True
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;h = f.T

h
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 3],
       [2, 4]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;h.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : False
  F_CONTIGUOUS : True
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como colofón, si examinamos el atributo &lt;code&gt;.flags&lt;/code&gt; del propio objeto &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.flags
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Teniendo en cuenta que el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; no se ha generado a partir de un objeto distinto, ¿no debería poseer el atributo &lt;code&gt;OWNDATA&lt;/code&gt; el valor &lt;code&gt;True&lt;/code&gt;? La justificación reside en la expresión que hemos empleado para crear dicho &lt;em&gt;array&lt;/em&gt; y que, a estas alturas de la vida y del tutorial, posiblemente hayamos ya olvidado.&lt;/p&gt;

&lt;p&gt;Recordemos que habíamos tecleado &lt;code&gt;c = np.arange(24).reshape(2, 3, 4)&lt;/code&gt;, de manera que la función &lt;code&gt;arange()&lt;/code&gt; comienza creando una cabecera con la información del &lt;em&gt;array&lt;/em&gt; (del estilo &lt;code&gt;.ndim&lt;/code&gt; o &lt;code&gt;.shape&lt;/code&gt;), así como reservando cierto espacio en memoria para almacenar sus elementos. Después, la función &lt;code&gt;reshape()&lt;/code&gt; únicamente genera una nueva cabecera apuntando de manera adecuada a los mencionados elementos y es por ello que el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; no cree que sea el propietario de los datos que lo integran. No obstante, que el valor del atributo &lt;code&gt;OWNDATA&lt;/code&gt; sea &lt;code&gt;False&lt;/code&gt; indica que sus datos podrían o no ser manipulados desde otro objeto, pero no implica que necesariamente puedan serlo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; bidimensional &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(25).reshape(5, 5)

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se pide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[ 1,  7, 13, 19]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Extraer el &lt;em&gt;array&lt;/em&gt; compuesto por los números divisibles entre &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Soluciones&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, 2, 3], [1, 2, 3, 4]] # alternativa: a[np.arange(4), np.arange(4)+1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 1,  7, 13, 19])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolvamos el segundo apartado paso por paso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a % 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1, 2, 0, 1],
       [2, 0, 1, 2, 0],
       [1, 2, 0, 1, 2],
       [0, 1, 2, 0, 1],
       [2, 0, 1, 2, 0]], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a % 3 == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ True, False, False,  True, False],
       [False,  True, False, False,  True],
       [False, False,  True, False, False],
       [ True, False, False,  True, False],
       [False,  True, False, False,  True]], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[a % 3 == 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0,  3,  6,  9, 12, 15, 18, 21, 24])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-operaciones-con-arrays&#34;&gt;7. Operaciones con &lt;em&gt;arrays&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;En esta última sección del &lt;em&gt;notebook&lt;/em&gt; veremos dos tipos de operaciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;matemáticas: conservan la dimensión del &lt;em&gt;array&lt;/em&gt; (como, por ejemplo, la suma &lt;code&gt;+&lt;/code&gt;), y&lt;/li&gt;
&lt;li&gt;de reducción: disminuyen la dimensión del &lt;em&gt;array&lt;/em&gt; (como, por ejemplo, la media &lt;code&gt;mean()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las operaciones matemáticas entre &lt;em&gt;arrays&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; se suelen llevar a cabo elemento, por lo que debemos ser cautos con las dimensiones de los &lt;em&gt;arrays&lt;/em&gt; implicados en la operación, ya que en &lt;em&gt;NumPy&lt;/em&gt; no se produce ningún tipo de &amp;ldquo;reciclaje de &lt;em&gt;arrays&lt;/em&gt;&amp;rdquo; (como al que estamos habituados si utilizamos el lenguaje de programación &lt;em&gt;R&lt;/em&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  2,  4,  6,  8],
       [10, 12, 14, 16, 18],
       [20, 22, 24, 26, 28],
       [30, 32, 34, 36, 38],
       [40, 42, 44, 46, 48]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + np.arange(7)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-94-825c7dd057ef&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a + np.arange(7)

ValueError: operands could not be broadcast together with shapes (5,5) (7,) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estaremos en condiciones de llevar a cabo operaciones entre &lt;em&gt;arrays&lt;/em&gt; de distintas dimensiones siempre y cuando verifique las reglas de &lt;em&gt;broadcasting&lt;/em&gt;, que podemos consultar en la siguiente &lt;a href=&#34;https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&#34; target=&#34;_blank&#34;&gt;página&lt;/a&gt; de la documentación oficial. &lt;em&gt;Grosso modo&lt;/em&gt;, dos dimensiones son compatibles bien cuando son iguales, bien cuando una de ellas es &lt;code&gt;1&lt;/code&gt;, y el proceso de comparación se lleva a cabo de atrás hacia delante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + np.arange(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  2,  4,  6,  8],
       [ 5,  7,  9, 11, 13],
       [10, 12, 14, 16, 18],
       [15, 17, 19, 21, 23],
       [20, 22, 24, 26, 28]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(5, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(5).shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(5,)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a:                5 x 5
np.arange(5):         5
a + np.arange(5): 5 x 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esquema que, a primera vista, no parece satisfacer las reglas de &lt;em&gt;broadcasting&lt;/em&gt;, puesto que en la dimensión situada a la izquierda, tenemos un &lt;code&gt;5&lt;/code&gt; para el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, pero no hay elemento alguno para &lt;code&gt;np.arange(5)&lt;/code&gt;. No obstante, internamente, &lt;em&gt;NumPy&lt;/em&gt; aplica a &lt;code&gt;np.arange(5)&lt;/code&gt; un &lt;code&gt;reshape(1, 5)&lt;/code&gt; para poder llevar a cabo la suma, quedando ahora el esquema:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a:                             5 x 5
np.arange(5).reshape(1, 5):    1 x 5
a + np.arange(5).reshape(1,5): 5 x 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cumpliéndose así las mencionadas reglas.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a las operaciones de reducción, algunas de las más habituales vienen dadas a través de las funciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.sum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.std()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.var()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.min()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmin()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmax()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos algunos ejemplos de su aplicación a &lt;em&gt;arrays&lt;/em&gt; unidimensionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.flatten()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b.flatten())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;66
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(b.flatten())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(b.flatten())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b.flatten())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora bien, si trabajamos con la versión multidimensional del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt;, podemos aplicar las operaciones de reducción por dimensiones, utilizando el argumento &lt;code&gt;axis&lt;/code&gt;. En &lt;em&gt;arrays&lt;/em&gt; bidimensionales, vamos a estar fuertemente tentados a denominar estas operaciones bien con la coletilla &amp;ldquo;por columnas&amp;rdquo; (para &lt;code&gt;axis=0&lt;/code&gt;), bien &amp;ldquo;por filas&amp;rdquo; (para &lt;code&gt;axis=1&lt;/code&gt;), pero recordemos que tal nomenclatura se vuelve confusa cuando la dimensión del &lt;em&gt;array&lt;/em&gt; es estrictamente superior a &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b, axis=0) # reducción de la primera dimensión (suma por &amp;quot;columnas&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([18, 22, 26])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b, axis=1) # reducción de la segunda dimensión (suma por &amp;quot;filas&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 3, 12, 21, 30])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b, axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3, 3, 3], dtype=int64)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([2, 2, 2, 2], dtype=int64)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si aplicamos la función &lt;code&gt;argmax()&lt;/code&gt; directamente al array bidimensional &lt;code&gt;b&lt;/code&gt;, &lt;em&gt;NumPy&lt;/em&gt; actuará internamente como hicimos nosotros anteriormente, aplicando la función &lt;code&gt;flatten()&lt;/code&gt; para luego buscar en qué posición reside el elemento de mayor valor y devolver dicha posición. Esta información, en &lt;em&gt;arrays&lt;/em&gt; unidimensionales es bastante informativa, pero es complicada de interpretar en &lt;em&gt;arrays&lt;/em&gt; multidimensionales. Si deseamos acceder a los índices, para cada una de las dimensiones, donde se alcanza el mayor valor, podemos hacer uso de la función &lt;code&gt;unravel_index()&lt;/code&gt; de la siguiente manera:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.unravel_index(np.argmax(b), b.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, veamos cómo se propagan los elementos &lt;code&gt;nan&lt;/code&gt; al llevar a cabo operaciones matemáticas y de reducción:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = a.astype(&#39;float64&#39;)

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[2, 3] = np.nan

a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  nan,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  nan,  19.],
       [ 20.,  21.,  22.,  23.,  24.],
       [ 25.,  26.,  27.,  28.,  29.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;nan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a, axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 50.,  55.,  60.,  nan,  70.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([  10.,   35.,   nan,   85.,  110.])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En resumen, la librería &lt;em&gt;NumPy&lt;/em&gt; contiene un conjunto de herramientas más que recomendable para todas aquellas personas que en su día a día utilicen el lenguaje de programación &lt;em&gt;Python&lt;/em&gt; para llevar a cabo cualquier tipo de cálculo numérico. Un considerable incremento en la velocidad y una gestión de memoria más eficiente, cuya única contrapartida aparejada es requerir un buen entendimiento de las características del problema, así como de todas las implicaciones que los pasos para resolverlo conllevan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial sobre Machine Learning con Python</title>
      <link>https://imalexissaez.github.io/2018/08/16/tutorial-sobre-machine-learning-con-python/</link>
      <pubDate>Thu, 16 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/16/tutorial-sobre-machine-learning-con-python/</guid>
      <description>

&lt;p&gt;¿Te has quedado sin planes para el fin de semana? Aunque tu lista de tareas pendientes y, generalmente, poco atractivas parezca haber crecido de manera exponencial en los últimos tiempos, ¿el cuerpo te pide algo distinto?&lt;/p&gt;

&lt;p&gt;¿Qué tal invertir las próximas seis horas y media de tu vida disfrutando de un tutorial sobre &lt;em&gt;Machine Learning&lt;/em&gt; con &lt;em&gt;Python&lt;/em&gt;? Suena interesante, ¿verdad? Al menos es así en esta especie de universo paralelo donde parece que vivo últimamente.&lt;/p&gt;

&lt;p&gt;En la cuenta de &lt;em&gt;YouTube&lt;/em&gt; asociada a &lt;a href=&#34;https://www.youtube.com/user/EnthoughtMedia&#34; target=&#34;_blank&#34;&gt;Enthought&lt;/a&gt;, creadores de la conocida distribución &lt;em&gt;Canopy&lt;/em&gt; para &lt;em&gt;Python&lt;/em&gt;, ha aparecido recientemente una &lt;a href=&#34;https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&#34; target=&#34;_blank&#34;&gt;lista de reproducción&lt;/a&gt; que alberga los tutoriales y charlas correspondientes a la última convención &lt;em&gt;SciPy&lt;/em&gt;: &amp;ldquo;SciPy 2017: Scientific Computing with Python Conference&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Aquel al que hacía referencia en el primer párrafo estuvo dividido en dos sesiones, a las que podemos acceder directamente a través de los siguientes enlaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg&#34; target=&#34;_blank&#34;&gt;Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/WLYzSas511I&#34; target=&#34;_blank&#34;&gt;Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No obstante, antes de lanzarte de cabeza a su visualización, te recomendaría adoptases una actitud de aprendizaje activo para un mayor aprovechamiento. Es un tutorial bastante práctico, que se apoya en el uso de numerosos &lt;em&gt;Jupyter Notebooks&lt;/em&gt; que también tenemos a nuestra disposición sin coste alguno. ¿Por qué no experimentar personalmente con el código para así reforzar las ideas vertidas y el uso de distintos algoritmos?&lt;/p&gt;

&lt;p&gt;La única pega que presenta esta aproximación al tutorial reside en que nuestro equipo debe cumplir una serie de requisitos, que exploraremos rápidamente en la siguiente sección.&lt;/p&gt;

&lt;h2 id=&#34;instalación-de-las-herramientas-asociadas&#34;&gt;Instalación de las herramientas asociadas&lt;/h2&gt;

&lt;p&gt;En función de los distintos programas que ya estén instalados en nuestro sistema, el paseo por el siguiente listado nos llevará más o menos tiempo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Utilizando nuestro navegador favorito, dirijámonos en primer lugar al &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt;, que contiene los &lt;em&gt;notebooks&lt;/em&gt; asociados al tutorial.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Echemos un rápido vistazo a su archivo &lt;code&gt;README.md&lt;/code&gt;, que alberga información de interés sobre el mencionado tutorial, así como unas breves instrucciones para que configuremos nuestro equipo de manera adecuada y podamos utilizar el material disponible sin problema alguno.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clonemos o &amp;ldquo;forkeemos&amp;rdquo; (no hace falta que lo compruebes, ambos sabemos que esa aberración no va a estar registrada en el diccionario, pero si utilizas &lt;em&gt;git&lt;/em&gt; me habrás entendido) el propio repositorio. Si no tienes cuenta en &lt;em&gt;GitHub&lt;/em&gt; o, directamente, no estás entiendo nada de lo que llevo escrito en este punto, sitúate en la parte superior derecha de la página asociada al repositorio, haz clic sobre el botón &lt;code&gt;Clone or download&lt;/code&gt; y pulsa sobre el enlace &lt;code&gt;Download ZIP&lt;/code&gt;. Descargarás un archivo comprimido que contiene todo el material de este repositorio, de forma que podrás descomprimirlo en tu unidad de disco duro donde desees y trabajar desde dicha localización.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iniciemos &lt;em&gt;Jupyter Notebook&lt;/em&gt; y naveguemos por los directorios hasta alcanzar la ruta donde hayamos almacenado los materiales del repositorio. Si no dispones de esta aplicación en tu ordenador, una manera fácil de hacerte con ella, y a la vez con los módulos que se utilizarán a lo largo del tutorial, es descargar la distribución de &lt;em&gt;Python&lt;/em&gt; &lt;a href=&#34;https://www.anaconda.com/download/&#34; target=&#34;_blank&#34;&gt;Anaconda&lt;/a&gt; asociada a la versión 3.6 del mencionado lenguaje de programación. Por otro lado, si es la primera vez que escuchas hablar de &lt;em&gt;notebooks&lt;/em&gt; (en &lt;em&gt;R&lt;/em&gt; y &lt;em&gt;Python&lt;/em&gt; son muy populares hoy en día), te aconsejaría que previamente leyeses algún tutorial asociado a esta herramienta. &lt;a href=&#34;https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook#gs.uBagi2Q&#34; target=&#34;_blank&#34;&gt;Este&lt;/a&gt; es más que recomendable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;En la raíz del repositorio figura el &lt;em&gt;notebook&lt;/em&gt; &lt;code&gt;check_env.ipynb&lt;/code&gt;. Abrámoslo y ejecutemos la única celda que lo compone, que es un bloque de código que comprueba si nuestro sistema cumple los requisitos necesarios para seguir sin problemas el tutorial. En el caso de que alguna de las líneas de la salida asociadas a los diversos módulos no esté precedida por un &lt;code&gt;[OK]&lt;/code&gt;, tendremos que actualizar manualmente la versión del paquete correspondiente.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Opcionalmente, podemos descargar los conjuntos de datos asociados al tutorial (acción recomendable si en algunos momentos vamos a depender de redes wifi para trabajar con el material) sin más que teclear &lt;code&gt;python fetch_data.py&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;notebooks&#34;&gt;Notebooks&lt;/h2&gt;

&lt;p&gt;En mi opinión, si tenemos un mínimo conocimiento de &lt;em&gt;Python&lt;/em&gt; y &lt;em&gt;Machine Learning&lt;/em&gt;, una buena manera de abordar el tutorial en sí consistiría en llevar a cabo una lectura previa del &lt;em&gt;notebook&lt;/em&gt; que nos interese (experimentación con el código incluida), para luego visualizar la parte de la grabación del tutorial donde se desarrolla ese contenido en particular. Finalmente, con la explicación todavía fresca en nuestras cabezas, podríamos reforzar el contenido leyendo de nuevo el &lt;em&gt;notebook&lt;/em&gt; concreto. No obstante, si no cumples el primer requisito comentado, directamente te aconsejaría empezar con la grabación e ir revisando posteriormente cada &lt;em&gt;notebook&lt;/em&gt; a medida que se vayan abordando durante el vídeo.&lt;/p&gt;

&lt;p&gt;A poco que eches un vistazo por encima al material disponible, comprobarás que hay una cantidad más que considerable. Tanto que fue imposible abarcar los 23 &lt;em&gt;notebooks&lt;/em&gt; durante las dos sesiones que se llevaron a cabo y, en algunos casos, ciertos temas fueron expuestos de manera bastante tangencial. Es por ello que vuelvo a recomendar no limitarse únicamente a disfrutar de la grabación, sino invertir también cierto tiempo en la lectura de los cuadernos, así como en la experimentación con ellos (realización de ejercicios incluida).&lt;/p&gt;

&lt;p&gt;Sin más preámbulos, a continuación, podemos acceder al listado completo de los &lt;em&gt;notebooks&lt;/em&gt; disponibles, junto con sus respectivos enlaces tanto a &lt;em&gt;GitHub&lt;/em&gt; como al instante en el que comienza su desarrollo en el vídeo de &lt;em&gt;YouTube&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;Introduction to machine learning with sample applications, Supervised and Unsupervised learning&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/01.Introduction_to_Machine_Learning.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2m11s&#34; target=&#34;_blank&#34;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Scientific Computing Tools for Python: NumPy, SciPy, and matplotlib&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/02.Scientific_Computing_Tools_in_Python.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=20m40s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Data formats, preparation, and representation&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/03.Data_Representation_for_Machine_Learning.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=27m11s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Training and test data&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/04.Training_and_Testing_Data.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=46m55s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Estimators for classification&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/05.Supervised_Learning-Classification.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h6m52s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Estimators for regression analysis&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/06.Supervised_Learning-Regression.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h37m43s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Unsupervised learning: Unsupervised Transformers&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/07.Unsupervised_Learning-Transformations_and_Dimensionality_Reduction.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h52m51s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Unsupervised learning: Clustering&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/08.Unsupervised_Learning-Clustering.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h20m25s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;The scikit-learn estimator interface&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/09.Review_of_Scikit-learn_API.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h41m6s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Preparing a real-world dataset (titanic)&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/10.Case_Study-Titanic_Survival.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h46m2s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Working with text data via the bag-of-words model&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/11.Text_Feature_Extraction.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=25s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Case Study - Text classification for SMS spam detection&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/12.Case_Study-SMS_Spam_Detection.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=19m47s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Cross-Validation&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/13.Cross_Validation.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=37m9s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Model complexity and grid search for adjusting hyperparameters&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/14.Model_Complexity_and_GridSearchCV.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=52m6s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Scikit-learn Pipelines&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/15.Pipelining_Estimators.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Performance metrics for classification&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/16.Performance_metrics_and_Model_Evaluation.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=1h14m58s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Linear Models&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/17.In_Depth-Linear_Models.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=1h32m36s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Decision trees and random forests, and ensemble methods&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/18.In_Depth-Trees_and_Forests.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h39s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: feature selection&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/19.Feature_Selection.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. Por falta de tiempo, se excluyó de la sesión.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Unsupervised learning: Hierarchical and density-based clustering algorithms&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/20.Unsupervised_learning-Hierarchical_and_density-based_clustering_algorithms.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h56m6s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Unsupervised learning: Non-linear dimensionality reduction&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/21.Unsupervised_learning-Non-linear_dimensionality_reduction.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Unsupervised learning: Anomaly Detection&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/22.Unsupervised_learning-anomaly_detection.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h21m38s&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Supervised learning: Out-of-core learning&amp;rdquo;. &lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/23.Out-of-core_Learning_Large_Scale_Text_Classification.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;enlaces-de-utilidad-asociados-al-tutorial&#34;&gt;Enlaces de utilidad asociados al tutorial&lt;/h2&gt;

&lt;p&gt;Recojo, a continuación, algunos enlaces, que han surgido a lo largo del artículo, relacionados con el tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg&#34; target=&#34;_blank&#34;&gt;Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/WLYzSas511I&#34; target=&#34;_blank&#34;&gt;Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn&#34; target=&#34;_blank&#34;&gt;Repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt; asociado al tutorial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anaconda.com/download/&#34; target=&#34;_blank&#34;&gt;Anaconda&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook#gs.y34eIOY&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook Tutorial: The Definitive Guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Breve introducción a la librería readr</title>
      <link>https://imalexissaez.github.io/2018/08/14/breve-introduccion-a-la-libreria-readr/</link>
      <pubDate>Tue, 14 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/14/breve-introduccion-a-la-libreria-readr/</guid>
      <description>

&lt;p&gt;En este artículo exploraremos las posibilidades que nos ofrece una librería de &lt;em&gt;R&lt;/em&gt;, &lt;em&gt;readr&lt;/em&gt;, integrante del famoso &lt;em&gt;tidyverso&lt;/em&gt;, de cara a la importación y exportación de nuestros conjuntos de datos.&lt;/p&gt;

&lt;p&gt;No me ha disgustado, en absoluto, el sistema que caracteriza los cursos de la plataforma &lt;a href=&#34;https://www.datacamp.com/home&#34; target=&#34;_blank&#34;&gt;DataCamp&lt;/a&gt;. Píldoras condensadas de teoría acompañadas, de inmediato, por ejercicios para su aplicación directa, ofreciendo así un enfoque para el aprendizaje bastante práctico y ameno. He tomado algunas notas personales para el curso abierto, que en el portal aparece, relativo a la librería &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/index.html&#34; target=&#34;_blank&#34;&gt;readr&lt;/a&gt;: &amp;ldquo;&lt;em&gt;Reading Data into R with readr&lt;/em&gt;&amp;rdquo;, al que podemos acceder a través del &lt;a href=&#34;https://www.datacamp.com/community/open-courses/reading-data-into-r-with-readr#gs.tdqZLKQ&#34; target=&#34;_blank&#34;&gt;siguiente enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El material está desglosado en dos capítulos. En el primero de ellos, aprenderemos diversas funciones, contenidas en este paquete, que facilitarán enormemente la labor de importar datos utilizando el lenguaje de programación &lt;em&gt;R&lt;/em&gt;. En el segundo, el objetivo será utilizar las herramientas que la librería pone a nuestra disposición para analizar y convertir las clases que poseen las columnas del conjunto de datos recién importado.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;readr&lt;/em&gt; es una componente del denominado &lt;em&gt;tidyverso&lt;/em&gt; (&lt;em&gt;tidyverse&lt;/em&gt; en inglés, que parece que siempre suena mejor), un conjunto de librerías que todo usuario de &lt;em&gt;R&lt;/em&gt; debería si no dominar, al menos conocer, para así resolver ciertas situaciones de la manera más sencilla posible (basta imaginar tener que hacer a mano algunas de las tareas que paquetes como &lt;em&gt;dplyr&lt;/em&gt; o &lt;em&gt;tidyr&lt;/em&gt; llevan a cabo para darse cuenta de este hecho).&lt;/p&gt;

&lt;h2 id=&#34;1-importando-datos-con-readr&#34;&gt;1. Importando datos con &lt;em&gt;readr&lt;/em&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-archivos-csv&#34;&gt;1.1. Archivos &lt;code&gt;.csv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A la hora de importar conjuntos de datos en &lt;em&gt;R&lt;/em&gt;, uno de los formatos más habituales en los que hallamos información es en archivos separados por comas (&lt;em&gt;comma separated values&lt;/em&gt;), cuya extensión suele ser &lt;code&gt;.csv&lt;/code&gt;. En ellos encontramos múltiples líneas que recogen la tabla de interés, y en las cuales los valores aparecen, de manera consecutiva, separados por el carácter &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para importar este tipo de ficheros en nuestra sesión de &lt;em&gt;R&lt;/em&gt;, utilizaremos la función &lt;code&gt;read_csv()&lt;/code&gt;. Para acceder a su documentación, en primer lugar, cargaremos la librería &lt;em&gt;readr&lt;/em&gt; (o la instalaremos si todavía no lo hemos hecho).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(!require(readr)) {install.packages(&amp;quot;readr&amp;quot;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Loading required package: readr
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El único argumento que hemos de pasar a esta función, de manera obligatoria, es &lt;code&gt;file&lt;/code&gt;, el nombre del archivo que pretendemos importar (o bien la ruta completa donde éste se encuentra). El resto son opcionales, y deberían resultarnos familiares la mayoría de ellos si hemos trabajado alguna vez con funciones del tipo &lt;code&gt;read.table()&lt;/code&gt; o &lt;code&gt;read.csv()&lt;/code&gt;. Algunas de las ventajas que utilizar &lt;code&gt;read_csv()&lt;/code&gt; ofrece son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No convierte, automáticamente, las columnas con cadenas de caracteres a factores, como sí hacen por defecto las otras funciones referidas en el párrafo anterior.&lt;/li&gt;
&lt;li&gt;Reconoce ocho clases diferentes de datos (&lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;logical&lt;/code&gt;, etc.), dejando el resto como cadenas de caracteres.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pongamos a prueba su uso importando un conjunto de datos que contiene tanto los pesos, como el tipo de alimentación, de 71 pollos. El archivo de interés es &lt;code&gt;chickwts.csv&lt;/code&gt;, por lo que empezaremos especificando la ruta para acceder a él en el argumento &lt;code&gt;file&lt;/code&gt;. Como en el segundo capítulo llevaremos a cabo algunas acciones sobre los conjuntos de datos que aparecerán en esta sección, todos los ficheros que importemos los almacenaremos en objetos dentro de &lt;em&gt;R&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts &amp;lt;- read_csv(file = &amp;quot;datasets/chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es interesante el mensaje que aparece en la consola al ejecutar la anterior instrucción, ya que nos informa el resultado del análisis, que la función realiza, para inferir las clases de cada una de las columnas que componen la tabla. Echemos un vistazo al contenido del archivo que acabamos de importar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight      feed
##    &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1    179 horsebean
## 2    160 horsebean
## 3    136 horsebean
## 4    227 horsebean
## 5    217 horsebean
## 6    168 horsebean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    71 obs. of  2 variables:
##  $ weight: int  179 160 136 227 217 168 108 124 143 140 ...
##  $ feed  : chr  &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A primera vista, la columna &lt;code&gt;feed&lt;/code&gt; posiblemente estaría mejor codificada bajo la clase &lt;code&gt;factor&lt;/code&gt; (aunque esto siempre va a depender de nuestros intereses y el uso que tengamos en mente para esta variable). No obstante, recordemos que éste no es el comportamiento que por defecto incorpora la función &lt;code&gt;read_csv()&lt;/code&gt; (aunque después veremos cómo declarar con antelación las clases para las columnas de un archivo y posibilitar su lectura como factores).&lt;/p&gt;

&lt;p&gt;Utilicemos de nuevo esta función con otro conjunto de datos, &lt;code&gt;chickwts2.csv&lt;/code&gt; (más información relativa al peso y tipo de alimentación de 18 pollos distintos), que usaremos más adelante en este capítulo, cuando lleguemos al apartado de exportar tablas a ficheros.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts2 &amp;lt;- read_csv(&amp;quot;datasets/chickwts2.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight  feed
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1    309  corn
## 2    229  corn
## 3    213  corn
## 4    257  corn
## 5    244  corn
## 6    271  corn
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    18 obs. of  2 variables:
##  $ weight: int  309 229 213 257 244 271 243 248 257 303 ...
##  $ feed  : chr  &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-archivos-tsv&#34;&gt;1.2. Archivos &lt;code&gt;.tsv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;La librería &lt;em&gt;readr&lt;/em&gt; posee también una función específica para la lectura de los archivos separados por tabulaciones, cuya extensión suele ser &lt;code&gt;.tsv&lt;/code&gt; (aunque personalmente también he visto alguno que utiliza &lt;code&gt;.tab&lt;/code&gt;). Se trata de &lt;code&gt;read_tsv()&lt;/code&gt; y si accedemos a su documentación comprobaremos que su uso es exactamente idéntico al de la función que exploramos en la sección anterior.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_tsv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Investiguemos alguno de los argumentos que podemos declarar, de manera opcional, en esta función (y, por tanto, lo que aprendamos será de utilidad también de cara al uso de &lt;code&gt;read_csv()&lt;/code&gt;). Por ejemplo, para controlar el nombre de las columnas de la tabla que deseamos importar, el argumento &lt;code&gt;col_names&lt;/code&gt; es el indicado, y puede tomar los siguientes valores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TRUE&lt;/code&gt;: utiliza la información disponible en la primera línea del archivo para declarar los nombres de las columnas, no incluyéndolos por tanto en el interior de la propia tabla.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FALSE&lt;/code&gt;: genera, de manera automática, los clásicos nombres &lt;code&gt;X1&lt;/code&gt;, &lt;code&gt;X2&lt;/code&gt;, &lt;code&gt;X3&lt;/code&gt;, etc., para las columnas, y empieza a incluir la información en la tabla desde la primera fila.&lt;/li&gt;
&lt;li&gt;La última opción disponible es utilizar un vector que contenga los nombres de las columnas, y, como antes, desde la primera fila se insertarán los datos en el interior de la tabla.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por ejemplo, importemos a continuación el fichero &lt;code&gt;salaries.tsv&lt;/code&gt;. Si abrimos el archivo con un editor de texto plano cualquiera, comprobaremos que la primera línea no contiene los respectivos nombres para cada una de las columnas, y dado que no conocemos de antemano qué declara cada una, usar el argumento &lt;code&gt;col_names = FALSE&lt;/code&gt; parece la opción más adecuada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries &amp;lt;- read_tsv(&amp;quot;datasets/Salaries.tsv&amp;quot;, col_names = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_integer(),
##   X4 = col_integer(),
##   X5 = col_character(),
##   X6 = col_integer()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 6
##          X1    X2    X3    X4    X5     X6
##       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof     B    19    18  Male 139750
## 2      Prof     B    20    16  Male 173200
## 3  AsstProf     B     4     3  Male  79750
## 4      Prof     B    45    39  Male 115000
## 5      Prof     B    40    41  Male 141500
## 6 AssocProf     B     6     6  Male  97000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  6 variables:
##  $ X1: chr  &amp;quot;Prof&amp;quot; &amp;quot;Prof&amp;quot; &amp;quot;AsstProf&amp;quot; &amp;quot;Prof&amp;quot; ...
##  $ X2: chr  &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; ...
##  $ X3: int  19 20 4 45 40 6 30 45 21 18 ...
##  $ X4: int  18 16 3 39 41 6 23 45 20 18 ...
##  $ X5: chr  &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la llamada a la función &lt;code&gt;read_tsv()&lt;/code&gt;, hemos recibido por consola el siguiente mensaje:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_integer(),
  X4 = col_integer(),
  X5 = col_character(),
  X6 = col_integer()
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como ya comentábamos en la sección anterior, esta información nos indica la clase que la función &lt;code&gt;read_tsv()&lt;/code&gt; ha inferido para todas y cada una de las columnas contenidas en el archivo. De hecho, este comportamiento no se restringe únicamente a las funciones &lt;code&gt;read_csv()&lt;/code&gt; y &lt;code&gt;read_tsv()&lt;/code&gt;, sino a todas las implementadas en la librería &lt;em&gt;readr&lt;/em&gt; cuya empresa es, precisamente, la lectura de ficheros de datos.&lt;/p&gt;

&lt;p&gt;A través del argumento &lt;code&gt;col_types&lt;/code&gt; tenemos cierto control sobre la declaración de la clase de las columnas, utilizando funciones predefinidas del estilo &lt;code&gt;col_*()&lt;/code&gt; (como &lt;code&gt;col_integer()&lt;/code&gt;, &lt;code&gt;col_character()&lt;/code&gt;, etc.). La forma de usar este argumento es muy sencilla: simplemente tenemos que escribir &lt;code&gt;col_types = cols()&lt;/code&gt; e incluir en el interior de &lt;code&gt;cols()&lt;/code&gt; los nombres de las columnas y la clase que deseamos posean (siguiendo el estilo de, por ejemplo, el mensaje por consola que mostrábamos arriba).&lt;/p&gt;

&lt;p&gt;Una función que nos puede interesar, en este momento, es &lt;code&gt;col_skip()&lt;/code&gt;, que le indica a &lt;em&gt;R&lt;/em&gt; que omita una determinada columna a la hora de importar la información de un archivo de datos. Veamos su uso con más detalle a través de un ejemplo. Supongamos que sólo estamos interesados en las columnas primera, quinta y sexta del anterior fichero de datos. Así pues, no tendríamos más que escribir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries &amp;lt;- read_tsv(&amp;quot;datasets/Salaries.tsv&amp;quot;, col_names = FALSE,
                     col_types = cols(
                         X2 = col_skip(),
                         X3 = col_skip(), 
                         X4 = col_skip()
                     ))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##          X1    X5     X6
##       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof  Male 139750
## 2      Prof  Male 173200
## 3  AsstProf  Male  79750
## 4      Prof  Male 115000
## 5      Prof  Male 141500
## 6 AssocProf  Male  97000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  3 variables:
##  $ X1: chr  &amp;quot;Prof&amp;quot; &amp;quot;Prof&amp;quot; &amp;quot;AsstProf&amp;quot; &amp;quot;Prof&amp;quot; ...
##  $ X5: chr  &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-archivos-csv-formato-europeo&#34;&gt;1.3. Archivos &lt;code&gt;.csv&lt;/code&gt; (formato europeo)&lt;/h3&gt;

&lt;p&gt;En muchos países de este continente, usamos la coma como separador decimal, de manera que los archivos separados por comas, en realidad, terminan siendo separados por el símbolo &lt;code&gt;;&lt;/code&gt; (punto y coma). Por curiosidad, puedes probar a crear una tabla sencilla en, por ejemplo, &lt;em&gt;Excel&lt;/em&gt; y exportarla como archivo separado por comas, para luego abrir el archivo con un editor de texto plano y verificar que, efectivamente, los valores están separados por &lt;code&gt;;&lt;/code&gt; (en realidad este comportamiento se puede modificar desde las opciones de formato del sistema operativo, pero no entraremos en ese tipo de detalles).&lt;/p&gt;

&lt;p&gt;En previsión de esta particularidad, la librería &lt;em&gt;readr&lt;/em&gt; pone a nuestra disposición la función &lt;code&gt;read_csv2()&lt;/code&gt;, que identifica el símbolo &lt;code&gt;;&lt;/code&gt; como separador de valores, mientras que &lt;code&gt;,&lt;/code&gt; queda como separador decimal. Obviando esta salvedad, su uso es idéntico al de las funciones presentadas en los anteriores apartados.&lt;/p&gt;

&lt;p&gt;Tomemos ahora el archivo &lt;code&gt;trees.csv&lt;/code&gt; (que contiene información sobre la circunferencia, la altura y el volumen de cerezos negros), el cual viene dado en el formato al que nos estamos refiriendo aquí, e importémoslo directamente con la función &lt;code&gt;read_csv()&lt;/code&gt;, en lugar de con &lt;code&gt;read_csv2()&lt;/code&gt;, para ver qué sucede.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees_wrong &amp;lt;- read_csv(&amp;quot;datasets/trees.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   `Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume` = col_character()
## )

## Warning: 30 parsing failures.
## row col  expected    actual
##   1  -- 1 columns 3 columns
##   2  -- 1 columns 3 columns
##   3  -- 1 columns 3 columns
##   4  -- 1 columns 3 columns
##   5  -- 1 columns 3 columns
## ... ... ......... .........
## See problems(...) for more details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En favor de la función &lt;code&gt;read_csv()&lt;/code&gt; hay que decir que, al menos, nos indica la existencia de ciertos problemas, o situaciones inesperadas, durante la importación del archivo. De todas formas, podemos observar cómo ha procedido a generar una tabla con una única columna, en lugar de las correspondientes tres que hubiese sido lo adecuado en esta ocasión. Comprobemos qué contiene el objeto &lt;code&gt;trees_wrong&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 31  1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 1
##   `Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume`
##                       &amp;lt;chr&amp;gt;
## 1                         8
## 2                         8
## 3                         8
## 4                        10
## 5                        10
## 6                        10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  1 variable:
##  $ Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume: chr  &amp;quot;8&amp;quot; &amp;quot;8&amp;quot; &amp;quot;8&amp;quot; &amp;quot;10&amp;quot; ...
##  - attr(*, &amp;quot;problems&amp;quot;)=Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 30 obs. of  4 variables:
##   ..$ row     : int  1 2 3 4 5 6 7 8 9 10 ...
##   ..$ col     : chr  NA NA NA NA ...
##   ..$ expected: chr  &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; ...
##   ..$ actual  : chr  &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 1
##   .. ..$ Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos ahora el resultado que obtenemos al utilizar la función &lt;code&gt;read_csv2()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees &amp;lt;- read_csv2(&amp;quot;datasets/trees.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Girth = col_double(),
##   Height = col_integer(),
##   Volume = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(trees)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 31  3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(trees)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##   Girth Height Volume
##   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
## 1   8.3     70   10.3
## 2   8.6     65   10.3
## 3   8.8     63   10.2
## 4  10.5     72   16.4
## 5  10.7     81   18.8
## 6  10.8     83   19.7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  3 variables:
##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...
##  $ Height: int  70 65 63 72 81 83 66 75 80 75 ...
##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ Girth : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Height: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-4-archivos-con-ancho-de-columna-fijo&#34;&gt;1.4. Archivos con ancho de columna fijo&lt;/h3&gt;

&lt;p&gt;En ocasiones, el formato en el que encontramos los archivos de datos es similar al mostrado en &lt;em&gt;R&lt;/em&gt; a la hora de imprimir en consola un &lt;code&gt;data.frame&lt;/code&gt;. Es decir, cada columna posee un total de caracteres fijos y éstas se separan usando espacios en blanco (que también se utilizan para rellenar aquellos valores cuya longitud es menor que la correspondiente a su columna).&lt;/p&gt;

&lt;p&gt;El archivo &lt;code&gt;names.txt&lt;/code&gt; constituye un ejemplo de lo comentado en el párrafo anterior. En su interior encontramos los nombres de ciertos personajes famosos, el estado donde supuestamente residen y, como no podía ser de otra manera, sus falsos números de teléfono.&lt;/p&gt;

&lt;p&gt;La función adecuada para lidiar con estos casos es &lt;code&gt;read_table()&lt;/code&gt;, cuya documentación ofrece un listado de argumentos bastante familiares a estas alturas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Importemos pues el fichero &lt;code&gt;names.txt&lt;/code&gt;, declarando adecuadamente los nombres para las columnas utilizando el parámetro &lt;code&gt;col_names&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names &amp;lt;- read_table(&amp;quot;datasets/names.txt&amp;quot;,
                    col_names = c(&amp;quot;name&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;phone&amp;quot;))

names                   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##                  name        state        phone
##                 &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;
## 1       Oprah Winfrey         null 800-555-4111
## 2         Walt Disney      Florida 407-555-4341
## 3       Michael Scott Pennsylvania 570-555-2301
## 4        Cosmo Kramer     New York 212-555-9337
## 5 Rutherford B. Hayes         Ohio 220-555-1388
## 6   Chester A. Arthur      Vermont 802-555-8383
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(names)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    6 obs. of  3 variables:
##  $ name : chr  &amp;quot;Oprah Winfrey&amp;quot; &amp;quot;Walt Disney&amp;quot; &amp;quot;Michael Scott&amp;quot; &amp;quot;Cosmo Kramer&amp;quot; ...
##  $ state: chr  &amp;quot;null&amp;quot; &amp;quot;Florida&amp;quot; &amp;quot;Pennsylvania&amp;quot; &amp;quot;New York&amp;quot; ...
##  $ phone: chr  &amp;quot;800-555-4111&amp;quot; &amp;quot;407-555-4341&amp;quot; &amp;quot;570-555-2301&amp;quot; &amp;quot;212-555-9337&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ name : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ state: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ phone: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aprovechemos este particular ejemplo para ilustrar el tratamiento de los valores perdidos con las funciones de la librería &lt;em&gt;readr&lt;/em&gt; dedicadas a importar archivos de datos. Por defecto, sólo se reconoce &lt;code&gt;NA&lt;/code&gt; como valor perdido, pero, en esta ocasión, si nos fijamos en la primera fila de la tabla, han optado por usar &lt;code&gt;null&lt;/code&gt; para registrar la ausencia de información para ciertos atributos concretos.&lt;/p&gt;

&lt;p&gt;No supone esto demasiado inconveniente, puesto que utilizando el parámetro &lt;code&gt;na&lt;/code&gt; podemos declarar, mediante un vector, qué cadenas de texto deben ser consideradas como valores perdidos (y automáticamente pasarán a ser &lt;code&gt;NA&lt;/code&gt; en el objeto que creemos en &lt;em&gt;R&lt;/em&gt;). Por defecto, &lt;code&gt;na = &amp;quot;NA&amp;quot;&lt;/code&gt;, de manera que simplemente tenemos que declarar &lt;code&gt;na = c(&amp;quot;NA&amp;quot;, &amp;quot;null&amp;quot;)&lt;/code&gt; en nuestro caso.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names2 &amp;lt;- read_table(&amp;quot;datasets/names.txt&amp;quot;, 
                     col_names = c(&amp;quot;name&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;phone&amp;quot;),
                     na = c(&amp;quot;NA&amp;quot;, &amp;quot;null&amp;quot;))
head(names2)                     
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##                  name        state        phone
##                 &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;
## 1       Oprah Winfrey         &amp;lt;NA&amp;gt; 800-555-4111
## 2         Walt Disney      Florida 407-555-4341
## 3       Michael Scott Pennsylvania 570-555-2301
## 4        Cosmo Kramer     New York 212-555-9337
## 5 Rutherford B. Hayes         Ohio 220-555-1388
## 6   Chester A. Arthur      Vermont 802-555-8383
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-5-archivos-de-texto&#34;&gt;1.5. Archivos de texto&lt;/h3&gt;

&lt;p&gt;Es posible que nuestro interés no se centre tanto en examinar tablas de datos, como texto propiamente dicho, sobretodo ahora que tan de moda está el análisis de sentimiento (para estudiar opiniones, discursos, etc.). La librería &lt;em&gt;readr&lt;/em&gt; pone a nuestra disposición un par de funciones que nos serán útiles en estos casos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_lines()&lt;/code&gt;: devuelve un vector de cadenas de texto, donde cada elemento recoge una línea del archivo de datos original.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_file()&lt;/code&gt;: devuelve un vector de dimensión unitaria que contiene el texto completo del archivo de datos original, y donde los saltos de línea se representan utilizando &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el fichero &lt;code&gt;tweets.txt&lt;/code&gt; encontramos algunos &lt;em&gt;tuits&lt;/em&gt; correspondientes a la cuenta &lt;code&gt;@RealCarrotFacts&lt;/code&gt; (puedes comprobar que, efectivamente, existe dicha cuenta y que es un tanto curiosa). Procedamos a importar su contenido utilizando ambas funciones, para así apreciar de manera práctica la diferencia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tweets &amp;lt;- read_lines(&amp;quot;datasets/tweets.txt&amp;quot;)
tweets
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;carrots  can be eat by most people&amp;quot;                                                                                          
## [2] &amp;quot;On predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and cruncy - he was america&#39;s carrot&amp;quot;
## [3] &amp;quot;knock knoc who is there? yup: carosot   ( joke )&amp;quot;                                                                            
## [4] &amp;quot;it is 2016 time for a carot emoji   please!&amp;quot;                                                                                 
## [5] &amp;quot;when life give you lemnos ,  have a carrot&amp;quot;                                                                                  
## [6] &amp;quot;If you squent your eyes real hard a football  look like  a dry brown carrot   Honestly&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(tweets)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  chr [1:6] &amp;quot;carrots  can be eat by most people&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tweets_all &amp;lt;- read_file(&amp;quot;datasets/tweets.txt&amp;quot;)
tweets_all
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;carrots  can be eat by most people\nOn predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and cruncy - he was america&#39;s carrot\nknock knoc who is there? yup: carosot   ( joke )\nit is 2016 time for a carot emoji   please!\nwhen life give you lemnos ,  have a carrot\nIf you squent your eyes real hard a football  look like  a dry brown carrot   Honestly&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(tweets_all)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  chr &amp;quot;carrots  can be eat by most people\nOn predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and&amp;quot;| __truncated__
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-6-escribiendo-archivos-csv-y-tsv&#34;&gt;1.6. Escribiendo archivos &lt;code&gt;.csv&lt;/code&gt; y &lt;code&gt;.tsv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Una vez hemos importado nuestro conjunto de datos de interés, y realizamos sobre él ciertas manipulaciones, es bastante probable que deseemos almacenar el resultado en un archivo para su posterior uso y disfrute. La librería &lt;em&gt;readr&lt;/em&gt; contiene varias funciones del estilo &lt;code&gt;write_*()&lt;/code&gt; (por ejemplo, &lt;code&gt;write_csv()&lt;/code&gt; o &lt;code&gt;write_tsv()&lt;/code&gt;) orientadas a satisfacer esta necesidad, y que se caracterizan por un par de detalles realmente interesantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A diferencia de funciones como &lt;code&gt;write.csv()&lt;/code&gt;, no añaden por defecto los números (o nombres) de las filas al archivo exportado, lo cual suele ser el comportamiento deseado en la mayoría de ocasiones.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;col_names&lt;/code&gt; adopta como valor el contrario al que posee &lt;code&gt;append&lt;/code&gt;, manera de actuar que tiene todo el sentido del mundo. Si decidimos continuar añadiendo datos a un archivo que previamente hemos exportado, declararemos &lt;code&gt;append = TRUE&lt;/code&gt; y, por tanto, no aparecerán de nuevo, y en mitad del fichero, los nombres de las columnas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos este último punto con mayor detalle a través de un ejemplo. En primer lugar, exportaremos a un archivo separado por comas el objeto &lt;code&gt;cwts&lt;/code&gt; que generamos en una sección anterior. A Continuación, añadiremos al mencionado archivo el contenido del objeto &lt;code&gt;cwts2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write_csv(cwts, &amp;quot;chickwts.csv&amp;quot;)

write_csv(cwts2, &amp;quot;chickwts.csv&amp;quot;, append=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Procedamos ahora a importar el fichero recién generado y examinémoslo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts3 &amp;lt;- read_csv(&amp;quot;chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight      feed
##    &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1    179 horsebean
## 2    160 horsebean
## 3    136 horsebean
## 4    227 horsebean
## 5    217 horsebean
## 6    168 horsebean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    89 obs. of  2 variables:
##  $ weight: int  179 160 136 227 217 168 108 124 143 140 ...
##  $ feed  : chr  &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-7-escribiendo-archivos-rds&#34;&gt;1.7. Escribiendo archivos &lt;code&gt;.rds&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Es posible que estemos interesados en exportar no solamente los valores de una tabla, sino ciertos &lt;em&gt;metadatos&lt;/em&gt; asociados a ella, como pueden ser, por ejemplo, las clases de las diferentes columnas que la compongan. No es fácil incorporar este tipo de información a un archivo separado por comas o tabulaciones, por lo que la librería &lt;em&gt;readr&lt;/em&gt; nos ofrece la posibilidad de exportar un objeto completo de &lt;em&gt;R&lt;/em&gt; a través de la función &lt;code&gt;write_rds()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?write_rds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La mencionada función no es más que un &lt;em&gt;wrapper&lt;/em&gt; (desconozco la traducción a español de este término) de la función &lt;code&gt;saveRDS()&lt;/code&gt;, con la única particularidad de que, por defecto, no comprime el archivo resultante (aunque este comportamiento se puede definir a través del parámetro &lt;code&gt;compress&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ilustremos su aplicación mediante un ejemplo. Exportaremos el objeto &lt;code&gt;trees&lt;/code&gt; que generamos en una sección anterior utilizando la función &lt;code&gt;write_rds()&lt;/code&gt;, para a continuación importarlo inmediatamente con &lt;code&gt;read_rds()&lt;/code&gt; y asignarlo a &lt;code&gt;trees2&lt;/code&gt;. Finalmente, compararemos si ambos objetos son idénticos, empleando para ello la función &lt;code&gt;identical()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write_rds(trees, &amp;quot;trees.rds&amp;quot;)

trees2 &amp;lt;- read_rds(&amp;quot;trees.rds&amp;quot;)

identical(trees, trees2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-analizando-datos-con-readr&#34;&gt;2. Analizando datos con readr&lt;/h2&gt;

&lt;h3 id=&#34;2-1-modificando-la-clase-de-las-columnas&#34;&gt;2.1. Modificando la clase de las columnas&lt;/h3&gt;

&lt;p&gt;Aunque las funciones para importar archivos de datos que pone a nuestra disposición la librería &lt;em&gt;readr&lt;/em&gt;, realizan una labor estupenda a la hora de inferir la clase de cada una de las columnas que componen una tabla, su comportamiento dista de ser perfecto. Esto se traducirá, seguramente, en la necesidad de llevar a cabo ciertas modificaciones, sobre las mencionadas clases, para algunos casos concretos.&lt;/p&gt;

&lt;p&gt;Para ello, la función adecuada a utilizar es &lt;code&gt;type_convert()&lt;/code&gt;, que incorpora el conocido argumento &lt;code&gt;col_types&lt;/code&gt; en su llamada. Ilustremos su uso y aprovechemos, además, para emplear la notación abreviada para los tipos de datos que &lt;strong&gt;readr&lt;/strong&gt; ofrece. Tomaremos el objeto &lt;code&gt;trees&lt;/code&gt; y declararemos todas sus columnas de tipo &lt;code&gt;numeric&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?type_convert
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees3 &amp;lt;- type_convert(trees, 
                       col_types = cols(
                           Girth  = &amp;quot;d&amp;quot;, 
                           Height = &amp;quot;d&amp;quot;, 
                           Volume = &amp;quot;d&amp;quot;)
                       )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning: The following named parsers don&#39;t match the column names: Girth,
## Height, Volume
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  3 variables:
##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...
##  $ Height: int  70 65 63 72 81 83 66 75 80 75 ...
##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ Girth : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Height: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: aunque la función se utiliza tal y como está descrito (e incluso en el propio curso de &lt;em&gt;DataCamp&lt;/em&gt; ésta sería la respuesta adecuada), he encontrado algún tipo de problema al emplear &lt;code&gt;type_convert()&lt;/code&gt;, de forma que no reconoce los nombres de las columnas.&lt;/p&gt;

&lt;h3 id=&#34;2-2-transformando-columnas-de-texto-en-factores&#34;&gt;2.2. Transformando columnas de texto en factores&lt;/h3&gt;

&lt;p&gt;Una de las características de las funciones de importación de datos de la librería &lt;em&gt;readr&lt;/em&gt; es que no interpretan, de manera automática, las columnas que poseen cadenas de texto como factores. No obstante, en ocasiones nos puede interesar que la clase de algunas columnas sea &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En estas situaciones, podemos utilizar la función &lt;code&gt;parse_factor()&lt;/code&gt; sobre las columnas del objeto recién importado que buscamos sean factores, especificando, si queremos, los niveles que adoptan.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_factor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ilustremos su uso mediante un ejemplo. En el objeto &lt;code&gt;salaries&lt;/code&gt;, que generamos en el capítulo anterior, la primera columna, &lt;code&gt;X1&lt;/code&gt;, contiene el tipo de profesor universitario; mientras que la segunda, &lt;code&gt;X5&lt;/code&gt;, hace referencia al sexo de la persona. Transformemos ambas en factores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries$X1 &amp;lt;- parse_factor(salaries$X1,
                            levels = c(&amp;quot;Prof&amp;quot;, &amp;quot;AsstProf&amp;quot;, &amp;quot;AssocProf&amp;quot;))

salaries$X5 &amp;lt;- parse_factor(salaries$X5, 
                            levels = c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##          X1     X5     X6
##      &amp;lt;fctr&amp;gt; &amp;lt;fctr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof   Male 139750
## 2      Prof   Male 173200
## 3  AsstProf   Male  79750
## 4      Prof   Male 115000
## 5      Prof   Male 141500
## 6 AssocProf   Male  97000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  3 variables:
##  $ X1: Factor w/ 3 levels &amp;quot;Prof&amp;quot;,&amp;quot;AsstProf&amp;quot;,..: 1 1 2 1 1 3 1 1 1 1 ...
##  $ X5: Factor w/ 2 levels &amp;quot;Male&amp;quot;,&amp;quot;Female&amp;quot;: 1 1 1 1 1 1 1 1 1 2 ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-trabajando-con-fechas&#34;&gt;2.3. Trabajando con fechas&lt;/h3&gt;

&lt;p&gt;Si una de las columnas del archivo de datos viene dada en la forma &lt;code&gt;YYYY-MM-DD&lt;/code&gt;, las funciones de importación de la librería &lt;em&gt;readr&lt;/em&gt; la interpretarán automáticamente como de tipo &lt;code&gt;Date&lt;/code&gt; (fecha).&lt;/p&gt;

&lt;p&gt;No obstante, si en la tabla están presentes algunos valores que son fechas y no se ajustan a la estructura comentada arriba, a través de la función &lt;code&gt;parse_date()&lt;/code&gt; (y su argumento &lt;code&gt;format&lt;/code&gt;) podemos lidiar con esta situación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consideremos el siguiente ejemplo: en el archivo &lt;code&gt;weather.csv&lt;/code&gt;, donde se recogen distintos indicadores relacionados con el clima, la columna &lt;code&gt;date&lt;/code&gt; contiene la fecha en el formato &amp;ldquo;mes/día/año&amp;rdquo;. Con esta información, procedamos a transformar la clase de la columna de manera oportuna.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;weather &amp;lt;- read_csv(&amp;quot;datasets/weather.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   origin = col_character(),
##   date = col_character(),
##   hour = col_integer(),
##   temp = col_double(),
##   dewp = col_double(),
##   humid = col_double(),
##   wind_dir = col_integer(),
##   wind_speed = col_double(),
##   wind_gust = col_double(),
##   precip = col_double(),
##   pressure = col_double(),
##   visib = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 12
##   origin       date  hour  temp  dewp humid wind_dir wind_speed wind_gust
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1    EWR 12/22/2013     9 64.94 60.98 87.00      190   13.80936 15.891535
## 2    EWR  7/23/2013     6 77.00 75.20 94.19      140    4.60312  5.297178
## 3    EWR 10/30/2013    11 44.96 35.96 70.52        0    0.00000  0.000000
## 4    EWR 12/25/2013    21 28.04  6.08 38.69      250    3.45234  3.972884
## 5    EWR  6/18/2013     9 66.02 62.06 87.05       10    5.75390  6.621473
## 6    EWR   5/5/2013    15 57.92 37.04 45.58       NA    4.60312  5.297178
## # ... with 3 more variables: precip &amp;lt;dbl&amp;gt;, pressure &amp;lt;dbl&amp;gt;, visib &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(weather)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    500 obs. of  12 variables:
##  $ origin    : chr  &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; ...
##  $ date      : chr  &amp;quot;12/22/2013&amp;quot; &amp;quot;7/23/2013&amp;quot; &amp;quot;10/30/2013&amp;quot; &amp;quot;12/25/2013&amp;quot; ...
##  $ hour      : int  9 6 11 21 9 15 11 11 15 20 ...
##  $ temp      : num  64.9 77 45 28 66 ...
##  $ dewp      : num  60.98 75.2 35.96 6.08 62.06 ...
##  $ humid     : num  87 94.2 70.5 38.7 87 ...
##  $ wind_dir  : int  190 140 0 250 10 NA 310 0 350 290 ...
##  $ wind_speed: num  13.81 4.6 0 3.45 5.75 ...
##  $ wind_gust : num  15.89 5.3 0 3.97 6.62 ...
##  $ precip    : num  0.01 0.01 0 0 0 0 0 0 0 0 ...
##  $ pressure  : num  1010 NA 1026 1033 1012 ...
##  $ visib     : num  10 4 10 10 10 10 10 0.25 10 10 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 12
##   .. ..$ origin    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ date      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ hour      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ temp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ dewp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ humid     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_dir  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_speed: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_gust : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ precip    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ pressure  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ visib     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;weather$date &amp;lt;- parse_date(weather$date, 
                           format = &amp;quot;%m/%d/%Y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 12
##   origin       date  hour  temp  dewp humid wind_dir wind_speed wind_gust
##    &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1    EWR 2013-12-22     9 64.94 60.98 87.00      190   13.80936 15.891535
## 2    EWR 2013-07-23     6 77.00 75.20 94.19      140    4.60312  5.297178
## 3    EWR 2013-10-30    11 44.96 35.96 70.52        0    0.00000  0.000000
## 4    EWR 2013-12-25    21 28.04  6.08 38.69      250    3.45234  3.972884
## 5    EWR 2013-06-18     9 66.02 62.06 87.05       10    5.75390  6.621473
## 6    EWR 2013-05-05    15 57.92 37.04 45.58       NA    4.60312  5.297178
## # ... with 3 more variables: precip &amp;lt;dbl&amp;gt;, pressure &amp;lt;dbl&amp;gt;, visib &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(weather)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    500 obs. of  12 variables:
##  $ origin    : chr  &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; ...
##  $ date      : Date, format: &amp;quot;2013-12-22&amp;quot; &amp;quot;2013-07-23&amp;quot; ...
##  $ hour      : int  9 6 11 21 9 15 11 11 15 20 ...
##  $ temp      : num  64.9 77 45 28 66 ...
##  $ dewp      : num  60.98 75.2 35.96 6.08 62.06 ...
##  $ humid     : num  87 94.2 70.5 38.7 87 ...
##  $ wind_dir  : int  190 140 0 250 10 NA 310 0 350 290 ...
##  $ wind_speed: num  13.81 4.6 0 3.45 5.75 ...
##  $ wind_gust : num  15.89 5.3 0 3.97 6.62 ...
##  $ precip    : num  0.01 0.01 0 0 0 0 0 0 0 0 ...
##  $ pressure  : num  1010 NA 1026 1033 1012 ...
##  $ visib     : num  10 4 10 10 10 10 10 0.25 10 10 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 12
##   .. ..$ origin    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ date      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ hour      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ temp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ dewp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ humid     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_dir  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_speed: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_gust : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ precip    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ pressure  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ visib     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-4-trabajando-con-números&#34;&gt;2.4. Trabajando con números&lt;/h3&gt;

&lt;p&gt;Es posible que la tabla que deseamos importar contenga, entre sus valores, expresiones numéricas asociadas cantidades monetarias, de manera que incluyan caracteres no numéricos (como el símbolo de la moneda o diversos separadores de millares, por ejemplo).&lt;/p&gt;

&lt;p&gt;En estos casos, la función a utilizar, de la librería &lt;em&gt;readr&lt;/em&gt;, es &lt;code&gt;parse_number()&lt;/code&gt;, que omite los mencionados caracteres no numéricos presentes en los valores de una columna.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el archivo &lt;code&gt;debt.csv&lt;/code&gt; tenemos datos relacionados con la deuda nacional de &lt;em&gt;Estados Unidos&lt;/em&gt; para ciertos años. Importemos el archivo y examinemos su contenido.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debt &amp;lt;- read_csv(&amp;quot;datasets/national_debt.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   V1 = col_character(),
##   V2 = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(debt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##        V1                     V2
##     &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;
## 1 9/30/15 $18,150,617,666,484.30
## 2 9/30/14 $17,824,071,380,733.80
## 3 9/30/13 $16,738,183,526,697.30
## 4 9/30/12 $16,066,241,407,385.80
## 5 9/30/11 $14,790,340,328,557.10
## 6 9/30/10 $13,561,623,030,891.70
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(debt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    16 obs. of  2 variables:
##  $ V1: chr  &amp;quot;9/30/15&amp;quot; &amp;quot;9/30/14&amp;quot; &amp;quot;9/30/13&amp;quot; &amp;quot;9/30/12&amp;quot; ...
##  $ V2: chr  &amp;quot;$18,150,617,666,484.30&amp;quot; &amp;quot;$17,824,071,380,733.80&amp;quot; &amp;quot;$16,738,183,526,697.30&amp;quot; &amp;quot;$16,066,241,407,385.80&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ V1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ V2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apliquemos ahora la función &lt;code&gt;parse_number()&lt;/code&gt; a la segunda columna de la tabla.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debt$V2 &amp;lt;- parse_number(debt$V2)
head(debt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##        V1           V2
##     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 9/30/15 1.815062e+13
## 2 9/30/14 1.782407e+13
## 3 9/30/13 1.673818e+13
## 4 9/30/12 1.606624e+13
## 5 9/30/11 1.479034e+13
## 6 9/30/10 1.356162e+13
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(debt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    16 obs. of  2 variables:
##  $ V1: chr  &amp;quot;9/30/15&amp;quot; &amp;quot;9/30/14&amp;quot; &amp;quot;9/30/13&amp;quot; &amp;quot;9/30/12&amp;quot; ...
##  $ V2: num  1.82e+13 1.78e+13 1.67e+13 1.61e+13 1.48e+13 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ V1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ V2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-5-accediendo-a-los-metadatos-de-un-archivo&#34;&gt;2.5. Accediendo a los metadatos de un archivo&lt;/h3&gt;

&lt;p&gt;En ocasiones, puede resultar de utilidad tener una idea previa de cómo las funciones de la librería &lt;em&gt;readr&lt;/em&gt; van a interpretar las columnas de un conjunto de datos antes de importarlo. De esta forma, en el caso de que las clases inferidas no sean las adecuadas, podemos optar por declarar el tipo de alguna de ellas con antelación.&lt;/p&gt;

&lt;p&gt;Con tal fin existen las funciones &lt;code&gt;spec_csv()&lt;/code&gt; y &lt;code&gt;spec_tsv()&lt;/code&gt;, para los archivos separados por comas y por tabulaciones, respectivamente. En el caso de tener que trabajar con otro tipo de ficheros (por ejemplo, &lt;code&gt;.csv&lt;/code&gt; en formato europeo), usaremos &lt;code&gt;spec_delim()&lt;/code&gt;, especificando el símbolo que hace las veces de separador de columnas en el archivo de datos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?spec_csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por ejemplo, retomemos el primer ejemplo de este documento, aquel que trabajaba con el archivo &lt;code&gt;chickwts.csv&lt;/code&gt;, que contenía información relativa al peso y tipo de alimentación de ciertos pollos. Veamos cuáles serían las clases que la función &lt;code&gt;read_csv()&lt;/code&gt; inferiría para sus columnas a la hora de importarlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spec_csv(&amp;quot;datasets/chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )

## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jugando con las propiedades del conjugado</title>
      <link>https://imalexissaez.github.io/2018/08/11/jugando-con-las-propiedades-del-conjugado/</link>
      <pubDate>Sat, 11 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/11/jugando-con-las-propiedades-del-conjugado/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 4:&lt;/strong&gt; Dada una constante real positiva, $a$, y el conjunto&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
M_a = \left\{z\in\mathbb{C}^* : \left|z+\dfrac{1}{z}\right|=a \right\},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;donde $\mathbb{C}^* = \mathbb{C}\backslash{(0,0)}$, encuentre los valores mínimo y máximo de $|z|$ cuando $z\in M_a$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Hemos de ser capaces de extraer información sobre el módulo de $z$, $|z|$, a partir de la expresión de la ecuación que define al conjunto $M_a$. Por las propiedades de la conjugación, sabemos que $z\overline{z} = |z|^2$, de manera que una posible estrategia a seguir sería elevar al cuadrado ambos miembros de la ecuación que define a $M_a$ y desarrollar la expresión resultante mediante las propiedades de la conjugación. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a^2 &amp;= \left|z+\dfrac{1}{z}\right|^2 = \left(z+\dfrac{1}{z}\right)\overline{\left(z+\dfrac{1}{z}\right)} = \left(z+\dfrac{1}{z}\right)\left(\overline{z}+\dfrac{1}{\overline{z}}\right)\\
&amp;= z\overline{z} + \dfrac{z}{\overline{z}} + \dfrac{\overline{z}}{z} + \dfrac{1}{z\overline{z}} = z\overline{z} + \dfrac{z^2 + \overline{z}^2}{\overline{z}z} + \dfrac{1}{z\overline{z}},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;pero recordemos que $z\overline{z} = |z|^2$, por lo que la anterior ecuación quedaría&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a^2 = |z|^2 + \dfrac{z^2+\overline{z}^2}{|z|^2}+\dfrac{1}{|z|^2},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y multiplicando ambos miembros por $|z|^2$, número que sabemos es distinto de cero porque $z\in\mathbb{C}^*$, tenemos&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a^2|z|^2 = |z|^4 + z^2 + \overline{z}^2 + 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, a primera vista, la anterior expresión parece que quiere conducirnos hacia alguna especie de ecuación bicuadrada en $|z|$. Efectivamente, si reordenamos los términos de manera adecuada, llegamos a&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
|z|^4 - a^2|z|^2 + 1 = - (z^2 + \overline{z}^2)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y si completamos el cuadrado del miembro derecho,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
|z|^4 - a^2|z|^2 + 1 &amp;= - (z^2 + \overline{z}^2 + 2z\overline{z} - 2z\overline{z})\\
&amp;= - (z + \overline{z})^2 + 2z\overline{z}\\
&amp;= - (z + \overline{z})^2 + 2|z|^2, 
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
|z|^4 - (a^2+2)|z|^2 + 1 = - (z+\overline{z})^2 \leq 0.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por lo tanto, tras realizar operaciones algebraicas sobre la ecuación que define al conjunto $M_a$, hemos llegado a que la expresión de cierta ecuación bicuadrada en $|z|$ debe ser menor o igual que cero. Investiguemos si de ella podemos extraer alguna condición sobre el módulo de $z$ que nos permita dar respuesta al problema planteado.&lt;/p&gt;

&lt;p&gt;Resolviendo $|z|^4 - (a^2 + 2)|z|^2 + 1 = 0$ y teniendo en cuenta que es positivo el coeficiente asociado a $|z|^4$, tenemos que $|z|^4 - (a^2 + 2)|z|^2 + 1 \leq 0$  si, y solo si,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
|z|^2\in \left[
\dfrac{2+a^2 - \sqrt{a^4+4a^2}}{2}, \dfrac{2+a^2 + \sqrt{a^4+4a^2}}{2}
\right],
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que es equivalente a decir que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
|z|\in \left[
\dfrac{-a + \sqrt{a^2+4}}{2}, \dfrac{a + \sqrt{a^2+4}}{2}
\right].
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Veamos esta última equivalencia en detalle, pues puede no resultarnos trivial a primera vista. La idea aquí es representar ambos extremos del intervalo que hemos obtenido para $|z|^2$ como cuadrados de ciertas expresiones. Si somos capaces de llevar a cabo tal tarea, únicamente bastará aplicar la raíz cuadrada (que, recordemos, es una transformación monótona creciente) para, de esta manera, llegar a la conclusión obtenida para $|z|$.&lt;/p&gt;

&lt;p&gt;Centrémonos en la expresión del extremo inferior del intervalo definido para $|z|^2$ (el razonamiento a seguir sería análogo para el superior). Por un lado,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
2+a^2 - \sqrt{a^4 + 4a^2} = 2+a^2 - a\sqrt{a^2 + 4},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;expresión que nos invita a experimentar con el desarrollo de $(-a + \sqrt{a^2 + 4})^2$. Así,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(-a + \sqrt{a^2+4})^2 &amp;= a^2 + a^2 + 4 - 2a\sqrt{a^2+4}\\
&amp;= 2a^2+4 - 2a\sqrt{a^2+4}\\
&amp;= 2(a^2+2-a\sqrt{a^2+4})\\
&amp;= 2(a^2+2-\sqrt{a^4+4a^2}),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;de forma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{2+a^2 - \sqrt{a^4+4a^2}}{2} = \dfrac{(-a + \sqrt{a^2+4})^2}{2\cdot 2} = \left(\dfrac{-a + \sqrt{a^2+4}}{2}\right)^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por tanto, hemos llegado a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
\min{|z|} &amp;= \dfrac{-a+\sqrt{a^2+4}}{2},\\\\ \max{|z|} &amp;= \dfrac{a+\sqrt{a^2+4}}{2},
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y los valores extremos se alcanzarán cuando se dé la igualdad en la inecuación considerada, es decir, cuando $-(z+\overline{z})^2 = 0$, que equivale a la condición $z=-\overline{z}$. Así pues, los valores extremos se alcanzarán para los números complejos $z\in M_a$ tales que $z=-\overline{z}$.&lt;/p&gt;

&lt;p&gt;Referencia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Andreescu, T., &amp;amp; Andrica, D., (2006), &lt;em&gt;Complex Numbers from A to... Z&lt;/em&gt;, Boston: Birkhäuser.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (II)</title>
      <link>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</link>
      <pubDate>Thu, 09 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</guid>
      <description>&lt;p&gt;Nos quedamos, en la &lt;a href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/&#34;&gt;anterior entrada&lt;/a&gt; del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, a falta de revisar la parte final del archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;. Terminemos pues de echarle un vistazo a dicho fichero en este artículo.&lt;/p&gt;

&lt;p&gt;Al finalizar la personalización de los parámetros básicos del sitio web, se asomaba ante nosotros el siguiente, y muy extraño, bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nada intuitivo su contenido y carente por completo de comentarios, hecho nada halagüeño. Sin embargo, basta que experimentemos un poco con la anteriores líneas para comprobar que esta sección del archivo &lt;code&gt;config.toml&lt;/code&gt; es la dedicada a gestionar la aparición de un carrusel de imágenes en la página web de acceso, situándolo justo detrás del título.&lt;/p&gt;

&lt;p&gt;Conviene que le echemos un vistazo a la entrada que aparece en el propio blog de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; hablando de la gestión de imágenes de cabecera. En el caso de haber varias declaradas, estas rotan cada diez segundos. Por otro lado, tenemos a nuestra disposición los siguientes parámetros de configuración:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: ruta que apunta a la ubicación de la imagen de cabecera.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desc&lt;/code&gt;: parámetro opcional que nos permite incorporar un pequeño texto sobre la imagen, a modo de pie de figura.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En mi caso, tras navegar un rato por &lt;a href=&#34;https://unsplash.com/&#34; target=&#34;_blank&#34;&gt;Unsplash&lt;/a&gt;, descargué fotografías hasta componer un carrusel de cinco imágenes a las que no incorporé pie de figura alguno. Por tanto, el anterior bloque de código me ha quedado como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del carrusel de imágenes de la página de inicio
#
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-01.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-02.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-03.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-04.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-05.jpg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Desvelado el anterior misterio, continuemos con la revisión del archivo &lt;code&gt;config.toml&lt;/code&gt;. El siguiente bloque de instrucciones hace referencia a los datos sobre el autor del sitio web (nombre, correo electrónico, etc.). Nos permite, además, configurar una amplia gama de enlaces a nuestras cuentas de redes sociales para así facilitar la conexión entre personas. Originalmente, dicho bloque presenta el siguiente aspecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Author]
  name = &amp;quot;Some Person&amp;quot;
  website = &amp;quot;yourwebsite.com&amp;quot;
  email = &amp;quot;youremail@domain.com&amp;quot;
  facebook = &amp;quot;username&amp;quot;
  googleplus = &amp;quot;+username&amp;quot; # or xxxxxxxxxxxxxxxxxxxxx
  github = &amp;quot;username&amp;quot;
  gitlab = &amp;quot;username&amp;quot;
  bitbucket = &amp;quot;username&amp;quot;
  twitter = &amp;quot;username&amp;quot;
  reddit = &amp;quot;username&amp;quot;
  linkedin = &amp;quot;username&amp;quot;
  xing = &amp;quot;username&amp;quot;
  stackoverflow = &amp;quot;users/XXXXXXX/username&amp;quot;
  snapchat = &amp;quot;username&amp;quot;
  instagram = &amp;quot;username&amp;quot;
  youtube = &amp;quot;user/username&amp;quot; # or channel/channelname
  soundcloud = &amp;quot;username&amp;quot;
  spotify = &amp;quot;username&amp;quot;
  bandcamp = &amp;quot;username&amp;quot;
  itchio = &amp;quot;username&amp;quot;
  vk = &amp;quot;username&amp;quot;
  paypal = &amp;quot;username&amp;quot;
  telegram = &amp;quot;username&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Personalmente, no utilizo apenas las redes sociales y confieso que, del anterior listado, ni siquiera conozco algunas de ellas. Así pues, como no podía ser de otra manera, en mi caso el anterior bloque de código ha quedado ciertamente reducido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del autor
#
[Author]
  name    = &amp;quot;Alexis Sáez&amp;quot;
  website = &amp;quot;https://imalexissaez.github.io/&amp;quot;
  email   = &amp;quot;imalexissaez@gmail.com&amp;quot;
  github  = &amp;quot;ImAlexisSaez&amp;quot;
  twitter = &amp;quot;imalexissaez&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El último bloque de instrucciones que se presenta ante nosotros nos ofrece la posibilidad de configurar el menú que aparece en la parte superior derecha y presenta el siguiente aspecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1

[[menu.main]]
    name = &amp;quot;About&amp;quot;
    url = &amp;quot;page/about/&amp;quot;
    weight = 3

[[menu.main]]
    identifier = &amp;quot;samples&amp;quot;
    name = &amp;quot;Samples&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Big Image Sample&amp;quot;
    url = &amp;quot;post/2017-03-07-bigimg-sample&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Math Sample&amp;quot;
    url = &amp;quot;post/2017-03-05-math-sample&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Code Sample&amp;quot;
    url = &amp;quot;post/2016-03-08-code-sample&amp;quot;
    weight = 3

[[menu.main]]
    name = &amp;quot;Tags&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, de momento, dejaremos el anterior bloque tal cual figura arriba y ya procederemos en un futuro a su modificación, cuando incorporemos algunos cambios adicionales al sitio web.&lt;/p&gt;

&lt;p&gt;Fin del archivo &lt;code&gt;config.toml&lt;/code&gt;, fin de la entrada, ¿verdad? Todavía no. Nos quedan un par de detalles a los que echarles un vistazo.&lt;/p&gt;

&lt;p&gt;Para empezar, a continuación, configuraremos las taxonomías de nuestro sitio web. ¿Qué es una taxonomía? Sin pretender entrar en detalles técnicos aquí, para que nos hagamos una idea, una taxonomía es un instrumento que nos permite agrupar contenido relacionado. Los ejemplos más habituales a los que estamos acostumbrados son &lt;em&gt;categorías&lt;/em&gt; y &lt;em&gt;etiquetas&lt;/em&gt; (que aquí se llamarán &lt;em&gt;categories&lt;/em&gt; y &lt;em&gt;tags&lt;/em&gt;), que facilitan al lector encontrar artículos que comparten cierta temática.&lt;/p&gt;

&lt;p&gt;En mi caso, para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, conservaré ambas, aunque renombrando su versión inglesa al castellano, para facilitar después la configuración de la localización de la plantilla. Así, &lt;code&gt;categories&lt;/code&gt; pasará a ser &lt;code&gt;apartados&lt;/code&gt;, mientras que &lt;code&gt;tags&lt;/code&gt; se convertirá en &lt;code&gt;etiquetas&lt;/code&gt;. Además, declararé una nueva taxonomía denominada &lt;code&gt;proyectos&lt;/code&gt;, que me facilitará agrupar fácilmente contenido, llegado el caso, de distintos apartados o etiquetas.&lt;/p&gt;

&lt;p&gt;Todo ello se traduce en incluir el siguiente bloque de código en el fichero &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recomiendo seguir la estructura &lt;code&gt;singular = plural&lt;/code&gt; marcada en la &lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34; target=&#34;_blank&#34;&gt;guía oficial&lt;/a&gt; de taxonomías de &lt;em&gt;Hugo&lt;/em&gt;. De hecho, dado que la formación de plurales en inglés y castellano es diferente, afinaría un poco la anterior recomendación señalando que conviene escoger parejas en donde el plural se diferencie del singular únicamente por el carácter &lt;code&gt;s&lt;/code&gt; final.&lt;/p&gt;

&lt;p&gt;¿Por qué debemos cuidar tanto el detalle a la hora de declarar taxonomías? Es posible que en un futuro nos adentremos en la personalización de las plantillas del tema y &lt;em&gt;Hugo&lt;/em&gt; incorpora útiles funciones para recorrer bucles apoyándose en esta curiosa relación singular-plural. Es por ello que no vamos a pegarnos un tiro en los pies declarando parejas de variables y valores que luego nos impidan aprovecharnos de las mencionadas herramientas.&lt;/p&gt;

&lt;p&gt;Por último, para finalizar este artículo, echaremos un vistazo a la configuración del &lt;a href=&#34;https://gohugo.io/content-management/urls/&#34; target=&#34;_blank&#34;&gt;permalink&lt;/a&gt; de las entradas del sitio web. Por defecto, &lt;em&gt;Hugo&lt;/em&gt; utiliza el directorio donde se encuentre el contenido (generalmente es &lt;code&gt;\post\&lt;/code&gt;) y lo concatena con el título de la entrada, para el que sustituye espacios por guiones.&lt;/p&gt;

&lt;p&gt;Para empezar, me gustaría que apareciese el día de publicación del artículo en el &lt;em&gt;permalink&lt;/em&gt;, siguiendo el formato &lt;code&gt;/año/mes/día&lt;/code&gt;. Por otro lado, como soy consciente de que utilizar caracteres extraños a ojos del alfabeto inglés (tildes, eñes, etc.), en ocasiones, es fuente de problemas, en cada entrada definiré manualmente mi propio &lt;em&gt;slug&lt;/em&gt;, para evitar que la traducción automática del título hacia su correspondiente parte del &lt;em&gt;permalink&lt;/em&gt; dé lugar a resultados no deseados.&lt;/p&gt;

&lt;p&gt;Así pues, mi archivo &lt;code&gt;config.toml&lt;/code&gt; finaliza con el siguiente bloque código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del permalink
#
[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el siguiente artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; dejaremos a un lado, de momento, la configuración de la plantilla para estudiar cómo generar contenido (en forma de artículos) para nuestro sitio web.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (I)</title>
      <link>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</link>
      <pubDate>Tue, 07 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</guid>
      <description>&lt;p&gt;Continuemos esta serie de artículos, pertenecientes al &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, donde examinamos con detalle la creación de sitios web utilizando &lt;em&gt;Hugo&lt;/em&gt;. Hoy veremos cómo instalar y configurar el tema &lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34; target=&#34;_blank&#34;&gt;Beautiful Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/&#34;&gt;anterior entrada&lt;/a&gt; vimos el proceso a seguir para el tema &lt;em&gt;Anake&lt;/em&gt;. No obstante, como ya comenté entonces, algunos detalles de dicha plantilla no terminaban de convencerme para la idea que tenía en mente para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;. Así pues, tras invertir una considerable cantidad de tiempo en navegar por la &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;sección de temas&lt;/a&gt; de la web oficial de &lt;em&gt;Hugo&lt;/em&gt;, encontré, para mi fortuna, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, una adaptación del tema &lt;em&gt;Beautiful Jekyll&lt;/em&gt; que ya utilicé en su momento como plantilla para mi sitio web.&lt;/p&gt;

&lt;p&gt;Me encanta este tema por el protagonismo que ofrece al contenido, evitando toda esa miríada de elementos que algunas plantillas incorporan y que distraen enormemente la atención a la hora de consultar la información contenida en los artículos. Además, viene con el interesante añadido para un matemático de incorporar, de serie, la configuración adecuada para escribir fórmulas vía &lt;em&gt;KaTeX&lt;/em&gt; (es un detalle con cierta trampa, ya que buenas batallas estoy lidiando, en ocasiones, para que las expresiones matemáticas se visualicen como deberían).&lt;/p&gt;

&lt;p&gt;Así pues, procedamos a su instalación. Para ello, en la terminal, desde el directorio raíz donde hayamos escogido alojar localmente nuestro sitio web, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y clonamos, en esta carpeta, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; escribiendo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/halogenica/beautifulhugo.git beautifulhugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al igual que el tema &lt;em&gt;Anake&lt;/em&gt;, &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene acompañado, para nuestro gozo y disfrute, con un pequeño sitio web de muestra, ubicado en la carpeta &lt;code&gt;exampleSite&lt;/code&gt; (siendo la ruta completa &lt;code&gt;\themes\beautifulhugo\exampleSite&lt;/code&gt;). A través del &lt;em&gt;Explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt; podemos comprobar que su contenido es el que se muestra en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180807-img01.png&#34; &gt;

&lt;img src=&#34;20180807-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Contenido del sitio web de ejemplo&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Procedemos entonces a copiar las carpetas &lt;code&gt;contents&lt;/code&gt;, &lt;code&gt;layouts&lt;/code&gt; y &lt;code&gt;static&lt;/code&gt;, así como el archivo &lt;code&gt;config.toml&lt;/code&gt; y las pegamos en el directorio raíz de nuestro sitio web. A estas alturas de la película, dependiendo de la intensidad con la que hayamos estado experimentando con diversas plantillas, recomendaría incluso eliminar previamente las mencionadas carpetas y el citado fichero antes de proceder a la acción de pegar, para así evitar la aparición de extraños conflictos en un futuro próximo.&lt;/p&gt;

&lt;p&gt;Ahora, editamos el archivo &lt;code&gt;config.toml&lt;/code&gt;, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt; para ello, con el objetivo de empezar a personalizar la configuración de esta plantilla. Algunos de los detalles que a continuación veremos son muy similares a los que discutimos durante el artículo dedicado al tema &lt;em&gt;Anake&lt;/em&gt;, por lo que en esta ocasión el ritmo de exposición será más ligero.&lt;/p&gt;

&lt;p&gt;El primer bloque de código que encontramos es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;https://username.github.io&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
#DefaultContentLanguage = &amp;quot;ja&amp;quot;
title = &amp;quot;Beautiful Hugo&amp;quot;
theme = &amp;quot;beautifulhugo&amp;quot;
metaDataFormat = &amp;quot;yaml&amp;quot;
pygmentsStyle = &amp;quot;trac&amp;quot;
pygmentsUseClasses = true
pygmentsCodeFences = true
pygmentsCodefencesGuessSyntax = true
#pygmentsUseClassic = true
#pygmentOptions = &amp;quot;linenos=inline&amp;quot;
#disqusShortname = &amp;quot;XXX&amp;quot;
#googleAnalytics = &amp;quot;XXX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algunas variables nos resultarán familiares, por lo que seremos capaces inmediatamente de asignarles sus correspondientes valores. Por ejemplo, las primeras líneas, en mi caso, han quedado como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio
#
title   = &amp;quot;Infinitos Contrastes&amp;quot;            # Título de la web
theme   = &amp;quot;beautifulhugo&amp;quot;                   # Tema 
baseurl = &amp;quot;https://imalexissaez.github.io/&amp;quot; # URL base
metaDataFormat         = &amp;quot;yaml&amp;quot;             # Formato de las cabeceras de las entradas
DefaultContentLanguage = &amp;quot;es&amp;quot;               # Lenguaje de la web (activa localización)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ninguna sorpresa aquí. Entre los descriptivos nombres que poseen las variables y los comentarios que he añadido, no es descabellado suponer que todos configuraremos de manera adecuada el anterior bloque.&lt;/p&gt;

&lt;p&gt;Ahora bien, el siguiente apartado sí que merece explicación por mi parte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los bloques de código fuente
# Guía en: https://gohugo.io/content-management/syntax-highlighting/
#
pygmentsStyle                 = &amp;quot;trac&amp;quot;
pygmentsUseClasses            = true
pygmentsCodeFences            = true
pygmentsCodefencesGuessSyntax = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He dejado en los comentarios un enlace a la guía oficial para la configuración del &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34; target=&#34;_blank&#34;&gt;resaltado de código&lt;/a&gt; a la que convendría que echásemos un vistazo. Para empezar, existen diferentes estilos &lt;em&gt;CSS&lt;/em&gt; que, principalmente, afectan a los colores en los que se resaltan las palabras clave de los lenguajes de programación, así como al fondo en el que el código aparece. Tras revisar las opciones disponibles, el valor &lt;code&gt;&amp;quot;trac&amp;quot;&lt;/code&gt;, en mi opinión, es el que más a juego va con &lt;em&gt;Beautiful Hugo&lt;/em&gt;. Por otro lado, como este tema utiliza la librería &lt;a href=&#34;https://highlightjs.org/&#34; target=&#34;_blank&#34;&gt;highlight.js&lt;/a&gt; (en lugar de la que &lt;em&gt;Hugo&lt;/em&gt; incorpora por defecto) para el mencionado resaltado, hemos de asignar &lt;code&gt;true&lt;/code&gt; a la variable &lt;code&gt;pygmentsUseClasses&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, habilitamos la posibilidad de escribir código fuente en &amp;ldquo;&lt;em&gt;fences&lt;/em&gt;&amp;rdquo;, es decir, delimitándolo entre los caracteres habituales para ello (echa un vistazo a la &lt;a href=&#34;https://kramdown.gettalong.org/quickref.html#code-blocks&#34; target=&#34;_blank&#34;&gt;guía oficial&lt;/a&gt; de &lt;em&gt;Kramdown&lt;/em&gt; sobre bloques de código para una rápida referencia). Recomiendo actuar así porque, en ocasiones, el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; se comporta de manera extraña, sobre todo en lo que respecta al interlineado cuando incluimos comentarios.&lt;/p&gt;

&lt;p&gt;Además, aunque hemos activado la opción de adivinar el lenguaje de programación por su sintaxis, recomendaría aquí que ayudásemos en lo posible a la librería y le indicáramos cuál estamos empleando, para que así aplique la configuración adecuada para él. Actuar así es crítico cuando, como en este artículo, compartimos pequeños bloques de código, de forma que es bastante complicado acertar con el lenguaje de programación dada la escasa información que suministramos.&lt;/p&gt;

&lt;p&gt;Finalmente, nos limitaremos a introducir los valores correspondientes a las cuentas que habremos creado para &lt;em&gt;Disqus&lt;/em&gt; y para las estadísticas de &lt;em&gt;Google&lt;/em&gt; en el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los comentarios (Disqus)
#
disqusShortname = &amp;quot;&amp;quot;

#
# Configuración de las estadísticas (Google Analytics)
#
googleAnalytics = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nuestra siguiente parada será en la sección dedicada a la configuración de los parámetros del sitio web, que originalmente presenta el aspecto que se muestra a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Params]
#  homeTitle = &amp;quot;Beautiful Hugo Theme&amp;quot; # Set a different text for the header on the home page
  subtitle = &amp;quot;Build a beautiful and simple website in minutes&amp;quot;
  logo = &amp;quot;img/avatar-icon.png&amp;quot;
  favicon = &amp;quot;img/favicon.ico&amp;quot;
  dateFormat = &amp;quot;January 2, 2006&amp;quot;
  commit = false
  rss = true
  comments = true
  readingTime = true
  useHLJS = true
  socialShare = true
#  gcse = &amp;quot;012345678901234567890:abcdefghijk&amp;quot; # Get your code from google.com/cse. Make sure to go to &amp;quot;Look and Feel&amp;quot; and change Layout to &amp;quot;Full Width&amp;quot; and Theme to &amp;quot;Classic&amp;quot;

#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos analizando la primera parte que, en mi caso, ha quedado como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros del sitio web
#
[Params]
  subtitle    = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot; # Subtítulo
  logo        = &amp;quot;img/avatar.jpg&amp;quot;                               # Logo
  favicon     = &amp;quot;img/favicon.ico&amp;quot;                              # Favicon
  dateFormat  = &amp;quot;02-01-2006&amp;quot;                                   # Formato de la fecha
  commit      = false                                          # commit en footer
  rss         = true                                           # Sindicación
  comments    = true                                           # Comentarios activados por defecto
  readingTime = true                                           # Estimación del tiempo de lectura
  useHLJS     = true                                           # Highlight.js para resaltado
  socialShare = true                                           # Compartir entradas en redes sociales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ya que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No he visto la necesidad de utilizar la variable &lt;code&gt;homeTitle&lt;/code&gt; para modificar el texto que aparece al acceder al sitio web. Me parece adecuado que sea el nombre de la página web: &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, pero, como siempre, &amp;ldquo;para gustos, los colores&amp;rdquo;. La variable &lt;code&gt;subtitle&lt;/code&gt; sí que me resulta interesante para ofrecer una breve descripción o eslogan de nuestra página web.&lt;/li&gt;
&lt;li&gt;Los valores para las variables &lt;code&gt;logo&lt;/code&gt; y &lt;code&gt;favicon&lt;/code&gt; deben apuntar a las rutas donde ubiquemos las respectivas imágenes. Por defecto, las hojas de estilo &lt;em&gt;CSS&lt;/em&gt;, las librerías escritas con &lt;em&gt;JavaScript&lt;/em&gt; y las imágenes las almacenaremos en el interior del directorio &lt;code&gt;static&lt;/code&gt;. Como &lt;em&gt;Hugo&lt;/em&gt; supone este hecho, no es necesario que antecedamos cada ruta con &lt;code&gt;static&lt;/code&gt;, pero debemos ubicar cada recurso adecuadamente.&lt;/li&gt;
&lt;li&gt;La localización de &lt;em&gt;Hugo&lt;/em&gt; a idiomas diferentes al inglés es todavía un aspecto que admite gran margen de mejora. Aunque &lt;em&gt;Beautiful Hugo&lt;/em&gt; incorpora la posibilidad de declarar ciertos textos para distintos idiomas, el tratamiento de las fechas no es todavía el adecuado para las opciones disponibles. Con el objeto de evitar entrar en agotadoras batallas, me he decantado finalmente por un formato &amp;ldquo;neutro&amp;rdquo; para expresar la fecha, en el sentido de que únicamente incluye números, evitando así que en la página aparezcan los nombres de los días de la semana o los de los meses en inglés.&lt;/li&gt;
&lt;li&gt;La variable &lt;code&gt;commit&lt;/code&gt; nos permite insertar el código SHA correspondiente al &lt;em&gt;commit&lt;/em&gt; que generó la última versión del sitio web. No he considerado que dicha información fuera a proporcionar demasiada utilidad para una página como la mía, así que he declarado su valor como &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;El resto de las variables activan, pues su valor es &lt;code&gt;true&lt;/code&gt;, respectivamente, la sindicación vía &lt;em&gt;RSS&lt;/em&gt;, la posibilidad de realizar comentarios en los distintos artículos de la web (vía &lt;em&gt;Disqus&lt;/em&gt;), una estimación del tiempo de lectura para cada entrada (utilizando como referencia 200 palabras por minuto), el uso de la librería &lt;em&gt;highlight.js&lt;/em&gt; para resaltar código y el acceso a compartir nuestro contenido en distintas redes sociales.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como la entrada está empezando a adquirir una extensión considerable. Vamos a poner aquí un punto y seguido, dejando para el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; el análisis del resto de la configuración del archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo actualizar fácilmente R en Windows?</title>
      <link>https://imalexissaez.github.io/2018/08/04/como-actualizar-facilmente-r-en-windows/</link>
      <pubDate>Sat, 04 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/04/como-actualizar-facilmente-r-en-windows/</guid>
      <description>&lt;p&gt;El proceso de actualización de la versión del lenguaje de programación &lt;em&gt;R&lt;/em&gt; puede resultar un tanto tedioso si lo llevamos a cabo de forma manual. Veamos cómo hacer más liviana esta pesada carga.&lt;/p&gt;

&lt;p&gt;Por fortuna, tenemos a nuestra disposición el paquete &lt;a href=&#34;https://cran.r-project.org/web/packages/installr/index.html&#34; target=&#34;_blank&#34;&gt;installr&lt;/a&gt;, que se encarga de todo el anterior procedimiento automáticamente, a través de la llamada a la función &lt;code&gt;updateR()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De esta forma, basta con que tengamos a mano un &lt;em&gt;script&lt;/em&gt; similar al que se muestra a continuación, y procedamos a ejecutarlo cuando se anuncie una nueva versión de &lt;em&gt;R&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Instala el paquete
install.packages(&amp;quot;installr&amp;quot;)
 
# Actualiza R
library(installr)
updateR()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al utilizar la función &lt;code&gt;updateR()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se comprueba cuál es la última versión de &lt;em&gt;R&lt;/em&gt;. Si estamos al día, nos mostrará una ventana de confirmación de tal hecho. En caso contrario, nos dará la posibilidad de consultar las novedades de dicha versión y nos permitirá proceder a su descarga e instalación.&lt;/li&gt;
&lt;li&gt;Una vez completado el proceso, nos preguntará si deseamos mover (y borrar) las librerías desde nuestra antigua versión a la nueva. Además, nos dará la opción de ponerlas al día. Dependiendo del número de librerías que tengamos instaladas, completar estas acciones puede llevarnos un buen rato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si usamos &lt;em&gt;RStudio&lt;/em&gt;, al principio se nos mostrará un aviso sugiriéndonos que llevemos a cabo todo el proceso desde la propia interfaz de &lt;em&gt;R&lt;/em&gt;, en lugar de a través de este &lt;em&gt;IDE&lt;/em&gt;. No obstante, en mi experiencia, podemos tranquilamente ignorar la advertencia y realizar el procedimiento utilizando &lt;em&gt;RStudio&lt;/em&gt;. Al terminar, bastará con que reiniciemos el programa para que todo funcione con normalidad.&lt;/p&gt;

&lt;p&gt;Finalmente, podemos ahorrarnos la sucesión de ventanas emergentes si sabemos de antemano que queremos actualizar &lt;em&gt;R&lt;/em&gt;, mover (no copiar) las librerías y actualizarlas. Para ello, reescribimos el anterior script como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Instala / carga el paquete
if(!require(installr)) {install.packages(&amp;quot;installr&amp;quot;); require(installr)} 
 
# Instala R, mueve y actualiza paquetes
updateR(F, T, T, F, T, F, T)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Los 34 grados de libertad de un estudio</title>
      <link>https://imalexissaez.github.io/2018/08/02/los-34-grados-de-libertad-de-un-estudio/</link>
      <pubDate>Thu, 02 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/02/los-34-grados-de-libertad-de-un-estudio/</guid>
      <description>&lt;p&gt;Hace unos días, completé la lectura del estupendo artículo &lt;em&gt;&amp;ldquo;Degrees of freedom in planning, running, analyzing, and reporting psychological studies. A checklist to avoid p-hacking&amp;rdquo;&lt;/em&gt;, cuya lista de autores es casi tan extensa como el propio título, y de acceso abierto a través de &lt;a href=&#34;http://journal.frontiersin.org/article/10.3389/fpsyg.2016.01832/abstract&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En la línea de la famosa idea conocida como &lt;em&gt;&amp;ldquo;The Garden of Forking Paths&amp;rdquo;&lt;/em&gt;, acuñada por &lt;em&gt;Andrew Gelman&lt;/em&gt;, el mencionado documento lista los múltiples grados de libertad existentes en todas y cada una de las fases de un estudio. Ahora bien, ¿a qué nos referimos cuando hablamos de los grados de libertad de un estudio?&lt;/p&gt;

&lt;p&gt;Sin entrar aquí en demasiado detalle, se trata de ciertas decisiones arbitrarias (intencionadas o no) que los investigadores toman en sus investigaciones a la hora de diseñarlas, recoger los datos de interés, analizar éstos y posteriormente reportarlos en publicaciones científicas. Es lógico entonces que nos planteemos la siguiente cuestión: ¿qué efecto poseen los grados de libertad de un estudio sobre las conclusiones alcanzadas?&lt;/p&gt;

&lt;p&gt;Entre otras, las dos principales consecuencias son, por un lado, el incremento de la probabilidad de hallar resultados que no son más que falsos positivos, y, por otra parte, la posibilidad de inflar las estimaciones para los tamaños de los efectos observados. Así pues, ¿es posible evitar su aparición en un estudio?&lt;/p&gt;

&lt;p&gt;A día de hoy, el mejor método (aunque dista de ser perfecto) para que un estudio esté libre de grados de libertad es utilizar, de manera precisa y muy detallada, un recurso conocido como &lt;em&gt;pre-registro&lt;/em&gt; (&lt;em&gt;preregistration&lt;/em&gt; en inglés). La idea es presentar, e incluso someter a revisión de pares, el plan que seguirá cierta investigación antes de realizar la propia recolección de los datos de interés.&lt;/p&gt;

&lt;p&gt;En el citado artículo se ofrece un listado (no totalmente exhaustivo) de los grados de libertad que puede presentar un estudio, restringiendo este al marco de referencia habitual utilizado para el contraste de hipótesis. De esta forma, los autores advierten que habría que eliminar o añadir ciertos grados de libertad si es otra la metodología empleada.&lt;/p&gt;

&lt;p&gt;Algunos de los mencionados grados de libertad están relacionados entre sí (recomiendo consultar la tabla que figura en la última página del artículo) o incluso pueden llegar a dar la impresión de aparecer por duplicado. No obstante, se justifica este hecho por la importancia de adoptar cierta decisión en una fase del estudio u otra.&lt;/p&gt;

&lt;p&gt;A modo de resumen, estos son los 34 grados de libertad de un estudio, desglosados en función de las distintas etapas de una investigación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fase de generación de hipótesis&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[T1]&lt;/em&gt; Llevar a cabo investigaciones exploratorias. Esto conduce a una práctica conocida como &lt;em&gt;&amp;ldquo;HARKing&amp;rdquo;&lt;/em&gt; (&lt;em&gt;&amp;ldquo;Hypothesizing After Results are Known&amp;rdquo;&lt;/em&gt;, que vendría a ser generar hipótesis una vez se conocen los resultados).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[T2]&lt;/em&gt; Declarar hipótesis imprecisas que no indiquen la dirección del posible efecto. Es un tipo especial de &lt;em&gt;&amp;ldquo;HARKing&amp;rdquo;&lt;/em&gt;, ya que el investigador puede luego analizar los datos de dos maneras alternativas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fase de diseño&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[D1]&lt;/em&gt; Crear múltiples condiciones y variables independientes manipuladas. A medida que el diseño de un estudio adquiere complejidad, esta práctica puede conducir a posibles futuras decisiones con respecto a los niveles de las variables que se están considerando o sobre las condiciones en la que centra el foco de atención.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D2]&lt;/em&gt; Medir variables adicionales sin decidir de antemano si éstas serán bien covariables, bien variables independientes, bien variables mediadoras, o bien variables moderadoras.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D3]&lt;/em&gt; Registrar la misma variable dependiente de diferentes formas alternativas. Esta práctica puede tentar al investigador a adoptar al final la escala que favorezca la aparición de resultados significativos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D4]&lt;/em&gt; Medir variables dependientes (o incluso probar teorías) adicionales, diseñadas en principio como secundarias en el estudio, que luego adopten un rol primario en los resultados del estudio si las variables principales fallan a la hora de mostrar efecto alguno (esto podría considerarse también como una especie de &lt;em&gt;&amp;ldquo;HARKing&amp;rdquo;&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D5]&lt;/em&gt; Incorporar variables adicionales que permitan, &lt;em&gt;a posteriori&lt;/em&gt;, al investigador, la exclusión del análisis de ciertos (o incluso grupos de) participantes, con el propósito de encontrar así resultados significativos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D6]&lt;/em&gt; No realizar un análisis del poder estadístico del estudio. Es más, el investigador suele adoptar una posición extremadamente optimista al respecto de este asunto cuando trabaja con muestras pequeñas, lo cual se traduce en estudios de bajo poder estadístico.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[D7]&lt;/em&gt; No informar acerca del plan de muestreo, permitiendo así la posibilidad de realizar, de manera consecutiva, múltiples pequeños estudios hasta dar con el resultado significativo deseado (y sin haber controlado el efecto que esta práctica posee sobre el &lt;em&gt;error de tipo I&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fase de recolección de datos&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[C1]&lt;/em&gt; No asignar los participantes de un estudio a las condiciones de forma aleatoria, lo cual da lugar a la posible aparición de variables de confusión.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[C2]&lt;/em&gt; No escoger de manera acertada la técnica de enmascaramiento (simple, doble o triple ciego), bien para los participantes, bien para los investigadores, pudiendo sesgar así los resultados del estudio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[C3]&lt;/em&gt; Corregir, codificar o descartar datos durante la fase de recolección, de una forma no coherente con la técnica de enmascaramiento asociada al estudio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[C4]&lt;/em&gt; Determinar la regla de parada de recolección de datos en función de si se ha obtenido, o no, el resultado deseado.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fase de análisis&lt;/em&gt;: los puntos que se listan a continuación en este apartado son una serie de decisiones con marcado carácter &lt;a href=&#34;https://es.wikipedia.org/wiki/Ad_hoc&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;ad hoc&lt;/em&gt;&lt;/a&gt; por parte del investigador.

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[A1]&lt;/em&gt; Seleccionar entre diferentes opciones de tratamiento para los datos incompletos o perdidos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A2]&lt;/em&gt; Especificar el pre-procesamiento de los datos (limpieza, normalización, suavizado o correcciones).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A3]&lt;/em&gt; Dictaminar cómo lidiar con las violaciones de los supuestos estadísticos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A4]&lt;/em&gt; Decidir cómo tratar con los valores atípicos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A5]&lt;/em&gt; Determinar la variable dependiente de entre las múltiples alternativas existentes asociadas a una misma teoría.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A6]&lt;/em&gt; Probar diferentes maneras de anotar o registrar (o emplear distintas escalas para) una variable dependiente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A7]&lt;/em&gt; Optar por una teoría alternativa como principal resultado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A8]&lt;/em&gt; Escoger las variables independientes de entre un conjunto de variables independientes manipuladas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A9]&lt;/em&gt; Usar las variables independientes manipuladas de diversas formas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A10]&lt;/em&gt; Incluir diferentes variables probándolas bien como covariables, bien como variables independientes, bien como variables mediadoras, bien como variables moderadoras.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A11]&lt;/em&gt; Utilizar las variables independientes no manipuladas de distintas maneras.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A12]&lt;/em&gt; Usar un criterio alternativo de inclusión y exclusión de participantes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A13]&lt;/em&gt; La propia determinación del modelo estadístico.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A14]&lt;/em&gt; La elección del método de estimación, el programa informático donde se va a llevar a cabo el análisis de datos, y la forma en la que se calculan los errores estándar.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[A15]&lt;/em&gt; La elección del criterio de inferencia.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fase de informe&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[R1]&lt;/em&gt; No asegurar la reproducibilidad del estudio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[R2]&lt;/em&gt; No habilitar (o facilitar la posibilidad de) la replicación del estudio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[R3]&lt;/em&gt; Para los estudios que han sido pre-registrados, no mencionar, falsificar o identificar erróneamente su pre-registro.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[R4]&lt;/em&gt; No informar de los denominados &amp;ldquo;estudios fallidos&amp;rdquo; que fueron originalmente considerados relevantes para la investigación propuesta.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[R5]&lt;/em&gt; No informar adecuadamente de los resultados y los &lt;em&gt;p&lt;/em&gt;-valores.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[R6]&lt;/em&gt; Formular hipótesis después de observar los resultados (el ya nombrado &lt;em&gt;&amp;ldquo;HARKing&amp;rdquo;&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los autores dedican en el artículo, a cada uno de los anteriores 34 puntos, algunos párrafos para contextualizarlos, explicar su influencia sobre los resultados y ofrecer buenas prácticas para evitar que hagan acto de presencia en el estudio.&lt;/p&gt;

&lt;p&gt;En resumen, una lectura que merece la pena y que recomiendo encarecidamente.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sobre los temarios de oposiciones</title>
      <link>https://imalexissaez.github.io/2018/07/31/sobre-los-temarios-de-oposiciones/</link>
      <pubDate>Tue, 31 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/31/sobre-los-temarios-de-oposiciones/</guid>
      <description>&lt;p&gt;En este artículo, señalaremos la legislación vigente al respecto de los temarios de oposiciones para el acceso al cuerpo de profesores de Enseñanza Secundaria, listando completamente el asociado a la especialidad de matemáticas.&lt;/p&gt;

&lt;p&gt;Para empezar, podemos acudir, por ejemplo, a la &lt;a href=&#34;http://www.dogv.gva.es/datos/2016/05/06/pdf/2016_3109.pdf&#34; target=&#34;_blank&#34;&gt;Orden 13 / 2016&lt;/a&gt;, de 3 de mayo, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso, y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas y profesores técnicos de Formación Profesional.&lt;/p&gt;

&lt;p&gt;En la &lt;em&gt;Comunidad Valenciana&lt;/em&gt;, esta es la orden asociada a la última convocatoria de oposiciones para Educación Secundaria. Nos interesa acudir a su capítulo segundo, que recoge las bases específicas para los distintos cuerpos de profesores, y más concretamente al apartado &lt;em&gt;15.4. Temarios&lt;/em&gt;. En él figura:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;De conformidad con lo previsto en la Orden ECD / 191 / 2012, de 6 de febrero, por la que se regulan los temarios que han de regir en los procedimientos de ingreso, accesos y adquisición de nuevas especialidades en los cuerpos docentes establecidos en la Ley Orgánica 2 / 2006, de 3 de mayo, de Educación, serán de aplicación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) Los temarios establecidos en el anexo III de la Orden de 9 de septiembre de 1993 por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, adquisición de nuevas especialidades y movilidad para determinadas especialidades de los Cuerpos de Maestros, Profesores de Enseñanza Secundaria y Profesores de escuelas oficiales de idiomas, regulados por el Real Decreto 850 / 1993, de 4 de junio, en lo que corresponde a las especialidades del Cuerpo de Profesores de Enseñanza Secundaria.&lt;/li&gt;
&lt;li&gt;b) Los temarios establecidos en los anexos I y II de la Orden de 1 de febrero de 1996, por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, adquisición de nuevas especialidades y movilidad para determinadas especialidades de los Cuerpos de Profesores de Enseñanza Secundaria y Profesores Técnicos de Formación Profesional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por lo que respecta a la &lt;a href=&#34;http://www.boe.es/boe/dias/2012/02/07/pdfs/BOE-A-2012-1825.pdf&#34; target=&#34;_blank&#34;&gt;Orden ECD / 191 / 2012&lt;/a&gt;, es importante que destaquemos, además del contenido de los puntos a) y b) listados arriba, que deroga la &lt;a href=&#34;https://www.boe.es/boe/dias/2011/11/18/pdfs/BOE-A-2011-18099.pdf&#34; target=&#34;_blank&#34;&gt;Orden EDU / 3138 / 2011&lt;/a&gt;, de 15 de noviembre, por la que se aprueban los
temarios que han de regir en los procedimientos de ingreso, accesos y
adquisición de nuevas especialidades de los Cuerpos de Profesores de
Enseñanza Secundaria y Profesores Técnicos de Formación Profesional.&lt;/p&gt;

&lt;p&gt;Esta última declaraba, para la especialidad de matemáticas, un temario compuesto por 74 temas y fue modificada por la &lt;a href=&#34;http://www.boe.es/boe/dias/2011/12/28/pdfs/BOE-A-2011-20392.pdf&#34; target=&#34;_blank&#34;&gt;Orden EDU / 3530 / 2011&lt;/a&gt;, de 19 de diciembre, por la que se corrigen errores y omisiones en la Orden EDU / 3138 / 2011, de 15 de noviembre, por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, accesos y adquisición de nuevas especialidades de los Cuerpos de Profesores de Enseñanza Secundaria y Profesores Técnicos de Formación Profesional. En ella, además de corregir algunas erratas del mencionado temario, incluso añadían un tema adicional, elevando la cifra total hasta 75. Este hecho justifica la discrepancia que aparece cuando realizamos una búsqueda, en Internet, sobre temarios de oposiciones para la especialidad de matemáticas y hemos de actuar con cautela, por tanto.&lt;/p&gt;

&lt;p&gt;Así pues, consultemos el referido &lt;a href=&#34;https://www.boe.es/boe/dias/1993/09/21/pdfs/A27400-27438.pdf&#34; target=&#34;_blank&#34;&gt;anexo III&lt;/a&gt; de la &lt;em&gt;Orden&lt;/em&gt; de 9 de septiembre de 1993, que para la especialidad de matemáticas lista los siguientes 71 temas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Números naturales. Sistemas de numeración.&lt;/li&gt;
&lt;li&gt;Fundamentos y aplicaciones de la teoría de grafos. Diagramas en árbol.&lt;/li&gt;
&lt;li&gt;Técnicas de recuento. Combinatoria.&lt;/li&gt;
&lt;li&gt;Números enteros. Divisibilidad. Números primos. Congruencia.&lt;/li&gt;
&lt;li&gt;Números racionales.&lt;/li&gt;
&lt;li&gt;Números reales. Topología de la recta real.&lt;/li&gt;
&lt;li&gt;Aproximación de números. Errores. Notación científica.&lt;/li&gt;
&lt;li&gt;Sucesiones. Término general y forma recurrente. Progresiones aritméticas y geométricas. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Números complejos. Aplicaciones geométricas.&lt;/li&gt;
&lt;li&gt;Sucesivas ampliaciones del concepto de número. Evolución histórica y problemas que resuelve cada una.&lt;/li&gt;
&lt;li&gt;Conceptos básicos de la teoría de conjuntos. Estructuras algebraicas.&lt;/li&gt;
&lt;li&gt;Espacios vectoriales. Variedades lineales. Aplicaciones entre espacios vectoriales. Teorema de isomorfía.&lt;/li&gt;
&lt;li&gt;Polinomios. Operaciones. Fórmula de Newton. Divisibilidad de polinomios. Fracciones algebraicas.&lt;/li&gt;
&lt;li&gt;Ecuaciones. Resolución de ecuaciones. Aproximación numérica de raíces.&lt;/li&gt;
&lt;li&gt;Ecuaciones diofánticas.&lt;/li&gt;
&lt;li&gt;Discusión y resolución de sistemas de ecuaciones lineales. Teorema de Rouché. Regla de Cramer. Método de Gauss-Jordan.&lt;/li&gt;
&lt;li&gt;Programación lineal. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Matrices. Álgebra de matrices. Aplicaciones al campo de las Ciencias Sociales y de la Naturaleza.&lt;/li&gt;
&lt;li&gt;Determinantes. Propiedades. Aplicación al cálculo del rango de una matriz.&lt;/li&gt;
&lt;li&gt;El lenguaje algebraico. Símbolos y números. Importancia de su desarrollo y problemas que resuelve. Evolución histórica del álgebra.&lt;/li&gt;
&lt;li&gt;Funciones reales de variable real. Funciones elementales; situaciones reales en las que aparecen. Composición de funciones.&lt;/li&gt;
&lt;li&gt;Funciones exponenciales y logarítmicas. Situaciones reales en las que aparecen.&lt;/li&gt;
&lt;li&gt;Funciones circulares e hiperbólicas y sus recíprocas. Situaciones reales en las que aparecen.&lt;/li&gt;
&lt;li&gt;Funciones dadas en forma de tabla. Interpolación polinómica. Interpolación y extrapolación de datos.&lt;/li&gt;
&lt;li&gt;Límites de funciones. Continuidad y discontinuidades. Teorema de Bolzano. Ramas infinitas.&lt;/li&gt;
&lt;li&gt;Derivada de una función en un punto. Función derivada. Derivadas sucesivas. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Desarrollo de una función en serie de potencias. Teorema de Taylor. Aplicaciones al estudio local de funciones.&lt;/li&gt;
&lt;li&gt;Estudio global de funciones. Aplicaciones a la representación gráfica de funciones.&lt;/li&gt;
&lt;li&gt;El problema del cálculo del área. Integral definida.&lt;/li&gt;
&lt;li&gt;Primitiva de una función. Cálculo de algunas primitivas. Aplicaciones de la integral al cálculo de magnitudes geométricas.&lt;/li&gt;
&lt;li&gt;Integración numérica. Métodos y aplicaciones.&lt;/li&gt;
&lt;li&gt;Aplicación del estudio de funciones a la interpretación y resolución de problemas de la Economía, las Ciencias Sociales y la Naturaleza.&lt;/li&gt;
&lt;li&gt;Evolución histórica del cálculo diferencial.&lt;/li&gt;
&lt;li&gt;Análisis y formalización de los conceptos geométricos intuitivos: incidencia, paralelismo, perpendicularidad, ángulo, etc.&lt;/li&gt;
&lt;li&gt;Las magnitudes y su medida. Fundamentación de los conceptos relacionados con ellas.&lt;/li&gt;
&lt;li&gt;Proporciones notables. La razón áurea. Aplicaciones.&lt;/li&gt;
&lt;li&gt;La relación de semejanza en el plano. Consecuencias. Teorema de Thales. Razones trigonométricas.&lt;/li&gt;
&lt;li&gt;Trigonometría plana. Resolución de triángulos. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Geometría del triángulo.&lt;/li&gt;
&lt;li&gt;Geometría de la circunferencia. Ángulos en la circunferencia. Potencia de un punto a una circunferencia.&lt;/li&gt;
&lt;li&gt;Movimientos en el plano. Composición de movimientos. Aplicación al estudio de las teselaciones del plano. Frisos y mosaicos.&lt;/li&gt;
&lt;li&gt;Homotecia y semejanza en el plano.&lt;/li&gt;
&lt;li&gt;Proyecciones en el plano. Mapas. Planisferios terrestres: principales sistemas de representación.&lt;/li&gt;
&lt;li&gt;Semejanza y movimientos en el espacio.&lt;/li&gt;
&lt;li&gt;Poliedros. Teorema de Euler. Sólidos platónicos y arquimedianos.&lt;/li&gt;
&lt;li&gt;Distintas coordenadas para describir el plano o el espacio. Ecuaciones de curvas y superficies.&lt;/li&gt;
&lt;li&gt;Generación de curvas como envolventes.&lt;/li&gt;
&lt;li&gt;Espirales y hélices. Presencia en la Naturaleza, en el Arte y en la Técnica.&lt;/li&gt;
&lt;li&gt;Superficies de revolución. Cuádricas. Superficies regladas. Presencia en la Naturaleza, en el Arte y en la Técnica.&lt;/li&gt;
&lt;li&gt;Introducción a las geometrías no euclídeas. Geometría esférica.&lt;/li&gt;
&lt;li&gt;Sistemas de referencia en el plano y en el espacio. Ecuaciones de la recta y del plano. Relaciones afines.&lt;/li&gt;
&lt;li&gt;Producto escalar de vectores. Producto vectorial y producto mixto. Aplicaciones a la resolución de problemas físicos y geométricos.&lt;/li&gt;
&lt;li&gt;Relaciones métricas: perpendicularidad, distancias, ángulos, áreas, volúmenes, etc.&lt;/li&gt;
&lt;li&gt;Las cónicas como secciones planas de una superficie cónica. Estudio analítico. Presencia en la Naturaleza, el Arte y la Técnica.&lt;/li&gt;
&lt;li&gt;La geometría fractal. Nociones básicas.&lt;/li&gt;
&lt;li&gt;Evolución histórica de la geometría.&lt;/li&gt;
&lt;li&gt;Usos de la estadística: estadística descriptiva y estadística inferencial. Métodos básicos y aplicaciones de cada una de ellas.&lt;/li&gt;
&lt;li&gt;Población y muestra. Condiciones de representatividad de una muestra. Tipos de muestreo. Tamaño de una muestra.&lt;/li&gt;
&lt;li&gt;Técnicas de obtención y representación de datos. Tablas y gráficas estadísticas. Tendenciosidad y errores más comunes.&lt;/li&gt;
&lt;li&gt;Parámetros estadísticos. Cálculo, significado y propiedades.&lt;/li&gt;
&lt;li&gt;Desigualdad de Tchebyschev. Coeficiente de variación. Variable normalizada. Aplicación al análisis, interpretación y comparación de datos estadísticos.&lt;/li&gt;
&lt;li&gt;Series estadísticas bidimensionales. Regresión y correlación lineal. Coeficiente de correlación. Significado y aplicaciones.&lt;/li&gt;
&lt;li&gt;Frecuencia y probabilidad. Leyes del azar. Espacio probabilístico.&lt;/li&gt;
&lt;li&gt;Probabilidad compuesta. Probabilidad condicionada. Probabilidad total. Teorema de Bayes.&lt;/li&gt;
&lt;li&gt;Distribuciones de probabilidad de variable discreta. Características y tratamiento. Las distribuciones binomial y de Poisson. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Distribuciones de probabilidad de variable continua. Características y tratamiento. La distribución normal. Aplicaciones.&lt;/li&gt;
&lt;li&gt;Inferencia estadística. Test de hipótesis.&lt;/li&gt;
&lt;li&gt;Aplicaciones de la estadística y el cálculo de probabilidades al estudio y toma de decisiones en problemas de las Ciencias Sociales y de la Naturaleza. Evolución histórica.&lt;/li&gt;
&lt;li&gt;La resolución de problemas en matemáticas. Estrategias. Importancia histórica.&lt;/li&gt;
&lt;li&gt;Lógica proposicional. Ejemplos y aplicaciones al razonamiento matemático.&lt;/li&gt;
&lt;li&gt;La controversia sobre los fundamentos de la matemática. Las limitaciones internas de los sistemas formales.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para elaborar cada uno de los anteriores temas, que deberían destacar por su originalidad, nos pueden resultar interesantes las siguientes referencias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diego, B. y Llerena, A., (1993), &lt;em&gt;Temas de oposiciones a profesores de enseñanza secundaria&lt;/em&gt;, Madrid, España: Editorial Deimos.&lt;/li&gt;
&lt;li&gt;Galván, F., Gamboa, J. M. y Rodríguez, M., (2011), &lt;em&gt;Desarrollo del nuevo temario de las oposiciones de secundaria (Matemáticas)&lt;/em&gt;, Madrid, España: Sanz y Torres.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Uno de múltiplos... ¡de 600!</title>
      <link>https://imalexissaez.github.io/2018/07/29/uno-de-multiplos-de-600/</link>
      <pubDate>Sun, 29 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/29/uno-de-multiplos-de-600/</guid>
      <description>&lt;p&gt;En el presente artículo abordaremos en detalle un interesante problema propuesto en la convocatoria de oposiciones de Andalucía, de este mismo año 2018, para la especialidad de matemáticas.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Problema 3:&lt;/strong&gt; Demuestra que todos los términos de la sucesión $\{a_n\}_{n&amp;gt;2}$ son múltiplos de $600$, siendo&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_n = (n^2-1)(n^2+1)(n^4-16)n^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Es más que razonable que, en una primera aproximación a la resolución de este problema, estemos tentados a probar la afirmación dada en el enunciado utilizando el &lt;em&gt;principio de inducción matemática&lt;/em&gt;. Esta senda nos llevaría a definir, seguramente, $P(n)$ de forma similar a la siguiente: existe $k\in\mathbb{Z}$ tal que si $n&amp;gt;2$, entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_n = (n^2-1)(n^2+1)(n^4-16)n^2 = 600k.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;caso base&lt;/em&gt;, $P(3)$ en esta ocasión, comprobamos rápidamente que se satisface, ya que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
a_3 &amp;= (3^2-1)(3^2+1)(3^4-16)3^2\\
&amp;= 2^3\cdot (2\cdot 5)\cdot (5\cdot 13)\cdot 3^2\\
&amp;= 2^3\cdot 3\cdot 5^2\cdot (2\cdot 3\cdot 13)\\
&amp;= 600\cdot(2\cdot 3\cdot 13),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y bastaría tomar $k = 2\cdot 3\cdot 13 = 78$ para concluir que $a_3$ es un múltiplo de $600$.&lt;/p&gt;

&lt;p&gt;Sin embargo, es posible que nuestro barco escore a la hora de abordar el &lt;em&gt;paso inductivo&lt;/em&gt;. Recordemos que ahora hemos de mostrar que si $P(n)$ se cumple, para un $n&amp;gt;2$, entonces asimismo se satisface $P(n+1)$, cuya expresión es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_{n+1} = ((n+1)^2-1)((n+1)^2+1)((n+1)^4-16)(n+1)^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A primera vista, es ciertamente complejo utilizar la información disponible en la &lt;em&gt;hipótesis de inducción&lt;/em&gt;, $P(n)$, para verificar $P(n+1)$.&lt;/p&gt;

&lt;p&gt;En este momento, deberíamos descartar por completo la opción de desarrollar ambas expresiones para compararlas, puesto que entre manos tenemos un producto de cuatro polinomios, donde uno de los cuales es de grado considerable. Es más, no quiero siquiera empezar a imaginar la posible cantidad de errores de cálculo en los que podemos caer desarrollando la expresión de $P(n+1)$. Estos problemas están diseñados para resolverse en un período de tiempo razonable, hecho que nos debe invitar a considerar estrategias de resolución alternativas a la propuesta en primer lugar.&lt;/p&gt;

&lt;p&gt;Así pues, a continuación, optaremos por llevar a cabo un enfoque diferente. Si estudiamos con detalle la expresión de $a_n$, enseguida apreciaremos que en ella aparecen un par de términos de la forma $a^2 - b^2$, concretamente $n^2 - 1$ y $n^4 - 16$. Esta situación puede hacernos sospechar que la clave pase por factorizar la expresión de $a_n$, utilizando para ello la identidad notable $a^2 - b^2 = (a+b)(a-b)$. Aplicándola, podemos escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
n^2-1&amp;=(n+1)(n-1),\\
n^4-16&amp;=(n^2+4)(n^2-4)=(n^2+4)(n+2)(n-2),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;quedando entonces&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_n = (n+1)(n-1)(n^2+1)(n^2+4)(n+2)(n-2)n^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;No parece que estemos avanzando en la buena dirección. Sin embargo, hay cuatro términos que habrán captado nuestra atención seguramente: $(n+1)$, $(n-1)$, $(n+2)$ y $(n-2)$. Quizá ayude reescribir $a_n$ de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_n = (n-2)(n-1)(n+1)(n+2)(n^2+1)(n^2+4)n^2.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nos faltaría una $n$ entre los términos $(n-1)$ y $(n+1)$ para tener en la primera parte de la expresión de $a_n$ cinco números naturales consecutivos, ya que, por hipótesis, $n&amp;gt;2$. No obstante, en realidad sí que tenemos a nuestro alcance dicha $n$, pues podemos escribir el término $n^2=n\cdot n$, y nos quedaría entonces que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
a_n = (n-2)(n-1)n(n+1)(n+2)n(n^2+1)(n^2+4).
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esta situación nos invita a escribir $a_n = u\cdot v$, con&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
u&amp;=(n-2)(n-1)n(n+1)(n+2),\\
v&amp;=n(n^2+1)(n^2+4),
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y estudiar cada una de sus partes por separado&lt;/p&gt;

&lt;p&gt;Tal y como hemos indicado arriba, como $n&amp;gt;2$, en $u$ observamos el producto de cinco números naturales consecutivos, por lo que siempre seremos capaces de encontrar entre ellos un múltiplo de $2$, uno de $3$, uno de $4$ y uno de $5$. Es decir, sabemos que existe $k\in\mathbb{N}$ de manera que podemos escribir la factorización en números primos de $u$ como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
u &amp;= 2\cdot3\cdot4\cdot5\cdot k \\
&amp;= 2^3\cdot 3\cdot 5\cdot k\\
&amp;= 120\cdot k,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, por tanto, $u$ es un múltiplo de $120$.&lt;/p&gt;

&lt;p&gt;Bastaría ahora que comprobásemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
v=n(n^2+1)(n^2+4)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es múltiplo de $5$ para que el enunciado del ejercicio propuesto se satisfaga. Llevaremos a cabo tal tarea utilizando restos potenciales módulo 5, de manera que analizaremos, acto seguido, todos y cada uno de los casos posibles que puede presentar $n$:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Si $n\equiv 0\pmod{5}$, trivialmente $v$ es múltiplo de $5$, al ser $n$ uno de sus factores.&lt;/li&gt;
&lt;li&gt;Si $n\equiv 1\pmod{5}$, $(n^2+4)\equiv (1+4)\pmod{5}\equiv 0\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+4)$ uno de sus factores.&lt;/li&gt;
&lt;li&gt;Si $n\equiv 2\pmod{5}$, $(n^2+1)\equiv (4+1)\pmod{5}\equiv 0\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+1)$ uno de sus factores.&lt;/li&gt;
&lt;li&gt;Si $n\equiv 3\pmod{5}$, $(n^2+1)\equiv (9+1)\pmod{5}\equiv 0\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+1)$ uno de sus factores.&lt;/li&gt;
&lt;li&gt;Si $n\equiv 4\pmod{4}$, $(n^2+4)\equiv (16+4)\pmod{5}\equiv 0\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+4)$ uno de sus factores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así pues, como $u$ es múltiplo de $120$, $v$ es múltiplo de $5$ y $120\cdot 5=600$, podemos concluir que $a_n$, cuando $n&amp;gt;2$, es múltiplo de $600$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparativa de problemas de oposición en Castilla y León</title>
      <link>https://imalexissaez.github.io/2018/07/27/comparativa-de-problemas-de-oposicion-en-castilla-y-leon/</link>
      <pubDate>Fri, 27 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/27/comparativa-de-problemas-de-oposicion-en-castilla-y-leon/</guid>
      <description>&lt;p&gt;A través de &lt;em&gt;Facebook&lt;/em&gt;, he tenido acceso a un recurso didáctico bastante interesante, que viene en forma de &lt;em&gt;Trabajo de Fin de Máster&lt;/em&gt; (TFM) y ha sido elaborado por &lt;em&gt;Rubén Rodríguez Ballesteros&lt;/em&gt; para la &lt;em&gt;Universidad de Valladolid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Comparativa histórica del examen de problemas en la prueba selectiva al cuerpo de profesores de secundaria en Castilla y León&amp;rdquo; es el título del TFM al que podemos tener acceso a través de &lt;a href=&#34;http://uvadoc.uva.es/handle/10324/26136&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;. En la introducción, su autor nos plantea un par de ambiciosos objetivos:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nuestro primer propósito será responder a la necesidad por parte de los futuros opositores de prepararse para la prueba oposición de la mejor forma posible. El mayor obstáculo que encuentran estos en su camino es la parte de problemas de la primera prueba.&lt;/p&gt;

&lt;p&gt;El segundo objetivo es establecer una comparativa de los problemas a lo largo del tiempo para poder responder al tópico de que los exámenes son cada día más fáciles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En mi opinión, uno de los puntos fuertes de este documento reside en la asociación, que lleva a cabo el autor, entre los bloques de contenidos a los que pertenecen los problemas de las últimas convocatorias de oposición (números y sucesiones, álgebra, cálculo infinitesimal, geometría y probabilidad) y los temas del temario oficial que les darían soporte teórico.&lt;/p&gt;

&lt;p&gt;Con esta guía podemos sortear, de cierto modo, ese bloqueo que aparece cuando por primera vez tenemos acceso al listado de 71 temas y careceremos de orientación a la hora de escoger cuáles serán los primeros que elaboraremos. Una buena estrategia sería empezar por aquellos que nos aporten herramientas y resultados interesantes de cara a resolver los problemas, ¿verdad?&lt;/p&gt;

&lt;p&gt;Además, el texto aporta una serie de referencias a la legislación de cada una de las convocatorias de oposición que han tenido lugar, desde el año 2000, en Castilla y León. Esta información nos será útil para hacernos una idea de cómo funciona el proceso en sí y su evolución a lo largo de estas casi dos décadas, hecho que quizá nos permita entrever la senda que seguirán futuras convocatorias.&lt;/p&gt;

&lt;p&gt;Sin embargo, el principal atractivo de este TFM son los capítulos 3 y 5, que recogen los enunciados de los problemas de oposición de las convocatorias analizadas y adjuntan su resolución completa. Si bien es cierto que ya el autor nos advierte que la mayoría de las soluciones proceden de los volúmenes publicados por la editorial &lt;em&gt;Deimos&lt;/em&gt; (me refiero a los que figuran en &lt;a href=&#34;http://www.academiadeimos.es/?page_id=1025&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;), aporta, en algunos casos, alternativas que nos resultarán de interés.&lt;/p&gt;

&lt;p&gt;Tras finalizar la resolución de los problemas correspondientes a cinco convocatorias, en el apartado de conclusiones el autor ofrece su opinión al respecto de la evolución de la dificultad de los enunciados propuestos:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La tendencia que se percibe es una preferencia por problemas en los que hace falta dominar la comprensión significativa del temario. Hace falta comprender los temas como teoría que estudia cómo se relacionan unos conceptos, en vez de comprenderlos como conjunto de resultados y procedimientos que han de ser aplicados de forma más o menos enrevesada.&lt;/p&gt;

&lt;p&gt;La conclusión que presentamos es que, efectivamente, el nivel de contenidos de los problemas ha bajado, el examen es menos duro. No obstante, esta visión no describe la realidad de la situación por completo. Los problemas de la última convocatoria cubren estas otras cualidades ya mencionadas: capacidad de interpretación, creatividad y comprensión significativa o global de los temas. Mientras que el opositor de hace 20 años lo que tenía que hacer era memorizar los temas y hacer problemas extensivamente, el opositor del día de hoy tiene que centrarse más en comprender y reflexionar sobre los temas, al menos aquellos que tienen una relación más directa con la resolución de los problemas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El tema es, cuanto menos, controvertido y discrepo, en parte, con la conclusión alcanzada por el autor. No considero más complicada una prueba que requiera un importante trabajo de memorización, que una que precise grandes dosis de ingenio y creatividad. La primera de ellas es únicamente cuestión de tiempo y esfuerzo, mientras que el segundo tipo es complicado de preparar y, sobre todo, quizá poco adecuado para una prueba caracterizada por ofrecer un estrecho margen temporal de maniobra.&lt;/p&gt;

&lt;p&gt;Además, alcanzar una comprensión significativa de 71 temas, en el que seamos conscientes de las relaciones existentes entre los diversos conceptos que en ellos figuran, es una tarea titánica, posiblemente una empresa para toda una vida de estudio y reflexión. Más si cabe cuando buena parte de los opositores afronta la preparación de cara a las oposiciones de una forma que dista sobremanera del estudio exhaustivo del temario.&lt;/p&gt;

&lt;p&gt;No obstante, dicho esto, tampoco quiero dejar entrever que me posiciono en contra de las conclusiones alcanzadas. Únicamente opino que los argumentos en los que estas se cimentan no me parecen suficientes para emitir un juicio sobre la evolución de la dificultad de las pruebas. Dado el cambio de filosofía transmitido en las que estas se sustentan, considero que es sumamente complicado llevar a cabo comparación alguna al respecto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre las competencias clave</title>
      <link>https://imalexissaez.github.io/2018/07/25/sobre-las-competencias-clave/</link>
      <pubDate>Wed, 25 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/25/sobre-las-competencias-clave/</guid>
      <description>&lt;p&gt;Abordemos, en este artículo, algunos aspectos fundamentales a tener en cuenta sobre las competencias clave, a las que dedicaremos uno de los apartados de nuestra programación didáctica.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;Artículo 2&lt;/em&gt; del &lt;em&gt;Real Decreto 1105 / 2014&lt;/em&gt;, de 26 de diciembre, por el que se establece el currículo básico de la Educación Secundaria Obligatoria y del Bachillerato, nos define las competencias como&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;c) Competencias: capacidades para aplicar de forma integrada los contenidos propios de cada enseñanza y etapa educativa, con el fin de lograr la realización adecuada de actividades y la resolución eficaz de problemas complejos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;para, a continuación, el mismo artículo concretar:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A efectos del presente real decreto, las competencias del currículo serán las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) Comunicación lingüística.&lt;/li&gt;
&lt;li&gt;b) Competencia matemática y competencias básicas en ciencia y tecnología.&lt;/li&gt;
&lt;li&gt;c) Competencia digital.&lt;/li&gt;
&lt;li&gt;d) Aprender a aprender.&lt;/li&gt;
&lt;li&gt;e) Competencias sociales y cívicas.&lt;/li&gt;
&lt;li&gt;f) Sentido de iniciativa y espíritu emprendedor.&lt;/li&gt;
&lt;li&gt;g) Conciencia y expresiones culturales.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para una adquisición eficaz de las competencias y su integración efectiva en el currículo, deberán diseñarse actividades de aprendizaje integradas que permitan al alumnado avanzar hacia los resultados de aprendizaje de más de una competencia al mismo tiempo.&lt;/p&gt;

&lt;p&gt;Se potenciará el desarrollo de las competencias Comunicación lingüística, Competencia matemática y competencias básicas en ciencia y tecnología.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora bien, en el real decreto apenas aparecen listadas y poco más. ¿Dónde podemos encontrar información adicional sobre las competencias clave? En mi opinión, una buena primera parada sería la visita a &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave.html&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; del &lt;em&gt;Ministerio de Educación y Formación Profesional&lt;/em&gt;, que, tras una breve introducción, nos ofrece acceso a detalles relevantes para cada una de las competencias clave a través de los siguientes enlaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/liguistica.html&#34; target=&#34;_blank&#34;&gt;Competencia en comunicación lingüística (CCLI)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;b) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/ciencias.html&#34; target=&#34;_blank&#34;&gt;Competencia matemática y competencias básicas en ciencia y tecnología (CMCT)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;c) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/digital.html&#34; target=&#34;_blank&#34;&gt;Competencia digital (CD)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;d) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/aprende.html&#34; target=&#34;_blank&#34;&gt;Competencia para aprender a aprender (CAA)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;e) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/social-civica.html&#34; target=&#34;_blank&#34;&gt;Competencias sociales y cívicas (CSC)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;f) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/i.html&#34; target=&#34;_blank&#34;&gt;Sentido de la iniciativa y espíritu emprendedor (SIEE)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;g) &lt;a href=&#34;https://www.mecd.gob.es/educacion/mc/lomce/el-curriculo/curriculo-primaria-eso-bachillerato/competencias-clave/competencias-clave/cultura.html&#34; target=&#34;_blank&#34;&gt;Conciencia y expresiones culturales (CEC)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Son muy interesantes las infografías que acompañan a las anteriores páginas y que recopilo en la siguiente galería de imágenes:&lt;/p&gt;









  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  

  
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CCLI&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img01.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img01.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CMCT&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img02.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img02.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CD&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img03.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img03.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CAA&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img04.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img04.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CSC&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img05.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img05.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;SIEE&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img06.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img06.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
      
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;CEC&#34; href=&#34;https://imalexissaez.github.io/img/20180725-img07.png&#34;&gt;
    &lt;img src=&#34;https://imalexissaez.github.io/img/20180725-img07.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
  
  
&lt;/div&gt;

&lt;p&gt;En la mencionada introducción hay un detalle que conviene advirtamos, la referencia a la &lt;em&gt;Orden ECD / 65 / 2015&lt;/em&gt;, de 21 de enero, por la que se describen las relaciones entre las competencias, los contenidos y los criterios de evaluación de la educación primaria, la educación secundaria obligatoria y el bachillerato. En este artículo no comentaré nada de ella, ya que me gustaría dedicarle por completo una entrada a dicha orden.&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿cómo puedo contribuir con mi materia al desarrollo de las anteriores competencias clave? La legislación autonómica acude a nuestro rescate en esta ocasión. Por ejemplo, para las asignaturas de matemáticas de la modalidad de ciencias del Bachillerato, el &lt;em&gt;Decreto 87 / 2015&lt;/em&gt;, de 5 de junio, del Consell, por el que establece el currículo y desarrolla la ordenación general de la Educación Secundaria Obligatoria y del Bachillerato en la Comunitat Valenciana, figura:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;En el marco de las competencias clave, las matemáticas contribuyen a la competencia en comunicación lingüística al ampliar sustancialmente el vocabulario del alumnado, incorporando el específico de las matemáticas, que utilizan todas las ciencias, además de utilizar continuamente la comunicación tanto oral como escrita en la formulación y expresión de las ideas. Las oportunidades para comunicar ideas matemáticas y el proceso de escuchar, exponer, dialogar y redactar, favorecen la expresión y comprensión de los mensajes orales y escritos en situaciones diversas. Es en la resolución de problemas donde adquiere especial importancia la expresión tanto oral como escrita de los procesos realizados y de los razonamientos seguidos.&lt;/p&gt;

&lt;p&gt;El énfasis en la funcionalidad de los aprendizajes, su utilidad para comprender el mundo que nos rodea o la misma selección de estrategias para la resolución de un problema, determinan la posibilidad real de aplicar las matemáticas a diferentes campos de conocimiento o a distintas situaciones de la vida cotidiana, contribuyendo así con mayor peso a la adquisición de la competencia matemática y competencias básicas en ciencia y tecnología. La competencia matemática, reconocida como clave por la Unión Europea, se desarrolla especialmente gracias a la contribución de la materia de Matemáticas. La activación de la competencia matemática supone que el alumno es capaz de establecer una relación profunda entre el conocimiento conceptual y el conocimiento procedimental, implicados en la resolución de una tarea matemática o científica determinada. Las matemáticas contribuyen de manera especial al desarrollo del pensamiento y razonamiento, en particular, el pensamiento lógico-deductivo.&lt;/p&gt;

&lt;p&gt;La incorporación de herramientas tecnológicas como recurso didáctico para el aprendizaje y para la resolución de problemas, y la realización de investigaciones, contribuye en gran medida a mejorar la competencia digital. Las matemáticas contribuyen en gran manera a saber analizar e interpretar datos (la información que se obtiene), cotejar y evaluar los contenidos de los medios de comunicación en función de su validez, fiabilidad y adecuación entre las fuentes, tanto online como offline, y a utilizarlos en la resolución de problemas.&lt;/p&gt;

&lt;p&gt;La materia desarrolla las técnicas heurísticas que constituyen modelos generales de tratamiento de la información y de razonamiento, y consolidan la adquisición de destrezas involucradas en la competencia de aprender a aprender tales como la autonomía, la perseverancia, la sistematización, la reflexión crítica y la habilidad para comunicar con eficacia los resultados del propio trabajo. La verbalización del proceso seguido en el aprendizaje ayuda a la reflexión sobre qué se ha aprendido, qué falta por aprender, cómo y para qué.&lt;/p&gt;

&lt;p&gt;La contribución de las matemáticas a las competencias sociales y cívicas se realiza a través de todos los contenidos y la metodología de trabajo. El bloque de tratamiento de la información facilita al alumnado el análisis matemático de los datos necesarios para la toma de decisiones en cuanto a su participación social como ciudadanos y consumidores responsables de encuestas, sondeos, escrutinios, reportajes, gráficas, etc. El trabajo cooperativo en matemáticas adquiere una dimensión singular si se aprende a aceptar otros puntos de vista distintos al propio, en particular a la hora de utilizar estrategias personales de resolución de problemas, comparando los posibles resultados y eligiendo como solución aquella que más se adecue a los valores del sistema democrático y al bienestar de la sociedad, de acuerdo con los derechos y deberes de los ciudadanos.&lt;/p&gt;

&lt;p&gt;En la metodología de la materia están implícitas las estrategias que contribuyen al sentido de iniciativa y espíritu emprendedor del alumnado (actividad creadora, labor investigadora, partir de los conocimientos que sobre un tema determinado, etc.), que le hacen sentirse capaz de aprender, aumentando su autonomía, responsabilidad y compromiso personal. La estructura misma de la materia propicia el desarrollo de estructuras mentales que ayudan a organizar el conocimiento, apoyada en técnicas de estudio, de observación y de registro sistemático de información, planteándose preguntas y manejando diversas estrategias para la toma de decisiones racionales y críticas, y así alcanzar metas a corto y largo plazo, con perseverancia y valoración del esfuerzo realizado.&lt;/p&gt;

&lt;p&gt;Las matemáticas contribuyen a la conciencia y expresión cultural porque el mismo conocimiento matemático es expresión universal de la cultura. En toda conciencia y expresión cultural hay un planteamiento que incluye multitud de aspectos matemáticos, desde la medida hasta la geometría, pasando por la resolución de problemas, que permite al alumnado apreciar la importancia de la expresión creativa de ideas, experiencias y emociones a través de distintos medios, incluida la música, las artes escénicas, la literatura y las artes plásticas. En particular, la geometría es parte integral de la expresión artística de la humanidad y ofrece medios para describir y comprender el mundo que nos rodea, y apreciar la belleza de las estructuras realizadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Únicamente nos resta la labor de redactar un apartado para nuestra programación didáctica que no resulte extremadamente abstracto y que, de alguna forma, permita entrever de una manera práctica cómo procederemos a desarrollar las competencias clave en el aula.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reseña: &#39;El asesinato del profesor de matemáticas&#39;</title>
      <link>https://imalexissaez.github.io/2018/07/23/resena-el-asesinato-del-profesor-de-matematicas/</link>
      <pubDate>Mon, 23 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/23/resena-el-asesinato-del-profesor-de-matematicas/</guid>
      <description>&lt;p&gt;En este artículo, vamos a echar un vistazo a una interesante novela, con las matemáticas como telón de fondo, que viene de la mano de &lt;em&gt;Jordi Sierra i Fabra&lt;/em&gt;. ¿Será un libro adecuado para recomendar como lectura durante el curso académico?&lt;/p&gt;

&lt;p&gt;En la contraportada encontramos el siguiente texto:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Un profesor propone a sus alumnos un juego como examen para aprobar las matemáticas. El viernes por la tarde, el profesor muere, pero, antes de fallecer, comenta a sus alumnos que el sobre que hay en su bolsillo les indicará cómo buscar a su asesino. No deben fallarle&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La sinopsis del párrafo anterior nos plantea una idea muy atractiva para un libro que encontramos en la colección &lt;em&gt;El Duende Verde&lt;/em&gt;, de la editorial &lt;em&gt;Anaya&lt;/em&gt;. A través de &lt;a href=&#34;https://www.anayainfantilyjuvenil.com/libro.php?codigo_comercial=1571123&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; podemos acceder a la información completa del título, cuya portada figura a continuación.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180723-img01.jpg&#34; &gt;

&lt;img src=&#34;20180723-img01.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Portada del libro.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A primera vista, parece que ha caído en nuestras manos una especie de novela de intriga, detectivesca de corazón. ¿Y qué decir del título? Seguro que despertará la imaginación de muchas personas, sobre todo de aquellas cuya relación con la materia no fuese (o sea) todo lo satisfactoria que debiera. Ahora bien, ya lo avisa el propio autor, en las primeras páginas:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Asesinar al profe de mates no sirve de nada. Ponen a otro en su lugar y ya está.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El texto está recomendado a lectores mayores de 12 años, hecho que nos da una pista sobre el lenguaje utilizado o la predictibilidad de la historia. Es una lectura amena, entretenida, para disfrutar por completo en una de esas tardes de ocio, ya que no es muy extensa.&lt;/p&gt;

&lt;p&gt;No obstante, un detalle sí que captó rápidamente mi atención: la manera en la que se comunican los tres protagonistas del libro, alumnos del profesor y detectives de una tarde por encargo. Aunque es cierto que la novela tiene unos cuantos años a sus espaldas (se publicó en 2002), enseguida se aprecia un tipo de lenguaje forzado y muy artificial para las conversaciones de los estudiantes. Es difícil que un lector adolescente se identifique con esa forma de expresarse, ni en los tiempos que corren, ni siquiera cuando el libro vio la luz. Esta situación, por desgracia, resta en mi opinión bastante credibilidad a la historia.&lt;/p&gt;

&lt;p&gt;Detalles literarios al margen, pasemos a comentar el contenido matemático del texto. Los alumnos han de resolver una serie de retos, planteados en forma de problemas, adivinanzas o acertijos y para los cuales, más que conocimientos de la materia (el trabajo con ecuaciones lineales es el contenido matemático más avanzado que aparece si mal no recuerdo), necesitarán utilizar toda esa creatividad que rezuma de sus poros en la edad en que se encuentran.&lt;/p&gt;

&lt;p&gt;Los problemas forman parte del folclore matemático y todo profesor de la materia habrá disfrutado de ellos en algún momento de su carrera. No así seguramente los alumnos, más acostumbrados a invertir su tiempo en el aula de matemáticas llevando a cabo ejercicios y no auténticos problemas. Escribiendo de memoria, encontramos, entre otros, el clásico de la mosca que vuela entre bicicletas, el de los espías que viven en cuatro casas del mismo barrio o el que relaciona edades entre distintos miembros de una familia.&lt;/p&gt;

&lt;p&gt;Los protagonistas de la novela logran, empleando mucha creatividad, superar cada uno de los retos, mostrando al lector la solución a través de un diálogo repleto de ideas originales y salpicado de múltiples quejas y frustraciones por la dificultad de alguno de los enunciados planteados. Precisamente aquí sufre la novela otro serio varapalo en lo que a credibilidad respecta. Es bastante improbable que alumnos de los primeros cursos de educación secundaria sean capaces de abordar con éxito los retos planteados y sobre todo teniendo en cuenta el estrecho margen de tiempo del que disponen.&lt;/p&gt;

&lt;p&gt;No obstante, este hecho presenta la oportunidad de llevar la lectura al aula, y dedicar cierta parte de una las sesiones (aquellas que van tras educación física, las que tienen lugar en las últimas horas de la mañana o las de los viernes, por ejemplo) a desentrañar, con paciencia, los problemas que aparecen en los capítulos del texto. Organizando bien sus contenidos, estimo que sería una actividad que podríamos ofrecer a lo largo de un trimestre completo.&lt;/p&gt;

&lt;p&gt;Muchas de las estrategias de resolución de problemas que figuran en el libro pueden extrapolarse a las actividades que estén desarrollando en la unidad didáctica de turno. Introducirlas como hace la novela, a modo de reto o adivinanza, seguramente provoque que los estudiantes las asimilen más fácilmente y las asocien rápidamente con el texto, quedando así disponibles en su memoria para emplearlas en el aula en futuras ocasiones.&lt;/p&gt;

&lt;p&gt;Así pues, &amp;ldquo;El asesinato del profesor de matemáticas&amp;rdquo; es un libro de lectura que recomendaría encarecidamente para el aula, en los primeros cursos de educación secundaria, siempre y cuando venga acompañado de su estudio en unas cuantas sesiones del curso.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo incluir varias imágenes en la misma figura con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/</link>
      <pubDate>Sun, 22 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/</guid>
      <description>&lt;p&gt;Es muy útil poder incluir varias imágenes en la misma figura, bien sea porque están relacionadas de alguna manera, bien debido a que resulta mucho más sencillo hacer una comparación si se colocan juntas.&lt;/p&gt;

&lt;p&gt;Lidiar con elementos flotantes en &lt;em&gt;LaTeX&lt;/em&gt; no siempre es una tarea agradecida, pero, en esta ocasión, y sin que sirva de precedente, crear composiciones de múltiples imágenes dentro de una figura es bastante sencillo.&lt;/p&gt;

&lt;p&gt;A continuación, muestro los pasos que podemos seguir para ello:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dentro del entorno &lt;code&gt;figure&lt;/code&gt;, crearemos tantos entornos &lt;code&gt;subfigure&lt;/code&gt; como imágenes queramos incluir en la composición.&lt;/li&gt;
&lt;li&gt;El parámetro opcional del entorno &lt;code&gt;subfigure&lt;/code&gt;, &lt;code&gt;[b]&lt;/code&gt; en el ejemplo que aparece abajo, sigue las clásicas pautas de los elementos flotantes en &lt;em&gt;LaTeX&lt;/em&gt;, y será de suma utilidad que lo definamos con precisión si las imágenes poseen diferentes alturas.&lt;/li&gt;
&lt;li&gt;Con &lt;code&gt;textwidth&lt;/code&gt; controlaremos la anchura de las imágenes. Por ejemplo, para que aparezcan dos imágenes, una al lado de otra, y que ocupen la mayor parte del espacio horizontal del documento con el que estemos trabajando, &lt;code&gt;0.49&lt;/code&gt; será un valor adecuado, pues deja un leve espacio blanco entre ellas. Si no queremos que aparezcan tan juntas, simplemente tendremos que reducir la anterior cantidad. Para tres imágenes, &lt;code&gt;0.33&lt;/code&gt; es el valor que consigue que éstas aparezcan una a continuación de la otra, dejando leves espacios blancos entre ellas.&lt;/li&gt;
&lt;li&gt;Una vez declarados tanto el parámetro opcional como el obligatorio, incluiremos la imagen dentro del entorno &lt;code&gt;subfigure&lt;/code&gt; utilizando las instrucciones habituales. Como hemos cargado en el preámbulo los paquetes &lt;em&gt;caption&lt;/em&gt; y &lt;em&gt;subcaption&lt;/em&gt;, podremos incluir los comandos &lt;code&gt;caption&lt;/code&gt; y &lt;code&gt;label&lt;/code&gt; en cada una de las imágenes, por si luego queremos hacer referencia a alguna de ellas.&lt;/li&gt;
&lt;li&gt;Utilizar &lt;code&gt;hfill&lt;/code&gt; entre los distintos entornos &lt;code&gt;subfigure&lt;/code&gt; provoca que las imágenes queden empujadas hacia los márgenes del documento. Este efecto nos puede resultar de interés si no estamos trabajando con esos valores límites (como &lt;code&gt;0.49&lt;/code&gt;) para la anchura de las imágenes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Con un ejemplo quedará más claro el procedimiento que hemos de seguir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}
 
\usepackage[utf8]{inputenc}
\usepackage[english, spanish]{babel}
 
\usepackage{graphicx}
\usepackage{caption}
\usepackage{subcaption}
 
\begin{document}
 
\begin{figure}[!tbp]
  \begin{subfigure}[b]{0.49\textwidth}
    \includegraphics[width=\textwidth, height=\textwidth]{img1.jpg}
    \caption{Primera imagen.}
    \label{fig:f1}
  \end{subfigure}
  \hfill
  \begin{subfigure}[b]{0.49\textwidth}
    \includegraphics[width=\textwidth, height=\textwidth]{img2.jpg}
    \caption{Segunda imagen.}
    \label{fig:f2}
  \end{subfigure}
  \caption{Dos imágenes en la misma figura.}
\end{figure}
 
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos apreciar el resultado en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180722-img01.png&#34; &gt;

&lt;img src=&#34;20180722-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Resultado del bloque de código anterior.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: no es recomendable que forcemos el parámetro &lt;code&gt;height&lt;/code&gt; para que se ajuste al &lt;code&gt;textwidth&lt;/code&gt; definido, pues generalmente provocará distorsiones no deseadas en nuestras imágenes. Si aparece en el ejemplo anterior no es más que por descuido, ya que de las distintas configuraciones con las que he estado experimentando, esa ha sido precisamente la última y no he caído en cambiar ese detalle antes de publicar el código.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Referencia&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tex.stackexchange.com/questions/148438/putting-two-images-beside-each-other&#34; target=&#34;_blank&#34;&gt;Putting two images beside each other&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo dividir diagonalmente una celda de una tabla con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/</link>
      <pubDate>Fri, 20 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/</guid>
      <description>&lt;p&gt;Reconozco que la edición de tablas, junto con la gestión de figuras, a veces se convierte en una pequeña pesadilla para mí cuando estoy generando documentos con &lt;em&gt;LaTeX&lt;/em&gt;. Veamos cómo he dado respuesta a la cuestión que aparece en el título de esta entrada.&lt;/p&gt;

&lt;p&gt;Es habitual en estadística que trabajemos con tablas de contingencia, sobre todo en su versión $2\times 2$. Estas se suelen caracterizar por tener la celda que ocupa la esquina superior izquierda dividida diagonalmente, de manera que el texto inferior de dicha celda hace referencia al contenido de las filas (por ejemplo, si se posee o no cierta enfermedad), mientras que el texto superior hace lo propio para las columnas (por ejemplo, si se está expuesto a un factor de riesgo o no).&lt;/p&gt;

&lt;p&gt;Ahora bien, enseguida aparece la pregunta del millón: ¿cómo conseguimos ese efecto con &lt;em&gt;LaTeX&lt;/em&gt;? La respuesta viene de la mano del paquete &lt;code&gt;slashbox&lt;/code&gt;, cuyo uso es realmente sencillo. Veamos un ejemplo de aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}
 
\usepackage[utf8]{inputenc}
\usepackage[english, spanish]{babel}
 
\usepackage{slashbox}
 
\begin{document}
 
\begin{tabular}{|l|c|c|c|}
\hline
\backslashbox{Enfermedad}{Factor de riesgo} &amp;amp; SÍ $\equiv FR$ &amp;amp; NO $\equiv \overline{FR}$ &amp;amp; Totales\\
\hline
SÍ $\equiv E$ &amp;amp; $O_{11}$ &amp;amp; $O_{12}$ &amp;amp; $F_1$ \\
NO $\equiv \overline{E}$ &amp;amp; $O_{21}$ &amp;amp; $O_{22}$ &amp;amp; $F_2$ \\
\hline
Totales &amp;amp; $C_1$ &amp;amp; $C_2$ &amp;amp; $T$ \\
\hline
\end{tabular}
 
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos apreciar el resultado en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180720-img01.png&#34; &gt;

&lt;img src=&#34;20180720-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Tabla de contingencia en &lt;em&gt;LaTeX&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Referencias&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tex.stackexchange.com/questions/27193/latex-table-cell-with-a-diagonal-line-and-2-sub-cells&#34;&gt;LaTeX table cell with a diagonal line and 2 sub cells [duplicate]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tex.stackexchange.com/questions/7262/diagonally-divided-table-cell&#34;&gt;Diagonally divided table cell [duplicate]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Algunas definiciones básicas: contenidos, criterios de evaluación, etc.</title>
      <link>https://imalexissaez.github.io/2018/07/18/algunas-definiciones-basicas-contenidos-criterios-de-evaluacion-etc/</link>
      <pubDate>Wed, 18 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/18/algunas-definiciones-basicas-contenidos-criterios-de-evaluacion-etc/</guid>
      <description>&lt;p&gt;¿Qué es un contenido? ¿Y un criterio de evaluación? ¿Cómo se define un estándar de aprendizaje evaluable? La legislación nos da una respuesta rigurosa a cada una de las anteriores cuestiones.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;Real Decreto 1105 / 2014&lt;/em&gt;, de 26 de diciembre, por el que se establece el
currículo básico de la Educación Secundaria Obligatoria y del Bachillerato, en su &lt;em&gt;Artículo 2&lt;/em&gt;, nos ofrece la siguiente serie de definiciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Currículo&lt;/em&gt;: regulación de los elementos que determinan los procesos de enseñanza y aprendizaje para cada una de las enseñanzas y etapas educativas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Objetivos&lt;/em&gt;: referentes relativos a los logros que el estudiante debe alcanzar al finalizar cada etapa, como resultado de las experiencias de enseñanza-aprendizaje intencionalmente planificadas a tal fin.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Competencias&lt;/em&gt;: capacidades para aplicar de forma integrada los contenidos propios de cada enseñanza y etapa educativa, con el fin de lograr la realización adecuada de actividades y la resolución eficaz de problemas complejos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Contenidos&lt;/em&gt;: conjunto de conocimientos, habilidades, destrezas y actitudes que contribuyen al logro de los objetivos de cada enseñanza y etapa educativa y a la adquisición de competencias. Los contenidos se ordenan en asignaturas, que se clasifican en materias y ámbitos, en función de las etapas educativas o los programas en que participe el alumnado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Estándares de aprendizaje evaluables&lt;/em&gt;: especificaciones de los criterios de evaluación que permiten definir los resultados de aprendizaje, y que concretan lo que el estudiante debe saber, comprender y saber hacer en cada asignatura; deben ser observables, medibles y evaluables y permitir graduar el rendimiento o logro alcanzado. Su diseño debe contribuir y facilitar el diseño de pruebas estandarizadas y comparables.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Criterios de evaluación&lt;/em&gt;: son el referente específico para evaluar el aprendizaje del alumnado. Describen aquello que se quiere valorar y que el alumnado debe lograr, tanto en conocimientos como en competencias; responden a lo que se pretende conseguir en cada asignatura.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Metodología didáctica&lt;/em&gt;: conjunto de estrategias, procedimientos y acciones organizadas y planificadas por el profesorado, de manera consciente y reflexiva, con la finalidad de posibilitar el aprendizaje del alumnado y el logro de los objetivos planteados.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Ananke</title>
      <link>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</link>
      <pubDate>Tue, 17 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</guid>
      <description>&lt;p&gt;En la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; generamos, ¡solucionando incluso un pequeño &lt;em&gt;bug&lt;/em&gt;!, nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;, utilizando para ello el tema &lt;em&gt;Ananke&lt;/em&gt;. Veamos qué opciones de configuración nos ofrece dicho tema a continuación.&lt;/p&gt;

&lt;p&gt;Así pues, dedicaremos única y exclusivamente este cuarto artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; a examinar con detalle el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, que se ubica en la raíz del directorio donde hayamos decidido almacenar nuestro sitio web.&lt;/p&gt;

&lt;p&gt;Si en su momento nos decantamos por seguir, al pie de la letra, el contenido de la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt;, dicho fichero debería figurar en el interior de la ruta &lt;code&gt;C:\Hugo\Sites\prueba&lt;/code&gt;. Desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, lo seleccionamos con el botón derecho del ratón y escogemos la opción &lt;code&gt;Open with Sublime Text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Parte de su contenido nos resultará familiar a estas alturas, pues ya tuvimos que editar el mencionado archivo para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía tener acceso local al sitio web. Empecemos examinando el primer bloque de código, aquel que comprende las siguientes cinco líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;title = &amp;quot;Notre-Dame de Paris&amp;quot;
baseURL = &amp;quot;https://example.com&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;gohugo-theme-ananke&amp;quot;
# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estamos ante una serie de pares &lt;code&gt;variable = valor&lt;/code&gt;, en donde hemos de personalizar las cadenas de texto para que se ajusten a las opciones que deseamos de cara a nuestro sitio web.&lt;/p&gt;

&lt;p&gt;En el primero de ellos, la variable &lt;code&gt;title&lt;/code&gt;, como bien señala de manera descriptiva su nombre, nos permite indicar el título de la página web. En mi caso, me gustaría que fuese &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, por lo que no tengo más que modificar esa primera línea y teclear &lt;code&gt;title = &amp;quot;Infinitos Contrastes&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora, a &lt;code&gt;baseURL&lt;/code&gt; hemos de asignarle el enlace que utilizaremos para acceder a nuestro sitio web a través del navegador web. Dado que la idea es que alojemos la página web en &lt;em&gt;GitHub&lt;/em&gt;, dicha dirección será del estilo &lt;code&gt;https://&amp;lt;NOMBRE_DE_TU_CUENTA&amp;gt;.github.io&lt;/code&gt;. Para ilustrar esto último de manera más concreta, el nombre de mi cuenta en &lt;em&gt;GitHub&lt;/em&gt; es &lt;code&gt;ImAlexisSaez&lt;/code&gt;, por lo que el enlace que permitirá el acceso remoto a la página web será &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;, valor que asignaré a la variable &lt;code&gt;baseURL&lt;/code&gt; en su correspondiente línea.&lt;/p&gt;

&lt;p&gt;A continuación, en &lt;code&gt;languageCode&lt;/code&gt; reside el código del lenguaje en el que se generará nuestro sitio web, que, por defecto, es inglés estadounidense (&lt;code&gt;en-us&lt;/code&gt;). Si vamos a generar contenido un idioma diferente, conviene que modifiquemos el valor de dicha línea. Para el español, el código asociado es &lt;code&gt;es&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aunque a primera vista no parezca un detalle relevante, es importante asignar el código adecuado a &lt;code&gt;languageCode&lt;/code&gt;, puesto que algunos temas de &lt;em&gt;Hugo&lt;/em&gt; incorporan la posibilidad de localización a diferentes lenguajes y la clave pasa, precisamente, por el valor indicado para dicha variable. Para muestra, un botón: el tema actual de este sitio web, &lt;em&gt;Beautiful Hugo&lt;/em&gt;, es uno de esos ejemplos y en un futuro veremos cómo lidiar con el asunto de la localización en &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La siguiente línea, &lt;code&gt;theme = &amp;quot;gohugo-theme-ananke&amp;quot;&lt;/code&gt;, le indica a &lt;em&gt;Hugo&lt;/em&gt; en qué ruta ha de buscar para acceder a los archivos correspondientes al tema de la web. Es posible que en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; no nos diésemos cuenta, pero cuando instalamos el tema &lt;em&gt;Ananke&lt;/em&gt; automáticamente se generó una carpeta en nuestro disco duro llamada &lt;code&gt;gohugo-theme-ananke&lt;/code&gt;, en el interior del directorio &lt;code&gt;themes&lt;/code&gt;. La variable &lt;code&gt;theme&lt;/code&gt; simplemente apunta a esa ruta, de manera que si, por el extraño motivo que sea, nos vemos en la necesidad de modificar el nombre de la mencionada carpeta, también deberíamos cambiar el valor de esta línea en el archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la última línea de este bloque de código, para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía revisar localmente el sitio web, usamos el símbolo de comentario (&lt;code&gt;#&lt;/code&gt;) para anularla. De esta forma, directamente podemos suprimirla, quedando definitivamente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio web
#
title        = &amp;quot;Infinitos Contrastes&amp;quot;             # Título
baseURL      = &amp;quot;https://imalexissaez.github.io/&amp;quot;  # Enlace de entrada
languageCode = &amp;quot;es&amp;quot;                               # Idioma
theme        = &amp;quot;gohugo-theme-ananke&amp;quot;              # Ruta al tema
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recomiendo encarecidamente ir comentando el código fuente, para que en futuras revisiones sea más fácil encontrar aquello que andemos buscando. En cuanto a que todo quede alineado por el símbolo &lt;code&gt;=&lt;/code&gt;, es simplemente una manía mía, no es necesario en absoluto.&lt;/p&gt;

&lt;p&gt;Pasemos ahora al siguiente bloque de código, el dado por&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;MetaDataFormat = &amp;quot;yaml&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
SectionPagesMenu = &amp;quot;main&amp;quot;
Paginate = 3 # this is set low for demonstrating with dummy content. Set to a higher number
googleAnalytics = &amp;quot;&amp;quot;
enableRobotsTXT = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En mi caso, ha quedado como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración adicional del sitio web
#
MetaDataFormat         = &amp;quot;yaml&amp;quot; # Formato cabeceras
DefaultContentLanguage = &amp;quot;es&amp;quot;   # Idioma por defecto del contenido
SectionPagesMenu       = &amp;quot;main&amp;quot; #
Paginate               = 3      # Posts por página en main
googleAnalytics        = &amp;quot;&amp;quot;     # Código para estadísticas web
enableRobotsTXT        = true   # Buscadores
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ya que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En &lt;code&gt;MetaDataFormat&lt;/code&gt; tenemos que indicar qué lenguaje emplearemos para escribir los metadatos de las cabeceras para nuestros artículos del sitio web (hablaremos de ello en detalle cuando, por fin, nos animemos a redactar el primer artículo para nuestra página web). &lt;em&gt;Hugo&lt;/em&gt; permite trabajar con &lt;em&gt;TOML&lt;/em&gt; (por defecto), &lt;em&gt;YAML&lt;/em&gt; y &lt;em&gt;JSON&lt;/em&gt;. Los dos primeros son muy similares y, en mi caso, dado que estuve un tiempo generando el sitio web con &lt;em&gt;Jekyll&lt;/em&gt;, estoy más acostumbrado al estilo &lt;em&gt;YAML&lt;/em&gt; que al &lt;em&gt;TOML&lt;/em&gt;. Por otro lado, aunque también es factible generar las mencionadas cabeceras con &lt;em&gt;JSON&lt;/em&gt;, es un lenguaje un tanto más tedioso a la hora de declarar los metadatos, por lo que recomendaría evitarlo de momento.&lt;/li&gt;
&lt;li&gt;Para &lt;code&gt;DefaultContentLanguage&lt;/code&gt; declaramos el valor del código del idioma en el que tengamos pensado generar el contenido para nuestro sitio web. Para español, recuerdo que dicho código era &lt;code&gt;es&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Confieso que desconozco las posibilidades para &lt;code&gt;SectionPagesMenu&lt;/code&gt;. Experimenté con el tema &lt;em&gt;Ananke&lt;/em&gt; unos minutos y enseguida empecé a buscar, entre los temas disponibles para &lt;em&gt;Hugo&lt;/em&gt;, uno que se adaptara mejor a mis necesidades, así que no he profundizado en exceso en este.&lt;/li&gt;
&lt;li&gt;En &lt;code&gt;Paginate&lt;/code&gt; indicaremos el número de artículos que queremos se muestren por página en el índice que aparece al acceder a nuestro sitio web. En los propios comentarios avisan que el valor asignado por defecto, &lt;code&gt;3&lt;/code&gt;, es un tanto escaso y deberíamos incrementarlo un tanto. ¿Cuánto? En mi opinión, debería estar en función de la frecuencia con la que generemos contenido.&lt;/li&gt;
&lt;li&gt;Si activamos las estadísticas de &lt;em&gt;Google&lt;/em&gt; para nuestro sitio web, tendremos acceso a cierto código, que será el que asignemos como valor en la línea de &lt;code&gt;googleAnalytics&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finalmente, con &lt;code&gt;enableRobotsTXT = true&lt;/code&gt; damos acceso a la &amp;ldquo;arañas&amp;rdquo; de los buscadores para que exploren todo nuestro sitio web e indexen aquello que estimen conveniente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority = 0.5
  filename = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;está dedicado a los parámetros de configuración del mapa del sitio web. Al igual que sucedía con la variable &lt;code&gt;Paginate&lt;/code&gt;, configuraremos los valores de estas tres en función de la frecuencia con la que generemos contenido para nuestro sitio web. Seguramente, la única variable que modificaremos será &lt;code&gt;changefreq&lt;/code&gt;, cambiando &lt;code&gt;&amp;quot;monthly&amp;quot;&lt;/code&gt; por &lt;code&gt;&amp;quot;weekly&amp;quot;&lt;/code&gt; o, incluso, &lt;code&gt;&amp;quot;daily&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Así pues, en mi caso, únicamente he colocado un comentario introductorio al bloque y, por supuesto, he continuado alineando valores por el simbolo &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del mapa de la web
#
[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority   = 0.5
  filename   = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para finalizar, el último bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[params]
  favicon = &amp;quot;&amp;quot;
  description = &amp;quot;The last theme you&#39;ll ever need. Maybe.&amp;quot;
  facebook = &amp;quot;&amp;quot;
  twitter = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram = &amp;quot;&amp;quot;
  youtube = &amp;quot;&amp;quot;
  github = &amp;quot;&amp;quot;
  linkedin = &amp;quot;&amp;quot;
  # choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with &amp;quot;bg-&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;me ha quedado&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros de la web
#
[params]
  favicon     = &amp;quot;&amp;quot;
  description = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot;
  facebook    = &amp;quot;&amp;quot;
  twitter     = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram   = &amp;quot;&amp;quot;
  youtube     = &amp;quot;&amp;quot;
  github      = &amp;quot;&amp;quot;
  linkedin    = &amp;quot;&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image         = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number    = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estas líneas facilitan la configuración de algunas características de la web, como pueden ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;favicon&lt;/code&gt;: es el icono que aparece, en el navegador, en la parte izquierda de la pestaña correspondiente a nuestro sitio web. El valor que hemos de asignar a esta variable será la ruta de acceso a la imagen que contiene el icono. Entraré en más detalles al respecto de este tema cuando aborde cómo configurar el &lt;em&gt;favicon&lt;/em&gt; para el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: breve subtítulo o eslogan que podemos añadir a la página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;facebook&lt;/code&gt;, &lt;code&gt;twitter&lt;/code&gt;, etc.: enlaces a las páginas de nuestras redes sociales, que permiten a los visitantes dar con nuestros perfiles muy fácilmente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;featured_image&lt;/code&gt;: ruta que apunta a la imagen que deseemos ubicar en la cabecera de nuestra página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recent_posts_number&lt;/code&gt;: cantidad de artículos, de entre los últimos publicados, que aparecerán destacados en la página de entrada a nuestro sitio web.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta serie de artículos no entraré en detalle en la modificación de las plantillas del tema &lt;em&gt;Ananke&lt;/em&gt;. No obstante, en breve pasaremos a estudiar con profundidad el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y las ideas que exploremos, de cara a modificar diversos aspectos de un sitio web, se podrán extrapolar a cualquier tema, &lt;em&gt;Ananke&lt;/em&gt; incluido.&lt;/p&gt;

&lt;p&gt;Así pues, seguramente, en la próxima entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; instalaremos el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y echaremos un vistazo por encima a su correspondiente archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mezclando determinantes y números combinatorios</title>
      <link>https://imalexissaez.github.io/2018/07/16/mezclando-determinantes-y-numeros-combinatorios/</link>
      <pubDate>Mon, 16 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/16/mezclando-determinantes-y-numeros-combinatorios/</guid>
      <description>&lt;p&gt;En esta entrada abordaremos un precioso problema de determinantes, propuesto durante la convocatoria de oposiciones de Aragón de este mismo año 2018, para la especialidad de matemáticas.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Problema 2:&lt;/strong&gt; Sea $k$ un número natural no nulo y sea $f$ la función real de variable real dada por:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; x\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; x^2\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; x^3\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\ 
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; x^k\\ 
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; x^{k+1}
\end{vmatrix}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;a) Calcular $f(x + 1) - f(x)$.&lt;/p&gt;

&lt;p&gt;b) Expresar la suma $1^k + 2^k + \cdots + n^k$ mediante esta función.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;En lugar de abordar directamente la resolución del primer apartado, detengámonos por un instante a analizar la expresión del determinante dado por la función $f(x)$. Los números combinatorios que aparecen y, sobre todo, la forma en que lo hacen, seguramente hayan captado nuestra atención. Resulta, cuanto menos, familiar ese patrón, ¿verdad? Parte de él es el que aparece en el famoso &lt;em&gt;triángulo de Pascal&lt;/em&gt;, si expresamos sus componentes utilizando números combinatorios.&lt;/p&gt;

&lt;p&gt;Ahora bien, de manera automática, y supongo que por deformación matemática, cuando viene a nuestra cabeza el &lt;em&gt;triángulo de Pascal&lt;/em&gt;, enseguida pensamos en el &lt;em&gt;teorema del binomio&lt;/em&gt;, que recordemos afirma que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(x+y)^n &amp;= \sum_{k=0}^{n}{\binom{n}{k}x^{n-k}y^k}\\
&amp;= \binom{n}{0}x^n + \binom{n}{1}x^{n-1}y+\cdots+\binom{n}{n-1}xy^{n-1}+\binom{n}{n}y^n.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Merece la pena explorar la idea de una posible relación entre el &lt;em&gt;teorema del binomio&lt;/em&gt; y la expresión de $f(x)$. Para empezar, en la última columna del determinante encontramos las potencias de $x$, pero no observamos la existencia de más potencias en el resto de los elementos de dicho determinante. Este hecho nos invita a pensar que quizá sea conveniente que particularmente estudiemos el desarrollo del binomio $(1+x)^n$, dado el valor de las potencias de uno. Además, si ahora echamos un vistazo rápido al enunciado del primer apartado, aparece un $(1+x)$, ¡puede que estemos sobre la pista de la senda correcta!&lt;/p&gt;

&lt;p&gt;Desarrollemos $(1+x)^n$, para algunos valores concretos de $n$, utilizando para ello el &lt;em&gt;teorema del binomio&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
(1+x)^1 &amp;= \dbinom{1}{0} + \dbinom{1}{1}x,\\
(1+x)^2 &amp;= \dbinom{2}{0} + \dbinom{2}{1}x + \dbinom{2}{2}x^2,\\
(1+x)^3 &amp;= \dbinom{3}{0} + \dbinom{3}{1}x + \dbinom{3}{2}x^2 + \dbinom{3}{3}x^3,\\ 
(1+x)^4 &amp;= \dbinom{4}{0} + \dbinom{4}{1}x + \dbinom{4}{2}x^2 + \dbinom{4}{3}x^3 + \dbinom{4}{4}x^4.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Para empezar, enseguida apreciamos que las potencias de $x$ vienen siempre acompañadas por un número combinatorio. No obstante, como dado $n\in\mathbb{N}$, tenemos que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\binom{n}{n}=1,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;podemos reescribir la última columna del determinante dado por $f(x)$ de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; \binom{1}{1}x^{\phantom{1}}\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; \binom{2}{2}x^2\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; \binom{3}{3}x^3\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; \binom{k}{k}x^k\\
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; \binom{k+1}{k+1}x^{k+1}
\end{vmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, centremos nuestra atención en la primera fila del determinante. Si sumamos el elemento que figura en la primera columna al que reside en la última, tendríamos&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\binom{1}{0} + \binom{1}{1}x = (1+x)^1 = 1+x.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Este hecho nos sugiere que llevemos a cabo la transformación sobre el determinante que consiste en sustituir la última columna por una combinación lineal de esta con la primera columna, que sabemos, por las propiedades de los determinantes, que no altera el valor de $f(x)$. Utilizando la notación habitual de operaciones sobre determinantes, estaríamos proponiendo llevar a cabo la transformación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
C^{\prime}_{k+1}\rightarrow C_1 + C_{k+1}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pasemos, a continuación, a estudiar la segunda fila determinante. Con la idea del párrafo anterior en mente, ¿podemos llegar a conseguir el desarrollo del binomio $(1+x)^2$? En realidad, tenemos casi todos los elementos de dicho desarrollo, a falta de una $x$ que tendría que estar multiplicando al elemento que aparece en la segunda columna. No obstante, recordemos aquí que $x$ no es más que un número real, por lo que podríamos multiplicar toda la segunda columna por $x$ y sumarla, junto con la primera columna, a la última. Es decir, la idea es llevar a cabo la transformación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
C^{\prime}_{k+1}\rightarrow C_1 + xC_2 + C_{k+1},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que permitiría que el elemento de la última columna fuese precisamente $(1+x)^2$.&lt;/p&gt;

&lt;p&gt;Empezamos a atisbar un patrón aquí, ¿verdad? Analizando la tercera fila, llegaríamos a proponer la transformación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
C^{\prime}_{k+1}\rightarrow C_1 + xC_2 + x^2C_3 + C_{k+1},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y, siguiendo con el razonamiento, la transformación que al final llevaremos a cabo sobre el determinante será la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
C^{\prime}_{k+1}\rightarrow C_1 + xC_2 + x^2C_3 + \cdots + x^{k-1}C_k + C_{k+1},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;que hace que los elementos de la última columna sean binomios de la forma $(1+x)^n$, con $0\leq n\leq k+1$.&lt;/p&gt;

&lt;p&gt;¡Cuidado! No es cierta la conclusión escrita arriba o, al menos, no lo es para todos los valores indicados de $n$. Si nos fijamos con atención, se cumple para $n=1$, para $n=2$, y así sucesivamente hasta llegar a $n=k$, ¡pero nos faltaría, para $n=k+1$, un término del desarrollo del binomio! Si nos damos cuenta, no aparece en el determinante&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\binom{k+1}{k}x^k,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;pero como esa expresión no deja de ser un número, podemos sumarlo y restarlo en esa posición para conseguir así el desarrollo del binomio $(1+x)^{k+1}$, quedando entonces la expresión de $f(x)$ como sigue:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; 1+x\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; (1+x)^2\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; (1+x)^3\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; (1+x)^k\\
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; (1+x)^{k+1} - \binom{k+1}{k}x^k
\end{vmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esa resta que aparece en el último elemento de la diagonal principal nos invita a seguir aplicando propiedades de los determinantes y separar en dos el dado en $f(x)$. Así, podemos escribir&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = g(x) + h(x),
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;donde&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
g(x) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; 1+x\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; (1+x)^2\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; (1+x)^3\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; (1+x)^k\\
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; (1+x)^{k+1}
\end{vmatrix},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
h(x) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; 0\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; 0\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; 0\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; 0\\
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; - \binom{k+1}{k}x^k
\end{vmatrix}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, enseguida nos damos cuenta de que la única diferencia entre $f(x)$ y $g(x)$ radica en que allí donde aparece $x$ en $f(x)$, figura ahora $1+x$ en $g(x)$, lo cual nos permite concluir que $g(x) = f(1+x)$.&lt;/p&gt;

&lt;p&gt;Por otro lado, en $h(x)$ tenemos una matriz triangular inferior, cuyo determinante sabemos es igual al producto de los elementos que componen su diagonal principal, es decir,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
h(x) &amp;= -\binom{1}{0}\binom{2}{1}\binom{3}{2}\binom{4}{3}\cdots\binom{k+1}{k}x^k\\
&amp;=-2!\dfrac{3!}{2!}\dfrac{4!}{3!}\cdots\dfrac{(k+1)!}{k!}x^k\\
&amp;=-(k+1)!x^k.
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Así, como&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = g(x) + h(x) = f(1+x) - (k+1)!x^k,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;la respuesta para el primer apartado de este problema sería:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x+1) - f(x) = (k+1)!x^k.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En el segundo apartado nos piden calcular el valor de la suma&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^k + 2^k + \cdots + n^k
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;utilizado $f(x)$. Enseguida nos damos cuenta de que aparece $x^k$ en la expresión final del apartado anterior, hecho que nos invita a asignarle el valor $n$ a la variable $x$, quedando entonces la ecuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(n+1) - f(n) = (k+1)!n^k.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo esta idea, para conseguir que aparezca $(n-1)^k$, asignaríamos el valor $n-1$ a la variable $x$, obteniendo así la ecuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(n) - f(n-1) = (k+1)!(n-1)^k.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Iteramos sucesivamente esta manera de proceder, de forma que al final tenemos el siguiente conjunto de ecuaciones:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\begin{aligned}
f(n+1) - f(n) &amp;= (k+1)!n^k,\\
f(n) - f(n-1) &amp;= (k+1)!(n-1)^k,\\
f(n-1) - f(n-2) &amp;= (k+1)!(n-2)^k,\\
\vdots &amp; \\
f(2) - f(1) &amp;= (k+1)!1^k,
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y sumando todas ellas, llegamos a que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(n+1) - f(1) = (k+1)!(1^k+2^k+\cdots+n^k).
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien,
&lt;span  class=&#34;math&#34;&gt;\(
f(1) = 
\begin{vmatrix}
\binom{1}{0} &amp; 0 &amp; 0 &amp;\ldots &amp; 0 &amp; 1\\
\binom{2}{0} &amp; \binom{2}{1} &amp; 0 &amp;\ldots &amp; 0 &amp; 1\\
\binom{3}{0} &amp; \binom{3}{1} &amp; \binom{3}{2} &amp; \ldots &amp; 0 &amp; 1\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\
\binom{k}{0} &amp; \binom{k}{1} &amp; \binom{k}{2} &amp; \ldots &amp; \binom{k}{k-1} &amp; 1\\
\binom{k+1}{0} &amp; \binom{k+1}{1} &amp; \binom{k+1}{2} &amp;\ldots &amp; \binom{k+1}{k-1} &amp; 1
\end{vmatrix},
\)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;y si recordamos que, dado $n\in\mathbb{N}$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\binom{n}{0} = 1,
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;resulta que la primera columna es igual a la última, provocando ello que $f(1)=0$ y, finalmente, que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1^k + 2^k + \cdots + n^k = \dfrac{f(n+1)}{(k+1)!},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;expresión que da respuesta a la cuestión planteada en el segundo apartado del problema.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curso de Hugo en YouTube</title>
      <link>https://imalexissaez.github.io/2018/07/15/curso-de-hugo-en-youtube/</link>
      <pubDate>Sun, 15 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/15/curso-de-hugo-en-youtube/</guid>
      <description>&lt;p&gt;A estas alturas, estimo que nadie pondrá en duda que la plataforma audiovisual &lt;a href=&#34;https://www.youtube.com/&#34; target=&#34;_blank&#34;&gt;YouTube&lt;/a&gt; es una colosal mina de recursos de aprendizaje, con auténticos diamantes por descubrir y al alcance de cualquier estudiante.&lt;/p&gt;

&lt;p&gt;Como iré publicando los artículos del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; a un ritmo pausado, que seguramente no convenza a quien descubra la serie de entradas en este instante, me he animado a compartir un excelente recurso que he encontrado en &lt;em&gt;YouTube&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se trata de una lista de reproducción, compuesta por la nada desdeñable cifra de 23 vídeos, que viene de la mano de &lt;a href=&#34;https://www.giraffeacademy.com/&#34; target=&#34;_blank&#34;&gt;Giraffe Academy&lt;/a&gt;. Me gustaría destacar que, además de este curso de &lt;em&gt;Hugo&lt;/em&gt;, ponen a nuestra disposición toda una serie de tutoriales sobre bases de datos, distintos lenguajes de programación, desarrollo web y generadores de páginas web estáticas. Es más que recomendable que le echemos un vistazo a su sección &lt;a href=&#34;https://www.giraffeacademy.com/#courses&#34; target=&#34;_blank&#34;&gt;Courses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Volviendo al recurso concreto que nos ocupa en esta entrada, la lista de reproducción parte de una breve introducción teórica a los generadores de páginas web estáticas, para centrarse enseguida en las principales características de &lt;em&gt;Hugo&lt;/em&gt;. A continuación, detalla su instalación en distintos sistemas operativos y pasa a generar acto seguido un sitio web, que servirá de base para explicar distintos conceptos, de una forma muy práctica, a lo largo del resto de la serie de vídeos.&lt;/p&gt;

&lt;p&gt;La mencionada lista de reproducción la podemos encontrar en &lt;a href=&#34;https://www.youtube.com/watch?v=qtIqKaDlqXo&amp;amp;list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;, siendo su índice:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction to Hugo&lt;/li&gt;
&lt;li&gt;Installing Hugo on Windows&lt;/li&gt;
&lt;li&gt;Installing Hugo on Mac&lt;/li&gt;
&lt;li&gt;Creating a New Site&lt;/li&gt;
&lt;li&gt;Installing &amp;amp; Using Themes&lt;/li&gt;
&lt;li&gt;Creating &amp;amp; Organizing Content&lt;/li&gt;
&lt;li&gt;Front Matter&lt;/li&gt;
&lt;li&gt;Archetypes&lt;/li&gt;
&lt;li&gt;Shortcodes&lt;/li&gt;
&lt;li&gt;Taxonomies&lt;/li&gt;
&lt;li&gt;Template Basics&lt;/li&gt;
&lt;li&gt;List Page Templates&lt;/li&gt;
&lt;li&gt;Single Page Templates&lt;/li&gt;
&lt;li&gt;Home Page Templates&lt;/li&gt;
&lt;li&gt;Section Templates&lt;/li&gt;
&lt;li&gt;Base Templates &amp;amp; Blocks&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;If Statements&lt;/li&gt;
&lt;li&gt;Data Files&lt;/li&gt;
&lt;li&gt;Partial Templates&lt;/li&gt;
&lt;li&gt;Shortcode Templates&lt;/li&gt;
&lt;li&gt;Building Your Site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para muestra, un botón:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/qtIqKaDlqXo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Errores frecuentes a la hora de elaborar programaciones didácticas</title>
      <link>https://imalexissaez.github.io/2018/07/14/errores-frecuentes-a-la-hora-de-elaborar-programaciones-didacticas/</link>
      <pubDate>Sat, 14 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/14/errores-frecuentes-a-la-hora-de-elaborar-programaciones-didacticas/</guid>
      <description>&lt;p&gt;En esta entrada, echaremos un vistazo al artículo &amp;ldquo;&lt;em&gt;Guía para la elaboración de una programación didáctica en las etapas de Educación Primaria y Secundaria&lt;/em&gt;&amp;rdquo;, que viene de la mano de &lt;em&gt;Ignacio Polo&lt;/em&gt; y &lt;em&gt;Gemma Puertas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Empecemos ofreciendo la referencia completa del mencionado artículo, para el que me gustaría destacar que su acceso es libre, hecho que siempre agradezco y opino que debería ser la norma que seguir en cuanto a investigación respecta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polo Martínez, I., &amp;amp; Puertas Bescós, G. (2017). Guía para la elaboración de una programación didáctica en las etapas de Educación Primaria y Secundaria. &lt;em&gt;Avances en Supervisión Educativa&lt;/em&gt;, (27). &lt;a href=&#34;https://doi.org/10.23824/ase.v0i27.593&#34; target=&#34;_blank&#34;&gt;https://doi.org/10.23824/ase.v0i27.593&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El texto posee un objetivo, cuanto menos, ambicioso, tal y como nos deja entrever en el siguiente párrafo:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El objetivo esencial de este artículo es facilitar la elaboración de programaciones didácticas (ateniendo al marco normativo vigente en Educación Primaria y Educación Secundaria Obligatoria), reales (en cuanto a su reflejo con la docencia que se está practicando en las aulas), contextualizadas (al grupo de alumnado, nivel educativo y materia curricular del presente curso escolar), eficientes (en equilibrio entre la cantidad de información que aportamos y la calidad de la misma), actualizadas (en función de las posibles variaciones que se produzcan en el grupo clase a lo largo del curso) y evaluables (desde un planteamiento procesual dirigido al análisis de los logros que se van alcanzando tras el proceso de planificación inicial).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A la hora de elaborar una programación didáctica (PD), de cara a unas futuras oposiciones, tener a nuestra disposición un documento que recopila errores frecuentes y, además, aconseja cómo solventarlos, es poco menos que un tesoro.&lt;/p&gt;

&lt;p&gt;Sin pretender llevar a cabo un resumen del artículo en las siguientes líneas, sí que me gustaría compartir algunas ideas que me han resultado interesantes, sobre todo por lo que respecta a la elaboración de programaciones didácticas para las etapas de Secundaria y de Bachillerato:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nuestra PD ha de partir del posicionamiento planteado en el &lt;em&gt;Poyecto Curricular de Etapa&lt;/em&gt; (PCE) del centro, que es elaborado y revisado por la &lt;em&gt;Comisión de Coordinación Pedagógica&lt;/em&gt; y en él se establecen directrices y propuestas globales de intervención educativa que facilitan la aplicación del currículo a la realidad educativa y específica de cada centro.&lt;/li&gt;
&lt;li&gt;Hemos de evitar concretar objetivos para un nivel o curso, pues la concreción de estos viene dada por los criterios de evaluación (CE) y los estándares de aprendizaje evaluables (EAE) de cada nivel.&lt;/li&gt;
&lt;li&gt;No debemos crear o modificar CE ni EAE, aunque sí concretar estos últimos cuando la Administración no lo haya hecho. Por otro lado, ambos precisan la creación de instrumentos de evaluación.&lt;/li&gt;
&lt;li&gt;Es un error que vinculemos la calificación del alumnado a los propios instrumentos de evaluación, sin considerar la evaluación continua de los referentes de evaluación (CE y EAE).&lt;/li&gt;
&lt;li&gt;Debemos tener cuidado a la hora de asignar calificación a aspectos que no están recogidos en los referentes de evaluación. El ejemplo más claro que a todos nos vendría a la cabeza sería el clásico &amp;ldquo;Comportamiento: 10%&amp;ldquo;.&lt;/li&gt;
&lt;li&gt;En la ponderación de la materia hemos de incluir todos los EAE, evitando dejar caer la mayoría del peso únicamente en unos pocos. No estaría de más considerar unos EAE imprescindibles (al menos uno por cada CE) en la ponderación que establezcamos, de forma que su adquisición suponga alcanzar la calificación de suficiente.&lt;/li&gt;
&lt;li&gt;Al hilo del punto anterior, hemos de tener cuidado a la hora de vincular algún EAE imprescindible a un solo instrumento y en un único momento del curso, pues nos plantearía problemas a la hora de plantear mecanismos de recuperación para el alumnado que no superase dicha situación.&lt;/li&gt;
&lt;li&gt;La información del curso anterior y los resultados de la sesión de evaluación inicial (que deberíamos realizar sin que esta posea efectos sobre la calificación del alumnado) han de tener un adecuado reflejo en nuestra PD.&lt;/li&gt;
&lt;li&gt;A la hora de señalar medidas de atención a la diversidad es importante que llevemos a cabo concreciones para el grupo de referencia. En la medida de lo posible, debemos evitar redactar un apartado excesivamente teórico y fuera de contexto.&lt;/li&gt;
&lt;li&gt;A la hora de decidir la metodología hemos de tener en cuenta las características del grupo, así como indicar explícitamente en qué unidad didáctica (UD) se aplicarán determinados principios metodológicos, sin olvidar listar los recursos didácticos necesarios.&lt;/li&gt;
&lt;li&gt;Debemos analizar los elementos transversales planteados en el PCE e identificar claramente en nuestra PD durante qué UD los desarrollaremos.&lt;/li&gt;
&lt;li&gt;Hemos de incluir actividades complementarias y extraescolares en nuestra PD, indicando qué actividades ordinarias complementan y, a ser posible, cuyo diseño sea interdisciplinar. Por otro lado, no olvidemos que son de carácter voluntario y, por tanto, no pueden tener efecto alguno sobre la calificación del alumnado.&lt;/li&gt;
&lt;li&gt;Es necesario que evaluemos nuestra PD en distintos momentos, a saber, al inicio del curso, a lo largo del curso y al final del curso. Para cada uno de estos momentos, incluiremos un proceso de evaluación y revisión.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me dejo bastantes aspectos relevantes en el tintero, por lo que recomiendo encarecidamente la lectura completa del artículo. Además, las distintas tablas que aparecen en el documento pueden inspirarnos a la hora de relacionar elementos y resumir información relevante contenida en nuestra PD.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problemas (Oposición)</title>
      <link>https://imalexissaez.github.io/proyecto/problemas/</link>
      <pubDate>Thu, 12 Jul 2018 15:57:28 +0100</pubDate>
      <guid>https://imalexissaez.github.io/proyecto/problemas/</guid>
      <description>&lt;p&gt;A nivel personal, de las cuatro partes en que se divide el procedimiento de selección de oposiciones, la asociada al supuesto práctico es aquella que encuentro más interesante. Cierto es que con un temario tan extenso como variado, esta parte precisa una buena dedicación de tiempo para preparala con garantías.&lt;/p&gt;

&lt;p&gt;En este proyecto, por tanto, recogeré diversos problemas matemáticos enfocados a la preparación de oposiciones. Por comodidad, los agruparé por temática en la siguiente tabla:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Temática&lt;/th&gt;
&lt;th&gt;Problema&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/combinatoria/&#34;&gt;Combinatoria&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2019/03/13/comenzando-con-la-combinatoria-i/&#34;&gt;59&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/16/comenzando-con-la-combinatoria-ii/&#34;&gt;60&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/20/comenzando-con-la-combinatoria-iii/&#34;&gt;61&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/23/comenzando-con-la-combinatoria-iv/&#34;&gt;62&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/27/contando-multiplos-a-traves-del-pie/&#34;&gt;63&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/30/un-curioso-multiplo-que-todo-numero-posee/&#34;&gt;64&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/03/buscando-el-numero-de-terminos-ando/&#34;&gt;65&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/06/a-la-mesa-todos-a-la-mesa/&#34;&gt;66&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/10/uno-mas-alrededor-de-la-mesa/&#34;&gt;67&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/13/de-astas-banderas-y-un-poco-de-combinatoria/&#34;&gt;68&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/17/contando-diagonales-en-un-poligono/&#34;&gt;69&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/20/organizando-las-bajadas-del-ascensor/&#34;&gt;70&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/24/presentando-desarreglos/&#34;&gt;71&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/04/27/cuando-bailar-se-convierte-en-un-problema-matematico/&#34;&gt;72&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/&#34;&gt;73&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/04/tres-dados-buscando-sumar-diez/&#34;&gt;74&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/08/secantes-dos-a-dos-pero-tres-a-tres-no-concurrentes/&#34;&gt;75&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/&#34;&gt;76&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/15/refinando-el-ejercicio-del-ultimo-dia/&#34;&gt;77&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/18/marchando-uno-de-numeros-combinatorios-generalizados/&#34;&gt;78&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/&#34;&gt;79&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/25/seguimos_de_rutas/&#34;&gt;80&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/05/29/politica-votos-y-un-poco-de-combinatoria/&#34;&gt;81&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/números-complejos/&#34;&gt;Complejos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/08/11/jugando-con-las-propiedades-del-conjugado/&#34;&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/determinantes/&#34;&gt;Determinantes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/16/mezclando-determinantes-y-numeros-combinatorios/&#34;&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/ecuaciones/&#34;&gt;Ecuaciones&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2019/03/06/cuando-un-problema-viene-con-muy-mala-leche/&#34;&gt;57&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/ecuaciones-diofánticas/&#34;&gt;Ecuaciones diofánticas&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/09/22/una-historia-de-cheques-de-viaje/&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/23/un-primer-contacto-con-ecuaciones-diofanticas-i/&#34;&gt;45&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/26/un-primer-contacto-con-ecuaciones-diofanticas-ii/&#34;&gt;46&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/30/nos-vamos-al-cine/&#34;&gt;47&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/02/un-primer-contacto-con-ecuaciones-diofanticas-iii/&#34;&gt;48&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/06/buscando-numeros-triangulares-que-son-cuadrados-perfectos/&#34;&gt;49&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/09/que-dificil-es-la-vida-sana/&#34;&gt;50&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/&#34;&gt;51&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/16/un-primer-contacto-con-ecuaciones-diofanticas-v/&#34;&gt;52&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/20/volvemos-a-los-tiempos-de-libras-marcos-y-pesetas/&#34;&gt;53&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/23/en-la-granja-de-pepito/&#34;&gt;54&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/02/27/mezclando-cuadrados-y-ecuaciones-diofanticas/&#34;&gt;55&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/02/midiendo-metros-con-duros-y-pesetas/&#34;&gt;56&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/03/09/midiendo-cuadrados-en-palmos/&#34;&gt;58&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/ecuaciones-en-diferencias/&#34;&gt;Ecuaciones en diferencias&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/09/27/repasando-ecuaciones-en-diferencias-lineales-i/&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/29/repasando-ecuaciones-en-diferencias-lineales-ii/&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/02/repasando-ecuaciones-en-diferencias-lineales-iii/&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/04/repasando-ecuaciones-en-diferencias-lineales-iv/&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/06/repasando-ecuaciones-en-diferencias-lineales-v/&#34;&gt;16&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/inducción/&#34;&gt;Inducción&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/04/sumando-cuadrados/&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/06/y-les-llego-el-turno-a-los-cubos/&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/08/una-expresion-para-la-suma-de-potencias-cuartas/&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/11/probando-una-sencilla-desigualdad-por-induccion/&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/13/multiplos-de-21-en-ceuta/&#34;&gt;9&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/tags/teoría-de-números/&#34;&gt;Teoría de números&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/29/uno-de-multiplos-de-600/&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/09/15/multiplos-de-21-en-ceuta-version-congruencias/&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/09/empezando-con-teoria-de-numeros-i/&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/11/empezando-con-teoria-de-numeros-ii/&#34;&gt;18&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/13/empezando-con-teoria-de-numeros-iii/&#34;&gt;19&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/17/empezando-con-teoria-de-numeros-iv/&#34;&gt;20&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/24/empezando-con-teoria-de-numeros-v/&#34;&gt;21&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/10/27/empezando-con-teoria-de-numeros-vi/&#34;&gt;22&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/03/empezando-con-teoria-de-numeros-vii/&#34;&gt;23&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/10/un-curioso-criterio-de-divisibilidad/&#34;&gt;24&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/14/un-polinomio-que-solo-toma-valores-enteros/&#34;&gt;25&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/17/buscando-la-ultima-cifra-de-una-torre-de-potencias/&#34;&gt;26&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/21/una-aplicacion-rapida-del-teorema-de-euler-fermat/&#34;&gt;27&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/24/buscando-numeros-compuestos/&#34;&gt;28&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/11/28/presentando-el-teorema-de-wilson/&#34;&gt;29&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/01/de-fracciones-irreducibles-y-su-suma/&#34;&gt;30&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/05/sera-multiplo-de-treinta-o-no/&#34;&gt;31&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/08/moviendo-cifras-de-posicion-en-un-numero/&#34;&gt;32&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/12/buscando-ceros-muchos-ceros-en-un-factorial/&#34;&gt;33&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/15/y-si-el-numero-de-divisores-es-impar/&#34;&gt;34&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/19/cuadrado-perfecto-cubo-perfecto-potencia-quinta-perfecta/&#34;&gt;35&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/22/y-volvemos-con-los-problemas-de-mover-digitos/&#34;&gt;36&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/26/repartiendo-el-aguinaldo-de-la-empresa/&#34;&gt;37&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2018/12/29/contando-soldados-de-una-manera-curiosa/&#34;&gt;38&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/02/cuatro-amigos-un-concierto-y-poco-dinero/&#34;&gt;39&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/05/la-cesta-de-huevos-de-brahmagupta/&#34;&gt;40&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/09/de-cometas-y-sus-perihelios/&#34;&gt;41&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/12/tiempo-de-generalizar-problemas-al-anno-2019/&#34;&gt;42&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/16/buscando-digitos-no-nulos-en-numeros-factoriales/&#34;&gt;43&lt;/a&gt;, &lt;a href=&#34;https://imalexissaez.github.io/2019/01/19/2019-anno-de-las-torres-de-potencias/&#34;&gt;44&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Probando KaTeX con un problema de inducción clásico</title>
      <link>https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/</link>
      <pubDate>Thu, 12 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problema 1:&lt;/strong&gt; Demuestra que, para cada $n\in\mathbb{N}$, con $n\geq 1$,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 + 2 + \cdots + n = \dfrac{n(n+1)}{2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Generalmente, cuando abordamos problemas en los que tenemos que demostrar que cierta fórmula o afirmación se satisface, para un conjunto de índices de cardinal infinito (en esta ocasión hablaríamos del conjunto $n\geq1$, con $n\in\mathbb{N}$), es recomendable que llevemos a cabo una primera aproximación a su resolución empleando el &lt;em&gt;principio de inducción matemática&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Así pues, vamos a considerar la propiedad, que denotaremos por $P(n)$, dada en el enunciado del problema,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1+2+\cdots+n = \dfrac{n(n+1)}{2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Por lo que respecta al &lt;em&gt;caso base&lt;/em&gt;, $P(1)$, rápidamente comprobamos que se verifica de manera trivial, ya que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1 = \dfrac{1\cdot2}{2} = 1.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Abordemos ahora el &lt;em&gt;paso inductivo&lt;/em&gt;, para lo cual hemos de mostrar que si $P(n)$ se cumple, para un $n\geq1$, entonces asimismo se satisface $P(n+1)$, cuya expresión es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1+2+\cdots+n+(n+1)=\dfrac{(n+1)(n+2)}{2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;La clave en este tipo de situaciones consiste en encontrar una manera acertada de manipular la conocida como &lt;em&gt;hipótesis de inducción&lt;/em&gt;, $P(n)$, que nos ayude a verificar el resultado que estamos buscando comprobar.&lt;/p&gt;

&lt;p&gt;Por fortuna para nosotros, si nos fijamos en el miembro izquierdo de la ecuación de $P(n+1)$, apreciamos que directamente aparece la suma de los $n$ primeros números naturales, cuyo valor, por la &lt;em&gt;hipótesis de inducción&lt;/em&gt;, es&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{n(n+1)}{2}.
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Este hecho nos permite afirmar que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1+2+\cdots+n+(n+1) = \dfrac{n(n+1)}{2} + (n+1).
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora, sumando algebraicamente ambos términos,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\dfrac{n(n+1)}{2} + (n+1)= \dfrac{n(n+1) + 2(n+1)}{2}= \dfrac{(n+1)(n+2)}{2},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;es decir, hemos llegado a mostrar que&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
1+2+\cdots+n+(n+1)=\dfrac{(n+1)(n+2)}{2},
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;completando así el &lt;em&gt;paso inductivo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Así pues, por el &lt;em&gt;principio de inducción matemática&lt;/em&gt;, podemos concluir que $P(n)$ se verifica para cada $n\in\mathbb{N}$, con $n\geq 1$.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Podría decir que la experiencia de usar &lt;em&gt;KaTeX&lt;/em&gt; ha sido un tanto agridulce. La mayor parte del artículo procede de código fuente escrito en &lt;em&gt;TeX&lt;/em&gt; y apenas he tenido que llevar cambio alguno en el código para que fuera interpretado correctamente por &lt;em&gt;KaTeX&lt;/em&gt;, hecho ciertamente positivo. No obstante, no he sido capaz de trabajar con los entornos que, según la &lt;a href=&#34;https://khan.github.io/KaTeX/function-support.html&#34;&gt;web oficial&lt;/a&gt;, están disponibles, como por ejemplo &lt;code&gt;aligned&lt;/code&gt; o &lt;code&gt;pmatrix&lt;/code&gt;. Esto, en ocasiones, temo que vaya a dificultar la narrativa o incluso a impedir la publicación de ejemplos que requieran estructuras matriciales.&lt;/p&gt;

&lt;p&gt;Seguiré investigando, ya que me gustaría ir publicando habitualmente problemas matemáticos sin tener que recurrir a la clásica solución de compartirlos en formato &lt;code&gt;PDF&lt;/code&gt; vía algún servicio de alojamiento de ficheros.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Actualización:&lt;/em&gt; tras un descanso para aclarar ideas, ¡por fin he dado con la solución al problema de los entornos! Si escribimos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$
x = 
\begin{cases}
  a &amp;amp;\text{if } b\\
  c &amp;amp;\text{if } d
\end{cases}
$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el resultado no se visualiza correctamente, y así sucede para cualquier entorno que requiera cambios de línea, como &lt;code&gt;aligned&lt;/code&gt;, &lt;code&gt;pmatrix&lt;/code&gt;, etc. La clave reside en el tratamiento que recibe en &lt;em&gt;Markdown&lt;/em&gt; el carácter &lt;code&gt;\&lt;/code&gt;, que interfiere con el funcionamiento adecuado de &lt;em&gt;KaTeX&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La solución pasa por &amp;quot;escapar&amp;quot; el mencionado carácter, de manera que, si habitualmente necesitamos dos para comenzar una nueva línea, ahora tendríamos que teclear cuatro. Además, en ocasiones, según el entorno que vayamos a emplear, es posible que debamos sacrificar las sangrías y escribir todo medianamente seguido.&lt;/p&gt;

&lt;p&gt;Es decir, el siguiente bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$
x = 
\begin{cases}
  a &amp;amp;\text{if } b\\\\ c &amp;amp;\text{if } d
\end{cases}
$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;funciona a la perfección, como podemos comprobar a continuación&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
x = 
\begin{cases}
  a &amp;\text{if } b\\
  c &amp;\text{if } d
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esto va a requerir cierto tiempo adicional para que edite algunas de las expresiones escritas con &lt;em&gt;TeX&lt;/em&gt;, pero me alegro de poder tener a mi disposición la posibilidad de utilizar algunos entornos matemáticos básicos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creando un sitio web con Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</link>
      <pubDate>Wed, 11 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</guid>
      <description>&lt;p&gt;¡Ha llegado el momento que todos estábamos esperando! Tras un par de artículos en los que hemos preparado nuestros equipos instalando las herramientas necesarias, hoy veremos cómo generar nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esta tercera entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; se va a apoyar en la guía de inicio recogida en la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, a la que podemos acceder a través de &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En primer lugar, abrimos la terminal &lt;em&gt;Git Bash&lt;/em&gt; y nos dirigimos al directorio de nuestro disco duro donde tengamos pensado almacenar localmente el sitio web. En la mencionada guía recomiendan ubicar las páginas en la ruta &lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;, aunque ya comenté en la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;anterior entrada&lt;/a&gt; que no era estrictamente necesario proceder de tal forma.&lt;/p&gt;

&lt;p&gt;Dicho esto, en este artículo seguiremos al dedillo las indicaciones dadas en la guía, de manera que en la terminal tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:/Hugo/Sites/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El comando para generar un nuevo sitio web es &lt;code&gt;hugo new site [path] [flags]&lt;/code&gt;, donde sustituiremos &lt;code&gt;[path]&lt;/code&gt; por la ruta al directorio donde almacenaremos nuestra página web. Por lo que respecta a las &lt;code&gt;[flags]&lt;/code&gt;, en el apartado de la documentación oficial dedicado a &lt;a href=&#34;https://gohugo.io/commands/hugo_new_site/&#34; target=&#34;_blank&#34;&gt;hugo new site&lt;/a&gt; tenemos el listado de las disponibles. No obstante, para una primera toma de contacto, no añadiremos ninguna de ellas.&lt;/p&gt;

&lt;p&gt;Así pues, generemos un primer sitio de prueba y, en un alarde de extrema originalidad, ubiquémoslo en el directorio &lt;code&gt;\prueba\&lt;/code&gt;. Para ello, escribimos en la terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site prueba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos entonces un mensaje de felicitación (en caso contrario, convendría que revisáramos la instalación de &lt;em&gt;Hugo&lt;/em&gt; siguiendo las indicaciones de &lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;esta entrada&lt;/a&gt;) y algunas instrucciones relacionadas con el uso de temas, la creación de contenidos y el acceso local al sitio web.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hugo&lt;/em&gt; ha creado el directorio &lt;code&gt;\prueba\&lt;/code&gt; en el interior de la ruta donde hemos ejecutado el comando &lt;code&gt;hugo new site&lt;/code&gt;. Además, ha poblado el mismo con algunas carpetas (vacías en su mayor parte), quedando una estructura como la que figura en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180711-img01.png&#34; &gt;

&lt;img src=&#34;20180711-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Estructura del sitio web.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;En un futuro exploraremos con detalle el cometido de algunos de esos directorios que aparecen en la imagen (&lt;code&gt;\content\&lt;/code&gt; y &lt;code&gt;\layouts\&lt;/code&gt; son de extrema importancia, así como ese curioso archivo denominado &lt;code&gt;config.toml&lt;/code&gt;). No obstante, por el momento, evitemos distraernos en exceso y sigamos las indicaciones de la guía.&lt;/p&gt;

&lt;p&gt;Volvemos a la terminal, nos movemos hacia el directorio &lt;code&gt;\prueba\&lt;/code&gt; e iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;, acciones que requieren teclear los dos siguientes comandos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd prueba
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el siguiente paso de la guía nos invitan a instalar un tema para la web, &lt;a href=&#34;https://themes.gohugo.io/gohugo-theme-ananke/&#34; target=&#34;_blank&#34;&gt;Ananke&lt;/a&gt;, utilizando &lt;code&gt;submodule&lt;/code&gt; (un comando de &lt;em&gt;Git&lt;/em&gt;). No obstante, en este momento, me voy a desviar de las indicaciones dadas y optar por un método diferente de instalación de temas. A continuación, nos moveremos a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y clonaremos en nuestro disco duro el propio repositorio del tema. Para ello, escribimos en la terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/budparr/gohugo-theme-ananke.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, tenemos acceso localmente a un sitio web de prueba, con un poco de contenido ya generado, que nos permitirá hacernos una idea del aspecto final de nuestro sitio web utilizando el tema &lt;em&gt;Ananke&lt;/em&gt;. Aunque soy consciente de que me estoy desviando &amp;ldquo;ligeramente&amp;rdquo; de la guía oficial, vamos a tomar esta senda para ver cómo luce nuestro sitio web.&lt;/p&gt;

&lt;p&gt;Abrimos el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt; y en el directorio donde hemos ubicado la página web (&lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;) accedemos a la carpeta &lt;code&gt;themes&lt;/code&gt;. Una vez dentro de ella, hacemos doble clic sobre el directorio &lt;code&gt;gohugo-theme-ananke&lt;/code&gt; y repetimos luego la acción con la carpeta denomiada &lt;code&gt;exampleSite&lt;/code&gt;, cuyos contenidos son:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180711-img02.png&#34; &gt;

&lt;img src=&#34;20180711-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Contenido de la carpeta del sitio web de ejemplo.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Copiamos tanto las dos carpetas, como el archivo &lt;code&gt;config.toml&lt;/code&gt;, y pegamos todo en el directorio &lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;, reemplazando los ficheros existentes con el mismo nombre que en él se encuentran.&lt;/p&gt;

&lt;p&gt;Ahora volvemos a la terminal, que todavía está apuntando a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y tecleamos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para volver al directorio raíz de nuestro sitio web. A continuación, para revisar el sitio web localmente escribimos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y, para mi sorpresa, recibimos el siguiente mensaje de error &lt;code&gt;Error: Unable to find theme Directory: C:\Hugo\gohugo-theme-ananke&lt;/code&gt;, hecho que debe ser el &lt;em&gt;karma&lt;/em&gt; haciendo acto de presencia por haberme desviado de las indicaciones de la guía oficial.&lt;/p&gt;

&lt;p&gt;Aunque no quería meterme en este artículo en el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, para evitar ofrecer mucha información de golpe, solucionemos rápidamente este pequeño &lt;em&gt;bug&lt;/em&gt; para así poder revisar localmente el sitio web.&lt;/p&gt;

&lt;p&gt;Hacemos clic derecho sobre el mencionado fichero y lo abrimos con &lt;em&gt;Sublime Text&lt;/em&gt;. Modificamos la quinta línea que aparece, de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y guardamos los cambios.&lt;/p&gt;

&lt;p&gt;Volvemos ahora a la terminal y tecleamos de nuevo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tras recibir cierta información sobre el sitio, únicamente nos resta abrir nuestro navegador web favorito y en la barra de direcciones escribir &lt;code&gt;http://localhost:1313/&lt;/code&gt;, accediendo así a la página de bienvenida de nuestro sitio web, que luce así de bien:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180711-img03.png&#34; &gt;

&lt;img src=&#34;20180711-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sitio web con el tema &lt;em&gt;Ananke&lt;/em&gt;&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Es el momento de navegar por la página, estudiar si nos complace estéticamente y comprobar si la manera en la que se organizan los contenidos es la apropiada para el sitio web que teníamos en mente. Cuando hayamos terminado el paseo, volvemos a la terminal y cerramos el servidor local utilizando la combinación de teclas &lt;code&gt;Ctrl + C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos, ahora sí y con mucho más detalle, la configuración básica del sitio web, que reside en el fichero &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando Sublime Text para escribir en Markdown</title>
      <link>https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/</link>
      <pubDate>Tue, 10 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/</guid>
      <description>&lt;p&gt;En una &lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;entrada publicada&lt;/a&gt; hace unos días, comenté que utilizo el editor de texto plano &lt;em&gt;Sublime Text 3&lt;/em&gt; como herramienta predeterminada para escribir documentos con &lt;em&gt;Markdown&lt;/em&gt;. Veamos cómo configurarlo para abordar tal empresa.&lt;/p&gt;

&lt;p&gt;Sinceramente, tal y como por defecto instalamos el mencionado programa, podríamos trabajar sin problema alguno con este lenguaje de marcado ligero, ya que únicamente requiere un editor de texto plano para su elaboración y posteriores modificaciones.&lt;/p&gt;

&lt;p&gt;No obstante, existe un paquete que mejora la experiencia de edición de manera considerable: &lt;code&gt;Markdown Editing&lt;/code&gt;. Al abrir cualquier fichero redactado utilizando el mencionado lenguaje de marcado, su contenido se centra en pantalla, facilitando así enormemente su lectura. Además, elementos como títulos, cursivas, negritas, enlaces o código quedan resaltados de forma muy agradable.&lt;/p&gt;

&lt;p&gt;Para muestra, un botón:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180710-img01.png&#34; &gt;

&lt;img src=&#34;20180710-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;em&gt;Sublime Text 3&lt;/em&gt; y &lt;em&gt;Markdown Editing&lt;/em&gt; juntos.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Si a todo ello le añadimos el modo sin distracciones que incorpora &lt;em&gt;Sublime Text 3&lt;/em&gt;, al que se accede mediante la combinación de teclas &lt;code&gt;Shift + F11&lt;/code&gt;, el resultado es una cómoda herramienta que permite generar documentos con &lt;em&gt;Markdown&lt;/em&gt; eficientemente.&lt;/p&gt;

&lt;p&gt;El procedimiento a seguir es el habitual a la hora de incorporar un nuevo paquete a &lt;em&gt;Sublime Text 3&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Si todavía no tenemos el complemento que permite instalar paquetes fácilmente, abrimos &lt;a href=&#34;https://packagecontrol.io/installation&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; y copiamos el bloque de instrucciones que figura en el cuadro asociado a la versión de &lt;em&gt;Sublime Text&lt;/em&gt; que utilicemos (a día de hoy, seguramente, será la 3).&lt;/li&gt;
&lt;li&gt;Abrimos la consola de &lt;em&gt;Sublime Text 3&lt;/em&gt;, haciendo clic en el apartado &lt;code&gt;Show Console&lt;/code&gt; del menú &lt;code&gt;View&lt;/code&gt; (o utilizando su atajo de teclado asociado). En la ventana que aparece dentro del editor, pegamos el texto copiado durante el primer paso y pulsamos enter.&lt;/li&gt;
&lt;li&gt;Hacemos uso ahora del atajo de teclado &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; y empezamos a escribir &lt;code&gt;install&lt;/code&gt;, hasta que quede resaltada la opción &lt;code&gt;Package Control: Install Package&lt;/code&gt; y después pulsamos enter.&lt;/li&gt;
&lt;li&gt;A continuación, comenzamos a escribir &lt;code&gt;markdown&lt;/code&gt; y utilizamos los cursores para seleccionar el paquete &lt;code&gt;MarkdownEditing&lt;/code&gt;, pulsando de nuevo enter una vez lo hayamos conseguido.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, basta ahora con que abramos en &lt;em&gt;Sublime Text 3&lt;/em&gt; cualquier archivo escrito con &lt;em&gt;Markdown&lt;/em&gt; y experimentaremos los cambios estéticos que comentaba al principio de este artículo.&lt;/p&gt;

&lt;p&gt;Personalmente, el esquema de colores que este paquete incorpora por defecto no me hace excesiva ilusión, acostumbrado como estoy a &lt;em&gt;Monokai&lt;/em&gt;. Sin embargo, podemos seleccionar un tema oscuro desde el menú &lt;code&gt;Preferences&lt;/code&gt;, apartado &lt;code&gt;Package Settings&lt;/code&gt;, subapartado &lt;code&gt;Markdown Editing&lt;/code&gt;, accediendo a &lt;code&gt;Change color scheme...&lt;/code&gt; y escogiendo la opción &lt;code&gt;Dark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, por si fuera de interés, me gustaría destacar que también existen diversos paquetes que ofrecen la opción de previsualizar el documento que estamos redactando y refrescar el resultado cuando llevamos a cabo cualquier tipo de edición en él. No he entrado en detalles sobre ellos en este artículo simplemente porque utilizo un método diferente para llevar a cabo las mencionadas acciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ley 4 / 2018, sobre el plurilingüismo en el sistema educativo valenciano</title>
      <link>https://imalexissaez.github.io/2018/07/09/ley-4-2018-sobre-el-plurilinguismo-en-el-sistema-educativo-valenciano/</link>
      <pubDate>Mon, 09 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/09/ley-4-2018-sobre-el-plurilinguismo-en-el-sistema-educativo-valenciano/</guid>
      <description>&lt;p&gt;Echemos un vistazo en este artículo a la &lt;em&gt;Ley 4 / 2018, de 21 de febrero, de la Generalitat, por la que se regula y promueve el plurilingüismo en el sistema educativo valenciano&lt;/em&gt;. Nos centraremos en la acreditación, capacitación y formación del profesorado.&lt;/p&gt;

&lt;p&gt;La mencionada ley, disponible para su consulta en &lt;a href=&#34;https://www.dogv.gva.es/datos/2018/02/22/pdf/2018_1773.pdf&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;, fue publicada en el &lt;em&gt;DOCV&lt;/em&gt; número 8240, de 22 de febrero de 2018, y en el &lt;em&gt;BOE&lt;/em&gt; número 63, de 13 de marzo de 2018, estando vigente desde el 23 de Febrero de 2018.&lt;/p&gt;

&lt;p&gt;Me gustaría rescatar un dato que figura en el &lt;em&gt;Preámbulo&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;los datos demolingüísticos y el conocimiento de la realidad sociolingüística de la Comunitat Valenciana, finalidad de las investigaciones sociológicas realizadas desde 1984 hasta la actualidad, nos confirman que solo alrededor de un 30% es plenamente competente en valenciano y solo un 6% lo es en inglés.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta situación conlleva, como no podía ser de otra manera, a la que podríamos calificar como justificación de la mencionada ley:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se convierte, por tanto, en un deber social y educativo la necesidad de corregir los desequilibrios de competencia y uso del valenciano en el conjunto de la población actual, así como la falta de dominio efectivo del inglés como lengua de comunicación internacional.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El &lt;em&gt;Artículo 6&lt;/em&gt; nos determina los tiempos mínimos destinados a los contenidos curriculares en cada una de las lenguas oficiales (al menos un 25% de las horas lectivas), así como en lengua extranjera (oscilando entre un 15% y un 25% de las horas lectivas). No obstante, me gustaría destacar que en el &lt;em&gt;Artículo 11&lt;/em&gt; figura que se promoverá que los centros educativos sostenidos con fondos públicos vehiculen el 50% del tiempo curricular en valenciano y el 25% de dicho tiempo en inglés.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;Capítulo V&lt;/em&gt; recoge &lt;em&gt;La acreditación, capacitación y formación del profesorado&lt;/em&gt;, cuyo &lt;em&gt;Artículo 25&lt;/em&gt; dice:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Artículo 25. Acreditación del conocimiento de lenguas: requisitos específicos del profesorado para los puestos docentes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Se considerará que dispone de la competencia suficiente para vehicular áreas no lingüísticas en castellano y en valenciano el profesorado que acredite nivel de conocimiento C1 de valenciano y C1 de castellano, respectivamente, de acuerdo con el Marco europeo común de referencia para las lenguas.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sin perjuicio de lo establecido en la disposición transitoria segunda de esta ley, se considerará que dispone de la competencia suficiente para vehicular áreas en inglés el profesorado que acredite el nivel de conocimiento C1 de inglés, de acuerdo con el Marco europeo común de referencia para las lenguas.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Encontramos el calendario de implantación en la primera disposición transitoria, siendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Curso 2018-2019. Educación infantil y primer ciclo de educación primaria.&lt;/li&gt;
&lt;li&gt;Curso 2019-2020. Segundo y tercer ciclo de educación primaria y centros de educación especial.&lt;/li&gt;
&lt;li&gt;Curso 2020-2021. Educación secundaria obligatoria, bachillerato, formación profesional y formación de personas adultas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, la segunda disposición transitoria dice:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Segunda. Acreditación transitoria de la competencia lingüística en
inglés&lt;/p&gt;

&lt;p&gt;Con carácter transitorio y hasta el curso académico 2026-2027, se considerará que dispone de la competencia suficiente para vehicular áreas en inglés el profesorado que acredite el nivel de conocimiento B2 de inglés, de acuerdo con el Marco europeo común de referencia para las lenguas.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Instalando Hugo en Windows</title>
      <link>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</link>
      <pubDate>Sun, 08 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</guid>
      <description>&lt;p&gt;Llevar a cabo la instalación de &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt; es extremadamente fácil, hecho que nos permite empezar a experimentar con esta tecnología en apenas unos minutos. Veamos, sin más dilación, todo el proceso en detalle.&lt;/p&gt;

&lt;p&gt;Así pues, en este segundo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, retomaremos la senda en el lugar que nos quedamos al finalizar la &lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt;. Recuerdo que, en ella, instalamos un par de útiles herramientas en nuestro equipo (&lt;em&gt;git&lt;/em&gt; y &lt;em&gt;Sublime Text 3&lt;/em&gt;) y nos creamos una cuenta en el portal &lt;em&gt;GitHub&lt;/em&gt;, que será donde alojemos tanto el código fuente de nuestros futuros sitios web, como los propios sitios web en sí.&lt;/p&gt;

&lt;p&gt;En la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, existe una extensa página dedicada a su instalación, con una sección que orienta específicamente a los usuarios de &lt;em&gt;Windows&lt;/em&gt; y a la que podemos acceder directamente a través de &lt;a href=&#34;https://gohugo.io/getting-started/installing#windows&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Los desarrolladores han intentado que la experiencia de instalación sea muy intuitiva, pero, en mi opinión, alguna de las indicaciones puede no ser coherente con la estructura de archivos y carpetas que hayamos decidido implementar en nuestros equipos. ¿A qué se debe esta afirmación? Por ejemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hugo&lt;/em&gt; no deja de ser simplemente un programa, por lo que en lugar de instalarlo donde indica la guía, quizá sería mejor opción ubicarlo en la carpeta &lt;code&gt;Archivos de programa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Nos señalan, en la menciona guía, un directorio muy específico donde almacenar nuestros sitios web. No obstante, aunque vayamos a utilizar la pareja &lt;em&gt;git&lt;/em&gt; + &lt;em&gt;GitHub&lt;/em&gt;, es posible que nos interese, además, utilizar un servicio de alojamiento de archivos y, por tanto, ubicar las páginas en otra ruta diferente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simplemente lo comento para que quede claro que las instrucciones que, a continuación, compartiré admiten cierta flexibilidad a la hora de llevarlas a cabo. Dicho esto, sin más preámbulos, veamos cómo instalar &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En primer lugar, bien desde la terminal, bien desde el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt;, creamos en el directorio raíz de nuestro disco duro (generalmente &lt;code&gt;C:\&lt;/code&gt;) una carpeta denominada &lt;code&gt;Hugo&lt;/code&gt;. En su interior engendramos otras dos carpetas: &lt;code&gt;bin&lt;/code&gt;, donde almacenaremos la aplicación, y &lt;code&gt;Sites&lt;/code&gt;, donde ubicaremos nuestros futuros sitios web. Al final, debemos tener disponibles las siguientes dos rutas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\bin\&lt;/code&gt;, y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para ir acostumbrándonos al uso de la terminal &lt;em&gt;Git Bash&lt;/em&gt;, todo el anterior proceso lo podíamos haber conseguido escribiendo en ella la siguiente serie de comandos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir Hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir bin Sites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, abrimos la página de descarga de &lt;em&gt;Hugo&lt;/em&gt; siguiendo &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;. A la hora de escribir estas líneas, la versión más reciente es la etiquetada como &lt;code&gt;v0.42.2&lt;/code&gt;. Ahora, desplazamos con cuidado hacia abajo el extenso listado de ficheros, hasta dar con el adecuado para nuestro sistema operativo (en mi caso es &lt;code&gt;hugo_0.42.2_Windows-64bit.zip&lt;/code&gt;). Hacemos clic sobre él e inmediatamente comenzará la descarga a nuestro disco duro de un archivo comprimido.&lt;/p&gt;

&lt;p&gt;Acto seguido, descomprimimos el contenido de dicho archivo en la ruta &lt;code&gt;C:\Hugo\bin\&lt;/code&gt; (o donde hayamos decidido que sería un buen sitio para almacenar la aplicación) y borramos el fichero que hemos descargado, pues no vamos a necesitarlo en un futuro próximo.&lt;/p&gt;

&lt;p&gt;De esta manera, si desde la terminal nos desplazamos hasta la anterior ruta y escribimos &lt;code&gt;hugo version&lt;/code&gt;, recibiremos el siguiente mensaje &lt;code&gt;Hugo Static Site Generator v0.42.2 windows/amd64 BuildDate: 2018-06-28T12:36:53Z&lt;/code&gt;, que indica que hemos llevado a cabo la instalación con éxito.&lt;/p&gt;

&lt;p&gt;No obstante, rápidamente vamos a encontrar un pequeño inconveniente a la hora de empezar a experimentar con &lt;em&gt;Hugo&lt;/em&gt;. Si escribimos &lt;code&gt;hugo version&lt;/code&gt; en cualquier otra ruta distinta a la indicada arriba, recibiremos en la terminal un mensaje de error como este: &lt;code&gt;bash: hugo: command not found&lt;/code&gt;. Dado que nuestra intención es poder utilizar la aplicación en cualquier ruta de nuestro disco duro, tenemos que añadir la ubicación de &lt;em&gt;Hugo&lt;/em&gt; al &lt;code&gt;PATH&lt;/code&gt; de &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada versión de &lt;em&gt;Windows&lt;/em&gt; tiene una manera más o menos distinta y, en ocasiones, ciertamente enrevesada, de editar el &lt;code&gt;PATH&lt;/code&gt;. Para ello, en &lt;em&gt;Windows 10&lt;/em&gt;, comenzamos pulsando el botón de inicio y seleccionamos &lt;em&gt;Configuración&lt;/em&gt;, accediendo así a la siguiente ventana:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180708-img01.png&#34; &gt;

&lt;img src=&#34;20180708-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Configuración de &lt;em&gt;Windows&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;En el cuadro de búsqueda escribimos &amp;ldquo;configuración avanzada&amp;rdquo; y seleccionamos la opción &lt;em&gt;Ver la configuración avanzada del sistema&lt;/em&gt;, tal y como figura en la siguiente imagen:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180708-img02.png&#34; &gt;

&lt;img src=&#34;20180708-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ilustración del cuadro de búsqueda.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Apareciendo así esta ventana:&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180708-img03.png&#34; &gt;

&lt;img src=&#34;20180708-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana de configuración avanzada del sistema.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Hacemos clic en el botón &lt;em&gt;Variables de entorno&amp;hellip;&lt;/em&gt;, surgiendo entonces una nueva ventana. En ella seleccionamos la fila del primer cuadro denominada &lt;em&gt;Path&lt;/em&gt; y pulsamos el botón &lt;em&gt;Editar&amp;hellip;&lt;/em&gt;, que aparece justo debajo de dicho cuadro.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180708-img04.png&#34; &gt;

&lt;img src=&#34;20180708-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana de variables de entorno.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Surge, cual capricho de un diabólico destino que parece que quiere poner nuestro temple a prueba, otra nueva ventana (ya por fin la última), donde tenemos que hacer clic sobre el botón &lt;em&gt;Nuevo&lt;/em&gt; y escribir &lt;code&gt;C:\Hugo\bin\&lt;/code&gt;. Finalmente, solo nos resta ir pulsando sobre el botón &lt;em&gt;Aceptar&lt;/em&gt; sucesivas veces, hasta cerrar por completo la ristra de ventanas precedentes que en unos segundos hemos acumulado.&lt;/p&gt;

&lt;p&gt;Así, si en cualquier ruta del sistema ahora tecleamos en la terminal &lt;code&gt;hugo version&lt;/code&gt;, no aparecerá el anterior mensaje de comando desconocido, sino la versión de la aplicación instalada, tal y como pretendíamos.&lt;/p&gt;

&lt;p&gt;En el próximo artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos el proceso de creación de un sitio web utilizando &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre el corrector de Sublime Text</title>
      <link>https://imalexissaez.github.io/2018/07/06/sobre-el-corrector-de-sublime-text/</link>
      <pubDate>Fri, 06 Jul 2018 07:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/06/sobre-el-corrector-de-sublime-text/</guid>
      <description>&lt;p&gt;Si nos decidimos a utilizar este editor de texto plano para escribir en español, ¿tenemos entonces que prescindir sin remedio del uso del corrector ortográfico? ¡En absoluto! Veamos cómo configurar esta característica fácilmente.&lt;/p&gt;

&lt;p&gt;En la instalación por defecto de &lt;em&gt;Sublime Text 3&lt;/em&gt;, el mencionado corrector ortográfico únicamente tiene a su disposición dos listados de palabras, asociados estos a los idiomas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inglés británico, e&lt;/li&gt;
&lt;li&gt;inglés estadounidense (o &amp;ldquo;americano&amp;rdquo;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comúnmente conocidos también como &lt;em&gt;diccionarios&lt;/em&gt; (aunque no se incluyan los significados para las palabras contenidas en este tipo de listados nombrado), podemos seleccionar cualquiera de ellos a través del menú &lt;code&gt;View&lt;/code&gt;, dentro del apartado &lt;code&gt;Dictionary&lt;/code&gt;, y luego activar el modo de corrección ortográfica sin más que pulsar la tecla &lt;code&gt;F6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En apenas unos minutos podemos ampliar el número de listado de palabras siguiendo esta serie de pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Desde nuestro navegador habitual, acudimos a &lt;a href=&#34;https://github.com/titoBouzout/Dictionaries&#34; target=&#34;_blank&#34;&gt;este repositorio&lt;/a&gt; de &lt;em&gt;GitHub&lt;/em&gt;, donde encontraremos un extenso listado de diccionarios disponibles.&lt;/li&gt;
&lt;li&gt;Cada idioma tiene tres archivos asociados, con las extensiones &lt;code&gt;.aff&lt;/code&gt;, &lt;code&gt;.dic&lt;/code&gt; y &lt;code&gt;.txt&lt;/code&gt;. Por ejemplo, si nos interesa que el corrector ortográfico de &lt;em&gt;Sublime Text 3&lt;/em&gt; sea capaz de utilizar un listado de palabras en español, los correspondientes ficheros que hemos de descargar serán: &lt;code&gt;Spanish.aff&lt;/code&gt;, &lt;code&gt;Spanish.dic&lt;/code&gt; y &lt;code&gt;Spanish.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si no vamos a clonar el repositorio a nuestro equipo y pretendemos bajar directamente los archivos desde &lt;em&gt;GitHub&lt;/em&gt;, debemos tener cierto cuidado a la hora de hacerlo. No hay que utilizar la cásica estrategia de clic derecho y &amp;ldquo;Guardar enlace como&amp;hellip;&amp;rdquo; sobre los enlaces que aparecen en el listado del repositorio, puesto que descargaríamos tres archivos en formato &lt;code&gt;.html&lt;/code&gt;. Una posible manera de proceder sería abrir cada uno de los enlaces de interés en una nueva pestaña y emplear entonces la estrategia de clic derecho y &amp;ldquo;Guardar enlace como&amp;hellip;&amp;rdquo; sobre el botón &lt;code&gt;Raw&lt;/code&gt; que aparece en la parte superior derecha.&lt;/li&gt;
&lt;li&gt;Una vez tenemos en nuestro haber los tres archivos asociados al idioma que nos interesa, acudiremos a la carpeta &lt;code&gt;Packages&lt;/code&gt; de &lt;em&gt;Sublime Text 3&lt;/em&gt;, cuya ruta podemos encontrar a través del menú &lt;code&gt;Preferences&lt;/code&gt;, pulsando sobre el apartado &lt;code&gt;Browse Packages...&lt;/code&gt;. En tal localización crearemos un directorio llamado &lt;code&gt;Language - Spanish&lt;/code&gt; y ubicaremos ahí los mencionados tres ficheros.&lt;/li&gt;
&lt;li&gt;Si ahora volvemos al apartado &lt;code&gt;Dictionary&lt;/code&gt; del menú &lt;code&gt;View&lt;/code&gt;, comprobaremos que podemos navegar por dos subapartados: uno asociado a los diccionarios para la lengua inglesa y otro para el correspondiente al idioma español. Seleccionamos este último y pulsamos la tecla &lt;code&gt;F6&lt;/code&gt;, activando así el corrector ortográfico de &lt;em&gt;Sublime Text 3&lt;/em&gt; en dicho idioma.&lt;/li&gt;
&lt;li&gt;Los pasos 3 y 4 podemos repetirlos tantas veces como necesitemos en función del distinto número de diccionarios que estimemos que vayamos a emplear. El proceso que seguir es siempre el indicado, con los correspondientes cambios lógicos que cada nuevo idioma incorpora al procedimiento.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dejo pendiente para una futura entrada explicar cómo he configurado &lt;em&gt;Sublime Text 3&lt;/em&gt; para convertirlo en un más que agradable editor de texto plano orientado a trabajar con documentos de tipo &lt;em&gt;markdown&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metablog (Hugo)</title>
      <link>https://imalexissaez.github.io/proyecto/metablog/</link>
      <pubDate>Thu, 05 Jul 2018 15:57:28 +0100</pubDate>
      <guid>https://imalexissaez.github.io/proyecto/metablog/</guid>
      <description>&lt;p&gt;Personalmente, me encanta experimentar con nuevas tecnologías y el campo del desarrollo web es cierto que posee una miríada de ellas con las que, literalmente, pasar cientos de horas de entretenimiento. La cifra incluso se incrementa si a ello le añadimos que, en algunas ocasiones, es necesario aprender algún lenguaje de programación (más allá de la combinación &lt;em&gt;HTML&lt;/em&gt; con &lt;em&gt;CSS&lt;/em&gt;) para poder llevar a cabo modificaciones personales en los sitios web.&lt;/p&gt;

&lt;p&gt;Tras pasar por plataformas clásicas como &lt;em&gt;Blogger&lt;/em&gt; o &lt;em&gt;Wordpress&lt;/em&gt;, la construcción de sitios webs estáticos ha captado poderosamente mi atención, pues de momento se ajusta perfectamente a mis necesidades. Una breve idilio con la combinación &lt;em&gt;Jekyll&lt;/em&gt; y &lt;em&gt;Ruby&lt;/em&gt; (tristemente finalizado al encontrar ciertos problemas de velocidad a la hora de generar localmente las páginas web), me ha llevado en la actualidad a lidiar con &lt;em&gt;Hugo&lt;/em&gt;. De momento, aunque todavía no he iniciado el aprendizaje de su lenguaje de programación asociado, &lt;em&gt;Go&lt;/em&gt;, he de confesar que el resultado a la hora de trabajar con el sitio web es más que satisfactorio.&lt;/p&gt;

&lt;p&gt;Es por ello que, en este proyecto, recogeré a continuación diversas entradas del blog que ilustran detalladamente cómo generar una página web como &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, utilizando principalmente el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lección&lt;/th&gt;
&lt;th&gt;Título&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;Preparando el equipo para Hugo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;Instalando Hugo en Windows&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;Creando un sitio web con Hugo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/&#34;&gt;Configurando el tema Ananke&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/&#34;&gt;Configurando el tema Beautiful Hugo (I)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;Configurando el tema Beautiful Hugo (II)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/&#34;&gt;Publicando la primera entrada en nuestro sitio web&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/&#34;&gt;Alojando nuestro sitio web en GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/&#34;&gt;Configurando el comportamiento de KaTeX&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/&#34;&gt;Mejorando la estética de los bloques de código&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/&#34;&gt;Unos cambios rápidos a las plantillas&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Preparando el equipo para Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/</link>
      <pubDate>Thu, 05 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/</guid>
      <description>

&lt;p&gt;Antes de lanzarnos, sin más, a generar sitios web con &lt;em&gt;Hugo&lt;/em&gt;, conviene que instalemos una serie de herramientas que nos facilitarán la vida: un sistema de control de versiones (&lt;em&gt;Git&lt;/em&gt; + &lt;em&gt;GitHub&lt;/em&gt;) y un editor de texto plano (&lt;em&gt;Sublime Text 3&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Tal es el propósito de esta primera entrada del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, que consistirá en una serie de artículos que documentarán todo el proceso de instalación de &lt;em&gt;Hugo&lt;/em&gt;, el de la creación del propio sitio web empleando dicho generador y el de la personalización de la plantilla que actualmente estoy utilizando: &lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34; target=&#34;_blank&#34;&gt;Beautiful Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;1-git&#34;&gt;1. Git&lt;/h2&gt;

&lt;p&gt;El sistema de control de versiones al que personalmente estoy acostumbrado es &lt;em&gt;Git&lt;/em&gt;, en cuya &lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34;&gt;web oficial&lt;/a&gt; podemos encontrar una impresionante cantidad de información de interés. Si es la primera vez que escuchas hablar de &lt;em&gt;Git&lt;/em&gt; o, en general, de los sistemas de control de versiones, quizá te resulte útil echar un vistazo a su &lt;a href=&#34;https://try.github.io/&#34; target=&#34;_blank&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180705-img01.png&#34; &gt;

&lt;img src=&#34;20180705-img01.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Página oficial de &lt;em&gt;Git&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;La instalación de &lt;em&gt;Git&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt; no podría ser más sencilla. Hacemos clic en &lt;a href=&#34;https://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; y automáticamente se descargará la versión más reciente de &lt;em&gt;Git&lt;/em&gt; (&lt;code&gt;2.18.0&lt;/code&gt; a la hora de escribir estas líneas).&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180705-img02.png&#34; &gt;

&lt;img src=&#34;20180705-img02.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Página de descarga de &lt;em&gt;Git&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Una vez se haya completado la descarga, ejecutamos el archivo e instalamos el programa. Durante el proceso de instalación tenemos que escoger en varios momentos entre distintas opciones. A este respecto, he de comentar que las que vienen marcadas por defecto me parecen adecuadas para una primera toma de contacto con &lt;em&gt;Git&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Al completar la instalación tenemos, además, acceso a una terminal de sistema, &lt;em&gt;Git Bash&lt;/em&gt;, que personalmente es la que utilizo. Si bien es cierto que tenemos que emplear algunos comandos distintos a los podemos encontrar en la que por defecto acompaña a &lt;em&gt;Windows&lt;/em&gt;, es fácil llevar a cabo la transición de una terminal a otra (puede resultar de ayuda este &lt;a href=&#34;https://ss64.com/bash/&#34; target=&#34;_blank&#34;&gt;listado de comandos&lt;/a&gt;).&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180705-img03.png&#34; &gt;

&lt;img src=&#34;20180705-img03.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;La terminal &lt;em&gt;Git Bash&lt;/em&gt; en acción.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;2-github&#34;&gt;2. GitHub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;GitHub&lt;/em&gt; es una plataforma de desarrollo colaborativo utilizada para almacenar proyectos empleando el sistema de control de versiones &lt;em&gt;Git&lt;/em&gt;. Podemos encontrar más información en su &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;web oficial&lt;/a&gt;. Al igual que antes, si es la primera vez que accedes a esta plataforma, convendría que le dedicases unos minutos al tutorial &lt;em&gt;Hello World&lt;/em&gt;, disponible en &lt;a href=&#34;https://guides.github.com/&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Utilizaremos este portal para subir los archivos fuente que permitirán generar el sitio web, así como para alojar el propio sitio web en sí. Únicamente necesitaremos crear una cuenta de usuario para ello.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180705-img04.png&#34; &gt;

&lt;img src=&#34;20180705-img04.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Página oficial de &lt;em&gt;GitHub&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;3-sublime-text-3&#34;&gt;3. Sublime Text 3&lt;/h2&gt;

&lt;p&gt;El dicho &amp;ldquo;Para gustos los colores&amp;rdquo; tendría en este apartado la versión &amp;ldquo;Para gustos los editores de texto plano&amp;rdquo;. En mi caso, los proyectos de programación que he realizado y todo el trabajo con generadores de web estáticas los he llevado a cabo, tanto con el antiguo &lt;em&gt;Sublime Text 2&lt;/em&gt;, como con su más reciente versión: &lt;em&gt;Sublime Text 3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este editor de texto plano es bastante potente, rápido y la comunidad puede extender sus funcionalidades a través de paquetes. Además, su versión &amp;ldquo;de prueba&amp;rdquo; te permite utilizar la herramienta sin restricción alguna durante un período de tiempo ilimitado, con la única pega de aparecer un mensaje cada 20 o 30 veces que salvemos cualquier archivo y que te invita a comprar una licencia.&lt;/p&gt;

&lt;p&gt;Nos podemos hacer con él a través de &lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;. Su proceso de instalación es similar&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;20180705-img05.png&#34; &gt;

&lt;img src=&#34;20180705-img05.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Página de descarga de &lt;em&gt;Sublime Text 3&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Además de cumplir de manera excelente sus labores a la hora de editar cualquier archivo de texto plano, &lt;em&gt;Sublime Text 3&lt;/em&gt; me encanta como herramienta para trabajar con archivos de tipo &lt;em&gt;markdown&lt;/em&gt;, que será el formato que vamos a emplear para redactar el contenido de nuestro sitio web. En un futuro no muy lejano tengo pensado escribir un artículo explicando cómo llevar a cabo la configuración de este programa para lidiar de forma agradable con dicho tipo de ficheros.&lt;/p&gt;

&lt;p&gt;Y hasta aquí el primer artículo del &lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, que deja nuestros equipos a punto para proceder a la instalación de &lt;em&gt;Hugo&lt;/em&gt; y generar un sitio web.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrando a Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/04/migrando-a-hugo/</link>
      <pubDate>Wed, 04 Jul 2018 07:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/04/migrando-a-hugo/</guid>
      <description>&lt;p&gt;La llegada del verano viene acompañada, al menos en mi caso, por un período de experimentación, en el que suelo abordar nuevos intereses o explorar alguna tecnología que haya captado mi atención en los últimos meses.&lt;/p&gt;

&lt;p&gt;Como desvela el título de esta entrada, &lt;em&gt;Hugo&lt;/em&gt; ha sido la primera candidata escogida. Ahora bien, ¿qué es &lt;em&gt;Hugo&lt;/em&gt;? En pocas palabras, es una tecnología que permite fácilmente generar páginas web estáticas y de la que podemos encontrar abundante información en su &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;sitio oficial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hasta hace apenas unos días, usaba &lt;a href=&#34;https://jekyllrb.com/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/a&gt; para elaborar &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, hecho que conduce lógica e irremediablemente a la siguiente cuestión: ¿por qué migrar a &lt;em&gt;Hugo&lt;/em&gt;? ¿Acaso se debe a su impresionante velocidad a la hora de generar sitios webs?&lt;/p&gt;

&lt;p&gt;Aunque atribuirle dicha causa al cambio estimo que me haría parecer más entendido de lo que verdaderamente soy, mentiría si afirmase que esa ha sido la auténtica razón. Dicho esto, confieso que tampoco me hacía excesiva ilusión el tiempo que le llevaba a la pareja &lt;em&gt;Jekyll&lt;/em&gt; + &lt;em&gt;Minimal Mistakes&lt;/em&gt; reflejar las modificaciones que iba realizando en el sitio web y que, generalmente, superaba con generosidad el minuto.&lt;/p&gt;

&lt;p&gt;Ahora mismo, con &lt;em&gt;Hugo&lt;/em&gt;, &lt;em&gt;Infinitos Contrastes&lt;/em&gt; se genera completamente en menos de 400 milisegundos. Además, cada modificación que llevo a cabo en esta entrada requiere unos 75 milisegundos de espera para poder visualizar en el servidor local el resultado. Cuanto menos, se agradece el cambio en este sentido.&lt;/p&gt;

&lt;p&gt;Así pues, si la velocidad no ha sido un factor determinante a la hora de explicar el cambio de tecnología, ¿por qué migrar a &lt;em&gt;Hugo&lt;/em&gt;? Históricamente, &lt;em&gt;Ruby&lt;/em&gt; y sus &lt;em&gt;gemas&lt;/em&gt; (entre las que se encuentra &lt;em&gt;Jekyll&lt;/em&gt;) me han dado bastantes más quebraderos de cabeza de los recomendables por utilizar &lt;em&gt;Windows&lt;/em&gt;. El soporte oficial para este sistema operativo es más bien escaso y cualquier problema se convertía en una pequeña odisea en ocasiones ciertamente desquiciante.&lt;/p&gt;

&lt;p&gt;Me apetecía simplemente un cambio, con la esperanza de pasar página y olvidar esas batallas pasadas. &lt;em&gt;Hugo&lt;/em&gt; es la alternativa a &lt;em&gt;Jekyll&lt;/em&gt; más popular y las primeras impresiones que me he llevado son muy buenas. No dudo que en un futuro próximo tenga que librar alguna que otra encarnizada pelea, pero espero que el hecho de estar aprendiendo una nueva tecnología compense con creces las penurias que este proceso tiene aparejadas.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
