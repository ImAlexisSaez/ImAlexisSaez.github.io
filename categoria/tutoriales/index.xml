<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriales | Infinitos Contrastes</title>
    <link>https://imalexissaez.github.io/categoria/tutoriales/</link>
      <atom:link href="https://imalexissaez.github.io/categoria/tutoriales/index.xml" rel="self" type="application/rss+xml" />
    <description>Tutoriales</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Alexis Sáez ©2020</copyright><lastBuildDate>Sat, 01 Jun 2019 05:59:39 +0200</lastBuildDate>
    <image>
      <url>https://imalexissaez.github.io/img/sharing.jpg</url>
      <title>Tutoriales</title>
      <link>https://imalexissaez.github.io/categoria/tutoriales/</link>
    </image>
    
    <item>
      <title>Unos cambios rápidos a las plantillas</title>
      <link>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</link>
      <pubDate>Sat, 01 Jun 2019 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/</guid>
      <description>&lt;p&gt;En esta entrada recojo el código necesario para localizar a español ciertas secciones de la página web, incluyendo un experimento que al final no terminó de convencerme, pero que comparto por si sirviera de inspiración a la creatividad ajena.&lt;/p&gt;
&lt;p&gt;Al final de cada una de las entradas del blog aparece un apartado de &lt;em&gt;etiquetas&lt;/em&gt;, que permite agrupar fácilmente contenidos relacionados. Cambiemos la cabecera de esta sección de &lt;code&gt;Tags:&lt;/code&gt; a &lt;code&gt;Etiquetas:&lt;/code&gt;. Para ello, editamos con &lt;em&gt;Sublime Text 3&lt;/em&gt; el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) y buscamos el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Tags: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acto seguido, modificamos el valor del atributo &lt;code&gt;content&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags:before {
  content: &amp;quot;Etiquetas: &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y guardamos los cambios realizados.&lt;/p&gt;
&lt;p&gt;Siguiendo con esta misma filosofía, traduzcamos ese &lt;code&gt;View all&lt;/code&gt; que aparece en las páginas de índice que agrupan contenidos por taxonomías. Para ello, editamos el archivo &lt;code&gt;terms.html&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y, utilizando el buscador de &lt;em&gt;Sublime Text 3&lt;/em&gt;, nos situamos donde aparece la mencionada cadena de caracteres y la sustituimos, por ejemplo, por &lt;code&gt;Ver todos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Todavía podemos mejorar un tanto la localización a español del tema a través de las taxonomías. Con tal objetivo en mente, modifiquemos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) como sigue, de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  project  = &amp;quot;projects&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, editamos la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default\&lt;/code&gt;) y sustituimos el bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que aparezca en las entradas del blog información sobre el apartado o proyecto al que pertenecen, no tendríamos más que incorporar dos nuevos bloques a continuación, utilizando el anterior como guía y llevando a cabo las adaptaciones pertinentes. Por otro lado, sería más que recomendable crear en el archivo de estilos &lt;em&gt;css&lt;/em&gt; las clases &lt;code&gt;blog-etiquetas&lt;/code&gt;, &lt;code&gt;blog-apartados&lt;/code&gt; y &lt;code&gt;blog-proyectos&lt;/code&gt;, para mejorar el mantenimiento de la localización del tema en un futuro.&lt;/p&gt;
&lt;p&gt;A continuación, hemos de editar las plantillas &lt;code&gt;list.html&lt;/code&gt; e &lt;code&gt;index.html&lt;/code&gt; (ubicadas ambas en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;), substituyendo los bloques de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.tags }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.tags }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-tags&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Añadiendo, acto seguido, bloques análogos para &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; si lo hemos considerado oportuno.&lt;/p&gt;
&lt;p&gt;Este cambio nos obliga a actualizar la ruta de acceso a la página de etiquetas, por lo que debemos editar el archivo &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) de manera que el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pase a ser&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Etiquetas&amp;quot;
    url = &amp;quot;etiquetas&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, nos queda modificar el estilo de la cabecera de la página de etiquetas. Para ello editamos el archivo &lt;code&gt;main.css&lt;/code&gt; (ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;) buscando el término &lt;code&gt;header&lt;/code&gt; y añadiendo la cadena correspondiente a etiquetas. Por ejemplo, para el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;la modificación quedaría como sigue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .etiquetas-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En total, hemos de proceder de esta manera en tres ocasiones.&lt;/p&gt;
&lt;p&gt;Y ya que estamos con las manos en la masa, creemos las clases de estilos para &lt;code&gt;etiquetas&lt;/code&gt;, &lt;code&gt;apartados&lt;/code&gt; y &lt;code&gt;proyectos&lt;/code&gt; trabajando sobre los bloques de código originales que aparecen tras el comentario &lt;code&gt;/* --- Tags --- */&lt;/code&gt; (recordemos que cualquier modificación puede implicar después que hayamos de editar la cabeceras de las páginas tal y como hicimos hace un instante). Así pues, nos van a quedar bloques como el que aparece a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.blog-tags,
.blog-apartados,
.blog-etiquetas,
.blog-proyectos {
  font-family: &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;
  color: #999;
  font-size: 15px;
  margin-bottom: 30px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquellos en los que aparece el atributo &lt;code&gt;before&lt;/code&gt; no los podemos agrupar tan fácilmente. No obstante, no deja de ser trabajo de &lt;em&gt;copy&amp;amp;paste&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como he comentado arriba, no debemos olvidar añadir a las clases de las cabeceras las líneas correspondientes, de forma que nos aparezcan bloques como el que figura acto seguido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.intro-header .page-heading,
.intro-header .tags-heading,
.intro-header .apartados-heading,
.intro-header .etiquetas-heading,
.intro-header .proyectos-heading {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, hacemos una nueva modificación sobre el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y cambiamos el nombre del menú principal &lt;em&gt;Blog&lt;/em&gt; por &lt;em&gt;Inicio&lt;/em&gt;. Así, el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pasa a ser&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Inicio&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acto seguido, en la plantilla &lt;code&gt;single.html&lt;/code&gt; (ubicada en la ruta &lt;code&gt;\layouts\_default&lt;/code&gt;) añado, en la ubicación donde aparecen las etiquetas, información sobre el apartado y el proyecto al que pertenece una entrada en particular. Por tanto, el bloque de código&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Params.apartados }}
  &amp;lt;div class=&amp;quot;blog-apartados&amp;quot;&amp;gt;
    {{ range .Params.apartados }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/apartados/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.etiquetas }}
  &amp;lt;div class=&amp;quot;blog-etiquetas&amp;quot;&amp;gt;
    {{ range .Params.etiquetas }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}

{{ if .Params.proyectos }}
  &amp;lt;div class=&amp;quot;blog-proyectos&amp;quot;&amp;gt;
    {{ range .Params.proyectos }}
      &amp;lt;a href=&amp;quot;{{ $.Site.LanguagePrefix | absURL }}/proyectos/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;amp;nbsp;
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo, aunque es una opción razonable, no me convence cómo queda, por lo que, en mi caso, voy a dejarlo como estaba. No obstante, comparto el código fuente por si alguien tiene interés en realizar esta modificación.&lt;/p&gt;
&lt;p&gt;Por último, quizá quede todo un poco mejor si damos acceso a las diferentes secciones desde el menú superior derecho, con un desplegable. Para ello, modificamos el fichero &lt;code&gt;config.toml&lt;/code&gt; (ubicado en el directorio raíz de la página web) y dejamos la sección dedicada al menú como figura a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del menú superior derecho
#
[[menu.main]]
    identifier = &amp;quot;menu&amp;quot;
    name       = &amp;quot;Menú&amp;quot;
    weight     = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Apartados&amp;quot;
    url    = &amp;quot;apartados/&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Etiquetas&amp;quot;
    url    = &amp;quot;etiquetas/&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;menu&amp;quot;
    name   = &amp;quot;Proyectos&amp;quot;
    url    = &amp;quot;proyectos/&amp;quot;
    weight = 3

[[menu.main]]
    name   = &amp;quot;Acerca de&amp;quot;
    url    = &amp;quot;page/about/&amp;quot;
    weight = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concluyo aquí esta extensa entrada, dejando el 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto MetaBlog&lt;/a&gt; en espera, pues en estos momentos estoy más centrado en la generación de contenido para la página web, que en la edición de la misma.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo dividir polinomios con LaTeX en conjuntos finitos?</title>
      <link>https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/</link>
      <pubDate>Wed, 07 Nov 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/</guid>
      <description>&lt;p&gt;La 
&lt;a href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/&#34;&gt;semana anterior&lt;/a&gt; analizamos el paquete &lt;code&gt;polynom&lt;/code&gt;, que nos permite fácilmente llevar a cabo la transcripción de divisiones de polinomios con &lt;em&gt;LaTeX&lt;/em&gt;. A continuación, estudiaremos una manera alternativa para lidiar con este asunto que, además, nos permitirá operar en conjuntos finitos.&lt;/p&gt;
&lt;p&gt;Supongamos, sin pérdida de generalidad, que nuestro objetivo es dividir los polinomios&lt;/p&gt;
&lt;p&gt;$$
5x^5 - 2x^4 + 2x^3 - 5x^2 + 2x + 1
$$&lt;/p&gt;
&lt;p&gt;y&lt;/p&gt;
&lt;p&gt;$$
3x^3 + x^2 - 5x + 2
$$&lt;/p&gt;
&lt;p&gt;en $\mathbb{Z}_7$. Para ello, &amp;lsquo;&amp;lsquo;dibujaremos&amp;rsquo;&amp;rsquo; la operación matemática en una matriz, método que nos permitirá organizar fácilmente los pasos y, de paso, imprimir algunas rayas horizontales cuando proceda.&lt;/p&gt;
&lt;p&gt;Para empezar, en el preámbulo del documento, insertamos las dos siguientes líneas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{tikz}
\usetikzlibrary{matrix}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, donde deseemos ubicar la división de los anteriores polinomios, tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dando el resultado que figura en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-primer-resultado-parcial&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img01_hu683a0bd7e6990a9bf037298805477941_4718_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Primer resultado parcial.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img01_hu683a0bd7e6990a9bf037298805477941_4718_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;925&#34; height=&#34;65&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Primer resultado parcial.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Organizar los monomios del dividendo como elementos individuales de una matriz nos facilitará la empresa de &amp;lsquo;&amp;lsquo;alinear&amp;rsquo;&amp;rsquo; las posteriores operaciones de la división. Por otro lado, el comando &lt;code&gt;draw&lt;/code&gt; es el que dibuja la &amp;lsquo;&amp;lsquo;caja&amp;rsquo;&amp;rsquo; de esta operación matemática, tomando como referencia las posiciones de los elementos de la matriz.&lt;/p&gt;
&lt;p&gt;Continuemos la división, siempre teniendo en cuenta que trabajamos en $\mathbb{Z}_7$. Así, para la primera etapa, teclearíamos acto seguido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
 5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
-5x^2 &amp;amp; +3x^4 &amp;amp;  -x^3 &amp;amp;  -x^2 &amp;amp;     &amp;amp;    &amp;amp;  &amp;amp; 4x^2\\
      &amp;amp;  +x^4 &amp;amp;  +x^3 &amp;amp;  +x^2 &amp;amp; +2x &amp;amp;    &amp;amp;  &amp;amp; \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\draw (a-2-1.south west) -- (a-2-4.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cuyo resultado se recoge en la siguiente figura:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-segundo-resultado-parcial&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img02_hu8a4ae0a56f32da6a4118a0371203d64e_9788_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Segundo resultado parcial.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img02_hu8a4ae0a56f32da6a4118a0371203d64e_9788_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;921&#34; height=&#34;149&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Segundo resultado parcial.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Efectivamente, no queda tan estético como el que conseguíamos la semana pasada con el paquete &lt;code&gt;polynom&lt;/code&gt;. No obstante, funcionalmente hablando, los pequeños desajustes horizontales de signos no molestan en exceso.&lt;/p&gt;
&lt;p&gt;Una vez asimilada la idea del procedimiento a seguir, únicamente nos resta continuar con la división, escribiendo ahora:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\begin{center}
\begin{tikzpicture}
\matrix (a) [matrix of math nodes, column sep=0pt]
{
 5x^5 &amp;amp; -2x^4 &amp;amp; +2x^3 &amp;amp; -5x^2 &amp;amp; +2x &amp;amp; +1 &amp;amp;  &amp;amp; 3x^3+x^2-5x+2 \\
-5x^2 &amp;amp; +3x^4 &amp;amp;  -x^3 &amp;amp;  -x^2 &amp;amp;     &amp;amp;    &amp;amp;  &amp;amp; 4x^2 + 5x + 1\\
      &amp;amp;  +x^4 &amp;amp;  +x^3 &amp;amp;  +x^2 &amp;amp; +2x &amp;amp;    &amp;amp;  &amp;amp; \\
      &amp;amp;  -x^4 &amp;amp; +2x^3 &amp;amp; -3x^2 &amp;amp; -3x &amp;amp;    &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp; +3x^3 &amp;amp; -2x^2 &amp;amp;  -x &amp;amp; +1 &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp; -3x^3 &amp;amp;  -x^2 &amp;amp; -2x &amp;amp; -2 &amp;amp;  &amp;amp; \\
      &amp;amp;       &amp;amp;       &amp;amp; -3x^2 &amp;amp; -3x &amp;amp; -1 &amp;amp;  &amp;amp; \\
};
\draw (a-1-8.north west) |- (a-1-8.south east);
\draw (a-2-1.south west) -- (a-2-4.south east);
\draw (a-4-2.south west) -- (a-4-5.south east);
\draw (a-6-3.south west) -- (a-6-6.south east);
\end{tikzpicture}
\end{center}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obteniendo como resultado el que aparece en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-resultado-final&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img03_hu8a1b45e33a56ecb259f4c02f12d6343e_19017_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Resultado final.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/20181107-img03_hu8a1b45e33a56ecb259f4c02f12d6343e_19017_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;924&#34; height=&#34;275&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Resultado final.
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>¿Cómo dividir polinomios con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/</link>
      <pubDate>Wed, 31 Oct 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/</guid>
      <description>&lt;p&gt;Escribiendo unos apuntes sobre polinomios, llegó el momento de mostrar un ejemplo de la división de un par de ellos. La clásica pregunta no se hizo esperar, ¿cómo transcribo en &lt;em&gt;LaTeX&lt;/em&gt; esa operación matemática?&lt;/p&gt;
&lt;p&gt;Acompañemos este artículo con un ejemplo concreto. Sean&lt;/p&gt;
&lt;p&gt;$$
P = x^4 + 3x^3 - 2x^2 + x - 1
$$&lt;/p&gt;
&lt;p&gt;y&lt;/p&gt;
&lt;p&gt;$$
Q = x^2 + x - 1
$$&lt;/p&gt;
&lt;p&gt;los polinomios implicados en la división, siendo nuestro objetivo mostrar la mencionada operación paso por paso (y no simplemente ofrecer el resultado final, acción que no entraña misterio a la hora de llevarla a cabo con &lt;em&gt;LaTeX&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Como suele ser habitual, tras una rápida búsqueda con &lt;em&gt;Google&lt;/em&gt;, no soy la primera persona que se ha encontrado en esta encrucijada. En los foros que consulté, la recomendación estándar era emplear el paquete 
&lt;a href=&#34;https://ctan.org/pkg/polynom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;polynom&lt;/a&gt;, que a través del comando &lt;code&gt;\polylongdiv&lt;/code&gt; nos facilita enormemente la tarea. De forma automática, se ocupa de realizar y organizar (con &lt;em&gt;LaTeX&lt;/em&gt;) todos los pasos involucrados en una división de polinomios.&lt;/p&gt;
&lt;p&gt;Así pues, empecemos ubicando en el preámbulo de nuestro documento la siguiente instrucción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{polynom}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Antes de proceder a realizar división alguna, conviene que declaremos personalmente el valor de ciertos argumentos opcionales:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\polyset{style=C, div=:, vars=x}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;donde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: declara el estilo con el que efectuará la división de polinomios, pudiendo escoger entre los valores &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; y &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt;: señala el símbolo con el que se expresará la división (dependiendo del estilo escogido, la asignación de este parámetro es importante).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt;: indica el valor de la variable del polinomio. Generalmente utilizamos &lt;code&gt;x&lt;/code&gt;, pero no es descabellado emplear &lt;code&gt;n&lt;/code&gt; cuando estamos lidiando con temas asociados a números enteros.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora, allí donde deseemos ubicar la división de los polinomios $P$ y $Q$ definidos arriba, tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\polylongdiv{x^4+3x^3-2x^2+x-1}{x^2+x-1}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obteniendo como resultado:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-resultado-de-la-división-de-polinomios&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img01_hu4ed5e3cadd45482e5954bf1bfc35f6e7_16055_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Resultado de la división de polinomios.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img01_hu4ed5e3cadd45482e5954bf1bfc35f6e7_16055_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;868&#34; height=&#34;225&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Resultado de la división de polinomios.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Estudiemos el resultado visual de la operación bajo los distintos estilos que nos ofrece el paquete &lt;code&gt;polynom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estilo A&lt;/strong&gt;:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-estilo-para-la-división-a&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img02_hu45e502d2adb3c30f6906d7f8851c5bfe_16070_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Estilo para la división A.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img02_hu45e502d2adb3c30f6906d7f8851c5bfe_16070_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;897&#34; height=&#34;262&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Estilo para la división A.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Estilo B&lt;/strong&gt;:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-estilo-para-la-división-b&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img03_hu529b17bc64435037944144961dea1dd7_15704_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Estilo para la división B.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img03_hu529b17bc64435037944144961dea1dd7_15704_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;904&#34; height=&#34;220&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Estilo para la división B.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Estilo C&lt;/strong&gt;:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-estilo-para-la-división-c&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img01_hu4ed5e3cadd45482e5954bf1bfc35f6e7_16055_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Estilo para la división C.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/20181031-img01_hu4ed5e3cadd45482e5954bf1bfc35f6e7_16055_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;868&#34; height=&#34;225&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Estilo para la división C.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Personalmente, el último de los mostrados es el estilo que me resulta más atractivo para mostrar cómo realizar paso a paso una división de polinomios con &lt;em&gt;LaTeX&lt;/em&gt;. No obstante, como siempre, &amp;lsquo;&amp;lsquo;para gustos, los colores&amp;rsquo;&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Para finalizar, me gustaría comentar que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aun siendo bastante satisfactoria esta solución, ninguno de los estilos que ofrece el paquete &lt;code&gt;polynom&lt;/code&gt; se ajusta exactamente a como habitualmente organizamos la división por estos lares.&lt;/li&gt;
&lt;li&gt;Por limitaciones de &lt;em&gt;TeX&lt;/em&gt;, no podemos llevar a cabo la división de polinomios en conjuntos finitos como, por ejemplo, $\mathbb{Z}_4$ o en el cuerpo $\mathbb{Z}_7$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En ambos casos, una posible vía de escape que he encontrado es recurrir al paquete &lt;code&gt;tikz&lt;/code&gt; y, manualmente, &amp;lsquo;&amp;lsquo;dibujar&amp;rsquo;&amp;rsquo; la propia división de polinomios. No es un proceso demasiado complejo y quizá lo ilustre en una futura entrada.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo evitar que las ecuaciones en línea superen los márgenes?</title>
      <link>https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/</link>
      <pubDate>Tue, 25 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/</guid>
      <description>&lt;p&gt;Cierto es que &lt;em&gt;LaTeX&lt;/em&gt; genera unos documentos matemáticos realmente vistosos. No menos cierto es que el comportamiento de &lt;em&gt;LaTeX&lt;/em&gt;, en ocasiones, es un tanto peculiar, ofreciendo duras batallas para solventar ciertos problemas.&lt;/p&gt;
&lt;p&gt;En esta ocasión, me encontraba esta misma mañana redactando unos apuntes de teoría de grafos cuando, en un ejemplo trivial donde los haya, he hallado este desbarajuste:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-la-definición-del-conjunto-excede-el-margen-ampliamente&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img01_hu12a02a6ea6dbd94b021f27d50b096615_52265_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;La definición del conjunto excede el margen ampliamente.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img01_hu12a02a6ea6dbd94b021f27d50b096615_52265_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1059&#34; height=&#34;240&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    La definición del conjunto excede el margen ampliamente.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;He definido el conjunto de aristas del grafo casi en el borde del margen y &lt;em&gt;LaTeX&lt;/em&gt;, en lugar de romper la expresión matemática como en otras ocasiones hace de manera automática, ha decidido rebasar el margen derecho. El resultado, estéticamente, es horroroso, por mucho que el mencionado conjunto este bien agrupado y su lectura resulte cómoda.&lt;/p&gt;
&lt;p&gt;Generalmente, cuando me encuentro en este tipo de situaciones, opto por reescribir la oración, de manera que añado o suprimo texto y, al final, se produce un buen encaje del contenido matemático en los márgenes.&lt;/p&gt;
&lt;p&gt;No obstante, quizá buscando pretextos absurdos para descansar un rato de la transcripción de apuntes, me he decantado esta mañana por investigar las posibilidades que ofrece &lt;em&gt;LaTeX&lt;/em&gt; para evitar que este comportamiento tenga lugar. Tras una rápida búsqueda en &lt;em&gt;Google&lt;/em&gt;, he dado con 
&lt;a href=&#34;https://tex.stackexchange.com/questions/28818/how-can-i-prevent-inline-math-formulas-from-overflowing-into-the-margin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;esta entrada&lt;/a&gt;, cuya lectura es más que recomendable.&lt;/p&gt;
&lt;p&gt;Una de las primeras opciones que tenemos a nuestra disposición, lógicamente, es escribir la problemática expresión matemática en una línea independiente. En mi caso, el resultado sería el siguiente:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-definición-del-conjunto-en-su-propia-línea&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img02_hu6c5af0d4f60e81f486f9aa951d617f64_53598_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Definición del conjunto en su propia línea.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img02_hu6c5af0d4f60e81f486f9aa951d617f64_53598_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;964&#34; height=&#34;313&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Definición del conjunto en su propia línea.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Sin embargo, ¿no adquiere así un protagonismo inmerecido el conjunto de aristas del grafo? No termina de convencerme, para esta situación particular, la solución propuesta.&lt;/p&gt;
&lt;p&gt;Una alternativa es emplear el comando &lt;code&gt;\sloppy&lt;/code&gt; antecediendo el párrafo donde reside la expresión matemática que ha decidido realizar una excursión por los márgenes del documento. Esta instrucción juega con el espaciado entre las palabras, siendo su resultado el que muestro a continuación:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-definición-del-conjunto-utilizando-sloppy&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img03_hu9eb492ddaaada54fef802ca5891577d4_51266_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Definición del conjunto utilizando &amp;lt;code&amp;gt;\sloppy&amp;lt;/code&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img03_hu9eb492ddaaada54fef802ca5891577d4_51266_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;965&#34; height=&#34;242&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Definición del conjunto utilizando &lt;code&gt;\sloppy&lt;/code&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Sinceramente, tampoco resulta de mi agrado. ¿Qué más opciones tenemos? Utilizar el comando &lt;code&gt;\allowbreak&lt;/code&gt; allá donde queramos se produzca la separación en nuestra expresión matemática. Volviendo a la situación original, parece que sería adecuado cortar la declaración del conjunto de aristas del grafo tras el elemento $(2, 3)$ y el resultado ahora es&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-definición-del-conjunto-utilizando-allowbreak&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img04_hucfffc5f7bbcccbe6f9587ee487e4d411_50736_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Definición del conjunto utilizando &amp;lt;code&amp;gt;\allowbreak&amp;lt;/code&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/20180925-img04_hucfffc5f7bbcccbe6f9587ee487e4d411_50736_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;963&#34; height=&#34;239&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Definición del conjunto utilizando &lt;code&gt;\allowbreak&lt;/code&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Esta solución, en mi opinión, es la más agradable visualmente hablando. No obstante:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insertar el comando &lt;code&gt;\allowbreak&lt;/code&gt; resta bastante legibilidad al código fuente del documento.&lt;/li&gt;
&lt;li&gt;Si &lt;em&gt;LaTeX&lt;/em&gt; no ha decido &amp;ldquo;romper&amp;rdquo; automáticamente la declaración de un conjunto, debemos sospechar que algún buen motivo tendrá. Efectivamente, con este enfoque, resulta un tanto más complicado seguir la definición del conjunto de aristas del grafo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En conclusión, arriba tenemos tres estrategias que resuelven el problema planteado de mejor o peor manera. No obstante, es posible que al final me decante por la reescritura de la línea y evite recurrir a alguna de ellas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mejorando la estética de los bloques de código</title>
      <link>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</link>
      <pubDate>Thu, 20 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/</guid>
      <description>&lt;p&gt;Por uno de esos casuales de la vida, me ha dado por revisar el sitio web con el móvil y ha sido entonces cuando he presenciado un horror sin parangón: ¿por qué se ven así mis bloques de código?&lt;/p&gt;
&lt;p&gt;Al parecer, me caracterizo por ser un animal de costumbres y cualquier desviación que me lleve mucho más allá de mi zona de confort me produce hasta angustia. Habitualmente, con los temas para páginas web con los que he trabajado, los bloques de código tienen habilitada la aparición de una barra de desplazamiento horizontal cuando figuran instrucciones de longitud considerable.&lt;/p&gt;
&lt;p&gt;Este es un comportamiento que me parece adecuado, ya que incrementa, en mi opinión, la legibilidad de los mencionados bloques de código. Por desgracia, en el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; no viene configurado así por defecto, de manera que una instrucción de longitud considerable se llega a dividir en varias líneas, dificultando en exceso la lectura.&lt;/p&gt;
&lt;p&gt;Las opciones de estilo para los bloques de código, curiosamente, no están declaradas en el archivo &lt;code&gt;main.css&lt;/code&gt;, como sería de esperar, sino en un fichero denominado &lt;code&gt;codeblock.css&lt;/code&gt;, que se encuentra en la ruta &lt;code&gt;\static\css\&lt;/code&gt; del directorio donde hayamos decidido almacenar localmente nuestro sitio web. Su contenido original es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras investigar un rato, he conseguido que aparezca la deseada barra de desplazamiento horizontal añadiendo unas cuantas líneas al anterior archivo, de forma que ahora presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* --- Code blocks --- */

.chroma .ln { 
  margin-right: 0.8em; 
  padding: 0 0.4em 0 0.4em; 
}
pre code.hljs {
  padding: 9.5px;
}

pre {
    overflow-x: auto;
}

pre code {
    word-wrap: normal;
    white-space: pre;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El único inconveniente de este enfoque es que solo afecta a los bloques de código escritos usando &lt;em&gt;fences&lt;/em&gt; y no a los que generamos mediante el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; de &lt;em&gt;Hugo&lt;/em&gt;. No obstante, como habitualmente no recurro a este último, no he decido indagar más al respecto.&lt;/p&gt;
&lt;p&gt;En los próximos artículos del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el comportamiento de KaTeX</title>
      <link>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</link>
      <pubDate>Tue, 18 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/</guid>
      <description>&lt;p&gt;El tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene, por defecto, configurado para que podamos escribir expresiones matemáticas utilizando 
&lt;a href=&#34;https://khan.github.io/KaTeX/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KaTeX&lt;/a&gt;. Tras unos minutos experimentando con esta tecnología surge enseguida la primera duda: ¿cómo puedo escribir ecuaciones en línea?&lt;/p&gt;
&lt;p&gt;Para empezar, recomiendo encarecidamente que acudamos a la página de 
&lt;a href=&#34;https://github.com/Khan/KaTeX/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;versiones&lt;/a&gt; de &lt;em&gt;KaTeX&lt;/em&gt; y nos hagamos con la última de ellas, para estar al día en las opciones que ofrece esta herramienta. A la hora de escribir estas líneas, dicha versión venía etiquetada como &lt;code&gt;v0.10.0-rc.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para ello, hacemos clic sobre el enlace denominado &lt;code&gt;katex.zip&lt;/code&gt; y así iniciaremos la descarga de un archivo comprimido, del cual nos interesan especialmente dos archivos contenidos en su interior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;katex.min.css&lt;/code&gt; y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;katex.min.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El primero de ellos lo ubicaremos, dentro del directorio donde hayamos decidido almacenar localmente el sitio web, en la ruta &lt;code&gt;\static\css\&lt;/code&gt;, mientras que el segundo en &lt;code&gt;\static\js\&lt;/code&gt;, sobrescribiendo en ambos casos las antiguas versiones que existiesen en dichas carpetas.&lt;/p&gt;
&lt;p&gt;Una vez al día, la siguiente tarea implica la modificación de una de las plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, concretamente la denominada como &lt;code&gt;footer.html&lt;/code&gt;, ubicada en la ruta &lt;code&gt;\layouts\partials\&lt;/code&gt;. Editamos el mencionado fichero con &lt;em&gt;Sublime Text 3&lt;/em&gt; y buscamos la siguiente línea:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt; renderMathInElement(document.body); &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos a configurar &lt;em&gt;KaTeX&lt;/em&gt; de manera que reconozca las expresiones encerradas entre &lt;code&gt;$&lt;/code&gt; o &lt;code&gt;\\(&lt;/code&gt; como ecuaciones en línea, mientras que las delimitadas por &lt;code&gt;$$&lt;/code&gt; o &lt;code&gt;\\[&lt;/code&gt; como ecuaciones centradas en sus propias líneas. Para ello, tecleamos en el lugar de la anterior instrucción el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  renderMathInElement(
    document.body,
    {
      delimiters: [
        {left: &amp;quot;$$&amp;quot;, right: &amp;quot;$$&amp;quot;, display: true},
        {left: &amp;quot;\\[&amp;quot;, right: &amp;quot;\\]&amp;quot;, display: true},
        {left: &amp;quot;$&amp;quot;, right: &amp;quot;$&amp;quot;, display: false},
        {left: &amp;quot;\\(&amp;quot;, right: &amp;quot;\\)&amp;quot;, display: false}
      ]
    }
  );
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez habilitada la opción de escribir ecuaciones en línea, un hecho salta a la vista de inmediato: ¿no parece que el tamaño de letra para las expresiones matemáticas es mayor que el declarado para el texto estándar? Efectivamente, peculiaridad que, en mi opinión, desluce bastante el aspecto (e incluso diría que dificulta la lectura) de los artículos.&lt;/p&gt;
&lt;p&gt;La solución pasa por modificar la hoja de estilos del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, almacenada en el archivo &lt;code&gt;main.css&lt;/code&gt;, que está ubicado en la ruta &lt;code&gt;\static\css\&lt;/code&gt;. Tras experimentar con cierto rango de valores para el tamaño de fuente de los objetos de la clase &lt;code&gt;.katex&lt;/code&gt;, al final me he decantado por la siguiente solución, que he colocado al principio del fichero &lt;code&gt;main.css&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Modificación para hacer que el tamaño de letra de KaTeX sea similar al de la web */
.katex { font-size: 1.1em !important; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En los próximos artículos del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; continuaremos con la edición de diversas plantillas del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, para terminar de aprender cómo adaptarlo a nuestro gusto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alojando nuestro sitio web en GitHub</title>
      <link>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</link>
      <pubDate>Sat, 01 Sep 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/</guid>
      <description>&lt;p&gt;A estas alturas de la película, seguramente con algún que otro artículo redactado y revisado localmente de manera concienzuda, no nos queda más remedio que ocuparnos de un asunto un tanto tedioso: el alojamiento de nuestro sitio web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para tal empresa he optado por &lt;em&gt;GitHub&lt;/em&gt;, que nos permite alojar páginas web estáticas de manera gratuita (¡y sin publicidad!). Desgraciadamente, el proceso dista de ser intuitivo, por lo que examinaremos todos y cada uno de los pasos de la 
&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guía oficial&lt;/a&gt; con sumo detalle.&lt;/p&gt;
&lt;p&gt;Para empezar, existe una serie de requisitos que hemos de cumplir para subir nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt; y son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tener instalado en nuestro equipo una versión de &lt;em&gt;Git&lt;/em&gt; superior a la &lt;code&gt;2.8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Disponer de una cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Contar con una página web lista para ser publicada en &lt;em&gt;Internet&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo que respecta a los dos primeros puntos del listado anterior, si estamos siguiendo el 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; desde sus orígenes, no supondrán problema alguno, pues fueron abordados en la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt; de la serie. En cuanto al tercer punto, con todo el trabajo que llevamos acumulado hasta el momento, es más que posible que entre nuestras manos tengamos ya un esbozo de sitio web que merezca la pena mostrar al resto del mundo.&lt;/p&gt;
&lt;p&gt;Una vez comprobado que satisfacemos los requisitos del procedimiento, el primer paso a realizar consiste en crear dos nuevos repositorios en nuestra cuenta de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, acudimos a la página de nuestro perfil en &lt;em&gt;GitHub&lt;/em&gt; y hacemos clic en el símbolo &lt;code&gt;+&lt;/code&gt; situado en la parte derecha del menú superior, para, a continuación, seleccionar la opción &lt;code&gt;New repositoy&lt;/code&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-creación-de-un-nuevo-repositorio-en-github&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img01_hu1d2635ce16c1c1734de122f7eae276c2_5134_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Creación de un nuevo repositorio en &amp;lt;em&amp;gt;GitHub&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img01_hu1d2635ce16c1c1734de122f7eae276c2_5134_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;227&#34; height=&#34;162&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Creación de un nuevo repositorio en &lt;em&gt;GitHub&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;El primer repositorio que crearemos estará dedicado a almacenar el código fuente de nuestro sitio web y, en un alarde de infinita originalidad, lo denominaremos &lt;code&gt;sitio-web&lt;/code&gt;, tal y como figura en la siguiente imagen. Cuando hayamos rellenado el campo &lt;code&gt;Repository name&lt;/code&gt; haremos clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-elección-del-nombre-del-repositorio&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img02_hu6d07c69b2df423512b33433b2495891e_33732_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Elección del nombre del repositorio.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/20180901-img02_hu6d07c69b2df423512b33433b2495891e_33732_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;718&#34; height=&#34;483&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Elección del nombre del repositorio.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;A continuación, de las tres opciones que nos ofrece la página que aparece ante nosotros, vamos a escoger la segunda, ya que cuando en 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;esta entrada&lt;/a&gt; generamos nuestro primer sitio web, a la vez iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;. Aquella acción, que en su momento podía parecer un tanto extraña, queda ahora totalmente justificada.&lt;/p&gt;
&lt;p&gt;Así pues, abrimos la terminal del sistema, nos desplazamos hasta el directorio raíz donde hayamos decidido almacenar localmente nuestro sitio web y tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin https://github.com/&amp;lt;USERNAME&amp;gt;/sitio-web.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, en lugar de &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt;, aparece directamente &lt;code&gt;ImAlexisSaez&lt;/code&gt;. Cada uno de nosotros tendrá definida esa parte del comando de manera diferente, por lo que recomiendo encarecidamente copiar la instrucción de la página de &lt;em&gt;GitHub&lt;/em&gt; en lugar de la que aparece arriba.&lt;/p&gt;
&lt;p&gt;Acto seguido, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta manera, transcurridos unos segundos, tendremos disponible en &lt;em&gt;GitHub&lt;/em&gt; una copia del código fuente que permite generar nuestra página web estática.&lt;/p&gt;
&lt;p&gt;A continuación, volvemos a &lt;em&gt;GitHub&lt;/em&gt; y creamos un nuevo repositorio. Este último tendrá un nombre especial que será, además, la dirección de acceso a nuestro sitio web. Hemos de combinar nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; con la extensión &lt;code&gt;.github.io&lt;/code&gt;. Por ejemplo, en mi caso queda &lt;code&gt;ImAlexisSaez.github.io&lt;/code&gt; y así es como rellené en su momento el campo &lt;code&gt;Repository name&lt;/code&gt;. Una vez escrito, simplemente tenemos que hacer clic en el botón &lt;code&gt;Create repository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Volvemos a la terminal del sistema y tecleamos &lt;code&gt;hugo server&lt;/code&gt;, para poder dar así una última revisión local a nuestro sitio web, utilizando la dirección ``http://localhost:1313&lt;code&gt;, y comprobar que todo está en perfecto estado. Cuando estemos satisfechos, acudimos de nuevo a la terminal del sistema y cerramos el servidor local, empleando para ello la combinación de teclas &lt;/code&gt;Ctrl + c`.&lt;/p&gt;
&lt;p&gt;Acto seguido, escribimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando borra por completo la carpeta &lt;code&gt;public&lt;/code&gt;, que se encuentra en el directorio donde tenemos almacenado localmente nuestro sitio web. Dicha carpeta se genera automáticamente cada vez que tecleamos &lt;code&gt;hugo server&lt;/code&gt; en la terminal del sistema, y contiene la versión final de nuestra página web.&lt;/p&gt;
&lt;p&gt;El siguiente paso, precisamente, es crear un submódulo de manera que la carpeta &lt;code&gt;public&lt;/code&gt; apunte a otra dirección de &lt;em&gt;GitHub&lt;/em&gt;. Para ello, desde la terminal del sistema, tecleamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add -b master git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;donde sustituiremos &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; por el nombre de nuestra cuenta de usuario en &lt;em&gt;GitHub&lt;/em&gt; (por ejemplo, &lt;code&gt;ImAlexisSaez&lt;/code&gt; en mi caso).&lt;/p&gt;
&lt;p&gt;¡Ya casi tenemos todo a punto! Únicamente hemos de abrir &lt;em&gt;Sublime Text 3&lt;/em&gt; y en un archivo, que guardaremos como &lt;code&gt;deploy.sh&lt;/code&gt; en el directorio raíz donde hayamos almacenado localmente nuestro sitio web, copiamos el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add .

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back up to the Project Root
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El anterior bloque de código se encarga, de manera automática, del proceso de subida de nuestro sitio web a &lt;em&gt;GitHub&lt;/em&gt;. Para utilizarlo, desde la terminal del sistema, nos situaremos en el directorio raíz donde hayamos decidido almacenar nuestro sitio web y teclearemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./deploy.sh &amp;quot;Mensaje que resuma los cambios&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, no me suelo esforzar mucho en declarar mensajes óptimamente descriptivos y, por ejemplo, cuando suba esta entrada el comando será del estilo &lt;code&gt;./deploy.sh &amp;quot;Añade entrada 20180901&amp;quot;&lt;/code&gt;. Los mensajes asociados al repositorio donde guardo el código fuente sí que intento que sean más expresivos y reflejen adecuadamente los cambios de las diferentes versiones.&lt;/p&gt;
&lt;p&gt;Con esto, damos por finalizado el proceso y nuestro sitio web será ahora accesible para todo el mundo a través de la dirección web que proporciona el segundo repositorio que hemos creado (en mi caso &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;En la siguiente entrada del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; posiblemente empecemos a realizar cambios en la hoja de estilos &lt;em&gt;CSS&lt;/em&gt; y personalizar todavía más el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publicando la primera entrada en nuestro sitio web</title>
      <link>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</link>
      <pubDate>Thu, 30 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/</guid>
      <description>&lt;p&gt;Tras haber recorrido, en el 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, las seis estaciones del vía crucis asociado al calvario de la instalación de &lt;em&gt;Hugo&lt;/em&gt; y la personalización del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, llega el momento más anhelado por todos: generar contenido para el sitio web.&lt;/p&gt;
&lt;p&gt;A continuación, examinaremos, con sumo detalle, todo el proceso de elaboración y revisión local de artículos para nuestra página web. Para empezar, me gustaría comentar que, en el apartado de la 
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-4-add-some-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guía oficial&lt;/a&gt; asociado a este asunto, se utiliza la combinación de la terminal del sistema y el comando &lt;code&gt;hugo new&lt;/code&gt; para dar a luz, de manera automática, una nueva entrada en el sitio web.&lt;/p&gt;
&lt;p&gt;No obstante, como no podía ser de otra manera y en un acto de la más absurda rebeldía, prefiero llevar a cabo este proceso de forma manual (qué obsesión con el control tengo, ¿verdad?). Si nos fijamos, desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, en la estructura de nuestra página web (heredada del sitio de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;), en el interior del directorio raíz existe una carpeta denominada &lt;code&gt;\content\&lt;/code&gt;, dentro de la cual residen anidadas otras dos: &lt;code&gt;\page\&lt;/code&gt; y &lt;code&gt;\post\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para respetar este esquema, he decidido ubicar todos los artículos del sitio web que se organicen por alguna taxonomía (recordemos que, en 
&lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, incluso añadimos alguna adicional a las que vienen dadas por defecto con &lt;em&gt;Hugo&lt;/em&gt;) en la carpeta &lt;code&gt;\post\&lt;/code&gt;, mientras que el resto irá al directorio &lt;code&gt;\page\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Siguiendo esta lógica, como seguramente la primera entrada que vayamos a publicar en nuestro sitio web será una especie de presentación en su blog, generaremos, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt;, un nuevo fichero en la carpeta &lt;code&gt;\post\&lt;/code&gt;. Este poseerá la extensión &lt;code&gt;.md&lt;/code&gt;, pues vamos a escribir todos y cada uno de nuestros artículos utilizando el lenguaje de marcado &lt;em&gt;Markdown&lt;/em&gt;. Para aquellas personas que escuchan por primera vez hablar de él, recomiendo encarecidamente que dediquen unos minutos a completar 
&lt;a href=&#34;https://www.markdowntutorial.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este tutorial&lt;/a&gt; sobre el mismo.&lt;/p&gt;
&lt;p&gt;La estructura de todo artículo será la que figura acto seguido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
Metadatos del artículo.
---

Párrafo (o párrafos) de introducción al artículo.

Cuerpo del artículo.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al comienzo de cada entrada ubicaremos, delimitada por los caracteres &lt;code&gt;---&lt;/code&gt;, cierta información relevante (metadatos) acerca de la misma, que suministraremos en la forma de pares &lt;code&gt;variable: valor&lt;/code&gt;. Las variables disponibles a nuestro alcance vendrán determinadas por el tema que hayamos escogido finalmente para nuestro sitio web, aunque sí que es cierto que algunas de ellas son comunes a la mayoría de los temas (como, por ejemplo, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;draft&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Teniendo en cuenta que nuestra página web hace uso del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, y considerando la definición de taxonomías y la personalización del &lt;em&gt;permalink&lt;/em&gt; que llevamos a cabo en 
&lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, utilizo siempre el mismo esquema para la cabecera de mis artículos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:
slug:
date:
draft:
bigimg:
apartados:
etiquetas:
proyectos:
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso particular de esta entrada, la anterior cabecera ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title:  &amp;quot;Publicando la primera entrada en nuestro sitio web&amp;quot;
slug:   &amp;quot;publicando-la-primera-entrada-en-nuestro-sitio-web&amp;quot;
date:   &amp;quot;2018-08-30T05:59:39+02:00&amp;quot;
draft:  false
bigimg: [{src: &amp;quot;img/blog/20180830-cabecera.jpg&amp;quot;}]
apartados: [&amp;quot;Blog&amp;quot;]
etiquetas: [&amp;quot;Hugo&amp;quot;]
proyectos: [&amp;quot;MetaBlog&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos a continuación el cometido de cada una de las variables que figuran en la cabecera:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: contiene el título del artículo. A diferencia de otros temas, por desgracia &lt;em&gt;Beautiful Hugo&lt;/em&gt; no admite la posibilidad de emplear &lt;em&gt;Markdown&lt;/em&gt; o &lt;em&gt;LaTeX&lt;/em&gt; en ciertas partes del título, hecho que debemos tener en consideración.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt;: tal y como comentamos en 
&lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt;, vamos a configurar manualmente el &lt;em&gt;permalink&lt;/em&gt; de cada entrada. Una de sus partes será, precisamente, la asociada a esta variable. Para generar su valor, sustituyo a mano los espacios por guiones y suprimo cualquier acento, eñe o carácter extraño a los ojos del alfabeto inglés que pudiese figurar en el título del artículo. En particular, para esta entrada, el &lt;em&gt;permalink&lt;/em&gt; será &lt;code&gt;/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/&lt;/code&gt;, es decir, la fecha de publicación junto al valor que hemos asignado a la variable &lt;code&gt;slug&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: fecha y hora de publicación del artículo. Me gustaría comentar aquí que nada nos impide generar contenido para fechas futuras, aunque cuando escribamos en la terminal del sistema &lt;code&gt;hugo server&lt;/code&gt;, no tendremos acceso a su revisión. Para solventar esta situación, tenemos que añadir la etiqueta &lt;code&gt;-F&lt;/code&gt;, es decir, teclear &lt;code&gt;hugo server -F&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: variable que nos permite indicar si la entrada en concreto tiene carácter de borrador (utilizando el valor &lt;code&gt;true&lt;/code&gt;) o si ya está lista para su publicación en nuestro sitio web (empleando el valor &lt;code&gt;false&lt;/code&gt;). Para revisar localmente una página web que contenga artículos en forma de borrador, hemos de escribir en la terminal del sistema &lt;code&gt;hugo server -D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigimg&lt;/code&gt;: esta variable nos permite insertar la ruta hacia una imagen de cabecera para nuestros artículos. En 
&lt;a href=&#34;https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/&#34;&gt;esta entrada&lt;/a&gt; está explicado en detalle el funcionamiento de esta característica particular del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apartados&lt;/code&gt;: primera taxonomía que utilizaremos para agrupar contenido según la categoría a la que pertenezca el artículo. No es más que la localización al español de la habitual &lt;code&gt;categories&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etiquetas&lt;/code&gt;: segunda taxonomía que utilizaremos para agrupar contenido según las palabras clave que caractericen a la entrada. No es más que la localización al español de la habitual &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proyectos&lt;/code&gt;: tercera taxonomía (generalmente opcional) que nos permitirá agrupar contenido que pertenezca a distintos apartados y posea diferentes etiquetas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tras declarar la cabecera, redactaremos un párrafo (o varios) de introducción al artículo, tras los cuales escribiremos la instrucción &lt;code&gt;more&lt;/code&gt;, precedida de los símbolos &lt;code&gt;&amp;lt;!--&lt;/code&gt; y seguida de &lt;code&gt;--&amp;gt;&lt;/code&gt;. Dichos párrafos, además de ser aquellos que den comienzo a nuestra entrada, serán los que figuren en las páginas de listado de nuestro sitio web. ¿A qué me refiero con las páginas de listado? Serían, por ejemplo, la principal de acceso al sitio web y todas aquellas que ofrecen un índice que contiene los artículos asociados a una taxonomía en particular.&lt;/p&gt;
&lt;p&gt;Tras dicha instrucción, finalmente, ya solo nos restará explayarnos tanto como deseemos en el cuerpo de la entrada. &lt;em&gt;The sky is the limit!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En el próximo artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; estudiaremos cómo utilizar &lt;em&gt;GitHub&lt;/em&gt; para alojar nuestra página web en &lt;em&gt;Internet&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breve introducción a la librería NumPy</title>
      <link>https://imalexissaez.github.io/2018/08/18/breve-introduccion-a-la-libreria-numpy/</link>
      <pubDate>Sat, 18 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/18/breve-introduccion-a-la-libreria-numpy/</guid>
      <description>&lt;p&gt;Tras la buena experiencia vivida después de la sesión dedicada a &lt;em&gt;machine learning&lt;/em&gt;, de la convención &lt;em&gt;SciPy 2017&lt;/em&gt;, me he animado a seguir explorando la 
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lista de reproducción&lt;/a&gt; del canal de &lt;em&gt;Youtube&lt;/em&gt; asociado a la cuenta de &lt;em&gt;Enthought&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Varios títulos han captado poderosamente mi atención (a la hora de escribir estas líneas, la mencionada lista de reproducción sobrepasa los noventa vídeos), pero teniendo en cuenta que todo el ecosistema de &lt;em&gt;SciPy&lt;/em&gt; se asienta sobre la librería &lt;em&gt;NumPy&lt;/em&gt;, he terminado considerando que la elección más sensata era optar por &lt;em&gt;&amp;ldquo;Introduction to Numerical Computing with NumPy&amp;rdquo;&lt;/em&gt;, que viene de la mano de Dillon Niederhut.&lt;/p&gt;
&lt;p&gt;Este artículo recoge las notas personales tomadas durante la visualización de dicho tutorial, al cual podemos acceder a través del siguiente 
&lt;a href=&#34;https://youtu.be/lKcwuPnSHIQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;enlace&lt;/a&gt;, y que posee asociado un 
&lt;a href=&#34;https://github.com/enthought/Numpy-Tutorial-SciPyConf-2017&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt; que, principalmente, conviene tener a mano para seguir algunos de los ejercicios planteados durante la sesión.&lt;/p&gt;
&lt;p&gt;Antes de empezar, me gustaría destacar que el material está enfocado a principiantes, por lo que el ritmo es bastante más sosegado que el llevado por aquel de &lt;em&gt;machine learning&lt;/em&gt; que mencionaba en el primer párrafo. Además, me ha parecido ciertamente curiosa la manera de tratar a los participantes, intentando en todo momento que se sientan en un entorno de aprendizaje bastante confortable.&lt;/p&gt;
&lt;h2 id=&#34;1-por-qué-aprender-a-utilizar-la-librería-numpy&#34;&gt;1. ¿Por qué aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Qué mejor manera de empezar esta entrada que justificando la necesidad de aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;. Introducirse al manejo de un nuevo módulo (y no digamos ya dominarlo) es una tarea que normalmente requiere una buena inversión de horas de estudio y experimentación, y &lt;em&gt;NumPy&lt;/em&gt;, por desgracia, no es la excepción que rompe la mencionada regla. Así pues, ¿por qué aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;La respuesta, &lt;em&gt;grosso modo&lt;/em&gt;, vendría dada por el más que discutible rendimiento del lenguaje de programación &lt;em&gt;Python&lt;/em&gt; a la hora de llevar a cabo cálculos numéricos. Ilustremos este hecho con un sencillo ejemplo: sumaremos los elementos de una lista que contendrá los primeros mil números enteros positivos (que construiremos con la función &lt;code&gt;range()&lt;/code&gt;), midiendo el tiempo que requiere la mencionada operación a través del comando mágico &lt;code&gt;%timeit&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test_list = list(range(1001))

%timeit sum(test_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;100000 loops, best of 3: 10.8 µs per loop    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora repitamos la misma operación empleando funciones de la librería &lt;em&gt;NumPy&lt;/em&gt;. Para ello:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importaremos el módulo siguiendo la convención establecida, es decir, escribiendo &lt;code&gt;import numpy as np&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;creamos una réplica de la anterior lista (que, en breve, empezaremos a llamar &lt;em&gt;array&lt;/em&gt;) utilizando la función &lt;code&gt;arange()&lt;/code&gt;, y&lt;/li&gt;
&lt;li&gt;sumaremos sus elementos mediante la función &lt;code&gt;sum()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

test_array = np.arange(1001)

%timeit np.sum(test_array)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The slowest run took 14.21 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 5.02 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hemos reducido a la mitad el tiempo que precisa el sistema para realizar el cálculo numérico requerido. No obstante, quizá no logre impactarnos el hecho de pasar de 11 a 5 microsegundos. Intentemos forzar un tanto el anterior ejemplo incrementando de manera significativa el número de elementos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = 1000001
test_list  = list(range(n)) # Python
test_array = np.arange(n)   # NumPy
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%timeit sum(test_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10 loops, best of 3: 46.3 ms per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%timeit np.sum(test_array)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 748 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado ahora sí que debería ser una buena justificación de cara a decidir si invertir o no nuestro preciado tiempo en aprender a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;. Esta considerable mejora en el tiempo de ejecución para cálculos numéricos se produce en cualquier tipo de operación matemática que llevemos a cabo empleando funciones de dicho módulo.&lt;/p&gt;
&lt;p&gt;Si tenemos en mente utilizar el lenguaje de programación &lt;em&gt;Python&lt;/em&gt; para analizar datos, considerando que al final casi todo se reduce a realizar cálculos numéricos con matrices de dimensiones considerables, &lt;em&gt;NumPy&lt;/em&gt; se convierte entonces en una herramienta esencial.&lt;/p&gt;
&lt;p&gt;Sin entrar en demasiados detalles técnicos, esta situación se produce debido a que:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;es distinta, y mucho más eficiente, la manera en que se accede a los elementos de un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt; con respecto a como &lt;em&gt;Python&lt;/em&gt; procede a realizar tal tarea en sus estructuras de datos básicas,&lt;/li&gt;
&lt;li&gt;el número de comprobaciones intermedias a la hora de llevar a cabo cálculos numéricos es menor en &lt;em&gt;NumPy&lt;/em&gt;, y&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NumPy&lt;/em&gt; está escrito utilizando el lenguaje de programación &lt;em&gt;C&lt;/em&gt;, que es bastante más rápido que &lt;em&gt;Python&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sin embargo, no es oro todo lo que reluce en &lt;em&gt;NumPy&lt;/em&gt;. En futuras secciones veremos que las, &lt;em&gt;a priori&lt;/em&gt;, ventajas expuestas en el listado anterior (sobretodo las dos primeras), conllevan aparejados ciertos inconvenientes de los que hemos de ser conscientes para evitar &lt;em&gt;bugs&lt;/em&gt; en nuestros códigos.&lt;/p&gt;
&lt;h2 id=&#34;2-qué-está-pasando-aquí-primeras-sorpresas-que-nos-regala-numpy&#34;&gt;2. ¿Qué está pasando aquí? Primeras sorpresas que nos regala &lt;em&gt;Numpy&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Para empezar, al utilizar los &lt;em&gt;arrays&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;, vamos a perder ciertas características deseables que poseen las estructuras de datos básicas de &lt;em&gt;Python&lt;/em&gt;. Por ejemplo, los elementos de una lista en &lt;em&gt;Python&lt;/em&gt; pueden ser heterogéneos, es decir, de diversos tipos. En una misma lista podemos almacenar números enteros, cadenas de texto, números decimales y valores lógicos sin problema alguno. No obstante, todos los elementos de un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;, obligatoriamente, deben pertenecer al mismo tipo. Por otro lado, estamos acostumbrados a ampliar o reducir el tamaño de una lista en &lt;em&gt;Python&lt;/em&gt; de manera dinámica, mientras que en &lt;em&gt;NumPy&lt;/em&gt; tendremos que trabajar con &lt;em&gt;arrays&lt;/em&gt; de dimensión fija preestablecida. Esto último no es del todo cierto, pero reajustar el tamaño de un &lt;em&gt;array&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; no es una operación eficiente, por lo que no se suele realizar salvo contadas excepciones.&lt;/p&gt;
&lt;p&gt;Sin embargo, aquello esbozado en el párrafo anterior palidece ante la pérdida de esas &amp;ldquo;redes de seguridad&amp;rdquo; a las que &lt;em&gt;Python&lt;/em&gt; nos tiene acostumbrados. Ilustremos la situación mediante algunos ejemplos: crearemos un &lt;em&gt;array&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; a través de la función &lt;code&gt;array()&lt;/code&gt;, pasándole una lista con los elementos que queremos pertenezcan al mencionado &lt;em&gt;array&lt;/em&gt;. Además, impondremos que dichos elementos sean del tipo &lt;code&gt;int8&lt;/code&gt;, utilizando para ello el argumento &lt;code&gt;dtype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para conocer más detalles sobre los distintos tipos disponibles para los elementos de &lt;em&gt;array&lt;/em&gt;, podemos echar un vistazo a la 
&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;página&lt;/a&gt; de la documentación oficial asociada al tema.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([-1, 0, 1, 100], dtype=&#39;int8&#39;)

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empecemos llevando a cabo algunas operaciones básicas. Por ejemplo, ¿qué sucede en &lt;em&gt;Python&lt;/em&gt; cuando intentamos dividir un número por cero?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 / 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-7-b710d87c980c&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 1 / 0

ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 // 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-8-8ba90f639c23&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 1 // 0

ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; arroja una excepción si encuentra una situación de este tipo, deteniendo por completo el proceso de la que forme parte. Probemos ahora a dividir por cero el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; declarado arriba.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;NumPy&lt;/em&gt; las operaciones aritméticas sobre vectores se realizan elemento a elemento, por lo que una instrucción del estilo &lt;code&gt;a + 1&lt;/code&gt; lo que hace es sumar una unidad a cada una de las componentes del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a / 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([-inf,  nan,  inf,  inf])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a // 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([0, 0, 0, 0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recibimos un &lt;em&gt;warning&lt;/em&gt; en la consola, pero el proceso continúa. Es más, incluso devuelve un resultado que es, cuanto menos, curioso. Para la división entera, obtenemos un vector cuyos elementos son todos nulos, mientras que para la división estándar, los elementos son &lt;code&gt;inf&lt;/code&gt; (infinito) o &lt;code&gt;nan&lt;/code&gt; (&lt;em&gt;Not A Number&lt;/em&gt; o, lo que es lo mismo, una entidad indefinida).&lt;/p&gt;
&lt;p&gt;Por mucho que hayamos declarado de tipo entero (&lt;code&gt;int8&lt;/code&gt;) los elementos de nuestro &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, ya no estamos trabajando, por así decirlo, con los &lt;em&gt;integer&lt;/em&gt; de &lt;em&gt;Python&lt;/em&gt;, y son distintas las reglas definidas para ellos. Con &lt;em&gt;NumPy&lt;/em&gt; hemos de ser muy conscientes de este hecho, para evitar todo tipo de &amp;ldquo;situaciones curiosas&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a // 0 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([1, 1, 1, 1], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La siguiente sorpresa la podemos encontrar si, por el motivo que sea, nos interesa elevar al cuadrado las componentes del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; declarado arriba.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 1,  0,  1, 16], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Todo parece correcto hasta que llegamos a un más que sorprendente $100^2 = 16$. ¿Qué acaba de suceder aquí? 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_overflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Integer overflow&lt;/a&gt;. Al declarar que el tipo de los elementos de nuestro &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; sería &lt;code&gt;int8&lt;/code&gt;, nos es imposible representar un número tan grande como &lt;code&gt;100 ** 2&lt;/code&gt;. En esta ocasión, ni siquiera recibimos un &lt;em&gt;warning&lt;/em&gt; que nos advierta de que se ha producido tal situación.&lt;/p&gt;
&lt;p&gt;Recuperemos ahora el tema de los &lt;code&gt;nan&lt;/code&gt; que brevemente ha aparecido anteriormente al llevar a cabo una división por cero.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a / 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([-inf,  nan,  inf,  inf])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A la hora de analizar tablas de datos, es ciertamente frecuente encontrar que los valores pérdidos se codifiquen como &lt;code&gt;nan&lt;/code&gt;. Curiosamente, en &lt;em&gt;NumPy&lt;/em&gt;, tenemos que:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.nan == np.nan
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hecho que, por otra parte, es bastante lógico. Si tenemos una entidad indefinida, difícil será que podamos comparar si es igual a otra entidad indefinida. No obstante, esta filosofía invalida la búsqueda de valores perdidos por la clásica vía de comparación con &lt;code&gt;nan&lt;/code&gt;. En &lt;em&gt;NumPy&lt;/em&gt;, para comprobar la existencia de dichos valores y que han sido codificados como &lt;code&gt;nan&lt;/code&gt;, tendremos que emplear funciones del tipo &lt;code&gt;isnan()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.isnan(np.nan)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.isnan(a / 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

array([False,  True, False, False], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, como tanto los &lt;code&gt;inf&lt;/code&gt; como los &lt;code&gt;nan&lt;/code&gt; se codifican de manera distinta a los números enteros, no vamos a poder tener en un &lt;em&gt;array&lt;/em&gt; de enteros ciertos elementos declarados como &lt;code&gt;nan&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, np.nan], dtype=&#39;int8&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-18-6d8f5ee90faf&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 np.array([1, 2, np.nan], dtype=&#39;int8&#39;)

ValueError: cannot convert float NaN to integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No obstante, con otros tipos de datos, esta situación no se da.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, np.nan], dtype=&#39;float32&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  1.,   2.,  nan], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Así pues, a modo de resumen, la moraleja que extraemos de este apartado sería que, si vamos a utilizar la librería &lt;em&gt;NumPy&lt;/em&gt;, tenemos que empezar a prestar más atención a las representaciones binarias de nuestros datos y su efecto a la hora de trabajar numéricamente con ellas.&lt;/p&gt;
&lt;h2 id=&#34;3-creando-arrays-especiales-en-numpy&#34;&gt;3. Creando &lt;em&gt;arrays&lt;/em&gt; especiales en &lt;em&gt;NumPy&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La librería &lt;em&gt;NumPy&lt;/em&gt; contiene una serie de funciones orientadas a generar &lt;em&gt;arrays&lt;/em&gt; especiales como, por ejemplo, aquellos cuyas componentes son todas nulas, todas unos o, incluso, que consistan en una serie de huecos vacíos a rellenar en un futuro.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.multiarray.zeros&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.numeric.ones&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.empty
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function numpy.core.multiarray.empty&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las anteriores funciones mostradas requieren como argumento obligatorio, para crear los &lt;em&gt;arrays&lt;/em&gt; asociados, el número total de elementos (si buscamos generar un &lt;em&gt;array&lt;/em&gt; unidimensional) o una &lt;em&gt;tupla&lt;/em&gt; que contenga las distintas dimensiones (si deseamos crear un &lt;em&gt;array&lt;/em&gt; multidimensional).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.,  0.,  0.,  0.,  0.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((2, 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1.,  1.],
       [ 1.,  1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.empty((3, 3, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[  1.04468097e-311,   1.04464737e-311,   9.34598925e-307],
        [  8.45605478e-307,   1.37962592e-306,   1.24610994e-306],
        [  1.29061821e-306,   4.45057637e-308,   8.90051274e-307]],

       [[  8.45596650e-307,   1.11261434e-306,   4.45061880e-308],
        [  1.69109959e-306,   7.56603882e-307,   4.45063578e-308],
        [  1.24606309e-306,   1.78019625e-306,   9.34610469e-307]],

       [[  8.90051274e-307,   1.95810846e-306,   1.29062229e-306],
        [  1.33506605e-306,   1.37962388e-306,   1.37961302e-306],
        [  8.45596650e-307,   2.44033110e-312,   0.00000000e+000]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En los elementos que componen el &lt;em&gt;array&lt;/em&gt; generado a partir de la función &lt;code&gt;empty()&lt;/code&gt; encontramos aquello que previamente residía en memoria en el instante anterior a la creación de dicho array. Es por ello que, en ocasiones, si procedemos a revisarlos inmediatamente después de su declaración, encontremos valores curiosos tipo &lt;code&gt;9.34598925e-307&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-accediendo-a-los-elementos-de-un-array&#34;&gt;4. Accediendo a los elementos de un &lt;em&gt;array&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Partiendo del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; que declaramos en una sección anterior, en esta veremos cómo acceder a sus elementos. En &lt;em&gt;NumPy&lt;/em&gt; podemos utilizar las clásicas estrategias de &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;slice&lt;/em&gt; a las que estamos acostumbrados en &lt;em&gt;Python&lt;/em&gt; para extraer elementos de sus estructuras de datos básicas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ -1,   0,   1, 100], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Así, por ejemplo, para acceder al primer elemento de &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, no tenemos más que escribir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(a[0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;numpy.int8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como suele ser habitual en &lt;em&gt;Python&lt;/em&gt;, al emplear estrategias de tipo &lt;em&gt;get&lt;/em&gt; perdemos la estructura de datos de la que partíamos. Al ejecutar &lt;code&gt;a[0]&lt;/code&gt; el resultado deja de ser un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt; para convertirse, en este caso, en un número entero. Como ya advertimos en una sección anterior, a la hora de trabajar con &lt;em&gt;NumPy&lt;/em&gt; debemos en todo momento saber con qué tipo de dato estamos trabajando y las reglas bajo las que se rige. El entero que acabamos de extraer del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, como hemos podido comprobar mediante la función &lt;code&gt;type()&lt;/code&gt;, es de tipo &lt;code&gt;numpy.int8&lt;/code&gt;, no de tipo &lt;code&gt;int&lt;/code&gt; como a primera vista podríamos sospechar. Cierta cautela se nos exige si tras la extracción tenemos en mente llevar a cabo cualquier tipo de operación matemática con el mencionado valor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0] // 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.

0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos utilizar también índices negativos para acceder a los elementos de un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además, como comentábamos al principio, es posible emplear estrategias de tipo &lt;em&gt;slice&lt;/em&gt; para recuperar ciertas partes de los &lt;em&gt;arrays&lt;/em&gt; declarados. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[0:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1,  0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En esta ocasión, la estructura de datos se conserva, puesto que el resultado de la extracción continúa siendo un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por otro lado, las reglas habituales del uso de estrategias de tipo &lt;em&gt;slice&lt;/em&gt; se mantienen para los &lt;em&gt;arrays&lt;/em&gt; de &lt;em&gt;NumPy&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1,  0], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1,  1], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, aunque los &lt;em&gt;arrays&lt;/em&gt; sean, generalmente, de tamaño fijo, son un tipo de estructura de datos mutable, es decir, podemos modificar en cualquier momento el valor de sus elementos. Por ejemplo, para reemplazar en el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; el elemento &lt;code&gt;100&lt;/code&gt; por un &lt;code&gt;5&lt;/code&gt;, simplemente tendríamos que teclear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[-1] = 5

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1,  0,  1,  5], dtype=int8)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-trabajando-con-arrays-multidimensionales&#34;&gt;5. Trabajando con &lt;em&gt;arrays&lt;/em&gt; multidimensionales&lt;/h2&gt;
&lt;p&gt;Para generar &lt;em&gt;arrays&lt;/em&gt; multidimensionales no tenemos más que anidar listas (&lt;code&gt;[]&lt;/code&gt;) en la declaración del argumento de la función &lt;code&gt;array()&lt;/code&gt;. Por ejemplo, podemos generar un &lt;em&gt;array&lt;/em&gt; bidimensional siguiendo un patrón similar al que figura a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.array([[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8],
              [9, 10, 11]])

b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; es bidimensional, como bien podemos comprobar a través de sus atributos &lt;code&gt;.ndim&lt;/code&gt; y &lt;code&gt;.shape&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.ndim
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(4, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al tratarse &lt;code&gt;b&lt;/code&gt; de los primeros once números enteros positivos (incluyendo el &lt;code&gt;0&lt;/code&gt;), para evitar errores a la hora de introducir los datos, podríamos haber empleado primero la función &lt;code&gt;arange()&lt;/code&gt;, para luego emplear &lt;code&gt;reshape()&lt;/code&gt; y transformar el &lt;em&gt;array&lt;/em&gt; unidimensional en uno bidimensional.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.arange(12).reshape(4, 3)

b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es posible que, en este preciso instante, estemos tentados a denominar la primera dimensión del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; como &lt;em&gt;filas&lt;/em&gt; y la segunda como &lt;em&gt;columnas&lt;/em&gt;, por su similaridad con las tablas de datos con las que estamos acostumbrados a lidiar. No obstante, debemos ser cautos con esta nomenclatura, puesto que con &lt;em&gt;NumPy&lt;/em&gt; podemos generar &lt;em&gt;arrays&lt;/em&gt; $n$-dimensionales y, en ese contexto, es un tanto confuso hablar de &lt;em&gt;filas&lt;/em&gt; y &lt;em&gt;columnas&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El acceso a los elementos del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt; lo podemos llevar a cabo, al igual que en la sección anterior, mediante estrategias de tipo &lt;em&gt;get&lt;/em&gt; o &lt;em&gt;slice&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[2, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(b[2, 2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;numpy.int32
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:2, :2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0, 1],
       [3, 4]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como era de esperar, no tenemos por qué utilizar la misma estrategia en todas las dimensiones del &lt;em&gt;array&lt;/em&gt;, pero sí debemos prestar atención a la estructura de datos resultante (o más bien a su dimensión) cuando empleamos ambos tipos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[1:3, -1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([5, 8])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[1:3, -1:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[5],
       [8]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dependiendo de si acto seguido vamos a utilizar el anterior resultado para llevar a cabo algún tipo de cálculo matemático, este detalle puede resultar de vital relevancia.&lt;/p&gt;
&lt;p&gt;Si estamos interesados en que el resultado de la extracción conserve el número de dimensiones del objeto original, en todas y cada una de las dimensiones hemos de emplear estrategias de tipo &lt;em&gt;slice&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1].ndim
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[:1, :1].shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; tridimensional &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c = np.arange(24).reshape(2, 3, 4)

c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se pide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Extraer el número &lt;code&gt;17&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 0,  1,  2,  3],
 [ 4,  5,  6,  7],
 [ 8,  9, 10, 11]].
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[12, 13, 14, 15]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[1, 1, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[0, :, :]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[1, 0, :]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([12, 13, 14, 15])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: este ejercicio resulta trivial si previamente optamos por convertir el &lt;em&gt;array&lt;/em&gt; tridimensional &lt;code&gt;c&lt;/code&gt; en uno unidimensional utilizando la función &lt;code&gt;flatten()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.flatten()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; bidimensional &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(25).reshape(5, 5)

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se pide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[20, 21, 22, 23, 24]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 1,  3],
 [ 6,  8],
 [11, 13],
 [16, 18],
 [21, 23]].
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extraer el &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 5,  7],
 [15, 17]].
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[4, :] # a[-1, :]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([20, 21, 22, 23, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[:, 1::2] # a[:, 1:4:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  3],
       [ 6,  8],
       [11, 13],
       [16, 18],
       [21, 23]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[1::2, 0:4:2] # a[1::2, :3:2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 5,  7],
       [15, 17]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta manera de extraer los elementos de un &lt;em&gt;array&lt;/em&gt; es extremadamente rápida y eficiente (coste de orden constante), característica deseable a hora de llevar a cabo análisis de datos de tablas cuyas dimensiones sean considerables. No obstante, con estrategias de &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;slice&lt;/em&gt; no siempre seremos capaces de acceder fácilmente a cualquier subconjunto de elementos de un &lt;em&gt;array&lt;/em&gt;, teniendo que recurrir entonces a lo que se conoce como &lt;em&gt;fancy indexing&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;6-accediendo-a-los-elementos-de-un-array-mediante-fancy-indexing&#34;&gt;6. Accediendo a los elementos de un &lt;em&gt;array&lt;/em&gt; mediante &lt;em&gt;Fancy indexing&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La primera estrategia de acceso a los elementos de un &lt;em&gt;array&lt;/em&gt; empleando &lt;em&gt;fancy indexing&lt;/em&gt; consiste, simplemente, en utilizar una llamada de tipo &lt;em&gt;get&lt;/em&gt; donde proporcionaremos una lista (&lt;code&gt;[]&lt;/code&gt;) que contenga los índices de los elementos que deseamos extraer. Ilustremos la manera de proceder mediante algunos ejemplos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(4)

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si ahora buscamos acceder al primer (índice &lt;code&gt;0&lt;/code&gt;) y último (índice &lt;code&gt;3&lt;/code&gt;) elemento de &lt;code&gt;a&lt;/code&gt;, escribiríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De la misma forma podemos extraer los elementos primero, segundo y último de &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, 3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, -1]] # versión con índices negativos
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos a continuación cómo proceder a la hora de trabajar con &lt;em&gt;arrays&lt;/em&gt; bidimensionales.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = np.arange(12).reshape(4, 3)

b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Supongamos que buscamos extraer los números &lt;code&gt;2&lt;/code&gt; y &lt;code&gt;6&lt;/code&gt;. Necesitaremos ahora pasar dos listas a la llamada de tipo &lt;em&gt;get&lt;/em&gt; para acceder a dichos números, una con sus índices asociados a la primera dimensión (&lt;code&gt;0&lt;/code&gt; y &lt;code&gt;2&lt;/code&gt; en este caso) y otra con sus correspondientes índices de la segunda dimensión (&lt;code&gt;2&lt;/code&gt; y &lt;code&gt;0&lt;/code&gt; en esta ocasión).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b[[0, 2], [2, 0]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([2, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguramente quede más clara la manera de proceder si ilustramos la anterior estrategia para un &lt;em&gt;array&lt;/em&gt; tridimensional.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si nos interesa acceder a los números &lt;code&gt;6&lt;/code&gt; y &lt;code&gt;17&lt;/code&gt;, dentro de la estrategia de tipo &lt;em&gt;get&lt;/em&gt; tendríamos que declarar tres listas (porque el array &lt;code&gt;c&lt;/code&gt; es tridimensional), cada una de ellas compuesta por dos elementos (debido a que buscamos extraer dos números), indicando los índices de los mencionados números para todas y cada una de las dimensiones del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para el caso del número &lt;code&gt;6&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Índice de la primera dimensión: &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la segunda dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la tercera dimensión: &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para el caso del número &lt;code&gt;17&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Índice de la primera dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la segunda dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Índice de la tercera dimensión: &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora, la intuición seguramente nos llevaría a escribir una llamada del tipo &lt;code&gt;c[[0, 1, 2], [1, 1, 1]]&lt;/code&gt;, a partir de las &amp;ldquo;coordenadas en el espacio&amp;rdquo; de los números buscados, recibiendo entonces un error en la consola.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[[0, 1, 2], [1, 1, 1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&amp;lt;ipython-input-63-2310a6526161&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 c[[0, 1, 2], [1, 1, 1]]

IndexError: index 2 is out of bounds for axis 0 with size 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Debemos intentar evitar pensar en los elementos de un &lt;em&gt;array&lt;/em&gt; multidimensional a partir de sus coordenadas y hacerlo empleando directamente el número de dimensiones. Para que la anterior instrucción hubiese funcionado, el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; tendría que haber sido bidimensional (porque encontramos declaradas dos listas) y el objetivo acceder a tres elementos (debido a que cada una de las listas posee tres componentes).&lt;/p&gt;
&lt;p&gt;De esta manera, para extraer los números &lt;code&gt;6&lt;/code&gt; y &lt;code&gt;17&lt;/code&gt; de &lt;code&gt;c&lt;/code&gt;, hemos de teclear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[[0, 1], [1, 1], [2, 1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 17])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A medida que el número de elementos a los que queremos acceder o la cantidad de dimensiones del &lt;em&gt;array&lt;/em&gt; se incrementan, esta forma de proceder se vuelve ciertamente un tanto tediosa. Es por ello que, en ocasiones, conviene emplear una estrategia alternativa de &lt;em&gt;fancy indexing&lt;/em&gt; cuyo funcionamiento se asienta en el adecuado uso de &lt;em&gt;máscaras&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Supongamos que, trabajando con el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;, estamos interesados en acceder a todos aquellos elementos que sean estrictamente mayores que &lt;code&gt;16&lt;/code&gt;. Si escribimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c &amp;gt; 16
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[False, False, False, False],
        [False, False, False, False],
        [False, False, False, False]],

       [[False, False, False, False],
        [False,  True,  True,  True],
        [ True,  True,  True,  True]]], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obtenemos un &lt;em&gt;array&lt;/em&gt; tridimensional formado por valores lógicos, y de la misma dimensión que &lt;code&gt;c&lt;/code&gt;, que, para todos y cada uno de sus elementos, nos informa de si satisface la condición planteada (&lt;code&gt;True&lt;/code&gt;) o no (&lt;code&gt;False&lt;/code&gt;). Dicha información se la podemos suministrar a una estrategia de tipo &lt;em&gt;get&lt;/em&gt; para así acceder a los elementos que nos interese.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[c &amp;gt; 16]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como no podía ser de otra manera, la concatenación de accesos está también permitida. En el caso de buscar el primer elemento estrictamente mayor que &lt;code&gt;16&lt;/code&gt; podríamos teclear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c[c &amp;gt; 16][0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No obstante, en ocasiones resulta un tanto confusa esta forma de proceder, sobretodo si el número de dimensiones con las que trabajamos es considerable y concatenamos varios accesos de este estilo. Posiblemente facilita más la lectura del código escribir la anterior instrucción en dos líneas, de la siguiente manera:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = c[c &amp;gt; 16]

d[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo, la pregunta lógica que podríamos plantearnos en este instante es, ¿conviene que declaremos un nuevo objeto, con todo el coste de almacenamiento que ello supone, simplemente por mejorar levemente la legibilidad de nuestros códigos? La respuesta, aunque pueda parecer sorprendente, es afirmativa, dado que, posiblemente, no estaremos creando un nuevo &lt;em&gt;array&lt;/em&gt; sino simplemente una nueva cabecera que apunta al &lt;em&gt;array&lt;/em&gt; del que estamos extrayendo datos.&lt;/p&gt;
&lt;p&gt;Sí, es un tanto confuso el final del anterior párrafo y, para añadir más complejidad al asunto si cabe, es una situación que conlleva ciertos efectos &amp;ldquo;curiosos&amp;rdquo; de los que hemos de ser conscientes para evitar &lt;em&gt;bugs&lt;/em&gt; de difícil detección (qué recuerdos de los tiempos de &lt;em&gt;punteros&lt;/em&gt; con el lenguaje de programación &lt;em&gt;C&lt;/em&gt;). Las líneas que figuran a continuación son dignas de una segunda parte para la sección del tutorial &amp;ldquo;¿Qué está pasando aquí? Primeras sorpresas que nos regala &lt;em&gt;Numpy&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Rescatemos el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y almacenemos en un nuevo objeto &lt;code&gt;d&lt;/code&gt; el resultado de cierta extracción de elementos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = c[:, 1:2, 1:3]

d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[ 5,  6]],

       [[17, 18]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si ahora accedemos a cierta información de interés sobre el objeto &lt;code&gt;d&lt;/code&gt;, a partir de su atributo &lt;code&gt;flags&lt;/code&gt;, encontramos que:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : False
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El atributo &lt;code&gt;OWNDATA&lt;/code&gt; posee como valor &lt;code&gt;False&lt;/code&gt;, es decir, el &lt;em&gt;array&lt;/em&gt; no controla sus propios datos. Hemos generado un nuevo objeto, &lt;code&gt;d&lt;/code&gt;, pero no se ha llevado a cabo ninguna copia independiente de sus elementos en memoria, sino simplemente la creación de una cabecera con información que apunta hacia los elementos de interés del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; que nos permiten construir el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esta forma de proceder es ciertamente eficiente, porque copiar datos en memoria es una operación costosa tanto en tiempo de ejecución como en espacio para almacenamiento. Sin embargo, conlleva aparejada la siguiente &amp;ldquo;curiosa&amp;rdquo; (y, por otra parte, muy lógica) situación.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[0, 0, 0] = 1000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[1000,    6]],

       [[  17,   18]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[   0,    1,    2,    3],
        [   4, 1000,    6,    7],
        [   8,    9,   10,   11]],

       [[  12,   13,   14,   15],
        [  16,   17,   18,   19],
        [  20,   21,   22,   23]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cambios en el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;d&lt;/code&gt; afectan al &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; del cual se originó, por lo que se exige, como ya viene siendo habitual a estas alturas con la librería &lt;em&gt;NumPy&lt;/em&gt;, cierta cautela a la hora de llevar a cabo algunas operaciones.&lt;/p&gt;
&lt;p&gt;Sin embargo, si utilizamos las estrategias de &lt;em&gt;fancy indexing&lt;/em&gt;, esbozadas en la sección anterior, generalmente no encontraremos este tipo de situaciones. &lt;em&gt;NumPy&lt;/em&gt; tratará de, en un principio, resolver la situación creando únicamente una nueva cabecera, pero, de no ser posible (situación sumamente habitual), procederá a realizar una copia de los datos de interés.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = c[c &amp;gt; 16]

e
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1000,   17,   18,   19,   20,   21,   22,   23])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : True
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e[0] = 5

e
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 5, 17, 18, 19, 20, 21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[[   0,    1,    2,    3],
        [   4, 1000,    6,    7],
        [   8,    9,   10,   11]],

       [[  12,   13,   14,   15],
        [  16,   17,   18,   19],
        [  20,   21,   22,   23]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta situación también se presenta al emplear las funciones &lt;code&gt;reshape()&lt;/code&gt; o al trasponer un &lt;em&gt;array&lt;/em&gt;. En lugar de crear una nueva copia de los datos, únicamente se genera una cabecera en memoria que apunta a las direcciones adecuadas para componer los nuevos &lt;em&gt;arrays&lt;/em&gt;. Esto conlleva, por tanto, que apenas suponga coste alguno el utilizar este tipo de funciones.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = np.array([[1, 2], [3, 4]])

f
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [3, 4]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = f.reshape(4, 1)

g
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1],
       [2],
       [3],
       [4]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : True
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;h = f.T

h
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 3],
       [2, 4]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;h.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : False
  F_CONTIGUOUS : True
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como colofón, si examinamos el atributo &lt;code&gt;.flags&lt;/code&gt; del propio objeto &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.flags
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Teniendo en cuenta que el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; no se ha generado a partir de un objeto distinto, ¿no debería poseer el atributo &lt;code&gt;OWNDATA&lt;/code&gt; el valor &lt;code&gt;True&lt;/code&gt;? La justificación reside en la expresión que hemos empleado para crear dicho &lt;em&gt;array&lt;/em&gt; y que, a estas alturas de la vida y del tutorial, posiblemente hayamos ya olvidado.&lt;/p&gt;
&lt;p&gt;Recordemos que habíamos tecleado &lt;code&gt;c = np.arange(24).reshape(2, 3, 4)&lt;/code&gt;, de manera que la función &lt;code&gt;arange()&lt;/code&gt; comienza creando una cabecera con la información del &lt;em&gt;array&lt;/em&gt; (del estilo &lt;code&gt;.ndim&lt;/code&gt; o &lt;code&gt;.shape&lt;/code&gt;), así como reservando cierto espacio en memoria para almacenar sus elementos. Después, la función &lt;code&gt;reshape()&lt;/code&gt; únicamente genera una nueva cabecera apuntando de manera adecuada a los mencionados elementos y es por ello que el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;c&lt;/code&gt; no cree que sea el propietario de los datos que lo integran. No obstante, que el valor del atributo &lt;code&gt;OWNDATA&lt;/code&gt; sea &lt;code&gt;False&lt;/code&gt; indica que sus datos podrían o no ser manipulados desde otro objeto, pero no implica que necesariamente puedan serlo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dado el &lt;em&gt;array&lt;/em&gt; bidimensional &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.arange(25).reshape(5, 5)

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se pide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extraer el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;[ 1,  7, 13, 19]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Extraer el &lt;em&gt;array&lt;/em&gt; compuesto por los números divisibles entre &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Soluciones&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[[0, 1, 2, 3], [1, 2, 3, 4]] # alternativa: a[np.arange(4), np.arange(4)+1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 1,  7, 13, 19])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resolvamos el segundo apartado paso por paso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a % 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0, 1, 2, 0, 1],
       [2, 0, 1, 2, 0],
       [1, 2, 0, 1, 2],
       [0, 1, 2, 0, 1],
       [2, 0, 1, 2, 0]], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a % 3 == 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ True, False, False,  True, False],
       [False,  True, False, False,  True],
       [False, False,  True, False, False],
       [ True, False, False,  True, False],
       [False,  True, False, False,  True]], dtype=bool)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[a % 3 == 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  3,  6,  9, 12, 15, 18, 21, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-operaciones-con-arrays&#34;&gt;7. Operaciones con &lt;em&gt;arrays&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;En esta última sección del &lt;em&gt;notebook&lt;/em&gt; veremos dos tipos de operaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matemáticas: conservan la dimensión del &lt;em&gt;array&lt;/em&gt; (como, por ejemplo, la suma &lt;code&gt;+&lt;/code&gt;), y&lt;/li&gt;
&lt;li&gt;de reducción: disminuyen la dimensión del &lt;em&gt;array&lt;/em&gt; (como, por ejemplo, la media &lt;code&gt;mean()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las operaciones matemáticas entre &lt;em&gt;arrays&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt; se suelen llevar a cabo elemento, por lo que debemos ser cautos con las dimensiones de los &lt;em&gt;arrays&lt;/em&gt; implicados en la operación, ya que en &lt;em&gt;NumPy&lt;/em&gt; no se produce ningún tipo de &amp;ldquo;reciclaje de &lt;em&gt;arrays&lt;/em&gt;&amp;rdquo; (como al que estamos habituados si utilizamos el lenguaje de programación &lt;em&gt;R&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  2,  4,  6,  8],
       [10, 12, 14, 16, 18],
       [20, 22, 24, 26, 28],
       [30, 32, 34, 36, 38],
       [40, 42, 44, 46, 48]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + np.arange(7)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-94-825c7dd057ef&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a + np.arange(7)

ValueError: operands could not be broadcast together with shapes (5,5) (7,) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estaremos en condiciones de llevar a cabo operaciones entre &lt;em&gt;arrays&lt;/em&gt; de distintas dimensiones siempre y cuando verifique las reglas de &lt;em&gt;broadcasting&lt;/em&gt;, que podemos consultar en la siguiente 
&lt;a href=&#34;https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;página&lt;/a&gt; de la documentación oficial. &lt;em&gt;Grosso modo&lt;/em&gt;, dos dimensiones son compatibles bien cuando son iguales, bien cuando una de ellas es &lt;code&gt;1&lt;/code&gt;, y el proceso de comparación se lleva a cabo de atrás hacia delante.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + np.arange(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  2,  4,  6,  8],
       [ 5,  7,  9, 11, 13],
       [10, 12, 14, 16, 18],
       [15, 17, 19, 21, 23],
       [20, 22, 24, 26, 28]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(5, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(5).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(5,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Así,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:                5 x 5
np.arange(5):         5
a + np.arange(5): 5 x 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esquema que, a primera vista, no parece satisfacer las reglas de &lt;em&gt;broadcasting&lt;/em&gt;, puesto que en la dimensión situada a la izquierda, tenemos un &lt;code&gt;5&lt;/code&gt; para el &lt;em&gt;array&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, pero no hay elemento alguno para &lt;code&gt;np.arange(5)&lt;/code&gt;. No obstante, internamente, &lt;em&gt;NumPy&lt;/em&gt; aplica a &lt;code&gt;np.arange(5)&lt;/code&gt; un &lt;code&gt;reshape(1, 5)&lt;/code&gt; para poder llevar a cabo la suma, quedando ahora el esquema:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:                             5 x 5
np.arange(5).reshape(1, 5):    1 x 5
a + np.arange(5).reshape(1,5): 5 x 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cumpliéndose así las mencionadas reglas.&lt;/p&gt;
&lt;p&gt;Por lo que respecta a las operaciones de reducción, algunas de las más habituales vienen dadas a través de las funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.sum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.std()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.var()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.min()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmin()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmax()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos algunos ejemplos de su aplicación a &lt;em&gt;arrays&lt;/em&gt; unidimensionales:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b.flatten()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b.flatten())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;66
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(b.flatten())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(b.flatten())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b.flatten())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora bien, si trabajamos con la versión multidimensional del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;b&lt;/code&gt;, podemos aplicar las operaciones de reducción por dimensiones, utilizando el argumento &lt;code&gt;axis&lt;/code&gt;. En &lt;em&gt;arrays&lt;/em&gt; bidimensionales, vamos a estar fuertemente tentados a denominar estas operaciones bien con la coletilla &amp;ldquo;por columnas&amp;rdquo; (para &lt;code&gt;axis=0&lt;/code&gt;), bien &amp;ldquo;por filas&amp;rdquo; (para &lt;code&gt;axis=1&lt;/code&gt;), pero recordemos que tal nomenclatura se vuelve confusa cuando la dimensión del &lt;em&gt;array&lt;/em&gt; es estrictamente superior a &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b, axis=0) # reducción de la primera dimensión (suma por &amp;quot;columnas&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([18, 22, 26])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(b, axis=1) # reducción de la segunda dimensión (suma por &amp;quot;filas&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 3, 12, 21, 30])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b, axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3, 3, 3], dtype=int64)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(b, axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([2, 2, 2, 2], dtype=int64)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si aplicamos la función &lt;code&gt;argmax()&lt;/code&gt; directamente al array bidimensional &lt;code&gt;b&lt;/code&gt;, &lt;em&gt;NumPy&lt;/em&gt; actuará internamente como hicimos nosotros anteriormente, aplicando la función &lt;code&gt;flatten()&lt;/code&gt; para luego buscar en qué posición reside el elemento de mayor valor y devolver dicha posición. Esta información, en &lt;em&gt;arrays&lt;/em&gt; unidimensionales es bastante informativa, pero es complicada de interpretar en &lt;em&gt;arrays&lt;/em&gt; multidimensionales. Si deseamos acceder a los índices, para cada una de las dimensiones, donde se alcanza el mayor valor, podemos hacer uso de la función &lt;code&gt;unravel_index()&lt;/code&gt; de la siguiente manera:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.unravel_index(np.argmax(b), b.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, veamos cómo se propagan los elementos &lt;code&gt;nan&lt;/code&gt; al llevar a cabo operaciones matemáticas y de reducción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = a.astype(&#39;float64&#39;)

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[2, 3] = np.nan

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  nan,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a + 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  nan,  19.],
       [ 20.,  21.,  22.,  23.,  24.],
       [ 25.,  26.,  27.,  28.,  29.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;nan
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a, axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 50.,  55.,  60.,  nan,  70.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(a, axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  10.,   35.,   nan,   85.,  110.])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En resumen, la librería &lt;em&gt;NumPy&lt;/em&gt; contiene un conjunto de herramientas más que recomendable para todas aquellas personas que en su día a día utilicen el lenguaje de programación &lt;em&gt;Python&lt;/em&gt; para llevar a cabo cualquier tipo de cálculo numérico. Un considerable incremento en la velocidad y una gestión de memoria más eficiente, cuya única contrapartida aparejada es requerir un buen entendimiento de las características del problema, así como de todas las implicaciones que los pasos para resolverlo conllevan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial sobre Machine Learning con Python</title>
      <link>https://imalexissaez.github.io/2018/08/16/tutorial-sobre-machine-learning-con-python/</link>
      <pubDate>Thu, 16 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/16/tutorial-sobre-machine-learning-con-python/</guid>
      <description>&lt;p&gt;¿Te has quedado sin planes para el fin de semana? Aunque tu lista de tareas pendientes y, generalmente, poco atractivas parezca haber crecido de manera exponencial en los últimos tiempos, ¿el cuerpo te pide algo distinto?&lt;/p&gt;
&lt;p&gt;¿Qué tal invertir las próximas seis horas y media de tu vida disfrutando de un tutorial sobre &lt;em&gt;Machine Learning&lt;/em&gt; con &lt;em&gt;Python&lt;/em&gt;? Suena interesante, ¿verdad? Al menos es así en esta especie de universo paralelo donde parece que vivo últimamente.&lt;/p&gt;
&lt;p&gt;En la cuenta de &lt;em&gt;YouTube&lt;/em&gt; asociada a 
&lt;a href=&#34;https://www.youtube.com/user/EnthoughtMedia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enthought&lt;/a&gt;, creadores de la conocida distribución &lt;em&gt;Canopy&lt;/em&gt; para &lt;em&gt;Python&lt;/em&gt;, ha aparecido recientemente una 
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lista de reproducción&lt;/a&gt; que alberga los tutoriales y charlas correspondientes a la última convención &lt;em&gt;SciPy&lt;/em&gt;: &amp;ldquo;SciPy 2017: Scientific Computing with Python Conference&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Aquel al que hacía referencia en el primer párrafo estuvo dividido en dos sesiones, a las que podemos acceder directamente a través de los siguientes enlaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://youtu.be/WLYzSas511I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No obstante, antes de lanzarte de cabeza a su visualización, te recomendaría adoptases una actitud de aprendizaje activo para un mayor aprovechamiento. Es un tutorial bastante práctico, que se apoya en el uso de numerosos &lt;em&gt;Jupyter Notebooks&lt;/em&gt; que también tenemos a nuestra disposición sin coste alguno. ¿Por qué no experimentar personalmente con el código para así reforzar las ideas vertidas y el uso de distintos algoritmos?&lt;/p&gt;
&lt;p&gt;La única pega que presenta esta aproximación al tutorial reside en que nuestro equipo debe cumplir una serie de requisitos, que exploraremos rápidamente en la siguiente sección.&lt;/p&gt;
&lt;h2 id=&#34;instalación-de-las-herramientas-asociadas&#34;&gt;Instalación de las herramientas asociadas&lt;/h2&gt;
&lt;p&gt;En función de los distintos programas que ya estén instalados en nuestro sistema, el paseo por el siguiente listado nos llevará más o menos tiempo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Utilizando nuestro navegador favorito, dirijámonos en primer lugar al 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt;, que contiene los &lt;em&gt;notebooks&lt;/em&gt; asociados al tutorial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Echemos un rápido vistazo a su archivo &lt;code&gt;README.md&lt;/code&gt;, que alberga información de interés sobre el mencionado tutorial, así como unas breves instrucciones para que configuremos nuestro equipo de manera adecuada y podamos utilizar el material disponible sin problema alguno.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clonemos o &amp;ldquo;forkeemos&amp;rdquo; (no hace falta que lo compruebes, ambos sabemos que esa aberración no va a estar registrada en el diccionario, pero si utilizas &lt;em&gt;git&lt;/em&gt; me habrás entendido) el propio repositorio. Si no tienes cuenta en &lt;em&gt;GitHub&lt;/em&gt; o, directamente, no estás entiendo nada de lo que llevo escrito en este punto, sitúate en la parte superior derecha de la página asociada al repositorio, haz clic sobre el botón &lt;code&gt;Clone or download&lt;/code&gt; y pulsa sobre el enlace &lt;code&gt;Download ZIP&lt;/code&gt;. Descargarás un archivo comprimido que contiene todo el material de este repositorio, de forma que podrás descomprimirlo en tu unidad de disco duro donde desees y trabajar desde dicha localización.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iniciemos &lt;em&gt;Jupyter Notebook&lt;/em&gt; y naveguemos por los directorios hasta alcanzar la ruta donde hayamos almacenado los materiales del repositorio. Si no dispones de esta aplicación en tu ordenador, una manera fácil de hacerte con ella, y a la vez con los módulos que se utilizarán a lo largo del tutorial, es descargar la distribución de &lt;em&gt;Python&lt;/em&gt; 
&lt;a href=&#34;https://www.anaconda.com/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt; asociada a la versión 3.6 del mencionado lenguaje de programación. Por otro lado, si es la primera vez que escuchas hablar de &lt;em&gt;notebooks&lt;/em&gt; (en &lt;em&gt;R&lt;/em&gt; y &lt;em&gt;Python&lt;/em&gt; son muy populares hoy en día), te aconsejaría que previamente leyeses algún tutorial asociado a esta herramienta. 
&lt;a href=&#34;https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook#gs.uBagi2Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Este&lt;/a&gt; es más que recomendable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En la raíz del repositorio figura el &lt;em&gt;notebook&lt;/em&gt; &lt;code&gt;check_env.ipynb&lt;/code&gt;. Abrámoslo y ejecutemos la única celda que lo compone, que es un bloque de código que comprueba si nuestro sistema cumple los requisitos necesarios para seguir sin problemas el tutorial. En el caso de que alguna de las líneas de la salida asociadas a los diversos módulos no esté precedida por un &lt;code&gt;[OK]&lt;/code&gt;, tendremos que actualizar manualmente la versión del paquete correspondiente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Opcionalmente, podemos descargar los conjuntos de datos asociados al tutorial (acción recomendable si en algunos momentos vamos a depender de redes wifi para trabajar con el material) sin más que teclear &lt;code&gt;python fetch_data.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;notebooks&#34;&gt;Notebooks&lt;/h2&gt;
&lt;p&gt;En mi opinión, si tenemos un mínimo conocimiento de &lt;em&gt;Python&lt;/em&gt; y &lt;em&gt;Machine Learning&lt;/em&gt;, una buena manera de abordar el tutorial en sí consistiría en llevar a cabo una lectura previa del &lt;em&gt;notebook&lt;/em&gt; que nos interese (experimentación con el código incluida), para luego visualizar la parte de la grabación del tutorial donde se desarrolla ese contenido en particular. Finalmente, con la explicación todavía fresca en nuestras cabezas, podríamos reforzar el contenido leyendo de nuevo el &lt;em&gt;notebook&lt;/em&gt; concreto. No obstante, si no cumples el primer requisito comentado, directamente te aconsejaría empezar con la grabación e ir revisando posteriormente cada &lt;em&gt;notebook&lt;/em&gt; a medida que se vayan abordando durante el vídeo.&lt;/p&gt;
&lt;p&gt;A poco que eches un vistazo por encima al material disponible, comprobarás que hay una cantidad más que considerable. Tanto que fue imposible abarcar los 23 &lt;em&gt;notebooks&lt;/em&gt; durante las dos sesiones que se llevaron a cabo y, en algunos casos, ciertos temas fueron expuestos de manera bastante tangencial. Es por ello que vuelvo a recomendar no limitarse únicamente a disfrutar de la grabación, sino invertir también cierto tiempo en la lectura de los cuadernos, así como en la experimentación con ellos (realización de ejercicios incluida).&lt;/p&gt;
&lt;p&gt;Sin más preámbulos, a continuación, podemos acceder al listado completo de los &lt;em&gt;notebooks&lt;/em&gt; disponibles, junto con sus respectivos enlaces tanto a &lt;em&gt;GitHub&lt;/em&gt; como al instante en el que comienza su desarrollo en el vídeo de &lt;em&gt;YouTube&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Introduction to machine learning with sample applications, Supervised and Unsupervised learning&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/01.Introduction_to_Machine_Learning.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2m11s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Scientific Computing Tools for Python: NumPy, SciPy, and matplotlib&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/02.Scientific_Computing_Tools_in_Python.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=20m40s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Data formats, preparation, and representation&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/03.Data_Representation_for_Machine_Learning.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=27m11s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Training and test data&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/04.Training_and_Testing_Data.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=46m55s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Estimators for classification&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/05.Supervised_Learning-Classification.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h6m52s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Estimators for regression analysis&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/06.Supervised_Learning-Regression.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h37m43s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unsupervised learning: Unsupervised Transformers&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/07.Unsupervised_Learning-Transformations_and_Dimensionality_Reduction.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=1h52m51s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unsupervised learning: Clustering&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/08.Unsupervised_Learning-Clustering.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h20m25s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;The scikit-learn estimator interface&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/09.Review_of_Scikit-learn_API.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h41m6s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Preparing a real-world dataset (titanic)&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/10.Case_Study-Titanic_Survival.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg?t=2h46m2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Working with text data via the bag-of-words model&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/11.Text_Feature_Extraction.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=25s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Case Study - Text classification for SMS spam detection&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/12.Case_Study-SMS_Spam_Detection.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=19m47s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Cross-Validation&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/13.Cross_Validation.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=37m9s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Model complexity and grid search for adjusting hyperparameters&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/14.Model_Complexity_and_GridSearchCV.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=52m6s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Scikit-learn Pipelines&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/15.Pipelining_Estimators.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Performance metrics for classification&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/16.Performance_metrics_and_Model_Evaluation.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=1h14m58s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Linear Models&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/17.In_Depth-Linear_Models.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=1h32m36s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Decision trees and random forests, and ensemble methods&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/18.In_Depth-Trees_and_Forests.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h39s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: feature selection&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/19.Feature_Selection.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. Por falta de tiempo, se excluyó de la sesión.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unsupervised learning: Hierarchical and density-based clustering algorithms&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/20.Unsupervised_learning-Hierarchical_and_density-based_clustering_algorithms.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h56m6s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unsupervised learning: Non-linear dimensionality reduction&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/21.Unsupervised_learning-Non-linear_dimensionality_reduction.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unsupervised learning: Anomaly Detection&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/22.Unsupervised_learning-anomaly_detection.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. 
&lt;a href=&#34;https://youtu.be/WLYzSas511I?t=2h21m38s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Supervised learning: Out-of-core learning&amp;rdquo;. 
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn/blob/master/notebooks/23.Out-of-core_Learning_Large_Scale_Text_Classification.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;. Debido a la falta de tiempo disponible, este &lt;em&gt;notebook&lt;/em&gt; tuvo que ser excluido de la sesión.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;enlaces-de-utilidad-asociados-al-tutorial&#34;&gt;Enlaces de utilidad asociados al tutorial&lt;/h2&gt;
&lt;p&gt;Recojo, a continuación, algunos enlaces, que han surgido a lo largo del artículo, relacionados con el tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://youtu.be/2kT6QOVSgSg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://youtu.be/WLYzSas511I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller &amp;amp; Alexandre Gram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/amueller/scipy-2017-sklearn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Repositorio&lt;/a&gt; en &lt;em&gt;GitHub&lt;/em&gt; asociado al tutorial.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.anaconda.com/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook#gs.y34eIOY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jupyter Notebook Tutorial: The Definitive Guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Breve introducción a la librería readr</title>
      <link>https://imalexissaez.github.io/2018/08/14/breve-introduccion-a-la-libreria-readr/</link>
      <pubDate>Tue, 14 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/14/breve-introduccion-a-la-libreria-readr/</guid>
      <description>&lt;p&gt;En este artículo exploraremos las posibilidades que nos ofrece una librería de &lt;em&gt;R&lt;/em&gt;, &lt;em&gt;readr&lt;/em&gt;, integrante del famoso &lt;em&gt;tidyverso&lt;/em&gt;, de cara a la importación y exportación de nuestros conjuntos de datos.&lt;/p&gt;
&lt;p&gt;No me ha disgustado, en absoluto, el sistema que caracteriza los cursos de la plataforma 
&lt;a href=&#34;https://www.datacamp.com/home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DataCamp&lt;/a&gt;. Píldoras condensadas de teoría acompañadas, de inmediato, por ejercicios para su aplicación directa, ofreciendo así un enfoque para el aprendizaje bastante práctico y ameno. He tomado algunas notas personales para el curso abierto, que en el portal aparece, relativo a la librería 
&lt;a href=&#34;https://cran.r-project.org/web/packages/readr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;readr&lt;/a&gt;: &amp;ldquo;&lt;em&gt;Reading Data into R with readr&lt;/em&gt;&amp;rdquo;, al que podemos acceder a través del 
&lt;a href=&#34;https://www.datacamp.com/community/open-courses/reading-data-into-r-with-readr#gs.tdqZLKQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;siguiente enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El material está desglosado en dos capítulos. En el primero de ellos, aprenderemos diversas funciones, contenidas en este paquete, que facilitarán enormemente la labor de importar datos utilizando el lenguaje de programación &lt;em&gt;R&lt;/em&gt;. En el segundo, el objetivo será utilizar las herramientas que la librería pone a nuestra disposición para analizar y convertir las clases que poseen las columnas del conjunto de datos recién importado.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;readr&lt;/em&gt; es una componente del denominado &lt;em&gt;tidyverso&lt;/em&gt; (&lt;em&gt;tidyverse&lt;/em&gt; en inglés, que parece que siempre suena mejor), un conjunto de librerías que todo usuario de &lt;em&gt;R&lt;/em&gt; debería si no dominar, al menos conocer, para así resolver ciertas situaciones de la manera más sencilla posible (basta imaginar tener que hacer a mano algunas de las tareas que paquetes como &lt;em&gt;dplyr&lt;/em&gt; o &lt;em&gt;tidyr&lt;/em&gt; llevan a cabo para darse cuenta de este hecho).&lt;/p&gt;
&lt;h2 id=&#34;1-importando-datos-con-readr&#34;&gt;1. Importando datos con &lt;em&gt;readr&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;11-archivos-csv&#34;&gt;1.1. Archivos &lt;code&gt;.csv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A la hora de importar conjuntos de datos en &lt;em&gt;R&lt;/em&gt;, uno de los formatos más habituales en los que hallamos información es en archivos separados por comas (&lt;em&gt;comma separated values&lt;/em&gt;), cuya extensión suele ser &lt;code&gt;.csv&lt;/code&gt;. En ellos encontramos múltiples líneas que recogen la tabla de interés, y en las cuales los valores aparecen, de manera consecutiva, separados por el carácter &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para importar este tipo de ficheros en nuestra sesión de &lt;em&gt;R&lt;/em&gt;, utilizaremos la función &lt;code&gt;read_csv()&lt;/code&gt;. Para acceder a su documentación, en primer lugar, cargaremos la librería &lt;em&gt;readr&lt;/em&gt; (o la instalaremos si todavía no lo hemos hecho).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(!require(readr)) {install.packages(&amp;quot;readr&amp;quot;)}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: readr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El único argumento que hemos de pasar a esta función, de manera obligatoria, es &lt;code&gt;file&lt;/code&gt;, el nombre del archivo que pretendemos importar (o bien la ruta completa donde éste se encuentra). El resto son opcionales, y deberían resultarnos familiares la mayoría de ellos si hemos trabajado alguna vez con funciones del tipo &lt;code&gt;read.table()&lt;/code&gt; o &lt;code&gt;read.csv()&lt;/code&gt;. Algunas de las ventajas que utilizar &lt;code&gt;read_csv()&lt;/code&gt; ofrece son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No convierte, automáticamente, las columnas con cadenas de caracteres a factores, como sí hacen por defecto las otras funciones referidas en el párrafo anterior.&lt;/li&gt;
&lt;li&gt;Reconoce ocho clases diferentes de datos (&lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;logical&lt;/code&gt;, etc.), dejando el resto como cadenas de caracteres.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pongamos a prueba su uso importando un conjunto de datos que contiene tanto los pesos, como el tipo de alimentación, de 71 pollos. El archivo de interés es &lt;code&gt;chickwts.csv&lt;/code&gt;, por lo que empezaremos especificando la ruta para acceder a él en el argumento &lt;code&gt;file&lt;/code&gt;. Como en el segundo capítulo llevaremos a cabo algunas acciones sobre los conjuntos de datos que aparecerán en esta sección, todos los ficheros que importemos los almacenaremos en objetos dentro de &lt;em&gt;R&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts &amp;lt;- read_csv(file = &amp;quot;datasets/chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es interesante el mensaje que aparece en la consola al ejecutar la anterior instrucción, ya que nos informa el resultado del análisis, que la función realiza, para inferir las clases de cada una de las columnas que componen la tabla. Echemos un vistazo al contenido del archivo que acabamos de importar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight      feed
##    &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1    179 horsebean
## 2    160 horsebean
## 3    136 horsebean
## 4    227 horsebean
## 5    217 horsebean
## 6    168 horsebean
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    71 obs. of  2 variables:
##  $ weight: int  179 160 136 227 217 168 108 124 143 140 ...
##  $ feed  : chr  &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A primera vista, la columna &lt;code&gt;feed&lt;/code&gt; posiblemente estaría mejor codificada bajo la clase &lt;code&gt;factor&lt;/code&gt; (aunque esto siempre va a depender de nuestros intereses y el uso que tengamos en mente para esta variable). No obstante, recordemos que éste no es el comportamiento que por defecto incorpora la función &lt;code&gt;read_csv()&lt;/code&gt; (aunque después veremos cómo declarar con antelación las clases para las columnas de un archivo y posibilitar su lectura como factores).&lt;/p&gt;
&lt;p&gt;Utilicemos de nuevo esta función con otro conjunto de datos, &lt;code&gt;chickwts2.csv&lt;/code&gt; (más información relativa al peso y tipo de alimentación de 18 pollos distintos), que usaremos más adelante en este capítulo, cuando lleguemos al apartado de exportar tablas a ficheros.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts2 &amp;lt;- read_csv(&amp;quot;datasets/chickwts2.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight  feed
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1    309  corn
## 2    229  corn
## 3    213  corn
## 4    257  corn
## 5    244  corn
## 6    271  corn
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    18 obs. of  2 variables:
##  $ weight: int  309 229 213 257 244 271 243 248 257 303 ...
##  $ feed  : chr  &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; &amp;quot;corn&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-archivos-tsv&#34;&gt;1.2. Archivos &lt;code&gt;.tsv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;La librería &lt;em&gt;readr&lt;/em&gt; posee también una función específica para la lectura de los archivos separados por tabulaciones, cuya extensión suele ser &lt;code&gt;.tsv&lt;/code&gt; (aunque personalmente también he visto alguno que utiliza &lt;code&gt;.tab&lt;/code&gt;). Se trata de &lt;code&gt;read_tsv()&lt;/code&gt; y si accedemos a su documentación comprobaremos que su uso es exactamente idéntico al de la función que exploramos en la sección anterior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Investiguemos alguno de los argumentos que podemos declarar, de manera opcional, en esta función (y, por tanto, lo que aprendamos será de utilidad también de cara al uso de &lt;code&gt;read_csv()&lt;/code&gt;). Por ejemplo, para controlar el nombre de las columnas de la tabla que deseamos importar, el argumento &lt;code&gt;col_names&lt;/code&gt; es el indicado, y puede tomar los siguientes valores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TRUE&lt;/code&gt;: utiliza la información disponible en la primera línea del archivo para declarar los nombres de las columnas, no incluyéndolos por tanto en el interior de la propia tabla.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FALSE&lt;/code&gt;: genera, de manera automática, los clásicos nombres &lt;code&gt;X1&lt;/code&gt;, &lt;code&gt;X2&lt;/code&gt;, &lt;code&gt;X3&lt;/code&gt;, etc., para las columnas, y empieza a incluir la información en la tabla desde la primera fila.&lt;/li&gt;
&lt;li&gt;La última opción disponible es utilizar un vector que contenga los nombres de las columnas, y, como antes, desde la primera fila se insertarán los datos en el interior de la tabla.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo, importemos a continuación el fichero &lt;code&gt;salaries.tsv&lt;/code&gt;. Si abrimos el archivo con un editor de texto plano cualquiera, comprobaremos que la primera línea no contiene los respectivos nombres para cada una de las columnas, y dado que no conocemos de antemano qué declara cada una, usar el argumento &lt;code&gt;col_names = FALSE&lt;/code&gt; parece la opción más adecuada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries &amp;lt;- read_tsv(&amp;quot;datasets/Salaries.tsv&amp;quot;, col_names = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_integer(),
##   X4 = col_integer(),
##   X5 = col_character(),
##   X6 = col_integer()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 6
##          X1    X2    X3    X4    X5     X6
##       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof     B    19    18  Male 139750
## 2      Prof     B    20    16  Male 173200
## 3  AsstProf     B     4     3  Male  79750
## 4      Prof     B    45    39  Male 115000
## 5      Prof     B    40    41  Male 141500
## 6 AssocProf     B     6     6  Male  97000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  6 variables:
##  $ X1: chr  &amp;quot;Prof&amp;quot; &amp;quot;Prof&amp;quot; &amp;quot;AsstProf&amp;quot; &amp;quot;Prof&amp;quot; ...
##  $ X2: chr  &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; ...
##  $ X3: int  19 20 4 45 40 6 30 45 21 18 ...
##  $ X4: int  18 16 3 39 41 6 23 45 20 18 ...
##  $ X5: chr  &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En la llamada a la función &lt;code&gt;read_tsv()&lt;/code&gt;, hemos recibido por consola el siguiente mensaje:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_integer(),
  X4 = col_integer(),
  X5 = col_character(),
  X6 = col_integer()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como ya comentábamos en la sección anterior, esta información nos indica la clase que la función &lt;code&gt;read_tsv()&lt;/code&gt; ha inferido para todas y cada una de las columnas contenidas en el archivo. De hecho, este comportamiento no se restringe únicamente a las funciones &lt;code&gt;read_csv()&lt;/code&gt; y &lt;code&gt;read_tsv()&lt;/code&gt;, sino a todas las implementadas en la librería &lt;em&gt;readr&lt;/em&gt; cuya empresa es, precisamente, la lectura de ficheros de datos.&lt;/p&gt;
&lt;p&gt;A través del argumento &lt;code&gt;col_types&lt;/code&gt; tenemos cierto control sobre la declaración de la clase de las columnas, utilizando funciones predefinidas del estilo &lt;code&gt;col_*()&lt;/code&gt; (como &lt;code&gt;col_integer()&lt;/code&gt;, &lt;code&gt;col_character()&lt;/code&gt;, etc.). La forma de usar este argumento es muy sencilla: simplemente tenemos que escribir &lt;code&gt;col_types = cols()&lt;/code&gt; e incluir en el interior de &lt;code&gt;cols()&lt;/code&gt; los nombres de las columnas y la clase que deseamos posean (siguiendo el estilo de, por ejemplo, el mensaje por consola que mostrábamos arriba).&lt;/p&gt;
&lt;p&gt;Una función que nos puede interesar, en este momento, es &lt;code&gt;col_skip()&lt;/code&gt;, que le indica a &lt;em&gt;R&lt;/em&gt; que omita una determinada columna a la hora de importar la información de un archivo de datos. Veamos su uso con más detalle a través de un ejemplo. Supongamos que sólo estamos interesados en las columnas primera, quinta y sexta del anterior fichero de datos. Así pues, no tendríamos más que escribir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries &amp;lt;- read_tsv(&amp;quot;datasets/Salaries.tsv&amp;quot;, col_names = FALSE,
                     col_types = cols(
                         X2 = col_skip(),
                         X3 = col_skip(), 
                         X4 = col_skip()
                     ))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##          X1    X5     X6
##       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof  Male 139750
## 2      Prof  Male 173200
## 3  AsstProf  Male  79750
## 4      Prof  Male 115000
## 5      Prof  Male 141500
## 6 AssocProf  Male  97000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  3 variables:
##  $ X1: chr  &amp;quot;Prof&amp;quot; &amp;quot;Prof&amp;quot; &amp;quot;AsstProf&amp;quot; &amp;quot;Prof&amp;quot; ...
##  $ X5: chr  &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13-archivos-csv-formato-europeo&#34;&gt;1.3. Archivos &lt;code&gt;.csv&lt;/code&gt; (formato europeo)&lt;/h3&gt;
&lt;p&gt;En muchos países de este continente, usamos la coma como separador decimal, de manera que los archivos separados por comas, en realidad, terminan siendo separados por el símbolo &lt;code&gt;;&lt;/code&gt; (punto y coma). Por curiosidad, puedes probar a crear una tabla sencilla en, por ejemplo, &lt;em&gt;Excel&lt;/em&gt; y exportarla como archivo separado por comas, para luego abrir el archivo con un editor de texto plano y verificar que, efectivamente, los valores están separados por &lt;code&gt;;&lt;/code&gt; (en realidad este comportamiento se puede modificar desde las opciones de formato del sistema operativo, pero no entraremos en ese tipo de detalles).&lt;/p&gt;
&lt;p&gt;En previsión de esta particularidad, la librería &lt;em&gt;readr&lt;/em&gt; pone a nuestra disposición la función &lt;code&gt;read_csv2()&lt;/code&gt;, que identifica el símbolo &lt;code&gt;;&lt;/code&gt; como separador de valores, mientras que &lt;code&gt;,&lt;/code&gt; queda como separador decimal. Obviando esta salvedad, su uso es idéntico al de las funciones presentadas en los anteriores apartados.&lt;/p&gt;
&lt;p&gt;Tomemos ahora el archivo &lt;code&gt;trees.csv&lt;/code&gt; (que contiene información sobre la circunferencia, la altura y el volumen de cerezos negros), el cual viene dado en el formato al que nos estamos refiriendo aquí, e importémoslo directamente con la función &lt;code&gt;read_csv()&lt;/code&gt;, en lugar de con &lt;code&gt;read_csv2()&lt;/code&gt;, para ver qué sucede.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees_wrong &amp;lt;- read_csv(&amp;quot;datasets/trees.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   `Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume` = col_character()
## )

## Warning: 30 parsing failures.
## row col  expected    actual
##   1  -- 1 columns 3 columns
##   2  -- 1 columns 3 columns
##   3  -- 1 columns 3 columns
##   4  -- 1 columns 3 columns
##   5  -- 1 columns 3 columns
## ... ... ......... .........
## See problems(...) for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En favor de la función &lt;code&gt;read_csv()&lt;/code&gt; hay que decir que, al menos, nos indica la existencia de ciertos problemas, o situaciones inesperadas, durante la importación del archivo. De todas formas, podemos observar cómo ha procedido a generar una tabla con una única columna, en lugar de las correspondientes tres que hubiese sido lo adecuado en esta ocasión. Comprobemos qué contiene el objeto &lt;code&gt;trees_wrong&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 31  1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 1
##   `Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume`
##                       &amp;lt;chr&amp;gt;
## 1                         8
## 2                         8
## 3                         8
## 4                        10
## 5                        10
## 6                        10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees_wrong)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  1 variable:
##  $ Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume: chr  &amp;quot;8&amp;quot; &amp;quot;8&amp;quot; &amp;quot;8&amp;quot; &amp;quot;10&amp;quot; ...
##  - attr(*, &amp;quot;problems&amp;quot;)=Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 30 obs. of  4 variables:
##   ..$ row     : int  1 2 3 4 5 6 7 8 9 10 ...
##   ..$ col     : chr  NA NA NA NA ...
##   ..$ expected: chr  &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; &amp;quot;1 columns&amp;quot; ...
##   ..$ actual  : chr  &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; &amp;quot;3 columns&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 1
##   .. ..$ Girth&amp;quot;;&amp;quot;Height&amp;quot;;&amp;quot;Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos ahora el resultado que obtenemos al utilizar la función &lt;code&gt;read_csv2()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees &amp;lt;- read_csv2(&amp;quot;datasets/trees.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Girth = col_double(),
##   Height = col_integer(),
##   Volume = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(trees)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 31  3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(trees)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##   Girth Height Volume
##   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
## 1   8.3     70   10.3
## 2   8.6     65   10.3
## 3   8.8     63   10.2
## 4  10.5     72   16.4
## 5  10.7     81   18.8
## 6  10.8     83   19.7
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  3 variables:
##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...
##  $ Height: int  70 65 63 72 81 83 66 75 80 75 ...
##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ Girth : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Height: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14-archivos-con-ancho-de-columna-fijo&#34;&gt;1.4. Archivos con ancho de columna fijo&lt;/h3&gt;
&lt;p&gt;En ocasiones, el formato en el que encontramos los archivos de datos es similar al mostrado en &lt;em&gt;R&lt;/em&gt; a la hora de imprimir en consola un &lt;code&gt;data.frame&lt;/code&gt;. Es decir, cada columna posee un total de caracteres fijos y éstas se separan usando espacios en blanco (que también se utilizan para rellenar aquellos valores cuya longitud es menor que la correspondiente a su columna).&lt;/p&gt;
&lt;p&gt;El archivo &lt;code&gt;names.txt&lt;/code&gt; constituye un ejemplo de lo comentado en el párrafo anterior. En su interior encontramos los nombres de ciertos personajes famosos, el estado donde supuestamente residen y, como no podía ser de otra manera, sus falsos números de teléfono.&lt;/p&gt;
&lt;p&gt;La función adecuada para lidiar con estos casos es &lt;code&gt;read_table()&lt;/code&gt;, cuya documentación ofrece un listado de argumentos bastante familiares a estas alturas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Importemos pues el fichero &lt;code&gt;names.txt&lt;/code&gt;, declarando adecuadamente los nombres para las columnas utilizando el parámetro &lt;code&gt;col_names&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names &amp;lt;- read_table(&amp;quot;datasets/names.txt&amp;quot;,
                    col_names = c(&amp;quot;name&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;phone&amp;quot;))

names                   
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##                  name        state        phone
##                 &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;
## 1       Oprah Winfrey         null 800-555-4111
## 2         Walt Disney      Florida 407-555-4341
## 3       Michael Scott Pennsylvania 570-555-2301
## 4        Cosmo Kramer     New York 212-555-9337
## 5 Rutherford B. Hayes         Ohio 220-555-1388
## 6   Chester A. Arthur      Vermont 802-555-8383
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    6 obs. of  3 variables:
##  $ name : chr  &amp;quot;Oprah Winfrey&amp;quot; &amp;quot;Walt Disney&amp;quot; &amp;quot;Michael Scott&amp;quot; &amp;quot;Cosmo Kramer&amp;quot; ...
##  $ state: chr  &amp;quot;null&amp;quot; &amp;quot;Florida&amp;quot; &amp;quot;Pennsylvania&amp;quot; &amp;quot;New York&amp;quot; ...
##  $ phone: chr  &amp;quot;800-555-4111&amp;quot; &amp;quot;407-555-4341&amp;quot; &amp;quot;570-555-2301&amp;quot; &amp;quot;212-555-9337&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ name : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ state: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ phone: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aprovechemos este particular ejemplo para ilustrar el tratamiento de los valores perdidos con las funciones de la librería &lt;em&gt;readr&lt;/em&gt; dedicadas a importar archivos de datos. Por defecto, sólo se reconoce &lt;code&gt;NA&lt;/code&gt; como valor perdido, pero, en esta ocasión, si nos fijamos en la primera fila de la tabla, han optado por usar &lt;code&gt;null&lt;/code&gt; para registrar la ausencia de información para ciertos atributos concretos.&lt;/p&gt;
&lt;p&gt;No supone esto demasiado inconveniente, puesto que utilizando el parámetro &lt;code&gt;na&lt;/code&gt; podemos declarar, mediante un vector, qué cadenas de texto deben ser consideradas como valores perdidos (y automáticamente pasarán a ser &lt;code&gt;NA&lt;/code&gt; en el objeto que creemos en &lt;em&gt;R&lt;/em&gt;). Por defecto, &lt;code&gt;na = &amp;quot;NA&amp;quot;&lt;/code&gt;, de manera que simplemente tenemos que declarar &lt;code&gt;na = c(&amp;quot;NA&amp;quot;, &amp;quot;null&amp;quot;)&lt;/code&gt; en nuestro caso.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names2 &amp;lt;- read_table(&amp;quot;datasets/names.txt&amp;quot;, 
                     col_names = c(&amp;quot;name&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;phone&amp;quot;),
                     na = c(&amp;quot;NA&amp;quot;, &amp;quot;null&amp;quot;))
head(names2)                     
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##                  name        state        phone
##                 &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;
## 1       Oprah Winfrey         &amp;lt;NA&amp;gt; 800-555-4111
## 2         Walt Disney      Florida 407-555-4341
## 3       Michael Scott Pennsylvania 570-555-2301
## 4        Cosmo Kramer     New York 212-555-9337
## 5 Rutherford B. Hayes         Ohio 220-555-1388
## 6   Chester A. Arthur      Vermont 802-555-8383
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15-archivos-de-texto&#34;&gt;1.5. Archivos de texto&lt;/h3&gt;
&lt;p&gt;Es posible que nuestro interés no se centre tanto en examinar tablas de datos, como texto propiamente dicho, sobretodo ahora que tan de moda está el análisis de sentimiento (para estudiar opiniones, discursos, etc.). La librería &lt;em&gt;readr&lt;/em&gt; pone a nuestra disposición un par de funciones que nos serán útiles en estos casos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_lines()&lt;/code&gt;: devuelve un vector de cadenas de texto, donde cada elemento recoge una línea del archivo de datos original.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_lines
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_file()&lt;/code&gt;: devuelve un vector de dimensión unitaria que contiene el texto completo del archivo de datos original, y donde los saltos de línea se representan utilizando &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?read_file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el fichero &lt;code&gt;tweets.txt&lt;/code&gt; encontramos algunos &lt;em&gt;tuits&lt;/em&gt; correspondientes a la cuenta &lt;code&gt;@RealCarrotFacts&lt;/code&gt; (puedes comprobar que, efectivamente, existe dicha cuenta y que es un tanto curiosa). Procedamos a importar su contenido utilizando ambas funciones, para así apreciar de manera práctica la diferencia.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tweets &amp;lt;- read_lines(&amp;quot;datasets/tweets.txt&amp;quot;)
tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;carrots  can be eat by most people&amp;quot;                                                                                          
## [2] &amp;quot;On predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and cruncy - he was america&#39;s carrot&amp;quot;
## [3] &amp;quot;knock knoc who is there? yup: carosot   ( joke )&amp;quot;                                                                            
## [4] &amp;quot;it is 2016 time for a carot emoji   please!&amp;quot;                                                                                 
## [5] &amp;quot;when life give you lemnos ,  have a carrot&amp;quot;                                                                                  
## [6] &amp;quot;If you squent your eyes real hard a football  look like  a dry brown carrot   Honestly&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  chr [1:6] &amp;quot;carrots  can be eat by most people&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tweets_all &amp;lt;- read_file(&amp;quot;datasets/tweets.txt&amp;quot;)
tweets_all
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;carrots  can be eat by most people\nOn predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and cruncy - he was america&#39;s carrot\nknock knoc who is there? yup: carosot   ( joke )\nit is 2016 time for a carot emoji   please!\nwhen life give you lemnos ,  have a carrot\nIf you squent your eyes real hard a football  look like  a dry brown carrot   Honestly&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(tweets_all)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  chr &amp;quot;carrots  can be eat by most people\nOn predisents day we honor the big US man himself: Aberham Liclon.   Tall, skinny, dry, and&amp;quot;| __truncated__
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;16-escribiendo-archivos-csv-y-tsv&#34;&gt;1.6. Escribiendo archivos &lt;code&gt;.csv&lt;/code&gt; y &lt;code&gt;.tsv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Una vez hemos importado nuestro conjunto de datos de interés, y realizamos sobre él ciertas manipulaciones, es bastante probable que deseemos almacenar el resultado en un archivo para su posterior uso y disfrute. La librería &lt;em&gt;readr&lt;/em&gt; contiene varias funciones del estilo &lt;code&gt;write_*()&lt;/code&gt; (por ejemplo, &lt;code&gt;write_csv()&lt;/code&gt; o &lt;code&gt;write_tsv()&lt;/code&gt;) orientadas a satisfacer esta necesidad, y que se caracterizan por un par de detalles realmente interesantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A diferencia de funciones como &lt;code&gt;write.csv()&lt;/code&gt;, no añaden por defecto los números (o nombres) de las filas al archivo exportado, lo cual suele ser el comportamiento deseado en la mayoría de ocasiones.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;col_names&lt;/code&gt; adopta como valor el contrario al que posee &lt;code&gt;append&lt;/code&gt;, manera de actuar que tiene todo el sentido del mundo. Si decidimos continuar añadiendo datos a un archivo que previamente hemos exportado, declararemos &lt;code&gt;append = TRUE&lt;/code&gt; y, por tanto, no aparecerán de nuevo, y en mitad del fichero, los nombres de las columnas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos este último punto con mayor detalle a través de un ejemplo. En primer lugar, exportaremos a un archivo separado por comas el objeto &lt;code&gt;cwts&lt;/code&gt; que generamos en una sección anterior. A Continuación, añadiremos al mencionado archivo el contenido del objeto &lt;code&gt;cwts2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write_csv(cwts, &amp;quot;chickwts.csv&amp;quot;)

write_csv(cwts2, &amp;quot;chickwts.csv&amp;quot;, append=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Procedamos ahora a importar el fichero recién generado y examinémoslo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cwts3 &amp;lt;- read_csv(&amp;quot;chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(cwts3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##   weight      feed
##    &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1    179 horsebean
## 2    160 horsebean
## 3    136 horsebean
## 4    227 horsebean
## 5    217 horsebean
## 6    168 horsebean
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(cwts3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    89 obs. of  2 variables:
##  $ weight: int  179 160 136 227 217 168 108 124 143 140 ...
##  $ feed  : chr  &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; &amp;quot;horsebean&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ weight: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ feed  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;17-escribiendo-archivos-rds&#34;&gt;1.7. Escribiendo archivos &lt;code&gt;.rds&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Es posible que estemos interesados en exportar no solamente los valores de una tabla, sino ciertos &lt;em&gt;metadatos&lt;/em&gt; asociados a ella, como pueden ser, por ejemplo, las clases de las diferentes columnas que la compongan. No es fácil incorporar este tipo de información a un archivo separado por comas o tabulaciones, por lo que la librería &lt;em&gt;readr&lt;/em&gt; nos ofrece la posibilidad de exportar un objeto completo de &lt;em&gt;R&lt;/em&gt; a través de la función &lt;code&gt;write_rds()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?write_rds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La mencionada función no es más que un &lt;em&gt;wrapper&lt;/em&gt; (desconozco la traducción a español de este término) de la función &lt;code&gt;saveRDS()&lt;/code&gt;, con la única particularidad de que, por defecto, no comprime el archivo resultante (aunque este comportamiento se puede definir a través del parámetro &lt;code&gt;compress&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ilustremos su aplicación mediante un ejemplo. Exportaremos el objeto &lt;code&gt;trees&lt;/code&gt; que generamos en una sección anterior utilizando la función &lt;code&gt;write_rds()&lt;/code&gt;, para a continuación importarlo inmediatamente con &lt;code&gt;read_rds()&lt;/code&gt; y asignarlo a &lt;code&gt;trees2&lt;/code&gt;. Finalmente, compararemos si ambos objetos son idénticos, empleando para ello la función &lt;code&gt;identical()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write_rds(trees, &amp;quot;trees.rds&amp;quot;)

trees2 &amp;lt;- read_rds(&amp;quot;trees.rds&amp;quot;)

identical(trees, trees2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-analizando-datos-con-readr&#34;&gt;2. Analizando datos con readr&lt;/h2&gt;
&lt;h3 id=&#34;21-modificando-la-clase-de-las-columnas&#34;&gt;2.1. Modificando la clase de las columnas&lt;/h3&gt;
&lt;p&gt;Aunque las funciones para importar archivos de datos que pone a nuestra disposición la librería &lt;em&gt;readr&lt;/em&gt;, realizan una labor estupenda a la hora de inferir la clase de cada una de las columnas que componen una tabla, su comportamiento dista de ser perfecto. Esto se traducirá, seguramente, en la necesidad de llevar a cabo ciertas modificaciones, sobre las mencionadas clases, para algunos casos concretos.&lt;/p&gt;
&lt;p&gt;Para ello, la función adecuada a utilizar es &lt;code&gt;type_convert()&lt;/code&gt;, que incorpora el conocido argumento &lt;code&gt;col_types&lt;/code&gt; en su llamada. Ilustremos su uso y aprovechemos, además, para emplear la notación abreviada para los tipos de datos que &lt;strong&gt;readr&lt;/strong&gt; ofrece. Tomaremos el objeto &lt;code&gt;trees&lt;/code&gt; y declararemos todas sus columnas de tipo &lt;code&gt;numeric&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?type_convert
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trees3 &amp;lt;- type_convert(trees, 
                       col_types = cols(
                           Girth  = &amp;quot;d&amp;quot;, 
                           Height = &amp;quot;d&amp;quot;, 
                           Volume = &amp;quot;d&amp;quot;)
                       )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: The following named parsers don&#39;t match the column names: Girth,
## Height, Volume
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(trees3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    31 obs. of  3 variables:
##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...
##  $ Height: int  70 65 63 72 81 83 66 75 80 75 ...
##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 3
##   .. ..$ Girth : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Height: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Volume: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: aunque la función se utiliza tal y como está descrito (e incluso en el propio curso de &lt;em&gt;DataCamp&lt;/em&gt; ésta sería la respuesta adecuada), he encontrado algún tipo de problema al emplear &lt;code&gt;type_convert()&lt;/code&gt;, de forma que no reconoce los nombres de las columnas.&lt;/p&gt;
&lt;h3 id=&#34;22-transformando-columnas-de-texto-en-factores&#34;&gt;2.2. Transformando columnas de texto en factores&lt;/h3&gt;
&lt;p&gt;Una de las características de las funciones de importación de datos de la librería &lt;em&gt;readr&lt;/em&gt; es que no interpretan, de manera automática, las columnas que poseen cadenas de texto como factores. No obstante, en ocasiones nos puede interesar que la clase de algunas columnas sea &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En estas situaciones, podemos utilizar la función &lt;code&gt;parse_factor()&lt;/code&gt; sobre las columnas del objeto recién importado que buscamos sean factores, especificando, si queremos, los niveles que adoptan.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_factor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ilustremos su uso mediante un ejemplo. En el objeto &lt;code&gt;salaries&lt;/code&gt;, que generamos en el capítulo anterior, la primera columna, &lt;code&gt;X1&lt;/code&gt;, contiene el tipo de profesor universitario; mientras que la segunda, &lt;code&gt;X5&lt;/code&gt;, hace referencia al sexo de la persona. Transformemos ambas en factores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;salaries$X1 &amp;lt;- parse_factor(salaries$X1,
                            levels = c(&amp;quot;Prof&amp;quot;, &amp;quot;AsstProf&amp;quot;, &amp;quot;AssocProf&amp;quot;))

salaries$X5 &amp;lt;- parse_factor(salaries$X5, 
                            levels = c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##          X1     X5     X6
##      &amp;lt;fctr&amp;gt; &amp;lt;fctr&amp;gt;  &amp;lt;int&amp;gt;
## 1      Prof   Male 139750
## 2      Prof   Male 173200
## 3  AsstProf   Male  79750
## 4      Prof   Male 115000
## 5      Prof   Male 141500
## 6 AssocProf   Male  97000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(salaries)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    397 obs. of  3 variables:
##  $ X1: Factor w/ 3 levels &amp;quot;Prof&amp;quot;,&amp;quot;AsstProf&amp;quot;,..: 1 1 2 1 1 3 1 1 1 1 ...
##  $ X5: Factor w/ 2 levels &amp;quot;Male&amp;quot;,&amp;quot;Female&amp;quot;: 1 1 1 1 1 1 1 1 1 2 ...
##  $ X6: int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 6
##   .. ..$ X1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X3: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X4: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_skip&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X5: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ X6: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-trabajando-con-fechas&#34;&gt;2.3. Trabajando con fechas&lt;/h3&gt;
&lt;p&gt;Si una de las columnas del archivo de datos viene dada en la forma &lt;code&gt;YYYY-MM-DD&lt;/code&gt;, las funciones de importación de la librería &lt;em&gt;readr&lt;/em&gt; la interpretarán automáticamente como de tipo &lt;code&gt;Date&lt;/code&gt; (fecha).&lt;/p&gt;
&lt;p&gt;No obstante, si en la tabla están presentes algunos valores que son fechas y no se ajustan a la estructura comentada arriba, a través de la función &lt;code&gt;parse_date()&lt;/code&gt; (y su argumento &lt;code&gt;format&lt;/code&gt;) podemos lidiar con esta situación.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_date
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consideremos el siguiente ejemplo: en el archivo &lt;code&gt;weather.csv&lt;/code&gt;, donde se recogen distintos indicadores relacionados con el clima, la columna &lt;code&gt;date&lt;/code&gt; contiene la fecha en el formato &amp;ldquo;mes/día/año&amp;rdquo;. Con esta información, procedamos a transformar la clase de la columna de manera oportuna.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;weather &amp;lt;- read_csv(&amp;quot;datasets/weather.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   origin = col_character(),
##   date = col_character(),
##   hour = col_integer(),
##   temp = col_double(),
##   dewp = col_double(),
##   humid = col_double(),
##   wind_dir = col_integer(),
##   wind_speed = col_double(),
##   wind_gust = col_double(),
##   precip = col_double(),
##   pressure = col_double(),
##   visib = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 12
##   origin       date  hour  temp  dewp humid wind_dir wind_speed wind_gust
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1    EWR 12/22/2013     9 64.94 60.98 87.00      190   13.80936 15.891535
## 2    EWR  7/23/2013     6 77.00 75.20 94.19      140    4.60312  5.297178
## 3    EWR 10/30/2013    11 44.96 35.96 70.52        0    0.00000  0.000000
## 4    EWR 12/25/2013    21 28.04  6.08 38.69      250    3.45234  3.972884
## 5    EWR  6/18/2013     9 66.02 62.06 87.05       10    5.75390  6.621473
## 6    EWR   5/5/2013    15 57.92 37.04 45.58       NA    4.60312  5.297178
## # ... with 3 more variables: precip &amp;lt;dbl&amp;gt;, pressure &amp;lt;dbl&amp;gt;, visib &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(weather)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    500 obs. of  12 variables:
##  $ origin    : chr  &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; ...
##  $ date      : chr  &amp;quot;12/22/2013&amp;quot; &amp;quot;7/23/2013&amp;quot; &amp;quot;10/30/2013&amp;quot; &amp;quot;12/25/2013&amp;quot; ...
##  $ hour      : int  9 6 11 21 9 15 11 11 15 20 ...
##  $ temp      : num  64.9 77 45 28 66 ...
##  $ dewp      : num  60.98 75.2 35.96 6.08 62.06 ...
##  $ humid     : num  87 94.2 70.5 38.7 87 ...
##  $ wind_dir  : int  190 140 0 250 10 NA 310 0 350 290 ...
##  $ wind_speed: num  13.81 4.6 0 3.45 5.75 ...
##  $ wind_gust : num  15.89 5.3 0 3.97 6.62 ...
##  $ precip    : num  0.01 0.01 0 0 0 0 0 0 0 0 ...
##  $ pressure  : num  1010 NA 1026 1033 1012 ...
##  $ visib     : num  10 4 10 10 10 10 10 0.25 10 10 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 12
##   .. ..$ origin    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ date      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ hour      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ temp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ dewp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ humid     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_dir  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_speed: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_gust : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ precip    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ pressure  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ visib     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;weather$date &amp;lt;- parse_date(weather$date, 
                           format = &amp;quot;%m/%d/%Y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(weather)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 12
##   origin       date  hour  temp  dewp humid wind_dir wind_speed wind_gust
##    &amp;lt;chr&amp;gt;     &amp;lt;date&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1    EWR 2013-12-22     9 64.94 60.98 87.00      190   13.80936 15.891535
## 2    EWR 2013-07-23     6 77.00 75.20 94.19      140    4.60312  5.297178
## 3    EWR 2013-10-30    11 44.96 35.96 70.52        0    0.00000  0.000000
## 4    EWR 2013-12-25    21 28.04  6.08 38.69      250    3.45234  3.972884
## 5    EWR 2013-06-18     9 66.02 62.06 87.05       10    5.75390  6.621473
## 6    EWR 2013-05-05    15 57.92 37.04 45.58       NA    4.60312  5.297178
## # ... with 3 more variables: precip &amp;lt;dbl&amp;gt;, pressure &amp;lt;dbl&amp;gt;, visib &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(weather)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    500 obs. of  12 variables:
##  $ origin    : chr  &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; &amp;quot;EWR&amp;quot; ...
##  $ date      : Date, format: &amp;quot;2013-12-22&amp;quot; &amp;quot;2013-07-23&amp;quot; ...
##  $ hour      : int  9 6 11 21 9 15 11 11 15 20 ...
##  $ temp      : num  64.9 77 45 28 66 ...
##  $ dewp      : num  60.98 75.2 35.96 6.08 62.06 ...
##  $ humid     : num  87 94.2 70.5 38.7 87 ...
##  $ wind_dir  : int  190 140 0 250 10 NA 310 0 350 290 ...
##  $ wind_speed: num  13.81 4.6 0 3.45 5.75 ...
##  $ wind_gust : num  15.89 5.3 0 3.97 6.62 ...
##  $ precip    : num  0.01 0.01 0 0 0 0 0 0 0 0 ...
##  $ pressure  : num  1010 NA 1026 1033 1012 ...
##  $ visib     : num  10 4 10 10 10 10 10 0.25 10 10 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 12
##   .. ..$ origin    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ date      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ hour      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ temp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ dewp      : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ humid     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_dir  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_speed: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ wind_gust : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ precip    : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ pressure  : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ visib     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;24-trabajando-con-números&#34;&gt;2.4. Trabajando con números&lt;/h3&gt;
&lt;p&gt;Es posible que la tabla que deseamos importar contenga, entre sus valores, expresiones numéricas asociadas cantidades monetarias, de manera que incluyan caracteres no numéricos (como el símbolo de la moneda o diversos separadores de millares, por ejemplo).&lt;/p&gt;
&lt;p&gt;En estos casos, la función a utilizar, de la librería &lt;em&gt;readr&lt;/em&gt;, es &lt;code&gt;parse_number()&lt;/code&gt;, que omite los mencionados caracteres no numéricos presentes en los valores de una columna.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?parse_number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el archivo &lt;code&gt;debt.csv&lt;/code&gt; tenemos datos relacionados con la deuda nacional de &lt;em&gt;Estados Unidos&lt;/em&gt; para ciertos años. Importemos el archivo y examinemos su contenido.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debt &amp;lt;- read_csv(&amp;quot;datasets/national_debt.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   V1 = col_character(),
##   V2 = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(debt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##        V1                     V2
##     &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;
## 1 9/30/15 $18,150,617,666,484.30
## 2 9/30/14 $17,824,071,380,733.80
## 3 9/30/13 $16,738,183,526,697.30
## 4 9/30/12 $16,066,241,407,385.80
## 5 9/30/11 $14,790,340,328,557.10
## 6 9/30/10 $13,561,623,030,891.70
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(debt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    16 obs. of  2 variables:
##  $ V1: chr  &amp;quot;9/30/15&amp;quot; &amp;quot;9/30/14&amp;quot; &amp;quot;9/30/13&amp;quot; &amp;quot;9/30/12&amp;quot; ...
##  $ V2: chr  &amp;quot;$18,150,617,666,484.30&amp;quot; &amp;quot;$17,824,071,380,733.80&amp;quot; &amp;quot;$16,738,183,526,697.30&amp;quot; &amp;quot;$16,066,241,407,385.80&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ V1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ V2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apliquemos ahora la función &lt;code&gt;parse_number()&lt;/code&gt; a la segunda columna de la tabla.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debt$V2 &amp;lt;- parse_number(debt$V2)
head(debt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##        V1           V2
##     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 9/30/15 1.815062e+13
## 2 9/30/14 1.782407e+13
## 3 9/30/13 1.673818e+13
## 4 9/30/12 1.606624e+13
## 5 9/30/11 1.479034e+13
## 6 9/30/10 1.356162e+13
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(debt)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;:    16 obs. of  2 variables:
##  $ V1: chr  &amp;quot;9/30/15&amp;quot; &amp;quot;9/30/14&amp;quot; &amp;quot;9/30/13&amp;quot; &amp;quot;9/30/12&amp;quot; ...
##  $ V2: num  1.82e+13 1.78e+13 1.67e+13 1.61e+13 1.48e+13 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 2
##   .. ..$ V1: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ V2: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;25-accediendo-a-los-metadatos-de-un-archivo&#34;&gt;2.5. Accediendo a los metadatos de un archivo&lt;/h3&gt;
&lt;p&gt;En ocasiones, puede resultar de utilidad tener una idea previa de cómo las funciones de la librería &lt;em&gt;readr&lt;/em&gt; van a interpretar las columnas de un conjunto de datos antes de importarlo. De esta forma, en el caso de que las clases inferidas no sean las adecuadas, podemos optar por declarar el tipo de alguna de ellas con antelación.&lt;/p&gt;
&lt;p&gt;Con tal fin existen las funciones &lt;code&gt;spec_csv()&lt;/code&gt; y &lt;code&gt;spec_tsv()&lt;/code&gt;, para los archivos separados por comas y por tabulaciones, respectivamente. En el caso de tener que trabajar con otro tipo de ficheros (por ejemplo, &lt;code&gt;.csv&lt;/code&gt; en formato europeo), usaremos &lt;code&gt;spec_delim()&lt;/code&gt;, especificando el símbolo que hace las veces de separador de columnas en el archivo de datos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?spec_csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por ejemplo, retomemos el primer ejemplo de este documento, aquel que trabajaba con el archivo &lt;code&gt;chickwts.csv&lt;/code&gt;, que contenía información relativa al peso y tipo de alimentación de ciertos pollos. Veamos cuáles serían las clases que la función &lt;code&gt;read_csv()&lt;/code&gt; inferiría para sus columnas a la hora de importarlo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spec_csv(&amp;quot;datasets/chickwts.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   weight = col_integer(),
##   feed = col_character()
## )

## cols(
##   weight = col_integer(),
##   feed = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (II)</title>
      <link>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</link>
      <pubDate>Thu, 09 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/</guid>
      <description>&lt;p&gt;Nos quedamos, en la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/&#34;&gt;anterior entrada&lt;/a&gt; del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, a falta de revisar la parte final del archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;. Terminemos pues de echarle un vistazo a dicho fichero en este artículo.&lt;/p&gt;
&lt;p&gt;Al finalizar la personalización de los parámetros básicos del sitio web, se asomaba ante nosotros el siguiente, y muy extraño, bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nada intuitivo su contenido y carente por completo de comentarios, hecho nada halagüeño. Sin embargo, basta que experimentemos un poco con la anteriores líneas para comprobar que esta sección del archivo &lt;code&gt;config.toml&lt;/code&gt; es la dedicada a gestionar la aparición de un carrusel de imágenes en la página web de acceso, situándolo justo detrás del título.&lt;/p&gt;
&lt;p&gt;Conviene que le echemos un vistazo a la entrada que aparece en el propio blog de ejemplo del tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; hablando de la gestión de imágenes de cabecera. En el caso de haber varias declaradas, estas rotan cada diez segundos. Por otro lado, tenemos a nuestra disposición los siguientes parámetros de configuración:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: ruta que apunta a la ubicación de la imagen de cabecera.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desc&lt;/code&gt;: parámetro opcional que nos permite incorporar un pequeño texto sobre la imagen, a modo de pie de figura.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En mi caso, tras navegar un rato por 
&lt;a href=&#34;https://unsplash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unsplash&lt;/a&gt;, descargué fotografías hasta componer un carrusel de cinco imágenes a las que no incorporé pie de figura alguno. Por tanto, el anterior bloque de código me ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del carrusel de imágenes de la página de inicio
#
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-01.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-02.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-03.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-04.jpg&amp;quot;
[[Params.bigimg]]
  src = &amp;quot;img/homepage-cabecera-05.jpg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desvelado el anterior misterio, continuemos con la revisión del archivo &lt;code&gt;config.toml&lt;/code&gt;. El siguiente bloque de instrucciones hace referencia a los datos sobre el autor del sitio web (nombre, correo electrónico, etc.). Nos permite, además, configurar una amplia gama de enlaces a nuestras cuentas de redes sociales para así facilitar la conexión entre personas. Originalmente, dicho bloque presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Author]
  name = &amp;quot;Some Person&amp;quot;
  website = &amp;quot;yourwebsite.com&amp;quot;
  email = &amp;quot;youremail@domain.com&amp;quot;
  facebook = &amp;quot;username&amp;quot;
  googleplus = &amp;quot;+username&amp;quot; # or xxxxxxxxxxxxxxxxxxxxx
  github = &amp;quot;username&amp;quot;
  gitlab = &amp;quot;username&amp;quot;
  bitbucket = &amp;quot;username&amp;quot;
  twitter = &amp;quot;username&amp;quot;
  reddit = &amp;quot;username&amp;quot;
  linkedin = &amp;quot;username&amp;quot;
  xing = &amp;quot;username&amp;quot;
  stackoverflow = &amp;quot;users/XXXXXXX/username&amp;quot;
  snapchat = &amp;quot;username&amp;quot;
  instagram = &amp;quot;username&amp;quot;
  youtube = &amp;quot;user/username&amp;quot; # or channel/channelname
  soundcloud = &amp;quot;username&amp;quot;
  spotify = &amp;quot;username&amp;quot;
  bandcamp = &amp;quot;username&amp;quot;
  itchio = &amp;quot;username&amp;quot;
  vk = &amp;quot;username&amp;quot;
  paypal = &amp;quot;username&amp;quot;
  telegram = &amp;quot;username&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personalmente, no utilizo apenas las redes sociales y confieso que, del anterior listado, ni siquiera conozco algunas de ellas. Así pues, como no podía ser de otra manera, en mi caso el anterior bloque de código ha quedado ciertamente reducido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del autor
#
[Author]
  name    = &amp;quot;Alexis Sáez&amp;quot;
  website = &amp;quot;https://imalexissaez.github.io/&amp;quot;
  email   = &amp;quot;imalexissaez@gmail.com&amp;quot;
  github  = &amp;quot;ImAlexisSaez&amp;quot;
  twitter = &amp;quot;imalexissaez&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El último bloque de instrucciones que se presenta ante nosotros nos ofrece la posibilidad de configurar el menú que aparece en la parte superior derecha y presenta el siguiente aspecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[menu.main]]
    name = &amp;quot;Blog&amp;quot;
    url = &amp;quot;&amp;quot;
    weight = 1

[[menu.main]]
    name = &amp;quot;About&amp;quot;
    url = &amp;quot;page/about/&amp;quot;
    weight = 3

[[menu.main]]
    identifier = &amp;quot;samples&amp;quot;
    name = &amp;quot;Samples&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Big Image Sample&amp;quot;
    url = &amp;quot;post/2017-03-07-bigimg-sample&amp;quot;
    weight = 1

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Math Sample&amp;quot;
    url = &amp;quot;post/2017-03-05-math-sample&amp;quot;
    weight = 2

[[menu.main]]
    parent = &amp;quot;samples&amp;quot;
    name = &amp;quot;Code Sample&amp;quot;
    url = &amp;quot;post/2016-03-08-code-sample&amp;quot;
    weight = 3

[[menu.main]]
    name = &amp;quot;Tags&amp;quot;
    url = &amp;quot;tags&amp;quot;
    weight = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No obstante, de momento, dejaremos el anterior bloque tal cual figura arriba y ya procederemos en un futuro a su modificación, cuando incorporemos algunos cambios adicionales al sitio web.&lt;/p&gt;
&lt;p&gt;Fin del archivo &lt;code&gt;config.toml&lt;/code&gt;, fin de la entrada, ¿verdad? Todavía no. Nos quedan un par de detalles a los que echarles un vistazo.&lt;/p&gt;
&lt;p&gt;Para empezar, a continuación, configuraremos las taxonomías de nuestro sitio web. ¿Qué es una taxonomía? Sin pretender entrar en detalles técnicos aquí, para que nos hagamos una idea, una taxonomía es un instrumento que nos permite agrupar contenido relacionado. Los ejemplos más habituales a los que estamos acostumbrados son &lt;em&gt;categorías&lt;/em&gt; y &lt;em&gt;etiquetas&lt;/em&gt; (que aquí se llamarán &lt;em&gt;categories&lt;/em&gt; y &lt;em&gt;tags&lt;/em&gt;), que facilitan al lector encontrar artículos que comparten cierta temática.&lt;/p&gt;
&lt;p&gt;En mi caso, para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, conservaré ambas, aunque renombrando su versión inglesa al castellano, para facilitar después la configuración de la localización de la plantilla. Así, &lt;code&gt;categories&lt;/code&gt; pasará a ser &lt;code&gt;apartados&lt;/code&gt;, mientras que &lt;code&gt;tags&lt;/code&gt; se convertirá en &lt;code&gt;etiquetas&lt;/code&gt;. Además, declararé una nueva taxonomía denominada &lt;code&gt;proyectos&lt;/code&gt;, que me facilitará agrupar fácilmente contenido, llegado el caso, de distintos apartados o etiquetas.&lt;/p&gt;
&lt;p&gt;Todo ello se traduce en incluir el siguiente bloque de código en el fichero &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de taxonomías
#
[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag      = &amp;quot;tags&amp;quot;
  apartado = &amp;quot;apartados&amp;quot;
  proyecto = &amp;quot;proyectos&amp;quot;
  etiqueta = &amp;quot;etiquetas&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recomiendo seguir la estructura &lt;code&gt;singular = plural&lt;/code&gt; marcada en la 
&lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guía oficial&lt;/a&gt; de taxonomías de &lt;em&gt;Hugo&lt;/em&gt;. De hecho, dado que la formación de plurales en inglés y castellano es diferente, afinaría un poco la anterior recomendación señalando que conviene escoger parejas en donde el plural se diferencie del singular únicamente por el carácter &lt;code&gt;s&lt;/code&gt; final.&lt;/p&gt;
&lt;p&gt;¿Por qué debemos cuidar tanto el detalle a la hora de declarar taxonomías? Es posible que en un futuro nos adentremos en la personalización de las plantillas del tema y &lt;em&gt;Hugo&lt;/em&gt; incorpora útiles funciones para recorrer bucles apoyándose en esta curiosa relación singular-plural. Es por ello que no vamos a pegarnos un tiro en los pies declarando parejas de variables y valores que luego nos impidan aprovecharnos de las mencionadas herramientas.&lt;/p&gt;
&lt;p&gt;Por último, para finalizar este artículo, echaremos un vistazo a la configuración del 
&lt;a href=&#34;https://gohugo.io/content-management/urls/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;permalink&lt;/a&gt; de las entradas del sitio web. Por defecto, &lt;em&gt;Hugo&lt;/em&gt; utiliza el directorio donde se encuentre el contenido (generalmente es &lt;code&gt;\post\&lt;/code&gt;) y lo concatena con el título de la entrada, para el que sustituye espacios por guiones.&lt;/p&gt;
&lt;p&gt;Para empezar, me gustaría que apareciese el día de publicación del artículo en el &lt;em&gt;permalink&lt;/em&gt;, siguiendo el formato &lt;code&gt;/año/mes/día&lt;/code&gt;. Por otro lado, como soy consciente de que utilizar caracteres extraños a ojos del alfabeto inglés (tildes, eñes, etc.), en ocasiones, es fuente de problemas, en cada entrada definiré manualmente mi propio &lt;em&gt;slug&lt;/em&gt;, para evitar que la traducción automática del título hacia su correspondiente parte del &lt;em&gt;permalink&lt;/em&gt; dé lugar a resultados no deseados.&lt;/p&gt;
&lt;p&gt;Así pues, mi archivo &lt;code&gt;config.toml&lt;/code&gt; finaliza con el siguiente bloque código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del permalink
#
[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; dejaremos a un lado, de momento, la configuración de la plantilla para estudiar cómo generar contenido (en forma de artículos) para nuestro sitio web.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Beautiful Hugo (I)</title>
      <link>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</link>
      <pubDate>Tue, 07 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/</guid>
      <description>&lt;p&gt;Continuemos esta serie de artículos, pertenecientes al 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, donde examinamos con detalle la creación de sitios web utilizando &lt;em&gt;Hugo&lt;/em&gt;. Hoy veremos cómo instalar y configurar el tema 
&lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beautiful Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/&#34;&gt;anterior entrada&lt;/a&gt; vimos el proceso a seguir para el tema &lt;em&gt;Anake&lt;/em&gt;. No obstante, como ya comenté entonces, algunos detalles de dicha plantilla no terminaban de convencerme para la idea que tenía en mente para &lt;em&gt;Infinitos Contrastes&lt;/em&gt;. Así pues, tras invertir una considerable cantidad de tiempo en navegar por la 
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sección de temas&lt;/a&gt; de la web oficial de &lt;em&gt;Hugo&lt;/em&gt;, encontré, para mi fortuna, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;, una adaptación del tema &lt;em&gt;Beautiful Jekyll&lt;/em&gt; que ya utilicé en su momento como plantilla para mi sitio web.&lt;/p&gt;
&lt;p&gt;Me encanta este tema por el protagonismo que ofrece al contenido, evitando toda esa miríada de elementos que algunas plantillas incorporan y que distraen enormemente la atención a la hora de consultar la información contenida en los artículos. Además, viene con el interesante añadido para un matemático de incorporar, de serie, la configuración adecuada para escribir fórmulas vía &lt;em&gt;KaTeX&lt;/em&gt; (es un detalle con cierta trampa, ya que buenas batallas estoy lidiando, en ocasiones, para que las expresiones matemáticas se visualicen como deberían).&lt;/p&gt;
&lt;p&gt;Así pues, procedamos a su instalación. Para ello, en la terminal, desde el directorio raíz donde hayamos escogido alojar localmente nuestro sitio web, tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y clonamos, en esta carpeta, el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; escribiendo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/halogenica/beautifulhugo.git beautifulhugo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al igual que el tema &lt;em&gt;Anake&lt;/em&gt;, &lt;em&gt;Beautiful Hugo&lt;/em&gt; viene acompañado, para nuestro gozo y disfrute, con un pequeño sitio web de muestra, ubicado en la carpeta &lt;code&gt;exampleSite&lt;/code&gt; (siendo la ruta completa &lt;code&gt;\themes\beautifulhugo\exampleSite&lt;/code&gt;). A través del &lt;em&gt;Explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt; podemos comprobar que su contenido es el que se muestra en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-contenido-del-sitio-web-de-ejemplo&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/20180807-img01_hu4ce66409e8b1ed97e8056bfee71b847c_1870_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Contenido del sitio web de ejemplo&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/20180807-img01_hu4ce66409e8b1ed97e8056bfee71b847c_1870_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;91&#34; height=&#34;90&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Contenido del sitio web de ejemplo
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Procedemos entonces a copiar las carpetas &lt;code&gt;contents&lt;/code&gt;, &lt;code&gt;layouts&lt;/code&gt; y &lt;code&gt;static&lt;/code&gt;, así como el archivo &lt;code&gt;config.toml&lt;/code&gt; y las pegamos en el directorio raíz de nuestro sitio web. A estas alturas de la película, dependiendo de la intensidad con la que hayamos estado experimentando con diversas plantillas, recomendaría incluso eliminar previamente las mencionadas carpetas y el citado fichero antes de proceder a la acción de pegar, para así evitar la aparición de extraños conflictos en un futuro próximo.&lt;/p&gt;
&lt;p&gt;Ahora, editamos el archivo &lt;code&gt;config.toml&lt;/code&gt;, utilizando &lt;em&gt;Sublime Text 3&lt;/em&gt; para ello, con el objetivo de empezar a personalizar la configuración de esta plantilla. Algunos de los detalles que a continuación veremos son muy similares a los que discutimos durante el artículo dedicado al tema &lt;em&gt;Anake&lt;/em&gt;, por lo que en esta ocasión el ritmo de exposición será más ligero.&lt;/p&gt;
&lt;p&gt;El primer bloque de código que encontramos es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;https://username.github.io&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
#DefaultContentLanguage = &amp;quot;ja&amp;quot;
title = &amp;quot;Beautiful Hugo&amp;quot;
theme = &amp;quot;beautifulhugo&amp;quot;
metaDataFormat = &amp;quot;yaml&amp;quot;
pygmentsStyle = &amp;quot;trac&amp;quot;
pygmentsUseClasses = true
pygmentsCodeFences = true
pygmentsCodefencesGuessSyntax = true
#pygmentsUseClassic = true
#pygmentOptions = &amp;quot;linenos=inline&amp;quot;
#disqusShortname = &amp;quot;XXX&amp;quot;
#googleAnalytics = &amp;quot;XXX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algunas variables nos resultarán familiares, por lo que seremos capaces inmediatamente de asignarles sus correspondientes valores. Por ejemplo, las primeras líneas, en mi caso, han quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio
#
title   = &amp;quot;Infinitos Contrastes&amp;quot;            # Título de la web
theme   = &amp;quot;beautifulhugo&amp;quot;                   # Tema 
baseurl = &amp;quot;https://imalexissaez.github.io/&amp;quot; # URL base
metaDataFormat         = &amp;quot;yaml&amp;quot;             # Formato de las cabeceras de las entradas
DefaultContentLanguage = &amp;quot;es&amp;quot;               # Lenguaje de la web (activa localización)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ninguna sorpresa aquí. Entre los descriptivos nombres que poseen las variables y los comentarios que he añadido, no es descabellado suponer que todos configuraremos de manera adecuada el anterior bloque.&lt;/p&gt;
&lt;p&gt;Ahora bien, el siguiente apartado sí que merece explicación por mi parte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los bloques de código fuente
# Guía en: https://gohugo.io/content-management/syntax-highlighting/
#
pygmentsStyle                 = &amp;quot;trac&amp;quot;
pygmentsUseClasses            = true
pygmentsCodeFences            = true
pygmentsCodefencesGuessSyntax = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;He dejado en los comentarios un enlace a la guía oficial para la configuración del 
&lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;resaltado de código&lt;/a&gt; a la que convendría que echásemos un vistazo. Para empezar, existen diferentes estilos &lt;em&gt;CSS&lt;/em&gt; que, principalmente, afectan a los colores en los que se resaltan las palabras clave de los lenguajes de programación, así como al fondo en el que el código aparece. Tras revisar las opciones disponibles, el valor &lt;code&gt;&amp;quot;trac&amp;quot;&lt;/code&gt;, en mi opinión, es el que más a juego va con &lt;em&gt;Beautiful Hugo&lt;/em&gt;. Por otro lado, como este tema utiliza la librería 
&lt;a href=&#34;https://highlightjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;highlight.js&lt;/a&gt; (en lugar de la que &lt;em&gt;Hugo&lt;/em&gt; incorpora por defecto) para el mencionado resaltado, hemos de asignar &lt;code&gt;true&lt;/code&gt; a la variable &lt;code&gt;pygmentsUseClasses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuación, habilitamos la posibilidad de escribir código fuente en &amp;ldquo;&lt;em&gt;fences&lt;/em&gt;&amp;rdquo;, es decir, delimitándolo entre los caracteres habituales para ello (echa un vistazo a la 
&lt;a href=&#34;https://kramdown.gettalong.org/quickref.html#code-blocks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guía oficial&lt;/a&gt; de &lt;em&gt;Kramdown&lt;/em&gt; sobre bloques de código para una rápida referencia). Recomiendo actuar así porque, en ocasiones, el &lt;em&gt;shortcode&lt;/em&gt; &lt;code&gt;highlight&lt;/code&gt; se comporta de manera extraña, sobre todo en lo que respecta al interlineado cuando incluimos comentarios.&lt;/p&gt;
&lt;p&gt;Además, aunque hemos activado la opción de adivinar el lenguaje de programación por su sintaxis, recomendaría aquí que ayudásemos en lo posible a la librería y le indicáramos cuál estamos empleando, para que así aplique la configuración adecuada para él. Actuar así es crítico cuando, como en este artículo, compartimos pequeños bloques de código, de forma que es bastante complicado acertar con el lenguaje de programación dada la escasa información que suministramos.&lt;/p&gt;
&lt;p&gt;Finalmente, nos limitaremos a introducir los valores correspondientes a las cuentas que habremos creado para &lt;em&gt;Disqus&lt;/em&gt; y para las estadísticas de &lt;em&gt;Google&lt;/em&gt; en el siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de los comentarios (Disqus)
#
disqusShortname = &amp;quot;&amp;quot;

#
# Configuración de las estadísticas (Google Analytics)
#
googleAnalytics = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nuestra siguiente parada será en la sección dedicada a la configuración de los parámetros del sitio web, que originalmente presenta el aspecto que se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[Params]
#  homeTitle = &amp;quot;Beautiful Hugo Theme&amp;quot; # Set a different text for the header on the home page
  subtitle = &amp;quot;Build a beautiful and simple website in minutes&amp;quot;
  logo = &amp;quot;img/avatar-icon.png&amp;quot;
  favicon = &amp;quot;img/favicon.ico&amp;quot;
  dateFormat = &amp;quot;January 2, 2006&amp;quot;
  commit = false
  rss = true
  comments = true
  readingTime = true
  useHLJS = true
  socialShare = true
#  gcse = &amp;quot;012345678901234567890:abcdefghijk&amp;quot; # Get your code from google.com/cse. Make sure to go to &amp;quot;Look and Feel&amp;quot; and change Layout to &amp;quot;Full Width&amp;quot; and Theme to &amp;quot;Classic&amp;quot;

#[[Params.bigimg]]
#  src = &amp;quot;img/triangle.jpg&amp;quot;
#  desc = &amp;quot;Triangle&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/sphere.jpg&amp;quot;
#  desc = &amp;quot;Sphere&amp;quot;
#  # position: see values of CSS background-position.
#  position = &amp;quot;center top&amp;quot;
#[[Params.bigimg]]
#  src = &amp;quot;img/hexagon.jpg&amp;quot;
#  desc = &amp;quot;Hexagon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empecemos analizando la primera parte que, en mi caso, ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros del sitio web
#
[Params]
  subtitle    = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot; # Subtítulo
  logo        = &amp;quot;img/avatar.jpg&amp;quot;                               # Logo
  favicon     = &amp;quot;img/favicon.ico&amp;quot;                              # Favicon
  dateFormat  = &amp;quot;02-01-2006&amp;quot;                                   # Formato de la fecha
  commit      = false                                          # commit en footer
  rss         = true                                           # Sindicación
  comments    = true                                           # Comentarios activados por defecto
  readingTime = true                                           # Estimación del tiempo de lectura
  useHLJS     = true                                           # Highlight.js para resaltado
  socialShare = true                                           # Compartir entradas en redes sociales
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ya que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No he visto la necesidad de utilizar la variable &lt;code&gt;homeTitle&lt;/code&gt; para modificar el texto que aparece al acceder al sitio web. Me parece adecuado que sea el nombre de la página web: &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, pero, como siempre, &amp;ldquo;para gustos, los colores&amp;rdquo;. La variable &lt;code&gt;subtitle&lt;/code&gt; sí que me resulta interesante para ofrecer una breve descripción o eslogan de nuestra página web.&lt;/li&gt;
&lt;li&gt;Los valores para las variables &lt;code&gt;logo&lt;/code&gt; y &lt;code&gt;favicon&lt;/code&gt; deben apuntar a las rutas donde ubiquemos las respectivas imágenes. Por defecto, las hojas de estilo &lt;em&gt;CSS&lt;/em&gt;, las librerías escritas con &lt;em&gt;JavaScript&lt;/em&gt; y las imágenes las almacenaremos en el interior del directorio &lt;code&gt;static&lt;/code&gt;. Como &lt;em&gt;Hugo&lt;/em&gt; supone este hecho, no es necesario que antecedamos cada ruta con &lt;code&gt;static&lt;/code&gt;, pero debemos ubicar cada recurso adecuadamente.&lt;/li&gt;
&lt;li&gt;La localización de &lt;em&gt;Hugo&lt;/em&gt; a idiomas diferentes al inglés es todavía un aspecto que admite gran margen de mejora. Aunque &lt;em&gt;Beautiful Hugo&lt;/em&gt; incorpora la posibilidad de declarar ciertos textos para distintos idiomas, el tratamiento de las fechas no es todavía el adecuado para las opciones disponibles. Con el objeto de evitar entrar en agotadoras batallas, me he decantado finalmente por un formato &amp;ldquo;neutro&amp;rdquo; para expresar la fecha, en el sentido de que únicamente incluye números, evitando así que en la página aparezcan los nombres de los días de la semana o los de los meses en inglés.&lt;/li&gt;
&lt;li&gt;La variable &lt;code&gt;commit&lt;/code&gt; nos permite insertar el código SHA correspondiente al &lt;em&gt;commit&lt;/em&gt; que generó la última versión del sitio web. No he considerado que dicha información fuera a proporcionar demasiada utilidad para una página como la mía, así que he declarado su valor como &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;El resto de las variables activan, pues su valor es &lt;code&gt;true&lt;/code&gt;, respectivamente, la sindicación vía &lt;em&gt;RSS&lt;/em&gt;, la posibilidad de realizar comentarios en los distintos artículos de la web (vía &lt;em&gt;Disqus&lt;/em&gt;), una estimación del tiempo de lectura para cada entrada (utilizando como referencia 200 palabras por minuto), el uso de la librería &lt;em&gt;highlight.js&lt;/em&gt; para resaltar código y el acceso a compartir nuestro contenido en distintas redes sociales.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como la entrada está empezando a adquirir una extensión considerable. Vamos a poner aquí un punto y seguido, dejando para el próximo artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; el análisis del resto de la configuración del archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo actualizar fácilmente R en Windows?</title>
      <link>https://imalexissaez.github.io/2018/08/04/como-actualizar-facilmente-r-en-windows/</link>
      <pubDate>Sat, 04 Aug 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/08/04/como-actualizar-facilmente-r-en-windows/</guid>
      <description>&lt;p&gt;El proceso de actualización de la versión del lenguaje de programación &lt;em&gt;R&lt;/em&gt; puede resultar un tanto tedioso si lo llevamos a cabo de forma manual. Veamos cómo hacer más liviana esta pesada carga.&lt;/p&gt;
&lt;p&gt;Por fortuna, tenemos a nuestra disposición el paquete 
&lt;a href=&#34;https://cran.r-project.org/web/packages/installr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;installr&lt;/a&gt;, que se encarga de todo el anterior procedimiento automáticamente, a través de la llamada a la función &lt;code&gt;updateR()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;De esta forma, basta con que tengamos a mano un &lt;em&gt;script&lt;/em&gt; similar al que se muestra a continuación, y procedamos a ejecutarlo cuando se anuncie una nueva versión de &lt;em&gt;R&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Instala el paquete
install.packages(&amp;quot;installr&amp;quot;)
 
# Actualiza R
library(installr)
updateR()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al utilizar la función &lt;code&gt;updateR()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se comprueba cuál es la última versión de &lt;em&gt;R&lt;/em&gt;. Si estamos al día, nos mostrará una ventana de confirmación de tal hecho. En caso contrario, nos dará la posibilidad de consultar las novedades de dicha versión y nos permitirá proceder a su descarga e instalación.&lt;/li&gt;
&lt;li&gt;Una vez completado el proceso, nos preguntará si deseamos mover (y borrar) las librerías desde nuestra antigua versión a la nueva. Además, nos dará la opción de ponerlas al día. Dependiendo del número de librerías que tengamos instaladas, completar estas acciones puede llevarnos un buen rato.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si usamos &lt;em&gt;RStudio&lt;/em&gt;, al principio se nos mostrará un aviso sugiriéndonos que llevemos a cabo todo el proceso desde la propia interfaz de &lt;em&gt;R&lt;/em&gt;, en lugar de a través de este &lt;em&gt;IDE&lt;/em&gt;. No obstante, en mi experiencia, podemos tranquilamente ignorar la advertencia y realizar el procedimiento utilizando &lt;em&gt;RStudio&lt;/em&gt;. Al terminar, bastará con que reiniciemos el programa para que todo funcione con normalidad.&lt;/p&gt;
&lt;p&gt;Finalmente, podemos ahorrarnos la sucesión de ventanas emergentes si sabemos de antemano que queremos actualizar &lt;em&gt;R&lt;/em&gt;, mover (no copiar) las librerías y actualizarlas. Para ello, reescribimos el anterior script como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Instala / carga el paquete
if(!require(installr)) {install.packages(&amp;quot;installr&amp;quot;); require(installr)} 
 
# Instala R, mueve y actualiza paquetes
updateR(F, T, T, F, T, F, T)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo incluir varias imágenes en la misma figura con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/</link>
      <pubDate>Sun, 22 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/</guid>
      <description>&lt;p&gt;Es muy útil poder incluir varias imágenes en la misma figura, bien sea porque están relacionadas de alguna manera, bien debido a que resulta mucho más sencillo hacer una comparación si se colocan juntas.&lt;/p&gt;
&lt;p&gt;Lidiar con elementos flotantes en &lt;em&gt;LaTeX&lt;/em&gt; no siempre es una tarea agradecida, pero, en esta ocasión, y sin que sirva de precedente, crear composiciones de múltiples imágenes dentro de una figura es bastante sencillo.&lt;/p&gt;
&lt;p&gt;A continuación, muestro los pasos que podemos seguir para ello:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dentro del entorno &lt;code&gt;figure&lt;/code&gt;, crearemos tantos entornos &lt;code&gt;subfigure&lt;/code&gt; como imágenes queramos incluir en la composición.&lt;/li&gt;
&lt;li&gt;El parámetro opcional del entorno &lt;code&gt;subfigure&lt;/code&gt;, &lt;code&gt;[b]&lt;/code&gt; en el ejemplo que aparece abajo, sigue las clásicas pautas de los elementos flotantes en &lt;em&gt;LaTeX&lt;/em&gt;, y será de suma utilidad que lo definamos con precisión si las imágenes poseen diferentes alturas.&lt;/li&gt;
&lt;li&gt;Con &lt;code&gt;textwidth&lt;/code&gt; controlaremos la anchura de las imágenes. Por ejemplo, para que aparezcan dos imágenes, una al lado de otra, y que ocupen la mayor parte del espacio horizontal del documento con el que estemos trabajando, &lt;code&gt;0.49&lt;/code&gt; será un valor adecuado, pues deja un leve espacio blanco entre ellas. Si no queremos que aparezcan tan juntas, simplemente tendremos que reducir la anterior cantidad. Para tres imágenes, &lt;code&gt;0.33&lt;/code&gt; es el valor que consigue que éstas aparezcan una a continuación de la otra, dejando leves espacios blancos entre ellas.&lt;/li&gt;
&lt;li&gt;Una vez declarados tanto el parámetro opcional como el obligatorio, incluiremos la imagen dentro del entorno &lt;code&gt;subfigure&lt;/code&gt; utilizando las instrucciones habituales. Como hemos cargado en el preámbulo los paquetes &lt;em&gt;caption&lt;/em&gt; y &lt;em&gt;subcaption&lt;/em&gt;, podremos incluir los comandos &lt;code&gt;caption&lt;/code&gt; y &lt;code&gt;label&lt;/code&gt; en cada una de las imágenes, por si luego queremos hacer referencia a alguna de ellas.&lt;/li&gt;
&lt;li&gt;Utilizar &lt;code&gt;hfill&lt;/code&gt; entre los distintos entornos &lt;code&gt;subfigure&lt;/code&gt; provoca que las imágenes queden empujadas hacia los márgenes del documento. Este efecto nos puede resultar de interés si no estamos trabajando con esos valores límites (como &lt;code&gt;0.49&lt;/code&gt;) para la anchura de las imágenes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con un ejemplo quedará más claro el procedimiento que hemos de seguir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}
 
\usepackage[utf8]{inputenc}
\usepackage[english, spanish]{babel}
 
\usepackage{graphicx}
\usepackage{caption}
\usepackage{subcaption}
 
\begin{document}
 
\begin{figure}[!tbp]
  \begin{subfigure}[b]{0.49\textwidth}
    \includegraphics[width=\textwidth, height=\textwidth]{img1.jpg}
    \caption{Primera imagen.}
    \label{fig:f1}
  \end{subfigure}
  \hfill
  \begin{subfigure}[b]{0.49\textwidth}
    \includegraphics[width=\textwidth, height=\textwidth]{img2.jpg}
    \caption{Segunda imagen.}
    \label{fig:f2}
  \end{subfigure}
  \caption{Dos imágenes en la misma figura.}
\end{figure}
 
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos apreciar el resultado en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-resultado-del-bloque-de-código-anterior&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/20180722-img01_hua06c49c4f559026e7ed15f76e3054f5b_326068_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Resultado del bloque de código anterior.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/20180722-img01_hua06c49c4f559026e7ed15f76e3054f5b_326068_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;768&#34; height=&#34;464&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Resultado del bloque de código anterior.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: no es recomendable que forcemos el parámetro &lt;code&gt;height&lt;/code&gt; para que se ajuste al &lt;code&gt;textwidth&lt;/code&gt; definido, pues generalmente provocará distorsiones no deseadas en nuestras imágenes. Si aparece en el ejemplo anterior no es más que por descuido, ya que de las distintas configuraciones con las que he estado experimentando, esa ha sido precisamente la última y no he caído en cambiar ese detalle antes de publicar el código.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Referencia&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;http://tex.stackexchange.com/questions/148438/putting-two-images-beside-each-other&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Putting two images beside each other&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>¿Cómo dividir diagonalmente una celda de una tabla con LaTeX?</title>
      <link>https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/</link>
      <pubDate>Fri, 20 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/</guid>
      <description>&lt;p&gt;Reconozco que la edición de tablas, junto con la gestión de figuras, a veces se convierte en una pequeña pesadilla para mí cuando estoy generando documentos con &lt;em&gt;LaTeX&lt;/em&gt;. Veamos cómo he dado respuesta a la cuestión que aparece en el título de esta entrada.&lt;/p&gt;
&lt;p&gt;Es habitual en estadística que trabajemos con tablas de contingencia, sobre todo en su versión $2\times 2$. Estas se suelen caracterizar por tener la celda que ocupa la esquina superior izquierda dividida diagonalmente, de manera que el texto inferior de dicha celda hace referencia al contenido de las filas (por ejemplo, si se posee o no cierta enfermedad), mientras que el texto superior hace lo propio para las columnas (por ejemplo, si se está expuesto a un factor de riesgo o no).&lt;/p&gt;
&lt;p&gt;Ahora bien, enseguida aparece la pregunta del millón: ¿cómo conseguimos ese efecto con &lt;em&gt;LaTeX&lt;/em&gt;? La respuesta viene de la mano del paquete &lt;code&gt;slashbox&lt;/code&gt;, cuyo uso es realmente sencillo. Veamos un ejemplo de aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}
 
\usepackage[utf8]{inputenc}
\usepackage[english, spanish]{babel}
 
\usepackage{slashbox}
 
\begin{document}
 
\begin{tabular}{|l|c|c|c|}
\hline
\backslashbox{Enfermedad}{Factor de riesgo} &amp;amp; SÍ $\equiv FR$ &amp;amp; NO $\equiv \overline{FR}$ &amp;amp; Totales\\
\hline
SÍ $\equiv E$ &amp;amp; $O_{11}$ &amp;amp; $O_{12}$ &amp;amp; $F_1$ \\
NO $\equiv \overline{E}$ &amp;amp; $O_{21}$ &amp;amp; $O_{22}$ &amp;amp; $F_2$ \\
\hline
Totales &amp;amp; $C_1$ &amp;amp; $C_2$ &amp;amp; $T$ \\
\hline
\end{tabular}
 
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos apreciar el resultado en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-tabla-de-contingencia-en-latex&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/20180720-img01_hu5fc3f03628c455358bbad8695ab24536_9241_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Tabla de contingencia en &amp;lt;em&amp;gt;LaTeX&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/20180720-img01_hu5fc3f03628c455358bbad8695ab24536_9241_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;714&#34; height=&#34;159&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Tabla de contingencia en &lt;em&gt;LaTeX&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Referencias&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;http://tex.stackexchange.com/questions/27193/latex-table-cell-with-a-diagonal-line-and-2-sub-cells&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX table cell with a diagonal line and 2 sub cells [duplicate]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://tex.stackexchange.com/questions/7262/diagonally-divided-table-cell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diagonally divided table cell [duplicate]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configurando el tema Ananke</title>
      <link>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</link>
      <pubDate>Tue, 17 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/</guid>
      <description>&lt;p&gt;En la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; generamos, ¡solucionando incluso un pequeño &lt;em&gt;bug&lt;/em&gt;!, nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;, utilizando para ello el tema &lt;em&gt;Ananke&lt;/em&gt;. Veamos qué opciones de configuración nos ofrece dicho tema a continuación.&lt;/p&gt;
&lt;p&gt;Así pues, dedicaremos única y exclusivamente este cuarto artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; a examinar con detalle el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, que se ubica en la raíz del directorio donde hayamos decidido almacenar nuestro sitio web.&lt;/p&gt;
&lt;p&gt;Si en su momento nos decantamos por seguir, al pie de la letra, el contenido de la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt;, dicho fichero debería figurar en el interior de la ruta &lt;code&gt;C:\Hugo\Sites\prueba&lt;/code&gt;. Desde el &lt;em&gt;explorador de archivos&lt;/em&gt; de &lt;em&gt;Windows&lt;/em&gt;, lo seleccionamos con el botón derecho del ratón y escogemos la opción &lt;code&gt;Open with Sublime Text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Parte de su contenido nos resultará familiar a estas alturas, pues ya tuvimos que editar el mencionado archivo para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía tener acceso local al sitio web. Empecemos examinando el primer bloque de código, aquel que comprende las siguientes cinco líneas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;title = &amp;quot;Notre-Dame de Paris&amp;quot;
baseURL = &amp;quot;https://example.com&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
theme = &amp;quot;gohugo-theme-ananke&amp;quot;
# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos ante una serie de pares &lt;code&gt;variable = valor&lt;/code&gt;, en donde hemos de personalizar las cadenas de texto para que se ajusten a las opciones que deseamos de cara a nuestro sitio web.&lt;/p&gt;
&lt;p&gt;En el primero de ellos, la variable &lt;code&gt;title&lt;/code&gt;, como bien señala de manera descriptiva su nombre, nos permite indicar el título de la página web. En mi caso, me gustaría que fuese &lt;em&gt;Infinitos Contrastes&lt;/em&gt;, por lo que no tengo más que modificar esa primera línea y teclear &lt;code&gt;title = &amp;quot;Infinitos Contrastes&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ahora, a &lt;code&gt;baseURL&lt;/code&gt; hemos de asignarle el enlace que utilizaremos para acceder a nuestro sitio web a través del navegador web. Dado que la idea es que alojemos la página web en &lt;em&gt;GitHub&lt;/em&gt;, dicha dirección será del estilo &lt;code&gt;https://&amp;lt;NOMBRE_DE_TU_CUENTA&amp;gt;.github.io&lt;/code&gt;. Para ilustrar esto último de manera más concreta, el nombre de mi cuenta en &lt;em&gt;GitHub&lt;/em&gt; es &lt;code&gt;ImAlexisSaez&lt;/code&gt;, por lo que el enlace que permitirá el acceso remoto a la página web será &lt;code&gt;https://imalexissaez.github.io/&lt;/code&gt;, valor que asignaré a la variable &lt;code&gt;baseURL&lt;/code&gt; en su correspondiente línea.&lt;/p&gt;
&lt;p&gt;A continuación, en &lt;code&gt;languageCode&lt;/code&gt; reside el código del lenguaje en el que se generará nuestro sitio web, que, por defecto, es inglés estadounidense (&lt;code&gt;en-us&lt;/code&gt;). Si vamos a generar contenido un idioma diferente, conviene que modifiquemos el valor de dicha línea. Para el español, el código asociado es &lt;code&gt;es&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Aunque a primera vista no parezca un detalle relevante, es importante asignar el código adecuado a &lt;code&gt;languageCode&lt;/code&gt;, puesto que algunos temas de &lt;em&gt;Hugo&lt;/em&gt; incorporan la posibilidad de localización a diferentes lenguajes y la clave pasa, precisamente, por el valor indicado para dicha variable. Para muestra, un botón: el tema actual de este sitio web, &lt;em&gt;Beautiful Hugo&lt;/em&gt;, es uno de esos ejemplos y en un futuro veremos cómo lidiar con el asunto de la localización en &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La siguiente línea, &lt;code&gt;theme = &amp;quot;gohugo-theme-ananke&amp;quot;&lt;/code&gt;, le indica a &lt;em&gt;Hugo&lt;/em&gt; en qué ruta ha de buscar para acceder a los archivos correspondientes al tema de la web. Es posible que en la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/&#34;&gt;anterior entrada&lt;/a&gt; no nos diésemos cuenta, pero cuando instalamos el tema &lt;em&gt;Ananke&lt;/em&gt; automáticamente se generó una carpeta en nuestro disco duro llamada &lt;code&gt;gohugo-theme-ananke&lt;/code&gt;, en el interior del directorio &lt;code&gt;themes&lt;/code&gt;. La variable &lt;code&gt;theme&lt;/code&gt; simplemente apunta a esa ruta, de manera que si, por el extraño motivo que sea, nos vemos en la necesidad de modificar el nombre de la mencionada carpeta, también deberíamos cambiar el valor de esta línea en el archivo &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Por lo que respecta a la última línea de este bloque de código, para solventar el &lt;em&gt;bug&lt;/em&gt; que nos impedía revisar localmente el sitio web, usamos el símbolo de comentario (&lt;code&gt;#&lt;/code&gt;) para anularla. De esta forma, directamente podemos suprimirla, quedando definitivamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración básica del sitio web
#
title        = &amp;quot;Infinitos Contrastes&amp;quot;             # Título
baseURL      = &amp;quot;https://imalexissaez.github.io/&amp;quot;  # Enlace de entrada
languageCode = &amp;quot;es&amp;quot;                               # Idioma
theme        = &amp;quot;gohugo-theme-ananke&amp;quot;              # Ruta al tema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recomiendo encarecidamente ir comentando el código fuente, para que en futuras revisiones sea más fácil encontrar aquello que andemos buscando. En cuanto a que todo quede alineado por el símbolo &lt;code&gt;=&lt;/code&gt;, es simplemente una manía mía, no es necesario en absoluto.&lt;/p&gt;
&lt;p&gt;Pasemos ahora al siguiente bloque de código, el dado por&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;MetaDataFormat = &amp;quot;yaml&amp;quot;
DefaultContentLanguage = &amp;quot;en&amp;quot;
SectionPagesMenu = &amp;quot;main&amp;quot;
Paginate = 3 # this is set low for demonstrating with dummy content. Set to a higher number
googleAnalytics = &amp;quot;&amp;quot;
enableRobotsTXT = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso, ha quedado como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración adicional del sitio web
#
MetaDataFormat         = &amp;quot;yaml&amp;quot; # Formato cabeceras
DefaultContentLanguage = &amp;quot;es&amp;quot;   # Idioma por defecto del contenido
SectionPagesMenu       = &amp;quot;main&amp;quot; #
Paginate               = 3      # Posts por página en main
googleAnalytics        = &amp;quot;&amp;quot;     # Código para estadísticas web
enableRobotsTXT        = true   # Buscadores
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ya que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En &lt;code&gt;MetaDataFormat&lt;/code&gt; tenemos que indicar qué lenguaje emplearemos para escribir los metadatos de las cabeceras para nuestros artículos del sitio web (hablaremos de ello en detalle cuando, por fin, nos animemos a redactar el primer artículo para nuestra página web). &lt;em&gt;Hugo&lt;/em&gt; permite trabajar con &lt;em&gt;TOML&lt;/em&gt; (por defecto), &lt;em&gt;YAML&lt;/em&gt; y &lt;em&gt;JSON&lt;/em&gt;. Los dos primeros son muy similares y, en mi caso, dado que estuve un tiempo generando el sitio web con &lt;em&gt;Jekyll&lt;/em&gt;, estoy más acostumbrado al estilo &lt;em&gt;YAML&lt;/em&gt; que al &lt;em&gt;TOML&lt;/em&gt;. Por otro lado, aunque también es factible generar las mencionadas cabeceras con &lt;em&gt;JSON&lt;/em&gt;, es un lenguaje un tanto más tedioso a la hora de declarar los metadatos, por lo que recomendaría evitarlo de momento.&lt;/li&gt;
&lt;li&gt;Para &lt;code&gt;DefaultContentLanguage&lt;/code&gt; declaramos el valor del código del idioma en el que tengamos pensado generar el contenido para nuestro sitio web. Para español, recuerdo que dicho código era &lt;code&gt;es&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Confieso que desconozco las posibilidades para &lt;code&gt;SectionPagesMenu&lt;/code&gt;. Experimenté con el tema &lt;em&gt;Ananke&lt;/em&gt; unos minutos y enseguida empecé a buscar, entre los temas disponibles para &lt;em&gt;Hugo&lt;/em&gt;, uno que se adaptara mejor a mis necesidades, así que no he profundizado en exceso en este.&lt;/li&gt;
&lt;li&gt;En &lt;code&gt;Paginate&lt;/code&gt; indicaremos el número de artículos que queremos se muestren por página en el índice que aparece al acceder a nuestro sitio web. En los propios comentarios avisan que el valor asignado por defecto, &lt;code&gt;3&lt;/code&gt;, es un tanto escaso y deberíamos incrementarlo un tanto. ¿Cuánto? En mi opinión, debería estar en función de la frecuencia con la que generemos contenido.&lt;/li&gt;
&lt;li&gt;Si activamos las estadísticas de &lt;em&gt;Google&lt;/em&gt; para nuestro sitio web, tendremos acceso a cierto código, que será el que asignemos como valor en la línea de &lt;code&gt;googleAnalytics&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finalmente, con &lt;code&gt;enableRobotsTXT = true&lt;/code&gt; damos acceso a la &amp;ldquo;arañas&amp;rdquo; de los buscadores para que exploren todo nuestro sitio web e indexen aquello que estimen conveniente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El siguiente bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority = 0.5
  filename = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;está dedicado a los parámetros de configuración del mapa del sitio web. Al igual que sucedía con la variable &lt;code&gt;Paginate&lt;/code&gt;, configuraremos los valores de estas tres en función de la frecuencia con la que generemos contenido para nuestro sitio web. Seguramente, la única variable que modificaremos será &lt;code&gt;changefreq&lt;/code&gt;, cambiando &lt;code&gt;&amp;quot;monthly&amp;quot;&lt;/code&gt; por &lt;code&gt;&amp;quot;weekly&amp;quot;&lt;/code&gt; o, incluso, &lt;code&gt;&amp;quot;daily&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, en mi caso, únicamente he colocado un comentario introductorio al bloque y, por supuesto, he continuado alineando valores por el simbolo &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración del mapa de la web
#
[sitemap]
  changefreq = &amp;quot;monthly&amp;quot;
  priority   = 0.5
  filename   = &amp;quot;sitemap.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para finalizar, el último bloque de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[params]
  favicon = &amp;quot;&amp;quot;
  description = &amp;quot;The last theme you&#39;ll ever need. Maybe.&amp;quot;
  facebook = &amp;quot;&amp;quot;
  twitter = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram = &amp;quot;&amp;quot;
  youtube = &amp;quot;&amp;quot;
  github = &amp;quot;&amp;quot;
  linkedin = &amp;quot;&amp;quot;
  # choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with &amp;quot;bg-&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;me ha quedado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;#
# Configuración de parámetros de la web
#
[params]
  favicon     = &amp;quot;&amp;quot;
  description = &amp;quot;Laboratorio de experimentos de un matemático&amp;quot;
  facebook    = &amp;quot;&amp;quot;
  twitter     = &amp;quot;https://twitter.com/GoHugoIO&amp;quot;
  instagram   = &amp;quot;&amp;quot;
  youtube     = &amp;quot;&amp;quot;
  github      = &amp;quot;&amp;quot;
  linkedin    = &amp;quot;&amp;quot;
  background_color_class = &amp;quot;bg-black&amp;quot;
  featured_image         = &amp;quot;/images/gohugo-default-sample-hero-image.jpg&amp;quot;
  recent_posts_number    = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estas líneas facilitan la configuración de algunas características de la web, como pueden ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;favicon&lt;/code&gt;: es el icono que aparece, en el navegador, en la parte izquierda de la pestaña correspondiente a nuestro sitio web. El valor que hemos de asignar a esta variable será la ruta de acceso a la imagen que contiene el icono. Entraré en más detalles al respecto de este tema cuando aborde cómo configurar el &lt;em&gt;favicon&lt;/em&gt; para el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: breve subtítulo o eslogan que podemos añadir a la página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;facebook&lt;/code&gt;, &lt;code&gt;twitter&lt;/code&gt;, etc.: enlaces a las páginas de nuestras redes sociales, que permiten a los visitantes dar con nuestros perfiles muy fácilmente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;featured_image&lt;/code&gt;: ruta que apunta a la imagen que deseemos ubicar en la cabecera de nuestra página web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recent_posts_number&lt;/code&gt;: cantidad de artículos, de entre los últimos publicados, que aparecerán destacados en la página de entrada a nuestro sitio web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En esta serie de artículos no entraré en detalle en la modificación de las plantillas del tema &lt;em&gt;Ananke&lt;/em&gt;. No obstante, en breve pasaremos a estudiar con profundidad el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y las ideas que exploremos, de cara a modificar diversos aspectos de un sitio web, se podrán extrapolar a cualquier tema, &lt;em&gt;Ananke&lt;/em&gt; incluido.&lt;/p&gt;
&lt;p&gt;Así pues, seguramente, en la próxima entrada del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; instalaremos el tema &lt;em&gt;Beautiful Hugo&lt;/em&gt; y echaremos un vistazo por encima a su correspondiente archivo de configuración &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creando un sitio web con Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</link>
      <pubDate>Wed, 11 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/</guid>
      <description>&lt;p&gt;¡Ha llegado el momento que todos estábamos esperando! Tras un par de artículos en los que hemos preparado nuestros equipos instalando las herramientas necesarias, hoy veremos cómo generar nuestro primer sitio web con &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esta tercera entrada del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; se va a apoyar en la guía de inicio recogida en la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, a la que podemos acceder a través de 
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En primer lugar, abrimos la terminal &lt;em&gt;Git Bash&lt;/em&gt; y nos dirigimos al directorio de nuestro disco duro donde tengamos pensado almacenar localmente el sitio web. En la mencionada guía recomiendan ubicar las páginas en la ruta &lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;, aunque ya comenté en la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;anterior entrada&lt;/a&gt; que no era estrictamente necesario proceder de tal forma.&lt;/p&gt;
&lt;p&gt;Dicho esto, en este artículo seguiremos al dedillo las indicaciones dadas en la guía, de manera que en la terminal tecleamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:/Hugo/Sites/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El comando para generar un nuevo sitio web es &lt;code&gt;hugo new site [path] [flags]&lt;/code&gt;, donde sustituiremos &lt;code&gt;[path]&lt;/code&gt; por la ruta al directorio donde almacenaremos nuestra página web. Por lo que respecta a las &lt;code&gt;[flags]&lt;/code&gt;, en el apartado de la documentación oficial dedicado a 
&lt;a href=&#34;https://gohugo.io/commands/hugo_new_site/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hugo new site&lt;/a&gt; tenemos el listado de las disponibles. No obstante, para una primera toma de contacto, no añadiremos ninguna de ellas.&lt;/p&gt;
&lt;p&gt;Así pues, generemos un primer sitio de prueba y, en un alarde de extrema originalidad, ubiquémoslo en el directorio &lt;code&gt;\prueba\&lt;/code&gt;. Para ello, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site prueba
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recibimos entonces un mensaje de felicitación (en caso contrario, convendría que revisáramos la instalación de &lt;em&gt;Hugo&lt;/em&gt; siguiendo las indicaciones de 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/&#34;&gt;esta entrada&lt;/a&gt;) y algunas instrucciones relacionadas con el uso de temas, la creación de contenidos y el acceso local al sitio web.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hugo&lt;/em&gt; ha creado el directorio &lt;code&gt;\prueba\&lt;/code&gt; en el interior de la ruta donde hemos ejecutado el comando &lt;code&gt;hugo new site&lt;/code&gt;. Además, ha poblado el mismo con algunas carpetas (vacías en su mayor parte), quedando una estructura como la que figura en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-estructura-del-sitio-web&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img01_hu7a3c76859068dd17c68c75e7f63178fa_2727_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Estructura del sitio web.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img01_hu7a3c76859068dd17c68c75e7f63178fa_2727_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;94&#34; height=&#34;154&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Estructura del sitio web.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;En un futuro exploraremos con detalle el cometido de algunos de esos directorios que aparecen en la imagen (&lt;code&gt;\content\&lt;/code&gt; y &lt;code&gt;\layouts\&lt;/code&gt; son de extrema importancia, así como ese curioso archivo denominado &lt;code&gt;config.toml&lt;/code&gt;). No obstante, por el momento, evitemos distraernos en exceso y sigamos las indicaciones de la guía.&lt;/p&gt;
&lt;p&gt;Volvemos a la terminal, nos movemos hacia el directorio &lt;code&gt;\prueba\&lt;/code&gt; e iniciamos un repositorio &lt;em&gt;Git&lt;/em&gt;, acciones que requieren teclear los dos siguientes comandos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd prueba
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente paso de la guía nos invitan a instalar un tema para la web, 
&lt;a href=&#34;https://themes.gohugo.io/gohugo-theme-ananke/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ananke&lt;/a&gt;, utilizando &lt;code&gt;submodule&lt;/code&gt; (un comando de &lt;em&gt;Git&lt;/em&gt;). No obstante, en este momento, me voy a desviar de las indicaciones dadas y optar por un método diferente de instalación de temas. A continuación, nos moveremos a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y clonaremos en nuestro disco duro el propio repositorio del tema. Para ello, escribimos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd themes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/budparr/gohugo-theme-ananke.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta manera, tenemos acceso localmente a un sitio web de prueba, con un poco de contenido ya generado, que nos permitirá hacernos una idea del aspecto final de nuestro sitio web utilizando el tema &lt;em&gt;Ananke&lt;/em&gt;. Aunque soy consciente de que me estoy desviando &amp;lsquo;&amp;lsquo;ligeramente&amp;rsquo;&amp;rsquo; de la guía oficial, vamos a tomar esta senda para ver cómo luce nuestro sitio web.&lt;/p&gt;
&lt;p&gt;Abrimos el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt; y en el directorio donde hemos ubicado la página web (&lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;) accedemos a la carpeta &lt;code&gt;themes&lt;/code&gt;. Una vez dentro de ella, hacemos doble clic sobre el directorio &lt;code&gt;gohugo-theme-ananke&lt;/code&gt; y repetimos luego la acción con la carpeta denomiada &lt;code&gt;exampleSite&lt;/code&gt;, cuyos contenidos son:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-contenido-de-la-carpeta-del-sitio-web-de-ejemplo&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img02_hu2fb7d8a8aa34797b983358bace71f1cd_1615_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Contenido de la carpeta del sitio web de ejemplo.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img02_hu2fb7d8a8aa34797b983358bace71f1cd_1615_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;97&#34; height=&#34;72&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Contenido de la carpeta del sitio web de ejemplo.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Copiamos tanto las dos carpetas, como el archivo &lt;code&gt;config.toml&lt;/code&gt;, y pegamos todo en el directorio &lt;code&gt;C:\Hugo\Sites\prueba\&lt;/code&gt;, reemplazando los ficheros existentes con el mismo nombre que en él se encuentran.&lt;/p&gt;
&lt;p&gt;Ahora volvemos a la terminal, que todavía está apuntando a la carpeta &lt;code&gt;\themes\&lt;/code&gt; y tecleamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;para volver al directorio raíz de nuestro sitio web. A continuación, para revisar el sitio web localmente escribimos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y, para mi sorpresa, recibimos el siguiente mensaje de error &lt;code&gt;Error: Unable to find theme Directory: C:\Hugo\gohugo-theme-ananke&lt;/code&gt;, hecho que debe ser el &lt;em&gt;karma&lt;/em&gt; haciendo acto de presencia por haberme desviado de las indicaciones de la guía oficial.&lt;/p&gt;
&lt;p&gt;Aunque no quería meterme en este artículo en el contenido del archivo &lt;code&gt;config.toml&lt;/code&gt;, para evitar ofrecer mucha información de golpe, solucionemos rápidamente este pequeño &lt;em&gt;bug&lt;/em&gt; para así poder revisar localmente el sitio web.&lt;/p&gt;
&lt;p&gt;Hacemos clic derecho sobre el mencionado fichero y lo abrimos con &lt;em&gt;Sublime Text&lt;/em&gt;. Modificamos la quinta línea que aparece, de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# themesDir = &amp;quot;../..&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y guardamos los cambios.&lt;/p&gt;
&lt;p&gt;Volvemos ahora a la terminal y tecleamos de nuevo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras recibir cierta información sobre el sitio, únicamente nos resta abrir nuestro navegador web favorito y en la barra de direcciones escribir &lt;code&gt;http://localhost:1313/&lt;/code&gt;, accediendo así a la página de bienvenida de nuestro sitio web, que luce así de bien:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-sitio-web-con-el-tema-ananke&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img03_hubbed8eeec85af9da71255570d12d6298_1066184_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Sitio web con el tema &amp;lt;em&amp;gt;Ananke&amp;lt;/em&amp;gt;&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/20180711-img03_hubbed8eeec85af9da71255570d12d6298_1066184_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1308&#34; height=&#34;620&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Sitio web con el tema &lt;em&gt;Ananke&lt;/em&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Es el momento de navegar por la página, estudiar si nos complace estéticamente y comprobar si la manera en la que se organizan los contenidos es la apropiada para el sitio web que teníamos en mente. Cuando hayamos terminado el paseo, volvemos a la terminal y cerramos el servidor local utilizando la combinación de teclas &lt;code&gt;Ctrl + C&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el próximo artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos, ahora sí y con mucho más detalle, la configuración básica del sitio web, que reside en el fichero &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando Sublime Text para escribir en Markdown</title>
      <link>https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/</link>
      <pubDate>Tue, 10 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/</guid>
      <description>&lt;p&gt;En una 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;entrada publicada&lt;/a&gt; hace unos días, comenté que utilizo el editor de texto plano &lt;em&gt;Sublime Text 3&lt;/em&gt; como herramienta predeterminada para escribir documentos con &lt;em&gt;Markdown&lt;/em&gt;. Veamos cómo configurarlo para abordar tal empresa.&lt;/p&gt;
&lt;p&gt;Sinceramente, tal y como por defecto instalamos el mencionado programa, podríamos trabajar sin problema alguno con este lenguaje de marcado ligero, ya que únicamente requiere un editor de texto plano para su elaboración y posteriores modificaciones.&lt;/p&gt;
&lt;p&gt;No obstante, existe un paquete que mejora la experiencia de edición de manera considerable: &lt;code&gt;Markdown Editing&lt;/code&gt;. Al abrir cualquier fichero redactado utilizando el mencionado lenguaje de marcado, su contenido se centra en pantalla, facilitando así enormemente su lectura. Además, elementos como títulos, cursivas, negritas, enlaces o código quedan resaltados de forma muy agradable.&lt;/p&gt;
&lt;p&gt;Para muestra, un botón:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-sublime-text-3-y-markdown-editing-juntos&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/20180710-img01_huf97e26ce502f0452d8c82b1ca09100b4_33869_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;&amp;lt;em&amp;gt;Sublime Text 3&amp;lt;/em&amp;gt; y &amp;lt;em&amp;gt;Markdown Editing&amp;lt;/em&amp;gt; juntos.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/20180710-img01_huf97e26ce502f0452d8c82b1ca09100b4_33869_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;808&#34; height=&#34;446&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    &lt;em&gt;Sublime Text 3&lt;/em&gt; y &lt;em&gt;Markdown Editing&lt;/em&gt; juntos.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Si a todo ello le añadimos el modo sin distracciones que incorpora &lt;em&gt;Sublime Text 3&lt;/em&gt;, al que se accede mediante la combinación de teclas &lt;code&gt;Shift + F11&lt;/code&gt;, el resultado es una cómoda herramienta que permite generar documentos con &lt;em&gt;Markdown&lt;/em&gt; eficientemente.&lt;/p&gt;
&lt;p&gt;El procedimiento a seguir es el habitual a la hora de incorporar un nuevo paquete a &lt;em&gt;Sublime Text 3&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Si todavía no tenemos el complemento que permite instalar paquetes fácilmente, abrimos 
&lt;a href=&#34;https://packagecontrol.io/installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt; y copiamos el bloque de instrucciones que figura en el cuadro asociado a la versión de &lt;em&gt;Sublime Text&lt;/em&gt; que utilicemos (a día de hoy, seguramente, será la 3).&lt;/li&gt;
&lt;li&gt;Abrimos la consola de &lt;em&gt;Sublime Text 3&lt;/em&gt;, haciendo clic en el apartado &lt;code&gt;Show Console&lt;/code&gt; del menú &lt;code&gt;View&lt;/code&gt; (o utilizando su atajo de teclado asociado). En la ventana que aparece dentro del editor, pegamos el texto copiado durante el primer paso y pulsamos enter.&lt;/li&gt;
&lt;li&gt;Hacemos uso ahora del atajo de teclado &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; y empezamos a escribir &lt;code&gt;install&lt;/code&gt;, hasta que quede resaltada la opción &lt;code&gt;Package Control: Install Package&lt;/code&gt; y después pulsamos enter.&lt;/li&gt;
&lt;li&gt;A continuación, comenzamos a escribir &lt;code&gt;markdown&lt;/code&gt; y utilizamos los cursores para seleccionar el paquete &lt;code&gt;MarkdownEditing&lt;/code&gt;, pulsando de nuevo enter una vez lo hayamos conseguido.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;De esta forma, basta ahora con que abramos en &lt;em&gt;Sublime Text 3&lt;/em&gt; cualquier archivo escrito con &lt;em&gt;Markdown&lt;/em&gt; y experimentaremos los cambios estéticos que comentaba al principio de este artículo.&lt;/p&gt;
&lt;p&gt;Personalmente, el esquema de colores que este paquete incorpora por defecto no me hace excesiva ilusión, acostumbrado como estoy a &lt;em&gt;Monokai&lt;/em&gt;. Sin embargo, podemos seleccionar un tema oscuro desde el menú &lt;code&gt;Preferences&lt;/code&gt;, apartado &lt;code&gt;Package Settings&lt;/code&gt;, subapartado &lt;code&gt;Markdown Editing&lt;/code&gt;, accediendo a &lt;code&gt;Change color scheme...&lt;/code&gt; y escogiendo la opción &lt;code&gt;Dark&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, por si fuera de interés, me gustaría destacar que también existen diversos paquetes que ofrecen la opción de previsualizar el documento que estamos redactando y refrescar el resultado cuando llevamos a cabo cualquier tipo de edición en él. No he entrado en detalles sobre ellos en este artículo simplemente porque utilizo un método diferente para llevar a cabo las mencionadas acciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instalando Hugo en Windows</title>
      <link>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</link>
      <pubDate>Sun, 08 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/</guid>
      <description>&lt;p&gt;Llevar a cabo la instalación de &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt; es extremadamente fácil, hecho que nos permite empezar a experimentar con esta tecnología en apenas unos minutos. Veamos, sin más dilación, todo el proceso en detalle.&lt;/p&gt;
&lt;p&gt;Así pues, en este segundo artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, retomaremos la senda en el lugar que nos quedamos al finalizar la 
&lt;a href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/&#34;&gt;primera entrada&lt;/a&gt;. Recuerdo que, en ella, instalamos un par de útiles herramientas en nuestro equipo (&lt;em&gt;git&lt;/em&gt; y &lt;em&gt;Sublime Text 3&lt;/em&gt;) y nos creamos una cuenta en el portal &lt;em&gt;GitHub&lt;/em&gt;, que será donde alojemos tanto el código fuente de nuestros futuros sitios web, como los propios sitios web en sí.&lt;/p&gt;
&lt;p&gt;En la documentación oficial de &lt;em&gt;Hugo&lt;/em&gt;, existe una extensa página dedicada a su instalación, con una sección que orienta específicamente a los usuarios de &lt;em&gt;Windows&lt;/em&gt; y a la que podemos acceder directamente a través de 
&lt;a href=&#34;https://gohugo.io/getting-started/installing#windows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Los desarrolladores han intentado que la experiencia de instalación sea muy intuitiva, pero, en mi opinión, alguna de las indicaciones puede no ser coherente con la estructura de archivos y carpetas que hayamos decidido implementar en nuestros equipos. ¿A qué se debe esta afirmación? Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hugo&lt;/em&gt; no deja de ser simplemente un programa, por lo que en lugar de instalarlo donde indica la guía, quizá sería mejor opción ubicarlo en la carpeta &lt;code&gt;Archivos de programa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Nos señalan, en la menciona guía, un directorio muy específico donde almacenar nuestros sitios web. No obstante, aunque vayamos a utilizar la pareja &lt;em&gt;git&lt;/em&gt; + &lt;em&gt;GitHub&lt;/em&gt;, es posible que nos interese, además, utilizar un servicio de alojamiento de archivos y, por tanto, ubicar las páginas en otra ruta diferente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simplemente lo comento para que quede claro que las instrucciones que, a continuación, compartiré admiten cierta flexibilidad a la hora de llevarlas a cabo. Dicho esto, sin más preámbulos, veamos cómo instalar &lt;em&gt;Hugo&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En primer lugar, bien desde la terminal, bien desde el explorador de archivos de &lt;em&gt;Windows&lt;/em&gt;, creamos en el directorio raíz de nuestro disco duro (generalmente &lt;code&gt;C:\&lt;/code&gt;) una carpeta denominada &lt;code&gt;Hugo&lt;/code&gt;. En su interior engendramos otras dos carpetas: &lt;code&gt;bin&lt;/code&gt;, donde almacenaremos la aplicación, y &lt;code&gt;Sites&lt;/code&gt;, donde ubicaremos nuestros futuros sitios web. Al final, debemos tener disponibles las siguientes dos rutas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\bin\&lt;/code&gt;, y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Hugo\Sites\&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ir acostumbrándonos al uso de la terminal &lt;em&gt;Git Bash&lt;/em&gt;, todo el anterior proceso lo podíamos haber conseguido escribiendo en ella la siguiente serie de comandos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd c:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir Hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir bin Sites
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, abrimos la página de descarga de &lt;em&gt;Hugo&lt;/em&gt; siguiendo 
&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt;. A la hora de escribir estas líneas, la versión más reciente es la etiquetada como &lt;code&gt;v0.42.2&lt;/code&gt;. Ahora, desplazamos con cuidado hacia abajo el extenso listado de ficheros, hasta dar con el adecuado para nuestro sistema operativo (en mi caso es &lt;code&gt;hugo_0.42.2_Windows-64bit.zip&lt;/code&gt;). Hacemos clic sobre él e inmediatamente comenzará la descarga a nuestro disco duro de un archivo comprimido.&lt;/p&gt;
&lt;p&gt;Acto seguido, descomprimimos el contenido de dicho archivo en la ruta &lt;code&gt;C:\Hugo\bin\&lt;/code&gt; (o donde hayamos decidido que sería un buen sitio para almacenar la aplicación) y borramos el fichero que hemos descargado, pues no vamos a necesitarlo en un futuro próximo.&lt;/p&gt;
&lt;p&gt;De esta manera, si desde la terminal nos desplazamos hasta la anterior ruta y escribimos &lt;code&gt;hugo version&lt;/code&gt;, recibiremos el siguiente mensaje &lt;code&gt;Hugo Static Site Generator v0.42.2 windows/amd64 BuildDate: 2018-06-28T12:36:53Z&lt;/code&gt;, que indica que hemos llevado a cabo la instalación con éxito.&lt;/p&gt;
&lt;p&gt;No obstante, rápidamente vamos a encontrar un pequeño inconveniente a la hora de empezar a experimentar con &lt;em&gt;Hugo&lt;/em&gt;. Si escribimos &lt;code&gt;hugo version&lt;/code&gt; en cualquier otra ruta distinta a la indicada arriba, recibiremos en la terminal un mensaje de error como este: &lt;code&gt;bash: hugo: command not found&lt;/code&gt;. Dado que nuestra intención es poder utilizar la aplicación en cualquier ruta de nuestro disco duro, tenemos que añadir la ubicación de &lt;em&gt;Hugo&lt;/em&gt; al &lt;code&gt;PATH&lt;/code&gt; de &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cada versión de &lt;em&gt;Windows&lt;/em&gt; tiene una manera más o menos distinta y, en ocasiones, ciertamente enrevesada, de editar el &lt;code&gt;PATH&lt;/code&gt;. Para ello, en &lt;em&gt;Windows 10&lt;/em&gt;, comenzamos pulsando el botón de inicio y seleccionamos &lt;em&gt;Configuración&lt;/em&gt;, accediendo así a la siguiente ventana:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-configuración-de-windows&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img01_hu665c10f8107b51a386f42b56cf51077b_31771_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Configuración de &amp;lt;em&amp;gt;Windows&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img01_hu665c10f8107b51a386f42b56cf51077b_31771_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1299&#34; height=&#34;440&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Configuración de &lt;em&gt;Windows&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;En el cuadro de búsqueda escribimos &amp;ldquo;configuración avanzada&amp;rdquo; y seleccionamos la opción &lt;em&gt;Ver la configuración avanzada del sistema&lt;/em&gt;, tal y como figura en la siguiente imagen:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-ilustración-del-cuadro-de-búsqueda&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img02_hub5ff0f1265d15f8d7c497fc5ed9fdbb9_10941_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ilustración del cuadro de búsqueda.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img02_hub5ff0f1265d15f8d7c497fc5ed9fdbb9_10941_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;336&#34; height=&#34;207&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ilustración del cuadro de búsqueda.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Apareciendo así esta ventana:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-ventana-de-configuración-avanzada-del-sistema&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img03_hu5108484132bb84ab2537f3ca577ecb5c_17135_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ventana de configuración avanzada del sistema.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img03_hu5108484132bb84ab2537f3ca577ecb5c_17135_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;412&#34; height=&#34;485&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ventana de configuración avanzada del sistema.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Hacemos clic en el botón &lt;em&gt;Variables de entorno&amp;hellip;&lt;/em&gt;, surgiendo entonces una nueva ventana. En ella seleccionamos la fila del primer cuadro denominada &lt;em&gt;Path&lt;/em&gt; y pulsamos el botón &lt;em&gt;Editar&amp;hellip;&lt;/em&gt;, que aparece justo debajo de dicho cuadro.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-ventana-de-variables-de-entorno&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img04_hub4335b29875d51beedfcb999e070bc9d_27097_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Ventana de variables de entorno.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/20180708-img04_hub4335b29875d51beedfcb999e070bc9d_27097_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;616&#34; height=&#34;584&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ventana de variables de entorno.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Surge, cual capricho de un diabólico destino que parece que quiere poner nuestro temple a prueba, otra nueva ventana (ya por fin la última), donde tenemos que hacer clic sobre el botón &lt;em&gt;Nuevo&lt;/em&gt; y escribir &lt;code&gt;C:\Hugo\bin\&lt;/code&gt;. Finalmente, solo nos resta ir pulsando sobre el botón &lt;em&gt;Aceptar&lt;/em&gt; sucesivas veces, hasta cerrar por completo la ristra de ventanas precedentes que en unos segundos hemos acumulado.&lt;/p&gt;
&lt;p&gt;Así, si en cualquier ruta del sistema ahora tecleamos en la terminal &lt;code&gt;hugo version&lt;/code&gt;, no aparecerá el anterior mensaje de comando desconocido, sino la versión de la aplicación instalada, tal y como pretendíamos.&lt;/p&gt;
&lt;p&gt;En el próximo artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt; exploraremos el proceso de creación de un sitio web utilizando &lt;em&gt;Hugo&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre el corrector de Sublime Text</title>
      <link>https://imalexissaez.github.io/2018/07/06/sobre-el-corrector-de-sublime-text/</link>
      <pubDate>Fri, 06 Jul 2018 07:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/06/sobre-el-corrector-de-sublime-text/</guid>
      <description>&lt;p&gt;Si nos decidimos a utilizar este editor de texto plano para escribir en español, ¿tenemos entonces que prescindir sin remedio del uso del corrector ortográfico? ¡En absoluto! Veamos cómo configurar esta característica fácilmente.&lt;/p&gt;
&lt;p&gt;En la instalación por defecto de &lt;em&gt;Sublime Text 3&lt;/em&gt;, el mencionado corrector ortográfico únicamente tiene a su disposición dos listados de palabras, asociados estos a los idiomas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inglés británico, e&lt;/li&gt;
&lt;li&gt;inglés estadounidense (o &amp;lsquo;&amp;lsquo;americano&amp;rsquo;&#39;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comúnmente conocidos también como &lt;em&gt;diccionarios&lt;/em&gt; (aunque no se incluyan los significados para las palabras contenidas en este tipo de listados nombrado), podemos seleccionar cualquiera de ellos a través del menú &lt;code&gt;View&lt;/code&gt;, dentro del apartado &lt;code&gt;Dictionary&lt;/code&gt;, y luego activar el modo de corrección ortográfica sin más que pulsar la tecla &lt;code&gt;F6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En apenas unos minutos podemos ampliar el número de listado de palabras siguiendo esta serie de pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Desde nuestro navegador habitual, acudimos a 
&lt;a href=&#34;https://github.com/titoBouzout/Dictionaries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este repositorio&lt;/a&gt; de &lt;em&gt;GitHub&lt;/em&gt;, donde encontraremos un extenso listado de diccionarios disponibles.&lt;/li&gt;
&lt;li&gt;Cada idioma tiene tres archivos asociados, con las extensiones &lt;code&gt;.aff&lt;/code&gt;, &lt;code&gt;.dic&lt;/code&gt; y &lt;code&gt;.txt&lt;/code&gt;. Por ejemplo, si nos interesa que el corrector ortográfico de &lt;em&gt;Sublime Text 3&lt;/em&gt; sea capaz de utilizar un listado de palabras en español, los correspondientes ficheros que hemos de descargar serán: &lt;code&gt;Spanish.aff&lt;/code&gt;, &lt;code&gt;Spanish.dic&lt;/code&gt; y &lt;code&gt;Spanish.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si no vamos a clonar el repositorio a nuestro equipo y pretendemos bajar directamente los archivos desde &lt;em&gt;GitHub&lt;/em&gt;, debemos tener cierto cuidado a la hora de hacerlo. No hay que utilizar la cásica estrategia de clic derecho y &amp;ldquo;Guardar enlace como&amp;hellip;&amp;rdquo; sobre los enlaces que aparecen en el listado del repositorio, puesto que descargaríamos tres archivos en formato &lt;code&gt;.html&lt;/code&gt;. Una posible manera de proceder sería abrir cada uno de los enlaces de interés en una nueva pestaña y emplear entonces la estrategia de clic derecho y &amp;ldquo;Guardar enlace como&amp;hellip;&amp;rdquo; sobre el botón &lt;code&gt;Raw&lt;/code&gt; que aparece en la parte superior derecha.&lt;/li&gt;
&lt;li&gt;Una vez tenemos en nuestro haber los tres archivos asociados al idioma que nos interesa, acudiremos a la carpeta &lt;code&gt;Packages&lt;/code&gt; de &lt;em&gt;Sublime Text 3&lt;/em&gt;, cuya ruta podemos encontrar a través del menú &lt;code&gt;Preferences&lt;/code&gt;, pulsando sobre el apartado &lt;code&gt;Browse Packages...&lt;/code&gt;. En tal localización crearemos un directorio llamado &lt;code&gt;Language - Spanish&lt;/code&gt; y ubicaremos ahí los mencionados tres ficheros.&lt;/li&gt;
&lt;li&gt;Si ahora volvemos al apartado &lt;code&gt;Dictionary&lt;/code&gt; del menú &lt;code&gt;View&lt;/code&gt;, comprobaremos que podemos navegar por dos subapartados: uno asociado a los diccionarios para la lengua inglesa y otro para el correspondiente al idioma español. Seleccionamos este último y pulsamos la tecla &lt;code&gt;F6&lt;/code&gt;, activando así el corrector ortográfico de &lt;em&gt;Sublime Text 3&lt;/em&gt; en dicho idioma.&lt;/li&gt;
&lt;li&gt;Los pasos 3 y 4 podemos repetirlos tantas veces como necesitemos en función del distinto número de diccionarios que estimemos que vayamos a emplear. El proceso que seguir es siempre el indicado, con los correspondientes cambios lógicos que cada nuevo idioma incorpora al procedimiento.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dejo pendiente para una futura entrada explicar cómo he configurado &lt;em&gt;Sublime Text 3&lt;/em&gt; para convertirlo en un más que agradable editor de texto plano orientado a trabajar con documentos de tipo &lt;em&gt;markdown&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparando el equipo para Hugo</title>
      <link>https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/</link>
      <pubDate>Thu, 05 Jul 2018 05:59:39 +0200</pubDate>
      <guid>https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/</guid>
      <description>&lt;p&gt;Antes de lanzarnos, sin más, a generar sitios web con &lt;em&gt;Hugo&lt;/em&gt;, conviene que instalemos una serie de herramientas que nos facilitarán la vida: un sistema de control de versiones (&lt;em&gt;Git&lt;/em&gt; + &lt;em&gt;GitHub&lt;/em&gt;) y un editor de texto plano (&lt;em&gt;Sublime Text 3&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Tal es el propósito de esta primera entrada del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, que consistirá en una serie de artículos que documentarán todo el proceso de instalación de &lt;em&gt;Hugo&lt;/em&gt;, el de la creación del propio sitio web empleando dicho generador y el de la personalización de la plantilla que actualmente estoy utilizando: 
&lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beautiful Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1-git&#34;&gt;1. Git&lt;/h2&gt;
&lt;p&gt;El sistema de control de versiones al que personalmente estoy acostumbrado es &lt;em&gt;Git&lt;/em&gt;, en cuya 
&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;web oficial&lt;/a&gt; podemos encontrar una impresionante cantidad de información de interés. Si es la primera vez que escuchas hablar de &lt;em&gt;Git&lt;/em&gt; o, en general, de los sistemas de control de versiones, quizá te resulte útil echar un vistazo a su 
&lt;a href=&#34;https://try.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-página-oficial-de-git&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img01_hu26e01165c4e62314b852e5902508d4ad_213638_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Página oficial de &amp;lt;em&amp;gt;Git&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img01_hu26e01165c4e62314b852e5902508d4ad_213638_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;952&#34; height=&#34;622&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Página oficial de &lt;em&gt;Git&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;La instalación de &lt;em&gt;Git&lt;/em&gt; en &lt;em&gt;Windows&lt;/em&gt; no podría ser más sencilla. Hacemos clic en 
&lt;a href=&#34;https://git-scm.com/download/win&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt; y automáticamente se descargará la versión más reciente de &lt;em&gt;Git&lt;/em&gt; (&lt;code&gt;2.18.0&lt;/code&gt; a la hora de escribir estas líneas).&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-página-de-descarga-de-git&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img02_hua009ff10b1a2c2403616bc9890bcad89_122588_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Página de descarga de &amp;lt;em&amp;gt;Git&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img02_hua009ff10b1a2c2403616bc9890bcad89_122588_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;951&#34; height=&#34;623&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Página de descarga de &lt;em&gt;Git&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Una vez se haya completado la descarga, ejecutamos el archivo e instalamos el programa. Durante el proceso de instalación tenemos que escoger en varios momentos entre distintas opciones. A este respecto, he de comentar que las que vienen marcadas por defecto me parecen adecuadas para una primera toma de contacto con &lt;em&gt;Git&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Al completar la instalación tenemos, además, acceso a una terminal de sistema, &lt;em&gt;Git Bash&lt;/em&gt;, que personalmente es la que utilizo. Si bien es cierto que tenemos que emplear algunos comandos distintos a los podemos encontrar en la que por defecto acompaña a &lt;em&gt;Windows&lt;/em&gt;, es fácil llevar a cabo la transición de una terminal a otra (puede resultar de ayuda este 
&lt;a href=&#34;https://ss64.com/bash/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;listado de comandos&lt;/a&gt;).&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-la-terminal-git-bash-en-acción&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img03_hu3d73aaac25c1a8702c1324ead4fa59cb_4715_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;La terminal &amp;lt;em&amp;gt;Git Bash&amp;lt;/em&amp;gt; en acción.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img03_hu3d73aaac25c1a8702c1324ead4fa59cb_4715_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;580&#34; height=&#34;370&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    La terminal &lt;em&gt;Git Bash&lt;/em&gt; en acción.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;2-github&#34;&gt;2. GitHub&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;GitHub&lt;/em&gt; es una plataforma de desarrollo colaborativo utilizada para almacenar proyectos empleando el sistema de control de versiones &lt;em&gt;Git&lt;/em&gt;. Podemos encontrar más información en su 
&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;web oficial&lt;/a&gt;. Al igual que antes, si es la primera vez que accedes a esta plataforma, convendría que le dedicases unos minutos al tutorial &lt;em&gt;Hello World&lt;/em&gt;, disponible en 
&lt;a href=&#34;https://guides.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Utilizaremos este portal para subir los archivos fuente que permitirán generar el sitio web, así como para alojar el propio sitio web en sí. Únicamente necesitaremos crear una cuenta de usuario para ello.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-página-oficial-de-github&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img04_hu37f94c9f4fe68869fe22521b7369ac32_39377_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Página oficial de &amp;lt;em&amp;gt;GitHub&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img04_hu37f94c9f4fe68869fe22521b7369ac32_39377_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1010&#34; height=&#34;484&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Página oficial de &lt;em&gt;GitHub&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;3-sublime-text-3&#34;&gt;3. Sublime Text 3&lt;/h2&gt;
&lt;p&gt;El dicho &amp;ldquo;Para gustos los colores&amp;rdquo; tendría en este apartado la versión &amp;ldquo;Para gustos los editores de texto plano&amp;rdquo;. En mi caso, los proyectos de programación que he realizado y todo el trabajo con generadores de web estáticas los he llevado a cabo, tanto con el antiguo &lt;em&gt;Sublime Text 2&lt;/em&gt;, como con su más reciente versión: &lt;em&gt;Sublime Text 3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este editor de texto plano es bastante potente, rápido y la comunidad puede extender sus funcionalidades a través de paquetes. Además, su versión &amp;lsquo;&amp;lsquo;de prueba&amp;rsquo;&amp;rsquo; te permite utilizar la herramienta sin restricción alguna durante un período de tiempo ilimitado, con la única pega de aparecer un mensaje cada 20 o 30 veces que salvemos cualquier archivo y que te invita a comprar una licencia.&lt;/p&gt;
&lt;p&gt;Nos podemos hacer con él a través de 
&lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;este enlace&lt;/a&gt;. Su proceso de instalación es similar&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-página-de-descarga-de-sublime-text-3&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img05_hu883b8f36d1a6d1aeebb7068dd1868571_31832_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Página de descarga de &amp;lt;em&amp;gt;Sublime Text 3&amp;lt;/em&amp;gt;.&#34;&gt;


  &lt;img data-src=&#34;https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/20180705-img05_hu883b8f36d1a6d1aeebb7068dd1868571_31832_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;822&#34; height=&#34;427&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Página de descarga de &lt;em&gt;Sublime Text 3&lt;/em&gt;.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Además de cumplir de manera excelente sus labores a la hora de editar cualquier archivo de texto plano, &lt;em&gt;Sublime Text 3&lt;/em&gt; me encanta como herramienta para trabajar con archivos de tipo &lt;em&gt;markdown&lt;/em&gt;, que será el formato que vamos a emplear para redactar el contenido de nuestro sitio web. En un futuro no muy lejano tengo pensado escribir un artículo explicando cómo llevar a cabo la configuración de este programa para lidiar de forma agradable con dicho tipo de ficheros.&lt;/p&gt;
&lt;p&gt;Y hasta aquí el primer artículo del 
&lt;a href=&#34;https://imalexissaez.github.io/proyecto/metablog/&#34;&gt;Proyecto Metablog&lt;/a&gt;, que deja nuestros equipos a punto para proceder a la instalación de &lt;em&gt;Hugo&lt;/em&gt; y generar un sitio web.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
