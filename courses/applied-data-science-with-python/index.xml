<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Presentación on Infinitos Contrastes</title>
    <link>https://imalexissaez.github.io/courses/applied-data-science-with-python/</link>
    <description>Recent content in Presentación on Infinitos Contrastes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Alexis Sáez &amp;copy;{year}</copyright>
    <lastBuildDate>Tue, 28 May 2019 00:01:00 +0000</lastBuildDate>
    
	    <atom:link href="https://imalexissaez.github.io/courses/applied-data-science-with-python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Módulo 1</title>
      <link>https://imalexissaez.github.io/courses/applied-data-science-with-python/curso1-modulo1/</link>
      <pubDate>Tue, 28 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/applied-data-science-with-python/curso1-modulo1/</guid>
      <description>

&lt;h2 id=&#34;section-1&#34;&gt;1. Introducción a la especialización&lt;/h2&gt;

&lt;p&gt;La dificultad de la presente &lt;a href=&#34;https://www.coursera.org/specializations/data-science-python&#34; target=&#34;_blank&#34;&gt;especialización&lt;/a&gt; está catalogada como de nivel intermedio, ya que requiere que poseamos cierta familiaridad con algunos conceptos de programación (en &lt;em&gt;Python&lt;/em&gt; fundamentalmente) y estadística. No obstante, siempre podemos optar por complementar los cinco cursos con los materiales necesarios que nos permitan seguir el ritmo de las explicaciones (documentación, tutoriales, libros&amp;hellip;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; ha sido el lenguaje de programación escogido porque:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;es fácil de aprender, destacando por la gran legibilidad de su código;&lt;/li&gt;
&lt;li&gt;cuenta con cientos de librerías disponibles para desarrollar las tareas más diversas; y&lt;/li&gt;
&lt;li&gt;posee potentes módulos para trabajar en las tareas propias de la &lt;em&gt;Ciencia de Datos&lt;/em&gt; (el ecosistema &lt;em&gt;SciPy&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El primer curso de la especialización, &lt;a href=&#34;https://www.coursera.org/learn/python-data-analysis&#34; target=&#34;_blank&#34;&gt;Introduction to Data Science in Python&lt;/a&gt;, está compuesto por los siguientes cuatro módulos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prerrequisitos de &lt;em&gt;Python&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;La librería &lt;em&gt;Pandas&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Consultas (&amp;rdquo;&lt;em&gt;querying&lt;/em&gt;&amp;rdquo;) y manipulaciones avanzadas con &lt;em&gt;Pandas&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Análisis estadísticos básicos con &lt;em&gt;NumPy&lt;/em&gt; y &lt;em&gt;SciPy&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2&#34;&gt;2. Ciencia de datos&lt;/h2&gt;

&lt;p&gt;La popularidad de la &lt;em&gt;Ciencia de Datos&lt;/em&gt; ha crecido de manera exponencial, hecho que podemos confirmar experimentalmente nosotros mismos si acudimos a la web de &lt;em&gt;Google Trends&lt;/em&gt; y buscamos el término &amp;ldquo;&lt;em&gt;data science&lt;/em&gt;&amp;rdquo;. Este interés queda justificado por la actual era de la información en la que vivimos, con compañías que utilizan de manera intensiva las diversas teorías de esta disciplina, como son &lt;em&gt;Google&lt;/em&gt;, &lt;em&gt;Facebook&lt;/em&gt;, &lt;em&gt;Netflix&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;La &lt;em&gt;Ciencia de Datos&lt;/em&gt; se describe habitualmente, de manera gráfica, mediante el &lt;a href=&#34;https://static1.squarespace.com/static/5150aec6e4b0e340ec52710a/t/51525c33e4b0b3e0d10f77ab/1364352052403/Data_Science_VD.png?format=750w&#34; target=&#34;_blank&#34;&gt;diagrama de Venn&lt;/a&gt; de &lt;em&gt;Drew Conway&lt;/em&gt;. No obstante, conceptos como &amp;ldquo;escepticismo&amp;rdquo;, &amp;ldquo;experimentación&amp;rdquo;, &amp;ldquo;simulación&amp;rdquo; o &amp;ldquo;replicación&amp;rdquo;, entre otros, también tienen cabida en esta disciplina. En esta misma línea, es recomendable la lectura del artículo &amp;ldquo;&lt;em&gt;50 years of Data Science&lt;/em&gt;&amp;rdquo; (&lt;a href=&#34;http://courses.csail.mit.edu/18.337/2015/docs/50YearsDataScience.pdf&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;), de la mano de &lt;em&gt;David Donoho&lt;/em&gt;, y en el cual figuran las siguientes seis etapas que componen un proyecto de &lt;em&gt;Ciencia de Datos&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Exploración y preparación de los datos.&lt;/li&gt;
&lt;li&gt;Representación y transformación de los datos.&lt;/li&gt;
&lt;li&gt;Cálculos utilizando los datos.&lt;/li&gt;
&lt;li&gt;Modelización de los datos.&lt;/li&gt;
&lt;li&gt;Visualización y presentación de los datos.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Ciencia&amp;rdquo; a través de la &lt;em&gt;Ciencia de Datos&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-3&#34;&gt;3. Uso de Jupyter en Coursera&lt;/h2&gt;

&lt;p&gt;Personalmente, como la especialización la seguiré en modo &amp;ldquo;&lt;em&gt;Audit&lt;/em&gt;&amp;rdquo;, mi objetivo es realizar las tareas, los ejercicios e incluso los cuestionarios localmente, en lugar de a través de las herramientas que ofrece &lt;em&gt;Coursera&lt;/em&gt; en la propia plataforma. Para ello, con miras a tener disponible el acceso a los distintos &lt;em&gt;notebooks&lt;/em&gt; de &lt;em&gt;Jupyter&lt;/em&gt;, he instalado en mi ordenador la última versión de &lt;em&gt;Anaconda&lt;/em&gt; (&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34;&gt;enlace&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;section-4&#34;&gt;4. Funciones en Python&lt;/h2&gt;

&lt;p&gt;Familiaricémonos un poco con los &lt;em&gt;notebooks&lt;/em&gt; de &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 1
y = 2
x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Los objetos declarados en una celda, permanecen disponibles para que trabajemos con ellos posteriormente como deseemos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refactoricemos el anterior código en una función que sume dos números:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar_numeros(x, y):
    return x + y

sumar_numeros(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: modifica la anterior función para que acepte tres parámetros, en lugar de dos, y devuelva la suma de todos ellos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar_numeros(x, y, z):
    return x + y + z

sumar_numeros(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así definida, la función &lt;code&gt;sumar_numeros()&lt;/code&gt; pierde la funcionalidad de sumar únicamente dos números, ya que &lt;em&gt;Python&lt;/em&gt; arrojaría un error si solo le pasamos el valor de dos argumentos. Podemos solventar esta situación si el tercer parámetro declarado, &lt;code&gt;z&lt;/code&gt;, queda como opcional.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: los parámetros opcionales de una función figuran siempre los últimos en la declaración de esta.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar_numeros(x, y, z=None):
    if z == None:
        return x + y
    else:
        return x + y + z
    
sumar_numeros(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sumar_numeros(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para imprimir múltiples valores, como resultado de una celda en un &lt;em&gt;notebook&lt;/em&gt; de &lt;em&gt;Jupyter&lt;/em&gt;, podemos recurrir a la función &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(sumar_numeros(2, 3))
print(sumar_numeros(2, 3, 4))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos asignar a variables los valores que una función devuelve.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar_numeros(x, y, z=None, flag=False):
    if flag:
        print(&amp;quot;El valor de flag es verdadero.&amp;quot;)
    if z == None:
        return x + y
    else:
        return x + y + z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = sumar_numeros(1, 2)
print(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b = sumar_numeros(1, 2, 3, True)
print(b)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;El valor de flag es verdadero.
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En ocasiones, puede resultarnos útil que, en la llamada a la función, aparezca el nombre de algunos de sus parámetros (o de todos ellos) junto con el valor asignado, puesto que aporta bastante legibilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c = sumar_numeros(x=1, y=2, z=3, flag=True)
print(c)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;El valor de flag es verdadero.
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: reescribe la siguiente función para que funcione de manera correcta. Esta función debería sumar dos números si el valor del parámetro &lt;code&gt;kind&lt;/code&gt; es &lt;code&gt;&amp;quot;add&amp;quot;&lt;/code&gt; o si este no se le suministra. En caso contrario, debe restar al primer número el segundo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def do_math(?, ?, ?):
  if (kind==&#39;add&#39;):
    return a+b
  else:
    return a-b

do_math(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def do_math(a, b, kind=&amp;quot;add&amp;quot;):
    if kind == &amp;quot;add&amp;quot;:
        return a + b
    else:
        return a - b

do_math(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-5&#34;&gt;5. Tipos y secuencias en Python&lt;/h2&gt;

&lt;h3 id=&#34;section-5-1&#34;&gt;5.1. La función type&lt;/h3&gt;

&lt;p&gt;Con la función &lt;code&gt;type()&lt;/code&gt; accedemos al tipo de un objeto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(&amp;quot;Esto es una cadena de texto.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(None)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;NoneType
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(3.141592)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(sumar_numeros)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Analicemos, a continuación, los tres tipos básicos de colecciones que &lt;em&gt;Python&lt;/em&gt; posee: tuplas, listas y diccionarios.&lt;/p&gt;

&lt;h3 id=&#34;section-5-2&#34;&gt;5.2. Tuplas y listas&lt;/h3&gt;

&lt;p&gt;Por lo que respecta a las tuplas, son objetos inmutables que escribimos entre paréntesis (aunque el uso de estos es opcional si suministramos una serie de objetos separados por comas).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = (1, &amp;quot;a&amp;quot;, True, 3.14)
type(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 1, &#39;a&#39;, True, 3.14
type(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: a la hora de declarar cadenas de texto, es indiferente utilizar comillas simples &lt;code&gt;&#39;&lt;/code&gt; o dobles &lt;code&gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Las listas, a diferencia de las tuplas, son mutables, es decir, está permitido modificar el valor de sus elementos, ampliarlas, reducirlas, etc. Para generar una, utilizamos los corchetes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [1, &amp;quot;a&amp;quot;, True, 3.14]
type(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos añadir elementos a la anterior lista utilizando el método &lt;code&gt;append()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x.append(&amp;quot;b&amp;quot;)
x.append(1.0)
print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, &#39;a&#39;, True, 3.14, &#39;b&#39;, 1.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tanto las listas como las tuplas son objetos iterables que podemos recorrer, por ejemplo, utilizando bucles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tupla = (1, &amp;quot;a&amp;quot;, 3.14, True)

for t in tupla:
    print(t)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
a
3.14
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista = [2, 2.0, False, &amp;quot;b&amp;quot;]

for l in lista:
    print(l)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
2.0
False
b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, podemos acceder a los elementos de una tupla o lista a través de su índice, con el operador &lt;code&gt;[]&lt;/code&gt; (que viene a ser un atajo para un método &lt;code&gt;get()&lt;/code&gt; que posee un objeto de tipo &lt;code&gt;tuple&lt;/code&gt; o &lt;code&gt;list&lt;/code&gt;). Recordemos aquí que &lt;em&gt;Python&lt;/em&gt; comienza a contar índices en cero y que cuando utilizamos números negativos, empezamos desde el último elemento de la colección hacia atrás.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tupla[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista[-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A través de este operador, podemos reformular el anterior bucle de tipo &lt;code&gt;for&lt;/code&gt; como uno de tipo &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;i = 0

while i != len(tupla):
    print(tupla[i])
    i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
a
3.14
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos realizar &amp;ldquo;operaciones matemáticas&amp;rdquo; sobre ambos tipos de objetos. Por ejemplo,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; concatena.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; repite.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(1, 2) + (3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(1, 2) * 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 1, 2, 1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[3, False] + [&amp;quot;a&amp;quot;, 1.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, False, &#39;a&#39;, 1.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[3.14] * 4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3.14, 3.14, 3.14, 3.14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;in&lt;/code&gt; (y su contrapartida &lt;code&gt;not in&lt;/code&gt;) es de suma utilidad, pues revisa si un elemento pertenece o no a una colección en concreto.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tupla
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, &#39;a&#39;, 3.14, True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Hola&amp;quot; in tupla
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;a&amp;quot; in tupla
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 2.0, False, &#39;b&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2.71 not in lista
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;b&amp;quot; not in lista
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt;, el operador &lt;code&gt;[]&lt;/code&gt; puede devolver múltiples valores (técnica que habitualmente se conoce en inglés como &lt;em&gt;slicing&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Como una cadena de texto, en &lt;em&gt;Python&lt;/em&gt;, no es más que una lista de caracteres, veamos en acción esta técnica con un sencillo ejemplo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto = &amp;quot;Esto es un texto de prueba.&amp;quot;

print(texto[0])  # Primer carácter
print(texto[0:1])  # Primer carácter
print(texto[5:10])  # Desde el quinto hasta el décimo, sin llegar a él.
print(texto[4:])  # Desde el cuarto en adelante.
print(texto[:4])  # Desde el principio hasta el cuarto, sin llegar a él.
print(texto[0:15:2])  # Desde el principio hasta el 15, sin llegar a él y de dos en dos.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E
E
es un
 es un texto de prueba.
Esto
Et su et
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(texto[-4:-2])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;eb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La técnica de &lt;em&gt;slicing&lt;/em&gt; es básica a la hora de trabajar con matrices o tablas de datos, como veremos en futuras lecciones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: ¿cuál es la instrucción adecuada para extraer la palabra &lt;code&gt;Christopher&lt;/code&gt; de la cadena de texto declarada en la variable &lt;code&gt;x&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = &#39;Dr. Christopher Brooks&#39;

print(x[???])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = &#39;Dr. Christopher Brooks&#39;

print(x[4:15])
print(x[-18:-7])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Christopher
Christopher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como hemos dicho, las cadenas de texto no son más que listas de caracteres, por lo que aquellas operaciones que podemos realizar sobre estas últimas están también disponibles sobre las primeras.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = &amp;quot;Alexis&amp;quot;
apellido = &amp;quot;Sáez&amp;quot;

print(nombre + &amp;quot; &amp;quot; + apellido)
print(nombre * 4)
print(&amp;quot;exi&amp;quot; in nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis Sáez
AlexisAlexisAlexisAlexis
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;split()&lt;/code&gt; separa una cadena de texto en subcadenas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = &amp;quot;Alexis Sáez&amp;quot;.split(&#39; &#39;)[0]
apellido = &amp;quot;Alexis Sáez&amp;quot;.split(&#39; &#39;)[-1]
print(nombre)
print(apellido)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis
Sáez
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de prestar atención a los tipos de los objetos cuando estamos realizando operaciones aritméticas con ellos, puesto que algunas combinaciones no están permitidas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Alexis&amp;quot; + 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-42-599373231bbc&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &amp;quot;Alexis&amp;quot; + 2


TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Alexis&amp;quot; + str(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Alexis2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-5-3&#34;&gt;5.3. Diccionarios&lt;/h3&gt;

&lt;p&gt;Examinemos, finalmente, los diccionarios, que son colecciones no ordenadas de elementos etiquetados, que siguen la sintaxis &lt;code&gt;key : value&lt;/code&gt;. Si para las tuplas utilizamos paréntesis y para las lista corchetes, los diccionarios se generan a partir de llaves.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mails = {&amp;quot;Alexis Sáez&amp;quot;: &amp;quot;ejemplo1@gmail.com&amp;quot;,
         &amp;quot;Ana Pérez&amp;quot;: &amp;quot;ejemplo2@gmail.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mails[&amp;quot;Alexis Sáez&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;ejemplo1@gmail.com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos añadir elementos a un diccionario utilizando la técnica de &lt;code&gt;key = value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mails[&amp;quot;Juan Garcia&amp;quot;] = &amp;quot;ejemplo3@gmail.com&amp;quot;
mails[&amp;quot;Irene Martínez&amp;quot;] = None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Los diccionarios son elementos iterables que podemos recorrer de diversas formas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for nombre in mails:
    print(nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis Sáez
Ana Pérez
Juan Garcia
Irene Martínez
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for nombre in mails.keys():
    print(nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis Sáez
Ana Pérez
Juan Garcia
Irene Martínez
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for nombre in mails:
    print(mails[nombre])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ejemplo1@gmail.com
ejemplo2@gmail.com
ejemplo3@gmail.com
None
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for mail in mails.values():
    print(mail)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ejemplo1@gmail.com
ejemplo2@gmail.com
ejemplo3@gmail.com
None
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for nombre, mail in mails.items():  # Itera sobre keys y values a la vez.
    print(&amp;quot;Nombre:&amp;quot;, nombre, &amp;quot;Mail:&amp;quot;, mail)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nombre: Alexis Sáez Mail: ejemplo1@gmail.com
Nombre: Ana Pérez Mail: ejemplo2@gmail.com
Nombre: Juan Garcia Mail: ejemplo3@gmail.com
Nombre: Irene Martínez Mail: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este último ejemplo nos permite presentar una característica importante de &lt;em&gt;Python&lt;/em&gt;: el &lt;em&gt;unpacking&lt;/em&gt; (&amp;ldquo;desempaquetado&amp;rdquo;) de tuplas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datos = (&amp;quot;Alexis Sáez&amp;quot;, &amp;quot;ejemplo1@gmail.com&amp;quot;)

nombre, mail = datos

print(nombre)
print(mail)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis Sáez
ejemplo1@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de ser cautos, pues ha de coincidir la cantidad de variables con el total de elementos a &amp;ldquo;desempacar&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre, mail, tfno = datos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-53-472adc290c80&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 nombre, mail, tfno = datos


ValueError: not enough values to unpack (expected 3, got 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-6&#34;&gt;6. Cadenas de texto&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; 3, por defecto, utiliza el estándar de codificación &lt;a href=&#34;https://es.wikipedia.org/wiki/Unicode&#34; target=&#34;_blank&#34;&gt;Unicode&lt;/a&gt;, por lo que no encontraremos dificultades a la hora de trabajar con diversos tipos de caracteres (más allá incluso de los existentes en el alfabeto latino).&lt;/p&gt;

&lt;p&gt;Para evitar tener que envolver continuamente datos en la función &lt;code&gt;str()&lt;/code&gt;, de cara a generar cadenas de texto, conviene que utilicemos la combinación de &lt;em&gt;marcadores&lt;/em&gt; (conocidos como &lt;em&gt;placeholders&lt;/em&gt; en inglés), &lt;code&gt;{}&lt;/code&gt;, y el método &lt;code&gt;format()&lt;/code&gt; asociado a los objetos de tipo &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ventas = {&amp;quot;precio&amp;quot;: 3.14, 
          &amp;quot;num_objetos&amp;quot;: 5, 
          &amp;quot;nombre&amp;quot;: &amp;quot;Alexis&amp;quot;}

texto_factura = &amp;quot;{} compró {} objetos a {} euros cada unidad, ascendiendo el total a {} euros.&amp;quot;

print(texto_factura.format(ventas[&amp;quot;nombre&amp;quot;],
                           ventas[&amp;quot;num_objetos&amp;quot;],
                           ventas[&amp;quot;precio&amp;quot;],
                           ventas[&amp;quot;precio&amp;quot;] * ventas[&amp;quot;num_objetos&amp;quot;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis compró 5 objetos a 3.14 euros cada unidad, ascendiendo el total a 15.700000000000001 euros.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El método &lt;code&gt;format()&lt;/code&gt; permite casi una miríada de posibilidades de configuración, tal como reza en la &lt;a href=&#34;https://docs.python.org/3/library/string.html#format-string-syntax&#34; target=&#34;_blank&#34;&gt;página de documentación&lt;/a&gt; asociada.&lt;/p&gt;

&lt;h2 id=&#34;section-7&#34;&gt;7. Lectura de archivos CSV&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Los archivos CSV (del inglés comma-separated values) son un tipo de documento en formato abierto sencillo para representar datos en forma de tabla, en las que las columnas se separan por comas (o punto y coma en donde la coma es el separador decimal: Chile, Perú, Argentina, España, Brasil&amp;hellip;) y las filas por saltos de línea. (&lt;a href=&#34;https://es.wikipedia.org/wiki/Valores_separados_por_comas&#34; target=&#34;_blank&#34;&gt;Fuente&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para la lectura de este tipo de ficheros, utilizaremos la librería de &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;csv&lt;/code&gt;, que hemos de importar para poder tener acceso a las funciones contenidas en ella.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, y para lo que resta de módulo, establezcamos la precisión de los números de tipo &lt;code&gt;float&lt;/code&gt; a 2 en este &lt;em&gt;notebook&lt;/em&gt;. Para ello, tecleamos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%precision 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;%.2f&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este tipo de instrucciones, cuyo rango de aplicación únicamente comprende los &lt;em&gt;notebooks&lt;/em&gt; de &lt;em&gt;Jupyter&lt;/em&gt;, se conocen como &lt;em&gt;magic commands&lt;/em&gt; y su documentación asociada la podemos encontrar siguiendo &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/interactive/magics.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;. Por otro lado, nos resultará sumamente útil la lectura de &lt;a href=&#34;https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/&#34; target=&#34;_blank&#34;&gt;este artículo&lt;/a&gt; donde nos ofrecen consejos, atajos y orientaciones varias a la hora de trabajar con esta herramienta.&lt;/p&gt;

&lt;p&gt;Procedamos, pues, a la lectura del archivo &lt;code&gt;mpg.csv&lt;/code&gt; (ubicado en la carpeta &lt;code&gt;data&lt;/code&gt;), conviertiéndolo en una lista de diccionarios. Junto con el conjunto de datos &lt;em&gt;Iris&lt;/em&gt;, es uno de los ejemplos clásicos con los que se suele comenzar a trabajar, de manera práctica, en &lt;em&gt;Ciencia de Datos&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;data/mpg.csv&amp;quot;) as csvfile:
    mpg = list(csv.DictReader(csvfile))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpg[:3]  # Primeros tres diccionarios (es decir, coches)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[OrderedDict([(&#39;&#39;, &#39;1&#39;),
              (&#39;manufacturer&#39;, &#39;audi&#39;),
              (&#39;model&#39;, &#39;a4&#39;),
              (&#39;displ&#39;, &#39;1.8&#39;),
              (&#39;year&#39;, &#39;1999&#39;),
              (&#39;cyl&#39;, &#39;4&#39;),
              (&#39;trans&#39;, &#39;auto(l5)&#39;),
              (&#39;drv&#39;, &#39;f&#39;),
              (&#39;cty&#39;, &#39;18&#39;),
              (&#39;hwy&#39;, &#39;29&#39;),
              (&#39;fl&#39;, &#39;p&#39;),
              (&#39;class&#39;, &#39;compact&#39;)]),
 OrderedDict([(&#39;&#39;, &#39;2&#39;),
              (&#39;manufacturer&#39;, &#39;audi&#39;),
              (&#39;model&#39;, &#39;a4&#39;),
              (&#39;displ&#39;, &#39;1.8&#39;),
              (&#39;year&#39;, &#39;1999&#39;),
              (&#39;cyl&#39;, &#39;4&#39;),
              (&#39;trans&#39;, &#39;manual(m5)&#39;),
              (&#39;drv&#39;, &#39;f&#39;),
              (&#39;cty&#39;, &#39;21&#39;),
              (&#39;hwy&#39;, &#39;29&#39;),
              (&#39;fl&#39;, &#39;p&#39;),
              (&#39;class&#39;, &#39;compact&#39;)]),
 OrderedDict([(&#39;&#39;, &#39;3&#39;),
              (&#39;manufacturer&#39;, &#39;audi&#39;),
              (&#39;model&#39;, &#39;a4&#39;),
              (&#39;displ&#39;, &#39;2&#39;),
              (&#39;year&#39;, &#39;2008&#39;),
              (&#39;cyl&#39;, &#39;4&#39;),
              (&#39;trans&#39;, &#39;manual(m6)&#39;),
              (&#39;drv&#39;, &#39;f&#39;),
              (&#39;cty&#39;, &#39;20&#39;),
              (&#39;hwy&#39;, &#39;31&#39;),
              (&#39;fl&#39;, &#39;p&#39;),
              (&#39;class&#39;, &#39;compact&#39;)])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El archivo &lt;code&gt;mpg.csv&lt;/code&gt; contiene datos sobre el consumo de combustible de 234 coches, siendo las características registradas de estos las que se muestran a continuación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mpg&lt;/code&gt;: millas por galón.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: clasificación del coche.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cty&lt;/code&gt;: millas por galón en ciudad.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl&lt;/code&gt;: número de cilindros del coche.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;displ&lt;/code&gt;: desplazamiento del motor del coche en litros.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drv&lt;/code&gt;: tipo de tracción del coche (f = delantera, r = trasera, 4 = cuatro por cuatro).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fl&lt;/code&gt;: tipo de combustible del coche (e = etanol E85, d = diesel, r = regular, p = premium, c = CNG).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hwy&lt;/code&gt;: millas por galón en autopista.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manufacturer&lt;/code&gt;: fabricante del coche.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;: modelo del coche&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trans&lt;/code&gt;: tipo de transmisión del coche.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;year&lt;/code&gt;: año del modelo del coche.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(mpg)  # Total de coches
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;234
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, tenemos un diccionario por cada uno de los 234 coches existentes en el fichero &lt;code&gt;mpg.csv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, podemos acceder a las propiedades registradas a través del método &lt;code&gt;keys()&lt;/code&gt; del diccionario.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpg[0].keys()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;odict_keys([&#39;&#39;, &#39;manufacturer&#39;, &#39;model&#39;, &#39;displ&#39;, &#39;year&#39;, &#39;cyl&#39;, &#39;trans&#39;, &#39;drv&#39;, &#39;cty&#39;, &#39;hwy&#39;, &#39;fl&#39;, &#39;class&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calculemos el consumo medio de millas por galón en ciudad de todos los coches.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: todos los valores son cadenas de texto, por lo que hemos de ser cautos a la hora de utilizar operaciones aritméticas entre ellos. En esta ocasión, la función &lt;code&gt;float()&lt;/code&gt; resulta de gran utilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;consumo = 0

for coche in mpg:
    consumo += float(coche[&amp;quot;cty&amp;quot;])

media = consumo / len(mpg)

print(media)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;16.858974358974358
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior bloque de código puede ser expresado en una única línea gracias a las comprensiones de listas (&lt;em&gt;list comprehensions&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(float(coche[&amp;quot;cty&amp;quot;]) for coche in mpg) / len(mpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;16.86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para reforzar la anterior construcción, veamos el caso de la media de millas por galón en autopista, el código sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(float(coche[&amp;quot;hwy&amp;quot;]) for coche in mpg) / len(mpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;23.44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dado un galón de combustible, se recorren más millas en autopista que en ciudad, conclusión lógica desde el punto de vista del sentido común.&lt;/p&gt;

&lt;p&gt;A continuación, compliquemos un poco más las consultas que estamos realizando al conjunto de datos &lt;code&gt;mpg&lt;/code&gt;. Busquemos ahora el consumo medio de millas por galón en ciudad, pero desagregado en función del número de cilindros que posee un coche.&lt;/p&gt;

&lt;p&gt;En primer lugar, obtengamos un conjunto con los valores disponibles para el número de cilindros, para lo cual la función &lt;code&gt;set()&lt;/code&gt; resulta de gran ayuda.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cilindros = set(coche[&amp;quot;cyl&amp;quot;] for coche in mpg)
cilindros
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;8&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, tenemos coches en nuestro conjunto de datos con 4, 5, 6 u 8 cilindros.&lt;/p&gt;

&lt;p&gt;Ahora, almacenemos en una lista las cuatro medias que nos interesan. Para cada valor del conjunto de cilindros, recorreremos el conjunto de diccionarios y, en caso de coincidir el valor de un coche con el de interés, procederemos a realizar los cálculos oportunos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpg_cty_cilindro = []

for cilindro in cilindros:  # Iteramos sobre los distintos números de cilindros
    suma_mpg = 0
    total_coches_cilindro = 0
    for coche in mpg:  # Iteramos sobre todos los diccionarios
        if coche[&#39;cyl&#39;] == cilindro:  # Si el número de cilindros coincide
            suma_mpg += float(coche[&#39;cty&#39;])  # suma mpg
            total_coches_cilindro += 1  # incrementa el contador
    mpg_cty_cilindro.append((cilindro, suma_mpg / total_coches_cilindro)) # añade la tupla (&#39;cilindro&#39;, &#39;mpg medio&#39;)

mpg_cty_cilindro.sort(key=lambda x: x[0])  # ordena por cilindros de menor a mayor
mpg_cty_cilindro
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(&#39;4&#39;, 21.01), (&#39;5&#39;, 20.50), (&#39;6&#39;, 16.22), (&#39;8&#39;, 12.57)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos empleado una función &lt;em&gt;lambda&lt;/em&gt; o &lt;em&gt;anónima&lt;/em&gt;, que es un tipo especial de funciones que estudiaremos en una lección posterior.&lt;/p&gt;

&lt;p&gt;A medida que el número de cilindros crece, las millas por galón en ciudad decrecen.&lt;/p&gt;

&lt;p&gt;Estudiemos un ejemplo similar para reforzar las líneas de código vistas en el anterior: busquemos la media de millas por galón en autovía para las diferentes clases de coches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;clases_coches = set(coche[&#39;class&#39;] for coche in mpg) 
clases_coches
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;2seater&#39;, &#39;compact&#39;, &#39;midsize&#39;, &#39;minivan&#39;, &#39;pickup&#39;, &#39;subcompact&#39;, &#39;suv&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpg_hwy_clase = []

for clase in clases_coches: 
    suma_mpg = 0
    total_coches_clase = 0
    for coche in mpg: 
        if coche[&#39;class&#39;] == clase: 
            suma_mpg += float(coche[&#39;hwy&#39;]) 
            total_coches_clase += 1 
    mpg_hwy_clase.append((clase, suma_mpg / total_coches_clase))

mpg_hwy_clase.sort(key=lambda x: x[1])
mpg_hwy_clase
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(&#39;pickup&#39;, 16.88),
 (&#39;suv&#39;, 18.13),
 (&#39;minivan&#39;, 22.36),
 (&#39;2seater&#39;, 24.80),
 (&#39;midsize&#39;, 27.29),
 (&#39;subcompact&#39;, 28.14),
 (&#39;compact&#39;, 28.30)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A primera vista, el proceso para llevar a cabo los análisis presentados es un tanto complejo y tedioso de realizar. Veremos, en el próximo módulo, que la librería &lt;code&gt;pandas&lt;/code&gt; agilizará todos estos procedimientos.&lt;/p&gt;

&lt;h2 id=&#34;section-8&#34;&gt;8. Fechas y horas en Python&lt;/h2&gt;

&lt;p&gt;En ocasiones, a la hora de llevar a cabo de análisis de datos, hemos de trabajar con fechas y horas. Por ejemplo, si buscamos el período de mayor ventas durante una etapa determinada o la hora de mayor actividad, por parte de los usuarios, en un foro de Internet.&lt;/p&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt;, las librerías habituales para trabajar con fechas y horas son &lt;code&gt;datetime&lt;/code&gt; y &lt;code&gt;time&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime as dt
import time as tm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;time()&lt;/code&gt; devuelve el número de segundos transcurridos desde el uno de enero de 1970 (&lt;em&gt;Epoch&lt;/em&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tm.time()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1559035984.46
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, no resulta especialmente cómodo trabajar unidades de tiempo de esta manera. No obstante, si nos proporcionan datos codificados de esta forma, podemos convertirlos en fechas y horas más manejables utilizando la función &lt;code&gt;fromtimestamp()&lt;/code&gt; del módulo &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dtnow = dt.datetime.fromtimestamp(tm.time())
dtnow
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 5, 28, 11, 33, 4, 627060)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como podíamos sospechar, la variable generada, &lt;code&gt;dtnow&lt;/code&gt;, posee atributos de gran utilidad a la hora de trabajar con fechas y horas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second  # extrae año, mes, día... de una fecha
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(2019, 5, 28, 11, 33, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: cuando en &lt;em&gt;Python&lt;/em&gt; separamos variables por una coma, aunque no estemos utilizando paréntesis, implícitamente estamos generando una tupla.&lt;/p&gt;

&lt;p&gt;La función &lt;code&gt;timedelta()&lt;/code&gt; nos posibilita realizar operaciones aritméticas y comparaciones entre fechas y horas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta = dt.timedelta(days = 100)  # crea una diferencia delta de 100 días
delta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.timedelta(days=100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La anterior función mostrada se utiliza habitualmente para crear períodos de interés a la hora de estudiar conjuntos de datos. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;today = dt.date.today()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;today - delta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.date(2019, 2, 17)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, la librería &lt;code&gt;datetime&lt;/code&gt; nos permite fácilmente llevar a cabo comparaciones entre fechas y horas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;today &amp;gt; today - delta  # comparación entre fechas
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-9&#34;&gt;9. Python avanzado: objetos y map()&lt;/h2&gt;

&lt;h3 id=&#34;section-9-1&#34;&gt;9.1 Objetos&lt;/h3&gt;

&lt;p&gt;Aunque, a lo largo de la especialización, rara vez nos veremos en la tesitura de generar clases propias, refresquemos su creación en &lt;em&gt;Python&lt;/em&gt; elaborando una que modelice personas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Persona:
    departamento = &amp;quot;Departamento de Educación&amp;quot;  # Variable que comparten todos los objetos instanciados de la clase
    
    def set_nombre(self, nombre):  # ejemplo de método
        self.nombre = nombre
    def set_localizacion(self, localizacion):
        self.localizacion = localizacion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instanciemos la clase:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;alexis = Persona()
alexis.set_nombre(&amp;quot;Alexis Sáez&amp;quot;)
alexis.set_localizacion(&amp;quot;Ibi (Alicante, España)&amp;quot;)

print(&amp;quot;{} vive en {} y trabaja en el {}.&amp;quot;.format(alexis.nombre, alexis.localizacion, alexis.departamento))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alexis Sáez vive en Ibi (Alicante, España) y trabaja en el Departamento de Educación.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-9-2&#34;&gt;9.2 map()&lt;/h3&gt;

&lt;p&gt;Acto seguido, supongamos que tenemos acceso a los precios para cuatro productos que ofrecen dos tiendas diferentes. Nuestro objetivo es averiguar a cuánto ascenderá el desembolso total, si buscamos adquirir dichos cuatro productos, de manera que paguemos la menor cantidad monetaria para cada uno de ellos. Dadas ambas listas de precios, dicho tipo de comparaciones elemento a elemento se pueden llevar a cabo a través de la función &lt;code&gt;map()&lt;/code&gt;, que aplica una determinada función a una serie de objetos iterables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tienda1 = [10.00, 11.00, 12.34, 2.34]
tienda2 = [9.00, 11.10, 12.34, 2.01]
precio_mas_barato = map(min, tienda1, tienda2)
precio_mas_barato  # lazy evaluation
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;map at 0x1288ced92e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt;, de hecho, no calcula mínimo alguno cuando creamos la variable &lt;code&gt;precio_mas_barato&lt;/code&gt;, sino que espera hasta el momento que procedemos a iterar sobre este objeto de tipo &lt;code&gt;map&lt;/code&gt;. Esta manera de actuar se conoce como &lt;em&gt;lazy evaluation&lt;/em&gt; y nos permite una gestión eficiente de la memoria.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for precio in precio_mas_barato:
    print(precio)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9.0
11.0
12.34
2.01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;desembolso = sum(list(map(min, tienda1, tienda2)))
desembolso
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;34.35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: dada la siguiente lista de profesores de la especialización, escribe una función y utilízala combinada con &lt;code&gt;map()&lt;/code&gt; para extraer tanto el título de cada persona como su apellido (por ejemplo, &lt;code&gt;[&#39;Dr. Brooks&#39;, &#39;Dr. Collins-Thompson&#39;, …]&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Dr. Christopher Brooks&#39;, &#39;Dr. Kevyn Collins-Thompson&#39;, &#39;Dr. VG Vinod Vydiswaran&#39;, &#39;Dr. Daniel Romero&#39;]

def split_title_and_name(person):
    return #Your answer here

list(map(#Your answer here))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Dr. Christopher Brooks&#39;, 
          &#39;Dr. Kevyn Collins-Thompson&#39;, 
          &#39;Dr. VG Vinod Vydiswaran&#39;, 
          &#39;Dr. Daniel Romero&#39;]

def split_title_and_name(person):
    separated_name = person.split(&amp;quot; &amp;quot;)
    return &amp;quot;{} {}&amp;quot;.format(separated_name[0], separated_name[-1])

list(map(split_title_and_name, people))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Dr. Brooks&#39;, &#39;Dr. Collins-Thompson&#39;, &#39;Dr. Vydiswaran&#39;, &#39;Dr. Romero&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-10&#34;&gt;10. Python avanzado: lambdas y comprensiones de listas&lt;/h2&gt;

&lt;h3 id=&#34;section-10-1&#34;&gt;10.1 Lambdas&lt;/h3&gt;

&lt;p&gt;La palabra clave &lt;code&gt;lambda&lt;/code&gt; nos permite crear funciones anónimas en &lt;em&gt;Python&lt;/em&gt; (conocidas comúnmente en este lenguaje de programación como &lt;em&gt;lambdas&lt;/em&gt;). Suelen ser funciones cortas, que podemos escribir generalmente en una línea (una única expresión, sin valores para parámetros opciones ni una lógica compleja en su interior) y mediante la instrucción &lt;code&gt;lambda&lt;/code&gt; no nos vemos en la necesidad de haber de crear una función con nombre para desempeñar cierta tarea concreta.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo de una función &lt;em&gt;lambda&lt;/em&gt; que toma tres parámetros y suma los primeros dos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma_dos = lambda a, b, c: a + b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma_dos(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma_dos(3, 2, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: convierte la siguiente función en una anónima o &lt;em&gt;lambda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Dr. Christopher Brooks&#39;, &#39;Dr. Kevyn Collins-Thompson&#39;, &#39;Dr. VG Vinod Vydiswaran&#39;, &#39;Dr. Daniel Romero&#39;]

def split_title_and_name(person):
    return person.split()[0] + &#39; &#39; + person.split()[-1]

#option 1
for person in people:
    print(split_title_and_name(person) == (lambda person:???))

#option 2
#list(map(split_title_and_name, people)) == list(map(???))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Dr. Christopher Brooks&#39;, 
          &#39;Dr. Kevyn Collins-Thompson&#39;, 
          &#39;Dr. VG Vinod Vydiswaran&#39;, 
          &#39;Dr. Daniel Romero&#39;]

def split_title_and_name(person):
    return person.split()[0] + &#39; &#39; + person.split()[-1]

# Opción 1
for person in people:
    print(split_title_and_name(person) == (lambda p: p.split()[0] + &#39; &#39; + p.split()[-1])(person))

# Opción 2
list(map(split_title_and_name, people)) == list(map(lambda person: person.split()[0] + &#39; &#39; + person.split()[-1], people))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
True
True
True





True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-10-2&#34;&gt;10.2 Comprensiones de listas&lt;/h3&gt;

&lt;p&gt;A continuación, almacenemos en una lista los números pares menores que mil:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_pares = []

for i in range(1000):
    if i % 2 == 0:
        lista_pares.append(i)

print(lista_pares[:50])  # Primeros cincuenta pares
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mediante las comprensiones de listas podemos conseguir el mismo objetivo con un menor número de líneas de código, expresando el bucle y la estructura condicional de una forma mucho más compacta (que también tiende a ser más rápida y eficiente):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_pares = [i for i in range(1000) if i % 2 == 0]
print(lista_pares[:50])  # Primeros 50 pares
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: convierte la siguiente función en una comprensión de lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def times_tables():
    lst = []
    for i in range(10):
        for j in range (10):
            lst.append(i*j)
    return lst

times_tables() == [???]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def times_tables():
    lst = []
    for i in range(10):
        for j in range (10):
            lst.append(i*j)
    return lst

times_tables() == [i * j for i in range(10) for j in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: muchas organizaciones poseen identificadores de usuario que están restringidas en cierta manera. Supón que trabajas para un proveedor de internet y dichos identificadores están formados por dos letras seguiidas de dos números (por ejemplo, &lt;code&gt;aa49&lt;/code&gt;). Tu tarea en la empresa podría ser mantener un registro de la facturación para cada posible usuario.&lt;/p&gt;

&lt;p&gt;Escribe una comprensión de lista que genere todos los posibles identificadores de usuario. Supón que las letras son únicamente minúsculas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lowercase = &#39;abcdefghijklmnopqrstuvwxyz&#39;
digits = &#39;0123456789&#39;

answer = [???]
correct_answer == answer
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lowercase = &#39;abcdefghijklmnopqrstuvwxyz&#39;
digits = &#39;0123456789&#39;

answer = [i + j + k + l for i in lowercase for j in lowercase for k in digits for l in digits]
print(answer[:50])  # Primeros 50 identificadores
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;aa00&#39;, &#39;aa01&#39;, &#39;aa02&#39;, &#39;aa03&#39;, &#39;aa04&#39;, &#39;aa05&#39;, &#39;aa06&#39;, &#39;aa07&#39;, &#39;aa08&#39;, &#39;aa09&#39;, &#39;aa10&#39;, &#39;aa11&#39;, &#39;aa12&#39;, &#39;aa13&#39;, &#39;aa14&#39;, &#39;aa15&#39;, &#39;aa16&#39;, &#39;aa17&#39;, &#39;aa18&#39;, &#39;aa19&#39;, &#39;aa20&#39;, &#39;aa21&#39;, &#39;aa22&#39;, &#39;aa23&#39;, &#39;aa24&#39;, &#39;aa25&#39;, &#39;aa26&#39;, &#39;aa27&#39;, &#39;aa28&#39;, &#39;aa29&#39;, &#39;aa30&#39;, &#39;aa31&#39;, &#39;aa32&#39;, &#39;aa33&#39;, &#39;aa34&#39;, &#39;aa35&#39;, &#39;aa36&#39;, &#39;aa37&#39;, &#39;aa38&#39;, &#39;aa39&#39;, &#39;aa40&#39;, &#39;aa41&#39;, &#39;aa42&#39;, &#39;aa43&#39;, &#39;aa44&#39;, &#39;aa45&#39;, &#39;aa46&#39;, &#39;aa47&#39;, &#39;aa48&#39;, &#39;aa49&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-11&#34;&gt;11. La librería NumPy&lt;/h2&gt;

&lt;p&gt;Adentrémonos, en este apartado, en los entresijos de la librería &lt;em&gt;NumPy&lt;/em&gt;. Sobre este módulo se asienta el ecosistema que permite trabajar &lt;em&gt;Ciencia de Datos&lt;/em&gt; en &lt;em&gt;Python&lt;/em&gt;, ya que posibilita el cálculo con &lt;em&gt;arrays&lt;/em&gt; y &lt;em&gt;matrices&lt;/em&gt; de una manera eficiente en este lenguaje de programación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-1&#34;&gt;11.1 Creando arrays&lt;/h3&gt;

&lt;p&gt;A continuación, generemos nuestro primer &lt;em&gt;array&lt;/em&gt; con &lt;em&gt;NumPy&lt;/em&gt;. Para ello, podemos crear una lista y convertirla a dicha estructura:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista = [1, 2, 3]
x = np.array(mi_lista)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;También podemos construir &lt;em&gt;arrays&lt;/em&gt; pasando como argumento una lista a la función &lt;code&gt;array()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = np.array([1, 2, 3])
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera similar, generamos &lt;em&gt;arrays&lt;/em&gt; multidimensionales a partir de una lista de listas como argumento de la función &lt;code&gt;array()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m = np.array([[1, 2, 3], [4, 5, 6]])
m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El atributo &lt;code&gt;shape&lt;/code&gt;, de un objeto de tipo &lt;code&gt;array&lt;/code&gt; de &lt;em&gt;NumPy&lt;/em&gt;, devuelve las dimensiones (filas y columnas) del &lt;em&gt;array&lt;/em&gt; generado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(3,)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;reshape()&lt;/code&gt; permite modificar las dimensiones de &lt;em&gt;array&lt;/em&gt; determinado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m.reshape(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [3, 4],
       [5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;arange()&lt;/code&gt; devuelve valores equiespaciados en un intervalo dado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = np.arange(0, 30, 2)  # empieza en 0, de 2 en 2, hasta 29
n
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = np.arange(1, 47, 5)
n
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 1,  6, 11, 16, 21, 26, 31, 36, 41, 46])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En cambio, si dado un intervalo queremos generar en su interior una serie de puntos equiespaciados, la función a utilizar es &lt;code&gt;linspace()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o = np.linspace(0, 4, 9)  # devuelve 9 valores equiespaciados entre 0 y 4
o
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. ])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;o.reshape(3, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen una serie de funciones especiales para generar &lt;em&gt;arrays&lt;/em&gt; con una estructura particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ones()&lt;/code&gt;: &lt;em&gt;array&lt;/em&gt; de unos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zeros()&lt;/code&gt;: &lt;em&gt;array&lt;/em&gt; de ceros.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eye()&lt;/code&gt;: matriz unidad.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diag()&lt;/code&gt;: matriz diagonal a partir de un &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((4, 5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros((3, 4))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.eye(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.diag(np.array([1, 2, 3, 4]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 0, 0, 0],
       [0, 2, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 4]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;*&lt;/code&gt; o la función &lt;code&gt;repeat()&lt;/code&gt; nos permiten repetir una lista, pero hay sutiles matices en su funcionamiento, como apreciamos acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, 3] * 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3, 1, 2, 3, 1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.repeat(np.array([1, 2, 3]), 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 1, 1, 2, 2, 2, 3, 3, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-2&#34;&gt;11.2 Combinando arrays&lt;/h3&gt;

&lt;p&gt;Por otro lado, podemos construir nuevos &lt;em&gt;arrays&lt;/em&gt; combinando unos existentes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p = np.ones([2, 3], int)
p
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 1, 1],
       [1, 1, 1]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con la función &lt;code&gt;vstack()&lt;/code&gt; apilamos arrays verticalmente (por filas):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.vstack([p, 2*p])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 1, 1],
       [1, 1, 1],
       [2, 2, 2],
       [2, 2, 2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mientras que la función &lt;code&gt;hstack()&lt;/code&gt; hace lo propio horizontalmente (por columnas):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.hstack([p, 2*p])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 1, 1, 2, 2, 2],
       [1, 1, 1, 2, 2, 2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-3&#34;&gt;11.3 Operaciones&lt;/h3&gt;

&lt;p&gt;Los operadores aritméticos realizan las opciones elemento a elemento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = np.array([1, 2, 3])
y = np.array([4, 5, 6])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([5, 7, 9])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x - y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-3, -3, -3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x * y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 4, 10, 18])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x / y
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0.25, 0.4 , 0.5 ])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 4, 9], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para calcular el producto escalar, hemos de utilizar la función &lt;code&gt;dot()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x.dot(y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El atributo &lt;code&gt;.T&lt;/code&gt; realiza la transposición de un &lt;em&gt;array&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z = np.array([y, y**2])
z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 4,  5,  6],
       [16, 25, 36]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z.T
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 4, 16],
       [ 5, 25],
       [ 6, 36]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z.T.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, el atributo &lt;code&gt;.dtype&lt;/code&gt; nos indica el tipo de variable en que está almacenado un &lt;em&gt;array&lt;/em&gt;, que podemos modificar mediante la función &lt;code&gt;astype()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z.dtype
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dtype(&#39;int32&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;z = z.astype(&amp;quot;f&amp;quot;)
z.dtype
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dtype(&#39;float32&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-4&#34;&gt;11.4 Funciones matemáticas&lt;/h3&gt;

&lt;p&gt;La librería &lt;em&gt;NumPy&lt;/em&gt; incorpora de base algunas conocidas funciones matemáticas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([-4, -2, 1, 3, 5])
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-4, -2,  1,  3,  5])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.argmax()  # posición del máximo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.argmin()  # posición del mínimo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.std()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.2619012860600183
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-5&#34;&gt;11.5 Extracción de elementos (indexing &amp;amp; slicing)&lt;/h3&gt;

&lt;p&gt;A continuación, veamos qué posibilidades nos ofrece &lt;em&gt;NumPy&lt;/em&gt; de cara a la extracción de elementos de un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = np.arange(13) ** 2
s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100, 121, 144],
      dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con el operador &lt;code&gt;[]&lt;/code&gt; accedemos, al igual que cuando utilizamos otro tipo de colecciones, al elemento ubicado en un índice concreto.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[0], s[4], s[-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(0, 16, 144)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mediante el operador &lt;code&gt;:&lt;/code&gt; extraemos múltiples elementos de un &lt;em&gt;array&lt;/em&gt; de manera simultánea, tal y como estamos acostumbrados a utilizar dicho operador.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[0:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 1, 4, 9], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[:3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([0, 1, 4], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[2:8:2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 4, 16, 36], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[-5::-2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([64, 36, 16,  4,  0], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos extender el uso de esta notación a &lt;em&gt;arrays&lt;/em&gt; multidimensionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r = np.arange(36)
r.resize((6, 6))
r
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[2, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[3, 3:6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([21, 22, 23])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[:2, :-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 6,  7,  8,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[-1, ::2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([30, 32, 34])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;También podemos realizar operaciones de filtrado utilizando condiciones lógicas (en este punto nos puede interesar ver también la función &lt;code&gt;where()&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[r &amp;gt; 30]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([31, 32, 33, 34, 35])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[r &amp;gt; 30] = 30
r
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 30, 30, 30, 30, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-6&#34;&gt;11.6 Copiando datos&lt;/h3&gt;

&lt;p&gt;Hemos de ser cautos a la hora de copiar y modificar &lt;em&gt;arrays&lt;/em&gt; en &lt;em&gt;NumPy&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r2 = r[:3, :3]
r2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2],
       [ 6,  7,  8],
       [12, 13, 14]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r2[:] = 0
r2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¡Pero &lt;code&gt;r&lt;/code&gt; también ha cambiado!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  0,  0,  3,  4,  5],
       [ 0,  0,  0,  9, 10, 11],
       [ 0,  0,  0, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 30, 30, 30, 30, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para evitar este comportamiento, conviene que utilicemos la función &lt;code&gt;copy()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r_copy = r.copy()
r_copy
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  0,  0,  3,  4,  5],
       [ 0,  0,  0,  9, 10, 11],
       [ 0,  0,  0, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 30, 30, 30, 30, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r_copy[:] = 10
r_copy
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10, 10, 10, 10, 10, 10],
       [10, 10, 10, 10, 10, 10],
       [10, 10, 10, 10, 10, 10],
       [10, 10, 10, 10, 10, 10],
       [10, 10, 10, 10, 10, 10],
       [10, 10, 10, 10, 10, 10]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, ahora &lt;code&gt;r&lt;/code&gt; no ha sido modificado por las operaciones realizadas sobre &lt;code&gt;r_copy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  0,  0,  3,  4,  5],
       [ 0,  0,  0,  9, 10, 11],
       [ 0,  0,  0, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 30, 30, 30, 30, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: Para el siguiente código, ¿qué opción recoge la salida correcta?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;old = np.array([[1, 1, 1],
                [1, 1, 1]])

new = old
new[0, :2] = 0

print(old)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 1 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[1 1 1]
 [0 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 0 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[1 1 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como no hemos usado el método &lt;code&gt;copy()&lt;/code&gt;, cualquier modificación sobre la variable &lt;code&gt;new&lt;/code&gt; afecta a la variable &lt;code&gt;old&lt;/code&gt;. Con la instrucción &lt;code&gt;new[0, :2] = 0&lt;/code&gt; hacemos ceros los dos primeros elementos de la fila superior del &lt;em&gt;array&lt;/em&gt; &lt;code&gt;new&lt;/code&gt; y, por tanto, de &lt;code&gt;old&lt;/code&gt; también. Así pues, la opción acertada es la 3. Comprobémoslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;old = np.array([[1, 1, 1],
                [1, 1, 1]])

new = old
new[0, :2] = 0

print(old)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[0 0 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: Para el siguiente código, ¿qué opción recoge la salida correcta?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;old = np.array([[1, 1, 1],
                [1, 1, 1]])

new = old.copy()
new[:, 0] = 0

print(old)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 1 1]
 [0 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 1 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 0 0]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opción 4&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[1 1 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En esta ocasión, al emplear la función &lt;code&gt;copy()&lt;/code&gt;, los cambios sobre la variable &lt;code&gt;new&lt;/code&gt; no afectan a la variable &lt;code&gt;old&lt;/code&gt;. Por tanto, la opción correcta es la 4. Comprobémoslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;old = np.array([[1, 1, 1],
                [1, 1, 1]])

new = old.copy()
new[:, 0] = 0

print(old)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 1 1]
 [1 1 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-11-7&#34;&gt;11.7 Iterando sobre arrays&lt;/h3&gt;

&lt;p&gt;Finalmente, estudiemos cómo iterar sobre &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;matriz_aleatorios = np.random.randint(0, 10, (4,3))
matriz_aleatorios
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[8, 9, 8],
       [9, 5, 2],
       [2, 4, 6],
       [0, 0, 7]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por ejemplo, podemos iterar por filas de una manera sencilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for fila in matriz_aleatorios:
    print(fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[8 9 8]
[9 5 2]
[2 4 6]
[0 0 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Asimismo, es posible iterar por el índice de la fila utilizando la función &lt;code&gt;len()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(matriz_aleatorios)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(len(matriz_aleatorios)):
    print(matriz_aleatorios[i])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[8 9 8]
[9 5 2]
[2 4 6]
[0 0 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;enumerate()&lt;/code&gt; nos posibilita combinar los dos anteriores métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, fila in enumerate(matriz_aleatorios):
    print(&amp;quot;La fila&amp;quot;, i, &amp;quot;es&amp;quot;, fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;La fila 0 es [8 9 8]
La fila 1 es [9 5 2]
La fila 2 es [2 4 6]
La fila 3 es [0 0 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acabar, también podemos utiliza la función &lt;code&gt;zip()&lt;/code&gt; para iterar sobre varios objetos iterables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;matriz_aleatorios_cuadrado = matriz_aleatorios ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;matriz_aleatorios_cuadrado
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[64, 81, 64],
       [81, 25,  4],
       [ 4, 16, 36],
       [ 0,  0, 49]], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, j in zip(matriz_aleatorios, matriz_aleatorios_cuadrado):
    print(i, &amp;quot;+&amp;quot;, j, &amp;quot;=&amp;quot;, i + j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[8 9 8] + [64 81 64] = [72 90 72]
[9 5 2] + [81 25  4] = [90 30  6]
[2 4 6] + [ 4 16 36] = [ 6 20 42]
[0 0 7] + [ 0  0 49] = [ 0  0 56]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-12&#34;&gt;12. Cuestionario&lt;/h2&gt;

&lt;p&gt;Dado que estoy siguiendo la especialización en modo &lt;em&gt;Audit&lt;/em&gt;, no tengo acceso a la posibilidad de verificar las respuestas que proporciono en los cuestionarios, así como sospecho que tampoco podré hacer lo propio con las prácticas de programación.&lt;/p&gt;

&lt;p&gt;No obstante, comparto las respuestas que plantearía a las preguntas que proponen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 1&lt;/strong&gt;: Python is an example of an&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Interpreted language&lt;/li&gt;
&lt;li&gt;(b) Declarative language&lt;/li&gt;
&lt;li&gt;(c) Operating system language&lt;/li&gt;
&lt;li&gt;(d) Data science language&lt;/li&gt;
&lt;li&gt;(e) Low level language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (a)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 2&lt;/strong&gt;: Data Science is a&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) Branch of statistics&lt;/li&gt;
&lt;li&gt;(b) Branch of computer science&lt;/li&gt;
&lt;li&gt;(c) Branch of artificial intelligence&lt;/li&gt;
&lt;li&gt;(d) Interdisciplinary, made up of all of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (d)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 3&lt;/strong&gt;: Data visualization is not a part of data science.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) True&lt;/li&gt;
&lt;li&gt;(b) False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (b)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 4&lt;/strong&gt;: Which bracketing style does Python use for tuples?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) &lt;code&gt;{ }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(b) &lt;code&gt;( )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(c) &lt;code&gt;[ ]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (b)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 5&lt;/strong&gt;: In Python, strings are considered Mutable, and can be changed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) False&lt;/li&gt;
&lt;li&gt;(b) True&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (a)&lt;/p&gt;

&lt;p&gt;Esta pregunta me ha resultado interesante, porque creo no se ha llegado a comentar nada al respecto en los vídeos teóricos. Veamos con un sencillo ejemplo que no podemos modificar parte de una cadena de caracteres:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto = &amp;quot;Esto es una prueba&amp;quot;
texto[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;E&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto[0] = &amp;quot;N&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-161-1659680a19da&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 texto[0] = &amp;quot;N&amp;quot;


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, en cualquier momento podemos hacer que la variable &lt;code&gt;texto&lt;/code&gt; apunte a una cadena de caracteres distinta a la dada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto = &amp;quot;Segunda prueba&amp;quot;
texto
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Segunda prueba&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Question 6&lt;/strong&gt;: What is the result of the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] + [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(a) &lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(b) &lt;code&gt;TypeError: Cannot convert list(int) to list(str)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(c) &lt;code&gt;[&#39;a1&#39;, &#39;b2&#39;, &#39;c3&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(d) &lt;code&gt;[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [1, 2, 3]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (a), el operador &lt;code&gt;+&lt;/code&gt; concatena listas y en &lt;em&gt;Python&lt;/em&gt; estas pueden contener elementos de diversos tipos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] + [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Question 7&lt;/strong&gt;: String slicing is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) A way to make string mutable in python&lt;/li&gt;
&lt;li&gt;(b) A way to reduce the size on disk of strings in python&lt;/li&gt;
&lt;li&gt;(c) A way to make a substring of a string in python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (c)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 8&lt;/strong&gt;: When you create a lambda, what type is returned? E.g. &lt;code&gt;type(lambda x: x+1)&lt;/code&gt; returns&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) &lt;code&gt;&amp;lt;class &#39;function&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(b) &lt;code&gt;&amp;lt;class &#39;type&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(c) &lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(d) &lt;code&gt;&amp;lt;class &#39;lambda&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (a)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(lambda x: x+1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Question 9&lt;/strong&gt;: The epoch refers to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) January 1, year 0&lt;/li&gt;
&lt;li&gt;(b) January 1, year 1970&lt;/li&gt;
&lt;li&gt;(c) January 1, year 1980&lt;/li&gt;
&lt;li&gt;(d) January 1, year 2000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (b)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 10&lt;/strong&gt;: This code, &lt;code&gt;[x**2 for x in range(10)]&lt;/code&gt; , is an example of a&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) List comprehension&lt;/li&gt;
&lt;li&gt;(b) Sequence comprehension&lt;/li&gt;
&lt;li&gt;(c) Tuple comprehension&lt;/li&gt;
&lt;li&gt;(d) List multiplication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (a)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 11&lt;/strong&gt;: Given a 6x6 NumPy array &lt;code&gt;r&lt;/code&gt;, which of the following options would slice the shaded elements?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imalexissaez.github.io/courses/applied-data-science-with-python/img/modulo1-quiz1-question11.png&#34; alt=&#34;Matriz&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) &lt;code&gt;r[:, ::7]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(b) &lt;code&gt;r[0:6, ::-7]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(c) &lt;code&gt;r[::7]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(d) &lt;code&gt;r.reshape(36)[::7]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt; (d)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r = np.arange(36).reshape(6, 6)
r
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r.reshape(36)[::7]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 0,  7, 14, 21, 28, 35])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Question 12&lt;/strong&gt;: Given a 6x6 NumPy array r, which of the following options would slice the shaded elements?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imalexissaez.github.io/courses/applied-data-science-with-python/img/modulo1-quiz1-question12.png&#34; alt=&#34;Matriz&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) &lt;code&gt;r[::2, ::2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(b) &lt;code&gt;r[2::2, 2::2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(c) &lt;code&gt;r[2:4, 2:4]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(d) &lt;code&gt;r[[2, 3], [2, 3]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Respuesta&lt;/strong&gt;: (c)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r[2:4, 2:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[14, 15],
       [20, 21]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Módulo 2</title>
      <link>https://imalexissaez.github.io/courses/applied-data-science-with-python/curso1-modulo2/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/applied-data-science-with-python/curso1-modulo2/</guid>
      <description>

&lt;h2 id=&#34;section-1&#34;&gt;1. Introducción&lt;/h2&gt;

&lt;p&gt;En este módulo, investigaremos cómo &lt;em&gt;Python&lt;/em&gt;, dado un conjunto de datos, puede realizar manipulaciones, proceder a su limpieza y llevar a cabo consultas a través de la librería &lt;code&gt;pandas&lt;/code&gt;. Para resolver dudas sobre el uso de este módulo, cuatro buenos recursos son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El portal &lt;a href=&#34;https://stackoverflow.com/&#34; target=&#34;_blank&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Los libros &lt;a href=&#34;https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/&#34; target=&#34;_blank&#34;&gt;Python for Data Analysis&lt;/a&gt; y &lt;a href=&#34;https://www.amazon.com/Learning-Pandas-Library-Munging-Analysis/dp/153359824X/&#34; target=&#34;_blank&#34;&gt;Learning the Pandas Library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;El agregador de blogs &lt;a href=&#34;https://planetpython.org/&#34; target=&#34;_blank&#34;&gt;Planet Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;El podcast &lt;a href=&#34;https://dataskeptic.com/&#34; target=&#34;_blank&#34;&gt;Data Skeptic&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;section-2&#34;&gt;2. La estructura de datos Series&lt;/h2&gt;

&lt;p&gt;La estructura de datos &lt;code&gt;Series&lt;/code&gt;, de la librería &lt;code&gt;pandas&lt;/code&gt;, es una especie de mezcla entre las listas y los diccionarios de &lt;em&gt;Python&lt;/em&gt; que estudiamos en el módulo anterior. Los elementos se almacenan en orden y tenemos a nuestra disposición una serie de etiquetas (&lt;em&gt;labels&lt;/em&gt;), que nos permiten un acceso a ellos por nombre.&lt;/p&gt;

&lt;p&gt;Empecemos importando la propia librería &lt;code&gt;pandas&lt;/code&gt; que, por convención, habitualmente utiliza el &lt;em&gt;alias&lt;/em&gt; &lt;code&gt;pd&lt;/code&gt;. Desde el &lt;em&gt;notebook&lt;/em&gt; de &lt;em&gt;Jupyter&lt;/em&gt; podemos acceder a la documentación para la estructura de datos &lt;code&gt;Series&lt;/code&gt; si tecleamos &lt;code&gt;pd.Series?&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
pd.Series?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En primer lugar, generemos una lista de animales y convirtámosla a un objeto de la clase &lt;code&gt;Series&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;animales = [&amp;quot;Tigre&amp;quot;, &amp;quot;Oso&amp;quot;, &amp;quot;Alce&amp;quot;]
pd.Series(animales)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    Tigre
1      Oso
2     Alce
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Análogamente, repitamos el proceso para una lista de números enteros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numeros = [1, 2, 3]
pd.Series(numeros)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    1
1    2
2    3
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En ambos casos, observamos una primera columna de índices numéricos, que podríamos utilizar para acceder a los elementos de esta estructura de la manera que estamos habituados en &lt;em&gt;Python&lt;/em&gt;. Cabe destacar también el atributo &lt;code&gt;dtype&lt;/code&gt;, diferente para ambos objetos y que se adapta automáticamente (aunque lo podemos declarar manualmente) al tipo de los elementos de la lista. Con ello, &lt;em&gt;Python&lt;/em&gt; trabaja de manera más eficiente, tanto en memoria, como a la hora de llevar a cabo operaciones.&lt;/p&gt;

&lt;p&gt;Por otro lado, la instrucción &lt;code&gt;None&lt;/code&gt; nos permite indicar la ausencia de ciertos registros en nuestros conjuntos datos (los conocidos &lt;em&gt;valores perdidos&lt;/em&gt;). No obstante, hemos de ser cautos, pues según el tipo del resto de elementos, &lt;code&gt;None&lt;/code&gt; se almacena de manera diferente.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;animales = [&amp;quot;Tigre&amp;quot;, &amp;quot;Oso&amp;quot;, None]
pd.Series(animales)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    Tigre
1      Oso
2     None
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numeros = [1, 2, None]
pd.Series(numeros)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    1.0
1    2.0
2    NaN
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el primer caso, vemos que se registra como un objeto, mientras que en el segundo lo hace como un número especial en coma flotante: &lt;code&gt;NaN&lt;/code&gt;. En cualquier caso, es diferente a &lt;code&gt;None&lt;/code&gt;, como podemos comprobar a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
np.nan == None
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curiosamente, también falla el test de comparación con respecto a sí mismo. La lógica tras esta decisión es que dos valores perdidos cualesquiera no tienen porqué coincidir.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.nan == np.nan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por tanto, para comprobar la existencia de valores perdidos, hemos de recurrir a la función &lt;code&gt;isnan()&lt;/code&gt; de la librería &lt;em&gt;NumPy&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.isnan(np.nan)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, veamos cómo crear un objeto de tipo &lt;code&gt;Series&lt;/code&gt; a partir de un diccionario. De proceder de tal modo, la columna de índices estará compuesta por las claves del propio diccionario (y no por números enteros):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes = {&amp;quot;Fútbol&amp;quot;: &amp;quot;España&amp;quot;,
            &amp;quot;Golf&amp;quot;: &amp;quot;Italia&amp;quot;,
            &amp;quot;Baloncesto&amp;quot;: &amp;quot;Francia&amp;quot;,
            &amp;quot;Kárate&amp;quot;: &amp;quot;Japón&amp;quot;}
d = pd.Series(deportes)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol         España
Golf           Italia
Baloncesto    Francia
Kárate          Japón
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acceder a los índices de la estructura creada, hemos de utilizar el atributo &lt;code&gt;index&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.index
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;Fútbol&#39;, &#39;Golf&#39;, &#39;Baloncesto&#39;, &#39;Kárate&#39;], dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De hecho, no tenemos que recurrir necesariamente al uso de un diccionario para acceder a etiquetas con nombres. En los ejemplos que vimos al principio de este apartado, basta que configuremos adecuadamente el valor del parámetro &lt;code&gt;index&lt;/code&gt; para conseguir la misma funcionalidad que arriba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = pd.Series([&amp;quot;Tigre&amp;quot;, &amp;quot;Oso&amp;quot;, &amp;quot;Alce&amp;quot;], index=[&amp;quot;India&amp;quot;, &amp;quot;Estados Unidos&amp;quot;, &amp;quot;Canadá&amp;quot;])
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;India             Tigre
Estados Unidos      Oso
Canadá             Alce
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es más, mediante dicho parámetro, podemos restringir la creación del objeto &lt;code&gt;Series&lt;/code&gt; a los valores que nos interesen de un determinado diccionario (y automáticamente proveerá de valores &lt;code&gt;NaN&lt;/code&gt; si alguna de las claves no figura en el mencionado diccionario):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes = {&amp;quot;Fútbol&amp;quot;: &amp;quot;España&amp;quot;,
            &amp;quot;Golf&amp;quot;: &amp;quot;Italia&amp;quot;,
            &amp;quot;Baloncesto&amp;quot;: &amp;quot;Francia&amp;quot;,
            &amp;quot;Kárate&amp;quot;: &amp;quot;Japón&amp;quot;}
d = pd.Series(deportes, index=[&amp;quot;Fútbol&amp;quot;, &amp;quot;Golf&amp;quot;, &amp;quot;Baloncesto&amp;quot;])
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol         España
Golf           Italia
Baloncesto    Francia
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = pd.Series(deportes, index=[&amp;quot;Fútbol&amp;quot;, &amp;quot;Balonmano&amp;quot;, &amp;quot;Golf&amp;quot;])
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol       España
Balonmano       NaN
Golf         Italia
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-3&#34;&gt;3. Extracción de elementos en Series&lt;/h2&gt;

&lt;p&gt;Para empezar, retomemos uno de los últimos ejemplos de la sección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes = {&amp;quot;Fútbol&amp;quot;: &amp;quot;España&amp;quot;,
            &amp;quot;Golf&amp;quot;: &amp;quot;Italia&amp;quot;,
            &amp;quot;Baloncesto&amp;quot;: &amp;quot;Francia&amp;quot;,
            &amp;quot;Kárate&amp;quot;: &amp;quot;Japón&amp;quot;}
d = pd.Series(deportes)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol         España
Golf           Italia
Baloncesto    Francia
Kárate          Japón
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen cuatro maneras diferentes de acceder a los valores almacenados en &lt;code&gt;deportes&lt;/code&gt;. Si nos preguntamos a qué país está asociada la etiqueta &lt;code&gt;&amp;quot;Golf&amp;quot;&lt;/code&gt; y sabemos que almacenamos este registro en segundo lugar, podemos emplear el atributo &lt;code&gt;iloc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.iloc[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Italia&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, es difícil recordar el orden en el que introdujimos los datos, y más cuando cierto tiempo ha transcurrido desde entonces. Por ello, es interesante que conozcamos la existencia del atributo &lt;code&gt;loc&lt;/code&gt;, que nos permite acceder al valor mediante su etiqueta explícita:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.loc[&amp;quot;Golf&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Italia&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: notemos que &lt;code&gt;iloc&lt;/code&gt; y &lt;code&gt;loc&lt;/code&gt; son atributos, por lo que no hemos de utilizar paréntesis &lt;code&gt;()&lt;/code&gt; cuando los empleamos.&lt;/p&gt;

&lt;p&gt;La manera en que están programados los accesos en &lt;code&gt;pandas&lt;/code&gt; busca conseguir la máxima legibilidad posible. Por ejemplo, si directamente utilizamos el operador de índice &lt;code&gt;[]&lt;/code&gt; con un valor numérico, &lt;code&gt;pandas&lt;/code&gt; empleará el atributo &lt;code&gt;iloc&lt;/code&gt;; mientras que si es otro tipo de valor, recurrirá al atributo &lt;code&gt;loc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Italia&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[&amp;quot;Golf&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Italia&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta manera de proceder puede ser fuente de complicaciones cuando los índices son, asimismo, valores numéricos. En esta situación, &lt;code&gt;pandas&lt;/code&gt; no puede determinar directamente si estamos accediendo a un valor vía referencia numérica o mediante etiquetas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numeros = {90: &amp;quot;Noventa&amp;quot;,
           91: &amp;quot;Noventa y uno&amp;quot;,
           92: &amp;quot;Noventa y dos&amp;quot;,
           93: &amp;quot;Noventa y tres&amp;quot;}
n = pd.Series(numeros)
n
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;90           Noventa
91     Noventa y uno
92     Noventa y dos
93    Noventa y tres
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n[0]  # No accede al primer elemento, como en las listas. No hay índice etiquetado 0 aquí.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&amp;lt;ipython-input-20-56e5e6858fee&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 n[0]  # No accede al primer elemento, como en las listas. No hay índice etiquetado 0 aquí.


~\Anaconda3\lib\site-packages\pandas\core\series.py in __getitem__(self, key)
    866         key = com.apply_if_callable(key, self)
    867         try:
--&amp;gt; 868             result = self.index.get_value(self, key)
    869 
    870             if not is_scalar(result):


~\Anaconda3\lib\site-packages\pandas\core\indexes\base.py in get_value(self, series, key)
   4373         try:
   4374             return self._engine.get_value(s, k,
-&amp;gt; 4375                                           tz=getattr(series.dtype, &#39;tz&#39;, None))
   4376         except KeyError as e1:
   4377             if len(self) &amp;gt; 0 and (self.holds_integer() or self.is_boolean()):


pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value()


pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value()


pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()


pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()


pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()


KeyError: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n.iloc[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En estos casos, como acabamos de ver arriba, conviene utilizar explícitamente los atributos &lt;code&gt;iloc&lt;/code&gt; y &lt;code&gt;loc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, veamos cómo trabajar con los valores de un objeto de tipo &lt;code&gt;Series&lt;/code&gt;. Por ejemplo, nos puede interesar calcular la suma total de los elementos de una serie numérica de valores en coma flotante, almacenada mediante esta estructura de datos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = pd.Series([100.00, 120.00, 101.00, 3.00])
s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    100.0
1    120.0
2    101.0
3      3.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un posible enfoque consiste en iterar sobre los elementos de &lt;code&gt;s&lt;/code&gt; a través de un bucle de tipo &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;total = 0
for item in s:
    total += item
print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;324.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, la librería &lt;code&gt;numpy&lt;/code&gt; dispone de un método que realiza la misma tarea de una manera más eficiente (en consumo de memoria y tiempo):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;total = np.sum(s)
print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;324.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Cómo podemos comprobar que, efectivamente, conviene utilizar las funciones que estas librerías proporcionan, en lugar de utilizar nuestros propios bucles? Llevemos a cabo un pequeño experimento declarando una serie de 10000 números aleatorios (cada uno de ellos comprendido entre 0 y 999) y procediendo a su suma. El &lt;em&gt;magic command&lt;/em&gt; &lt;code&gt;%%timeit&lt;/code&gt; nos permitirá acceder al tiempo de computación del proceso, que repetiremos 100 veces para conseguir así un tiempo medio representativo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = pd.Series(np.random.randint(0, 1000, 10000))
s.head()  # Imprime los cinco primeros elementos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    970
1    887
2    127
3     75
4    170
dtype: int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%timeit -n 100
summary = 0
for item in s:
    summary += item
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.58 ms ± 182 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%timeit -n 100
summary = np.sum(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;277 µs ± 73.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La explicación técnica de este resultado reside en que &lt;code&gt;numpy&lt;/code&gt; efectúa operaciones algebraicas de manera &lt;strong&gt;vectorizada&lt;/strong&gt;, enfoque de actuación mucho más eficiente que realizarlas elemento a elemento, como cuando utilizamos un bucle como el declarado arriba.&lt;/p&gt;

&lt;p&gt;No obstante, la diferencia, aún existente, no llega a ser sorprendente. Repliquemos esta manera de proceder analizando ahora otra operación sencilla: sumar dos unidades a cada uno de los elementos de la serie generada.&lt;/p&gt;

&lt;p&gt;Dicha tarea la podemos llevar a cabo directamente mediante el operador incremento correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s += 2  # Suma 2 a s, elemento a elemento
s.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    972
1    889
2    129
3     77
4    172
dtype: int32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O, en cualquier caso, a través de un bucle de tipo &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for label, value in s.iteritems():
    s.set_value(label, value + 2)  # Produce un deprecated warning 
s.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead






0    974
1    891
2    131
3     79
4    174
dtype: int32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior bloque de código arroja un mensaje (&lt;em&gt;warning&lt;/em&gt;) avisándonos que la función &lt;code&gt;set_value()&lt;/code&gt; está en desuso y nos recomienda utilizar los atributos &lt;code&gt;.at[]&lt;/code&gt; o &lt;code&gt;iat[]&lt;/code&gt;. Modifiquemos pues el código precedente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for label, value in s.iteritems():
    s.at[label] = value + 2
s.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    976
1    893
2    133
3     81
4    176
dtype: int32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, procedamos a realizar el mencionado experimento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%timeit -n 100
s = pd.Series(np.random.randint(0, 1000, 10000))
for label, value in s.iteritems():
    s.at[label] = value + 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;109 ms ± 10.2 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%timeit -n 100
s = pd.Series(np.random.randint(0, 1000, 10000))
s += 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;725 µs ± 196 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En resumen, si en algún momento nos encontramos iterando sobre un objeto de tipo &lt;code&gt;Series&lt;/code&gt;, hemos de deternos y cuestionarnos si estamos llevando a cabo el procedimiento de la manera más adecuada (en términos de eficiencia).&lt;/p&gt;

&lt;p&gt;Para finalizar esta sección, veamos algunas maneras de añadir información a un objeto declarado de tipo &lt;code&gt;Series&lt;/code&gt;. En primer lugar, y de manera muy parecida a como realizamos el proceso cuando trabajamos con diccionarios, utilizando la estructura &lt;code&gt;s.loc[] = value&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = pd.Series([1, 2, 3])
s.loc[&amp;quot;Animal&amp;quot;] = &amp;quot;Oso&amp;quot;
s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0           1
1           2
2           3
Animal    Oso
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: la librería &lt;code&gt;pandas&lt;/code&gt; gestiona adecuadamente los índices y valores cuando, como en este caso, son de tipos diferentes (tenemos enteros y cadenas de texto), escogiendo la representación más general para representarlos.&lt;/p&gt;

&lt;p&gt;En segundo lugar, la función &lt;code&gt;append()&lt;/code&gt; resulta de gran utilidad a la hora de ampliar este tipo de estructura de datos. Además, veamos qué sucede cuando existen diferentes valores cuyo índice, en forma de etiqueta, coincide (situación imposible de conseguir cuando trabajamos, por ejemplo, con bases de datos relacionales):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes = pd.Series({&amp;quot;Fútbol&amp;quot;: &amp;quot;España&amp;quot;,
                      &amp;quot;Golf&amp;quot;: &amp;quot;Italia&amp;quot;,
                      &amp;quot;Baloncesto&amp;quot;: &amp;quot;Francia&amp;quot;,
                      &amp;quot;Kárate&amp;quot;: &amp;quot;Japón&amp;quot;})
paises_balonmano = pd.Series([&amp;quot;Inglaterra&amp;quot;, &amp;quot;Alemania&amp;quot;, &amp;quot;Rusia&amp;quot;, &amp;quot;Colombia&amp;quot;],
                            index=[&amp;quot;Balonmano&amp;quot;, &amp;quot;Balonmano&amp;quot;, &amp;quot;Balonmano&amp;quot;, &amp;quot;Balonmano&amp;quot;])
deportes_ampliado = deportes.append(paises_balonmano)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol         España
Golf           Italia
Baloncesto    Francia
Kárate          Japón
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;paises_balonmano
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Balonmano    Inglaterra
Balonmano      Alemania
Balonmano         Rusia
Balonmano      Colombia
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes_ampliado
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fútbol            España
Golf              Italia
Baloncesto       Francia
Kárate             Japón
Balonmano     Inglaterra
Balonmano       Alemania
Balonmano          Rusia
Balonmano       Colombia
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;deportes_ampliado.loc[&amp;quot;Balonmano&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Balonmano    Inglaterra
Balonmano      Alemania
Balonmano         Rusia
Balonmano      Colombia
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas técnicas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La función &lt;code&gt;append()&lt;/code&gt;, así como sucede con otras funciones de esta librería, infiere qué tipo es el más adecuado para representar la nueva estructura generada. En el ejemplo anterior, como todo son cadenas de caracteres, no hay problema alguno.&lt;/li&gt;
&lt;li&gt;Por otro lado, dicha función no modifica la estructura original, sino que devuelve una nueva, comportamiento que puede resultar un tanto extraño en &lt;em&gt;Python&lt;/em&gt;, tal y como estamos acostumbrados a modificar objetos. En el ejemplo anterior, tras ejecutar la celda, observamos la variable &lt;code&gt;deportes&lt;/code&gt; contiene únicamente los datos originales, aunque sobre ella hayamos utilizado el método &lt;code&gt;append()&lt;/code&gt;. Como podemos observar a continuación, cuando trabajamos con listas dicha función produce un resultado diferente.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_original = [1, 2, 3]
lista_nueva = lista_original.append(4)

lista_original
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-4&#34;&gt;4. La estrutura de datos DataFrame&lt;/h2&gt;

&lt;p&gt;La estructura de datos &lt;code&gt;DataFrame&lt;/code&gt; es, posiblemente, la gran protagonista de la librería &lt;code&gt;pandas&lt;/code&gt; y con la que trabajaremos habitualmente a la hora de llevar a cabo análisis de datos. Se trata de una tabla compuesta por múltiples filas y columnas (conceptualmente estaríamos hablando de un &lt;em&gt;array&lt;/em&gt; 2-dimensional), donde cada registro posee su propia etiqueta.&lt;/p&gt;

&lt;p&gt;Podemos crear un &lt;code&gt;DataFrame&lt;/code&gt; a partir de un conjunto de &lt;code&gt;Series&lt;/code&gt; o de diccionarios, donde cada elemento represente una fila de la tabla que deseamos generar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

compra_1 = pd.Series({&#39;Nombre&#39;: &#39;Alexis&#39;,
                      &#39;Objeto comprado&#39;: &#39;Portátil&#39;,
                      &#39;Coste&#39;: 622.50})
compra_2 = pd.Series({&#39;Nombre&#39;: &#39;Ana&#39;,
                      &#39;Objeto comprado&#39;: &#39;Auriculares&#39;,
                      &#39;Coste&#39;: 7.50})
compra_3 = pd.Series({&#39;Nombre&#39;: &#39;Marta&#39;,
                      &#39;Objeto comprado&#39;: &#39;Comida para gatos&#39;,
                      &#39;Coste&#39;: 15.25})

df = pd.DataFrame([compra_1, compra_2, compra_3], 
                  index=[&#39;Tienda 1&#39;, &#39;Tienda 1&#39;, &#39;Tienda 2&#39;])
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;622.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;7.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: recordemos que no es necesario que las etiquetas asociadas a los registros sean únicas.&lt;/p&gt;

&lt;p&gt;De manera similar a como procedíamos en anteriores secciones, podemos extraer información del &lt;code&gt;DataFrame&lt;/code&gt; utilizando los atributos &lt;code&gt;iloc&lt;/code&gt; y &lt;code&gt;loc&lt;/code&gt;. Cabe destacar que, según la cantidad de información extraída, la librería &lt;code&gt;pandas&lt;/code&gt; colapsa de manera adecuada el tipo de datos resultante.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si extraemos una columna de la tabla, el objeto resultante será de tipo &lt;code&gt;Series&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nombre                         Marta
Objeto comprado    Comida para gatos
Coste                          15.25
Name: Tienda 2, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df.loc[&amp;quot;Tienda 2&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;pandas.core.series.Series
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera similar, podemos extraer información de la tabla utilizando múltiples índices (uno para la fila y otro para la columna). Por ejemplo, podríamos estar interesados en consultar los costes asociados a los productos comprados en &lt;code&gt;Tienda 1&lt;/code&gt;. Para ello, tecleamos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 1&amp;quot;, &amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    622.5
Tienda 1      7.5
Name: Coste, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df.loc[&amp;quot;Tienda 1&amp;quot;, &amp;quot;Coste&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;pandas.core.series.Series
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al tratarse el resultado de un &lt;em&gt;array&lt;/em&gt; unidimensional, observamos que su tipo se colapsa al de un objeto de tipo &lt;code&gt;Series&lt;/code&gt;. En cambio, si extraemos una &amp;ldquo;subtabla&amp;rdquo; de la tabla, el objeto devuelto no varía de tipo y continúa perteneciendo a la clase &lt;code&gt;DataFrame&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 1&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;622.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df.loc[&amp;quot;Tienda 1&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;pandas.core.frame.DataFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, si extraemos un único valor concreto de la tabla, su tipo también se ve alterado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 2&amp;quot;, &amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15.25
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df.loc[&amp;quot;Tienda 2&amp;quot;, &amp;quot;Coste&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;numpy.float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 2&amp;quot;, &amp;quot;Nombre&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Marta&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df.loc[&amp;quot;Tienda 2&amp;quot;, &amp;quot;Nombre&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, imaginemos que estamos interesados en obtener todos los registros asociados a una columna, &lt;code&gt;&amp;quot;Coste&amp;quot;&lt;/code&gt; por ejemplo. Una posible estrategia consistiría en trasponer el conjunto de datos y emplear, como antes, el atributo &lt;code&gt;loc&lt;/code&gt;, ya que los nombres de las columnas pasan a ser los índices de los registros.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.T
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Marta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Coste&lt;/th&gt;
      &lt;td&gt;622.5&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.T.loc[&amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    622.5
Tienda 1      7.5
Tienda 2    15.25
Name: Coste, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, es un tanto tedioso proceder de tal forma. La librería &lt;code&gt;pandas&lt;/code&gt; permite, directamente, utilizar también los atributos &lt;code&gt;iloc&lt;/code&gt; y &lt;code&gt;loc&lt;/code&gt; sobre los nombres de las columnas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    622.50
Tienda 1      7.50
Tienda 2     15.25
Name: Coste, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, podemos incluso encadenar operadores de extracción de datos como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 1&amp;quot;][&amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    622.5
Tienda 1      7.5
Name: Coste, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 2&amp;quot;][&amp;quot;Coste&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15.25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, hemos de ser cautos a la hora de proceder de tal manera, pues &lt;code&gt;pandas&lt;/code&gt; devuelve una copia del objeto &lt;code&gt;DataFrame&lt;/code&gt;, en lugar de una simple vista, con todos los costes asociados de memoria y tiempo de cálculo que ello conlleva.&lt;/p&gt;

&lt;p&gt;A la hora de realizar consultas, esta peculiaridad no puede parecer muy importante, pero sí puede ser fuente de errores cuando estamos modificando datos de un conjunto de datos.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: también podemos utilizar el operador &lt;code&gt;:&lt;/code&gt; a la hora de extraer información de un conjunto de datos, tal y como estamos habituados a hacerlo cuando trabajamos con listas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[:, [&amp;quot;Nombre&amp;quot;, &amp;quot;Coste&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;622.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;7.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Acto seguido, veamos cómo descartar datos, acción para la cual la función &lt;code&gt;drop()&lt;/code&gt; es ciertamente útil:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop(&amp;quot;Tienda 1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: la función &lt;code&gt;drop()&lt;/code&gt;, como muchas de las implementadas en la librería &lt;code&gt;pandas&lt;/code&gt;, no modifica el objeto original, sino que devuelve una copia del mismo sobre la cual se ha llevado a cabo la acción de interés.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;622.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;7.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Hagamos una copia del conjunto de datos, utilizando la función &lt;code&gt;copy()&lt;/code&gt;, y apliquemos después la función &lt;code&gt;drop()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;copia_df = df.copy()
copia_df = copia_df.drop(&amp;quot;Tienda 1&amp;quot;)
copia_df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Por otro lado, cabe comentar que la función &lt;code&gt;drop()&lt;/code&gt; posee dos interesantes parámetros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inplace&lt;/code&gt;: permite que la actualización de datos se realice sobre el objeto original, en lugar de devolver una copia.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis&lt;/code&gt;: dimensión que se descarta (&lt;code&gt;0&lt;/code&gt; para filas, &lt;code&gt;1&lt;/code&gt; para columnas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para acceder a más detalles sobre la función, siempre conviene que consultemos su documentación asociada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;copia_df.drop?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adicionalmente, mediante la combinación del operador índice y la instrucción &lt;code&gt;del&lt;/code&gt; tenemos la posibilidad de descartar datos de nuestra tabla. Dicha combinación altera el objeto inicial en lugar de devolver una copia, por lo que hemos de proceder con cautela en su uso.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del copia_df[&amp;quot;Nombre&amp;quot;]
copia_df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Finalmente, para añadir columnas únicamente hemos de seguir un patrón familiar a estas alturas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;Localización&amp;quot;] = None
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
      &lt;th&gt;Localización&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;622.50&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;7.50&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: ¿cómo podríamos aplicar un descuento de un 20% a los artículos de la primera tienda?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Tienda 1&amp;quot;, &amp;quot;Coste&amp;quot;] *= 0.8
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
      &lt;th&gt;Localización&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;498.00&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;6.00&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;15.25&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;section-5&#34;&gt;5. Lectura de archivos como DataFrame&lt;/h2&gt;

&lt;p&gt;Habitualmente, a la hora de realizar análisis de datos, importamos el conjunto de datos en un &lt;code&gt;DataFrame&lt;/code&gt; y luego seleccionamos aquellas que nos resulten de interés para trabajar con ellas.&lt;/p&gt;

&lt;p&gt;Como hemos advertido en anteriores secciones, la librería &lt;code&gt;pandas&lt;/code&gt; acostumbra a devolver &amp;ldquo;vistas&amp;rdquo; de los &lt;code&gt;DataFrames&lt;/code&gt; en lugar de copias de los mismos (debido a cuestiones de gestión de memoria y eficiencia en la realización de ciertas operaciones). Por tanto, podemos encontrar que algunas modificaciones que llevemos a cabo pueden tener impacto en el conjunto de datos original y este comportamiento es posible que no nos interese.&lt;/p&gt;

&lt;p&gt;Por ejemplo, almacenemos en una variable los costes de los productos pertenecientes a la tabla de la sección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;costes = df[&amp;quot;Coste&amp;quot;]
costes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    498.00
Tienda 1      6.00
Tienda 2     15.25
Name: Coste, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora incrementamos en dos unidades el coste de cada producto, no solo ve alterado su valor la variable &lt;code&gt;costes&lt;/code&gt;, sino también el conjunto de datos original &lt;code&gt;df&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;costes += 2
costes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Tienda 1    500.00
Tienda 1      8.00
Tienda 2     17.25
Name: Coste, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Objeto comprado&lt;/th&gt;
      &lt;th&gt;Coste&lt;/th&gt;
      &lt;th&gt;Localización&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Alexis&lt;/td&gt;
      &lt;td&gt;Portátil&lt;/td&gt;
      &lt;td&gt;500.00&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 1&lt;/th&gt;
      &lt;td&gt;Ana&lt;/td&gt;
      &lt;td&gt;Auriculares&lt;/td&gt;
      &lt;td&gt;8.00&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tienda 2&lt;/th&gt;
      &lt;td&gt;Marta&lt;/td&gt;
      &lt;td&gt;Comida para gatos&lt;/td&gt;
      &lt;td&gt;17.25&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A continuación, veamos cómo importar los contenidos de un archivo, de tipo &lt;em&gt;CSV&lt;/em&gt;, en una estructura de datos de tipo &lt;code&gt;DataFrame&lt;/code&gt;. El fichero &lt;code&gt;olympics.csv&lt;/code&gt; (ubicado en el directorio &lt;code&gt;data&lt;/code&gt;) registra el número de medallas que cada país ha conseguido en los difirentes tipos de olimpiadas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;data/olympics.csv&amp;quot;)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;th&gt;15&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;№ Summer&lt;/td&gt;
      &lt;td&gt;01 !&lt;/td&gt;
      &lt;td&gt;02 !&lt;/td&gt;
      &lt;td&gt;03 !&lt;/td&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;№ Winter&lt;/td&gt;
      &lt;td&gt;01 !&lt;/td&gt;
      &lt;td&gt;02 !&lt;/td&gt;
      &lt;td&gt;03 !&lt;/td&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;№ Games&lt;/td&gt;
      &lt;td&gt;01 !&lt;/td&gt;
      &lt;td&gt;02 !&lt;/td&gt;
      &lt;td&gt;03 !&lt;/td&gt;
      &lt;td&gt;Combined total&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan (AFG)&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Algeria (ALG)&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Argentina (ARG)&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Armenia (ARM)&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A la vista de la tabla anterior, parece que la primera fila únicamente numera las columnas, resiendo en la segunda los nombres de cabecera de dichas columnas. Por tanto, procederemos a saltar la lectura de la línea inicial, utilizando para ello el parámetro &lt;code&gt;skiprows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por otro lado, la primera columna contiene los nombres de los distintos países, siendo estos valores perfectos candidatos para conformar los índices de cada uno de los registros. Para conseguir tal característica, simplemente indicamos que la columna de índices es la primera mediante el parámetro &lt;code&gt;index_col=0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;data/olympics.csv&amp;quot;, index_col=0, skiprows=1)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;№ Summer&lt;/th&gt;
      &lt;th&gt;01 !&lt;/th&gt;
      &lt;th&gt;02 !&lt;/th&gt;
      &lt;th&gt;03 !&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;№ Winter&lt;/th&gt;
      &lt;th&gt;01 !.1&lt;/th&gt;
      &lt;th&gt;02 !.1&lt;/th&gt;
      &lt;th&gt;03 !.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;№ Games&lt;/th&gt;
      &lt;th&gt;01 !.2&lt;/th&gt;
      &lt;th&gt;02 !.2&lt;/th&gt;
      &lt;th&gt;03 !.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Afghanistan (AFG)&lt;/th&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;№ Summer&#39;, &#39;01 !&#39;, &#39;02 !&#39;, &#39;03 !&#39;, &#39;Total&#39;, &#39;№ Winter&#39;, &#39;01 !.1&#39;,
       &#39;02 !.1&#39;, &#39;03 !.1&#39;, &#39;Total.1&#39;, &#39;№ Games&#39;, &#39;01 !.2&#39;, &#39;02 !.2&#39;, &#39;03 !.2&#39;,
       &#39;Combined total&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, encontramos dos detalles curiosos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La representación para las medallas de oro, plata y bronce es, cuanto menos, extraña: &lt;code&gt;01 !&lt;/code&gt;, &lt;code&gt;02 !&lt;/code&gt; y &lt;code&gt;03 !&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Existen columnas con las mismas etiquetas (las asociadas a los tipos de medallas y a los totales), práctica en absoluto recomendable por dar lugar a confusiones de manera muy sencilla. La librería &lt;code&gt;pandas&lt;/code&gt; gestiona esta situación incluyendo valores numéricos al final del nombre de las repetidas (&lt;code&gt;.1&lt;/code&gt;, &lt;code&gt;.2&lt;/code&gt;, &lt;code&gt;.3&lt;/code&gt;&amp;hellip;) para así poder diferenciarlas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos bien editar directamente el propio archivo &lt;em&gt;CSV&lt;/em&gt;, bien modificar las etiquetas conflictivas, desde &lt;em&gt;Python&lt;/em&gt; con la librería &lt;code&gt;pandas&lt;/code&gt;, utilizando la función &lt;code&gt;rename()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for col in df.columns:
    if col[:2]==&#39;01&#39;:
        df.rename(columns={col:&#39;Gold&#39; + col[4:]}, inplace=True)
    if col[:2]==&#39;02&#39;:
        df.rename(columns={col:&#39;Silver&#39; + col[4:]}, inplace=True)
    if col[:2]==&#39;03&#39;:
        df.rename(columns={col:&#39;Bronze&#39; + col[4:]}, inplace=True)
    if col[:1]==&#39;№&#39;:
        df.rename(columns={col:&#39;#&#39; + col[1:]}, inplace=True) 

df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Afghanistan (AFG)&lt;/th&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Notemos el uso del parámetro &lt;code&gt;inplace&lt;/code&gt;, que permite modificar el objeto original, puesto que su valor está declarado como &lt;code&gt;True&lt;/code&gt;. Por otro lado, hemos de proceder con cautela a la hora de renombrar las columnas para no perder la unicidad durante el proceso, de ahí la justificación de la concatenación &lt;code&gt;+ col[4:]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;section-6&#34;&gt;6. Consultas en DataFrame&lt;/h2&gt;

&lt;p&gt;Antes de abordar cómo realizar consultas en &lt;code&gt;DataFrame&lt;/code&gt;, hemos de introducir el concepto de &lt;em&gt;máscara booleana&lt;/em&gt; (&lt;em&gt;boolean masking&lt;/em&gt;), puesto que esta estrategia es la que permite consultar el conjunto de datos de una manera rápida y eficiente.&lt;/p&gt;

&lt;p&gt;La idea es construir un &lt;em&gt;array&lt;/em&gt; (unidimensional o multidimensional) de valores lógicos &lt;code&gt;True&lt;/code&gt; o &lt;code&gt;False&lt;/code&gt;, que luego utilizaremos para extraer la información que nos interese del conjunto de datos.&lt;/p&gt;

&lt;p&gt;Por ejemplo, utilizando la tabla de datos que figura en la sección anterior y que recoge el número de medallas obtenidas por cada país en las olimpiadas, podemos estar interesados en consultar qué países han conseguido al menos una medalla de oro en las de verano (recordemos que esta información se almacenaba en la columna &lt;code&gt;&amp;quot;Gold&amp;quot;&lt;/code&gt;). Si escribimos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;Gold&amp;quot;] &amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Afghanistan (AFG)                               False
Algeria (ALG)                                    True
Argentina (ARG)                                  True
Armenia (ARM)                                    True
Australasia (ANZ) [ANZ]                          True
Australia (AUS) [AUS] [Z]                        True
Austria (AUT)                                    True
Azerbaijan (AZE)                                 True
Bahamas (BAH)                                    True
Bahrain (BRN)                                   False
Barbados (BAR) [BAR]                            False
Belarus (BLR)                                    True
Belgium (BEL)                                    True
Bermuda (BER)                                   False
Bohemia (BOH) [BOH] [Z]                         False
Botswana (BOT)                                  False
Brazil (BRA)                                     True
British West Indies (BWI) [BWI]                 False
Bulgaria (BUL) [H]                               True
Burundi (BDI)                                    True
Cameroon (CMR)                                   True
Canada (CAN)                                     True
Chile (CHI) [I]                                  True
China (CHN) [CHN]                                True
Colombia (COL)                                   True
Costa Rica (CRC)                                 True
Ivory Coast (CIV) [CIV]                         False
Croatia (CRO)                                    True
Cuba (CUB) [Z]                                   True
Cyprus (CYP)                                    False
                                                ...  
Sri Lanka (SRI) [SRI]                           False
Sudan (SUD)                                     False
Suriname (SUR) [E]                               True
Sweden (SWE) [Z]                                 True
Switzerland (SUI)                                True
Syria (SYR)                                      True
Chinese Taipei (TPE) [TPE] [TPE2]                True
Tajikistan (TJK)                                False
Tanzania (TAN) [TAN]                            False
Thailand (THA)                                   True
Togo (TOG)                                      False
Tonga (TGA)                                     False
Trinidad and Tobago (TRI) [TRI]                  True
Tunisia (TUN)                                    True
Turkey (TUR)                                     True
Uganda (UGA)                                     True
Ukraine (UKR)                                    True
United Arab Emirates (UAE)                       True
United States (USA) [P] [Q] [R] [Z]              True
Uruguay (URU)                                    True
Uzbekistan (UZB)                                 True
Venezuela (VEN)                                  True
Vietnam (VIE)                                   False
Virgin Islands (ISV)                            False
Yugoslavia (YUG) [YUG]                           True
Independent Olympic Participants (IOP) [IOP]    False
Zambia (ZAM) [ZAM]                              False
Zimbabwe (ZIM) [ZIM]                             True
Mixed team (ZZX) [ZZX]                           True
Totals                                           True
Name: Gold, Length: 147, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez hemos construido la máscara de valores lógicos (&lt;em&gt;boolean mask&lt;/em&gt;), ya solo nos resta aplicarla al conjunto de datos original mediante la función &lt;code&gt;where()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;solo_oro = df.where(df[&amp;quot;Gold&amp;quot;] &amp;gt; 0)
solo_oro.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Afghanistan (AFG)&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Como podemos observar, se conservan todos los registros, pero únicamente existen datos disponibles para aquellos que verifican la condición impuesta, esto es, que han conseguido al menos una medalla de oro en las olimpiadas de verano. En total son&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;solo_oro[&amp;quot;Gold&amp;quot;].count()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;es decir, 100 países de un total de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;Gold&amp;quot;].count()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;147
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;147 países que contiene el conjunto de datos original.&lt;/p&gt;

&lt;p&gt;Habitualmente, los registros sin información asociada los descartaremos, haciendo uso para ello de la función &lt;code&gt;dropna()&lt;/code&gt; que, por defecto, actúa sobre las filas (&lt;code&gt;axis=0&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;solo_oro = solo_oro.dropna()
solo_oro.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australia (AUS) [AUS] [Z]&lt;/th&gt;
      &lt;td&gt;25.0&lt;/td&gt;
      &lt;td&gt;139.0&lt;/td&gt;
      &lt;td&gt;152.0&lt;/td&gt;
      &lt;td&gt;177.0&lt;/td&gt;
      &lt;td&gt;468.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;144.0&lt;/td&gt;
      &lt;td&gt;155.0&lt;/td&gt;
      &lt;td&gt;181.0&lt;/td&gt;
      &lt;td&gt;480.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Al ser un tipo de acción habitual a la hora de llevar a cabo análisis de datos, los desarrollares de la librería &lt;code&gt;pandas&lt;/code&gt; han incluido un atajo (mediante el operador índice &lt;code&gt;[]&lt;/code&gt; al que le suministramos directamente la máscara booleana) para conseguir el mismo efecto de una manera más sencilla y, sobretodo, que destaca por su legibilidad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;solo_oro = df[df[&amp;quot;Gold&amp;quot;] &amp;gt; 0]
solo_oro.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australia (AUS) [AUS] [Z]&lt;/th&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
      &lt;td&gt;177&lt;/td&gt;
      &lt;td&gt;468&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
      &lt;td&gt;144&lt;/td&gt;
      &lt;td&gt;155&lt;/td&gt;
      &lt;td&gt;181&lt;/td&gt;
      &lt;td&gt;480&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Adicionalmente, podemos encadenar condiciones lógicas para construir consultas más complejas. Por ejemplo, ¿cuántos países han ganado al menos una medalla de oro en las olimpiadas de verano o en las de invierno?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(df[(df[&#39;Gold&#39;] &amp;gt; 0) | (df[&#39;Gold.1&#39;] &amp;gt; 0)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto es, 101 países. Recordemos que 100 países habían conseguido al menos una medalla de oro en las olimpiadas de verano, por lo que existe un país que ha ganado al menos una medalla de oro en las olimpiadas de invierno, pero ninguna en las de verano. ¿De qué país se trata?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[(df[&#39;Gold.1&#39;] &amp;gt; 0) &amp;amp; (df[&#39;Gold&#39;] == 0)]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Liechtenstein (LIE)&lt;/th&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: debido al orden en el que se efectúan las operaciones en &lt;em&gt;Python&lt;/em&gt; cada máscara booleana debe encerrarse entre paréntesis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: escribe una consulta que devuelva los nombres de las personas que compraron productos cuyo valor es superior a tres dólares.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;purchase_1 = pd.Series({&#39;Name&#39;: &#39;Chris&#39;,
                        &#39;Item Purchased&#39;: &#39;Dog Food&#39;,
                        &#39;Cost&#39;: 22.50})
purchase_2 = pd.Series({&#39;Name&#39;: &#39;Kevyn&#39;,
                        &#39;Item Purchased&#39;: &#39;Kitty Litter&#39;,
                        &#39;Cost&#39;: 2.50})
purchase_3 = pd.Series({&#39;Name&#39;: &#39;Vinod&#39;,
                        &#39;Item Purchased&#39;: &#39;Bird Seed&#39;,
                        &#39;Cost&#39;: 5.00})

df2 = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=[&#39;Store 1&#39;, &#39;Store 1&#39;, &#39;Store 2&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;purchase_1 = pd.Series({&#39;Name&#39;: &#39;Chris&#39;,
                        &#39;Item Purchased&#39;: &#39;Dog Food&#39;,
                        &#39;Cost&#39;: 22.50})
purchase_2 = pd.Series({&#39;Name&#39;: &#39;Kevyn&#39;,
                        &#39;Item Purchased&#39;: &#39;Kitty Litter&#39;,
                        &#39;Cost&#39;: 2.50})
purchase_3 = pd.Series({&#39;Name&#39;: &#39;Vinod&#39;,
                        &#39;Item Purchased&#39;: &#39;Bird Seed&#39;,
                        &#39;Cost&#39;: 5.00})

df2 = pd.DataFrame([purchase_1, purchase_2, purchase_3], 
                  index=[&#39;Store 1&#39;, &#39;Store 1&#39;, &#39;Store 2&#39;])

df2[df2[&amp;quot;Cost&amp;quot;] &amp;gt; 3][&amp;quot;Name&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Store 1    Chris
Store 2    Vinod
Name: Name, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-7&#34;&gt;7. Índices en DataFrame&lt;/h2&gt;

&lt;p&gt;Además de las maneras que hemos visto para generar índices en un objeto de tipo &lt;code&gt;Series&lt;/code&gt; o &lt;code&gt;DataFrame&lt;/code&gt;, podemos utilizar la función &lt;code&gt;set_index()&lt;/code&gt;, que toma una lista de columnas y las convierte en índices para el objeto.&lt;/p&gt;

&lt;p&gt;Hemos de actuar con cautela, porque la función no almacena el índice actual antes de sobreescribirlo por el nuevo. No obstante, siempre podemos crear una columna adicional en el conjunto de datos, que almacene el índice actual, antes de utilizar la mencionada función.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Afghanistan (AFG)&lt;/th&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Algeria (ALG)&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina (ARG)&lt;/th&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Armenia (ARM)&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Australasia (ANZ) [ANZ]&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Imaginemos que deseamos indexar (almacenando previamente en una columna el índice actual por países) la anterior tabla por el número de medallas de oro conseguidas en las olimpiadas de verano:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;country&amp;quot;] = df.index  # guardamos el índice actual en una columna del conjunto de datos
df = df.set_index(&amp;quot;Gold&amp;quot;)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Afghanistan (AFG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;Algeria (ALG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;Argentina (ARG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Armenia (ARM)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Australasia (ANZ) [ANZ]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Por otro lado, podemos deshacernos directamente del índice asignado sin más que emplear la función &lt;code&gt;reset_index()&lt;/code&gt;, que almacena el actual en una columna del conjunto de datos (no en el orden que antes que estaba declarado) y genera un índice numérico nuevo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.reset_index()
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Gold&lt;/th&gt;
      &lt;th&gt;# Summer&lt;/th&gt;
      &lt;th&gt;Silver&lt;/th&gt;
      &lt;th&gt;Bronze&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
      &lt;th&gt;# Winter&lt;/th&gt;
      &lt;th&gt;Gold.1&lt;/th&gt;
      &lt;th&gt;Silver.1&lt;/th&gt;
      &lt;th&gt;Bronze.1&lt;/th&gt;
      &lt;th&gt;Total.1&lt;/th&gt;
      &lt;th&gt;# Games&lt;/th&gt;
      &lt;th&gt;Gold.2&lt;/th&gt;
      &lt;th&gt;Silver.2&lt;/th&gt;
      &lt;th&gt;Bronze.2&lt;/th&gt;
      &lt;th&gt;Combined total&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Afghanistan (AFG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;Algeria (ALG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;Argentina (ARG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Armenia (ARM)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Australasia (ANZ) [ANZ]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A continuación, veamos una característica ciertamente útil de la librería &lt;code&gt;pandas&lt;/code&gt;: permite la existencia de múltiples índices (pasando una lista con varios elementos a la función &lt;code&gt;set_index()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Para ver en acción esta funcionalidad, analicemos datos de censo, que suelen estar divididos por estado y ciudad, posibilitando así ver en acción múltiples índices:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;data/census.csv&amp;quot;)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;SUMLEV&lt;/th&gt;
      &lt;th&gt;REGION&lt;/th&gt;
      &lt;th&gt;DIVISION&lt;/th&gt;
      &lt;th&gt;STATE&lt;/th&gt;
      &lt;th&gt;COUNTY&lt;/th&gt;
      &lt;th&gt;STNAME&lt;/th&gt;
      &lt;th&gt;CTYNAME&lt;/th&gt;
      &lt;th&gt;CENSUS2010POP&lt;/th&gt;
      &lt;th&gt;ESTIMATESBASE2010&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2010&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2011&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2012&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2013&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2014&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2015&lt;/th&gt;
      &lt;th&gt;RNETMIG2011&lt;/th&gt;
      &lt;th&gt;RNETMIG2012&lt;/th&gt;
      &lt;th&gt;RNETMIG2013&lt;/th&gt;
      &lt;th&gt;RNETMIG2014&lt;/th&gt;
      &lt;th&gt;RNETMIG2015&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;4779736&lt;/td&gt;
      &lt;td&gt;4780127&lt;/td&gt;
      &lt;td&gt;4785161&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0.002295&lt;/td&gt;
      &lt;td&gt;-0.193196&lt;/td&gt;
      &lt;td&gt;0.381066&lt;/td&gt;
      &lt;td&gt;0.582002&lt;/td&gt;
      &lt;td&gt;-0.467369&lt;/td&gt;
      &lt;td&gt;1.030015&lt;/td&gt;
      &lt;td&gt;0.826644&lt;/td&gt;
      &lt;td&gt;1.383282&lt;/td&gt;
      &lt;td&gt;1.724718&lt;/td&gt;
      &lt;td&gt;0.712594&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Autauga County&lt;/td&gt;
      &lt;td&gt;54571&lt;/td&gt;
      &lt;td&gt;54571&lt;/td&gt;
      &lt;td&gt;54660&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;7.242091&lt;/td&gt;
      &lt;td&gt;-2.915927&lt;/td&gt;
      &lt;td&gt;-3.012349&lt;/td&gt;
      &lt;td&gt;2.265971&lt;/td&gt;
      &lt;td&gt;-2.530799&lt;/td&gt;
      &lt;td&gt;7.606016&lt;/td&gt;
      &lt;td&gt;-2.626146&lt;/td&gt;
      &lt;td&gt;-2.722002&lt;/td&gt;
      &lt;td&gt;2.592270&lt;/td&gt;
      &lt;td&gt;-2.187333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Baldwin County&lt;/td&gt;
      &lt;td&gt;182265&lt;/td&gt;
      &lt;td&gt;182265&lt;/td&gt;
      &lt;td&gt;183193&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;14.832960&lt;/td&gt;
      &lt;td&gt;17.647293&lt;/td&gt;
      &lt;td&gt;21.845705&lt;/td&gt;
      &lt;td&gt;19.243287&lt;/td&gt;
      &lt;td&gt;17.197872&lt;/td&gt;
      &lt;td&gt;15.844176&lt;/td&gt;
      &lt;td&gt;18.559627&lt;/td&gt;
      &lt;td&gt;22.727626&lt;/td&gt;
      &lt;td&gt;20.317142&lt;/td&gt;
      &lt;td&gt;18.293499&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Barbour County&lt;/td&gt;
      &lt;td&gt;27457&lt;/td&gt;
      &lt;td&gt;27457&lt;/td&gt;
      &lt;td&gt;27341&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-4.728132&lt;/td&gt;
      &lt;td&gt;-2.500690&lt;/td&gt;
      &lt;td&gt;-7.056824&lt;/td&gt;
      &lt;td&gt;-3.904217&lt;/td&gt;
      &lt;td&gt;-10.543299&lt;/td&gt;
      &lt;td&gt;-4.874741&lt;/td&gt;
      &lt;td&gt;-2.758113&lt;/td&gt;
      &lt;td&gt;-7.167664&lt;/td&gt;
      &lt;td&gt;-3.978583&lt;/td&gt;
      &lt;td&gt;-10.543299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bibb County&lt;/td&gt;
      &lt;td&gt;22915&lt;/td&gt;
      &lt;td&gt;22919&lt;/td&gt;
      &lt;td&gt;22861&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-5.527043&lt;/td&gt;
      &lt;td&gt;-5.068871&lt;/td&gt;
      &lt;td&gt;-6.201001&lt;/td&gt;
      &lt;td&gt;-0.177537&lt;/td&gt;
      &lt;td&gt;0.177258&lt;/td&gt;
      &lt;td&gt;-5.088389&lt;/td&gt;
      &lt;td&gt;-4.363636&lt;/td&gt;
      &lt;td&gt;-5.403729&lt;/td&gt;
      &lt;td&gt;0.754533&lt;/td&gt;
      &lt;td&gt;1.107861&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 100 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&amp;quot;SUMLEV&amp;quot;].unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([40, 50], dtype=int64)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mediante la función &lt;code&gt;unique()&lt;/code&gt; tenemos acceso a un listado con los diferentes valores recogidos en una columna concreta del conjunto de datos. Por ejemplo, para &lt;code&gt;SUMLEV&lt;/code&gt; encontramos únicamente dos valores distintos, &lt;code&gt;40&lt;/code&gt; y &lt;code&gt;50&lt;/code&gt;, según las estadísticas de resumen se hayan proporcionado a nivel de estado o de condado.&lt;/p&gt;

&lt;p&gt;Quedemos con estas últimas aplicando una máscara booleana adecuada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df[df[&amp;quot;SUMLEV&amp;quot;] == 50]
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;SUMLEV&lt;/th&gt;
      &lt;th&gt;REGION&lt;/th&gt;
      &lt;th&gt;DIVISION&lt;/th&gt;
      &lt;th&gt;STATE&lt;/th&gt;
      &lt;th&gt;COUNTY&lt;/th&gt;
      &lt;th&gt;STNAME&lt;/th&gt;
      &lt;th&gt;CTYNAME&lt;/th&gt;
      &lt;th&gt;CENSUS2010POP&lt;/th&gt;
      &lt;th&gt;ESTIMATESBASE2010&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2010&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2011&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2012&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2013&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2014&lt;/th&gt;
      &lt;th&gt;RDOMESTICMIG2015&lt;/th&gt;
      &lt;th&gt;RNETMIG2011&lt;/th&gt;
      &lt;th&gt;RNETMIG2012&lt;/th&gt;
      &lt;th&gt;RNETMIG2013&lt;/th&gt;
      &lt;th&gt;RNETMIG2014&lt;/th&gt;
      &lt;th&gt;RNETMIG2015&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Autauga County&lt;/td&gt;
      &lt;td&gt;54571&lt;/td&gt;
      &lt;td&gt;54571&lt;/td&gt;
      &lt;td&gt;54660&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;7.242091&lt;/td&gt;
      &lt;td&gt;-2.915927&lt;/td&gt;
      &lt;td&gt;-3.012349&lt;/td&gt;
      &lt;td&gt;2.265971&lt;/td&gt;
      &lt;td&gt;-2.530799&lt;/td&gt;
      &lt;td&gt;7.606016&lt;/td&gt;
      &lt;td&gt;-2.626146&lt;/td&gt;
      &lt;td&gt;-2.722002&lt;/td&gt;
      &lt;td&gt;2.592270&lt;/td&gt;
      &lt;td&gt;-2.187333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Baldwin County&lt;/td&gt;
      &lt;td&gt;182265&lt;/td&gt;
      &lt;td&gt;182265&lt;/td&gt;
      &lt;td&gt;183193&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;14.832960&lt;/td&gt;
      &lt;td&gt;17.647293&lt;/td&gt;
      &lt;td&gt;21.845705&lt;/td&gt;
      &lt;td&gt;19.243287&lt;/td&gt;
      &lt;td&gt;17.197872&lt;/td&gt;
      &lt;td&gt;15.844176&lt;/td&gt;
      &lt;td&gt;18.559627&lt;/td&gt;
      &lt;td&gt;22.727626&lt;/td&gt;
      &lt;td&gt;20.317142&lt;/td&gt;
      &lt;td&gt;18.293499&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Barbour County&lt;/td&gt;
      &lt;td&gt;27457&lt;/td&gt;
      &lt;td&gt;27457&lt;/td&gt;
      &lt;td&gt;27341&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-4.728132&lt;/td&gt;
      &lt;td&gt;-2.500690&lt;/td&gt;
      &lt;td&gt;-7.056824&lt;/td&gt;
      &lt;td&gt;-3.904217&lt;/td&gt;
      &lt;td&gt;-10.543299&lt;/td&gt;
      &lt;td&gt;-4.874741&lt;/td&gt;
      &lt;td&gt;-2.758113&lt;/td&gt;
      &lt;td&gt;-7.167664&lt;/td&gt;
      &lt;td&gt;-3.978583&lt;/td&gt;
      &lt;td&gt;-10.543299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bibb County&lt;/td&gt;
      &lt;td&gt;22915&lt;/td&gt;
      &lt;td&gt;22919&lt;/td&gt;
      &lt;td&gt;22861&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-5.527043&lt;/td&gt;
      &lt;td&gt;-5.068871&lt;/td&gt;
      &lt;td&gt;-6.201001&lt;/td&gt;
      &lt;td&gt;-0.177537&lt;/td&gt;
      &lt;td&gt;0.177258&lt;/td&gt;
      &lt;td&gt;-5.088389&lt;/td&gt;
      &lt;td&gt;-4.363636&lt;/td&gt;
      &lt;td&gt;-5.403729&lt;/td&gt;
      &lt;td&gt;0.754533&lt;/td&gt;
      &lt;td&gt;1.107861&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Blount County&lt;/td&gt;
      &lt;td&gt;57322&lt;/td&gt;
      &lt;td&gt;57322&lt;/td&gt;
      &lt;td&gt;57373&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1.807375&lt;/td&gt;
      &lt;td&gt;-1.177622&lt;/td&gt;
      &lt;td&gt;-1.748766&lt;/td&gt;
      &lt;td&gt;-2.062535&lt;/td&gt;
      &lt;td&gt;-1.369970&lt;/td&gt;
      &lt;td&gt;1.859511&lt;/td&gt;
      &lt;td&gt;-0.848580&lt;/td&gt;
      &lt;td&gt;-1.402476&lt;/td&gt;
      &lt;td&gt;-1.577232&lt;/td&gt;
      &lt;td&gt;-0.884411&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 100 columns&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Acto seguido, para trabajar con una tabla algo más manejable, restrinjamos sus columnas a nacimientos y estimaciones para la población, además de conservar también el nombre del estado y la correspondiente ciudad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;columns_to_keep = [&#39;STNAME&#39;,
                   &#39;CTYNAME&#39;,
                   &#39;BIRTHS2010&#39;,
                   &#39;BIRTHS2011&#39;,
                   &#39;BIRTHS2012&#39;,
                   &#39;BIRTHS2013&#39;,
                   &#39;BIRTHS2014&#39;,
                   &#39;BIRTHS2015&#39;,
                   &#39;POPESTIMATE2010&#39;,
                   &#39;POPESTIMATE2011&#39;,
                   &#39;POPESTIMATE2012&#39;,
                   &#39;POPESTIMATE2013&#39;,
                   &#39;POPESTIMATE2014&#39;,
                   &#39;POPESTIMATE2015&#39;]
df = df[columns_to_keep]
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;STNAME&lt;/th&gt;
      &lt;th&gt;CTYNAME&lt;/th&gt;
      &lt;th&gt;BIRTHS2010&lt;/th&gt;
      &lt;th&gt;BIRTHS2011&lt;/th&gt;
      &lt;th&gt;BIRTHS2012&lt;/th&gt;
      &lt;th&gt;BIRTHS2013&lt;/th&gt;
      &lt;th&gt;BIRTHS2014&lt;/th&gt;
      &lt;th&gt;BIRTHS2015&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2010&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2011&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2012&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2013&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2014&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2015&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Autauga County&lt;/td&gt;
      &lt;td&gt;151&lt;/td&gt;
      &lt;td&gt;636&lt;/td&gt;
      &lt;td&gt;615&lt;/td&gt;
      &lt;td&gt;574&lt;/td&gt;
      &lt;td&gt;623&lt;/td&gt;
      &lt;td&gt;600&lt;/td&gt;
      &lt;td&gt;54660&lt;/td&gt;
      &lt;td&gt;55253&lt;/td&gt;
      &lt;td&gt;55175&lt;/td&gt;
      &lt;td&gt;55038&lt;/td&gt;
      &lt;td&gt;55290&lt;/td&gt;
      &lt;td&gt;55347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Baldwin County&lt;/td&gt;
      &lt;td&gt;517&lt;/td&gt;
      &lt;td&gt;2187&lt;/td&gt;
      &lt;td&gt;2092&lt;/td&gt;
      &lt;td&gt;2160&lt;/td&gt;
      &lt;td&gt;2186&lt;/td&gt;
      &lt;td&gt;2240&lt;/td&gt;
      &lt;td&gt;183193&lt;/td&gt;
      &lt;td&gt;186659&lt;/td&gt;
      &lt;td&gt;190396&lt;/td&gt;
      &lt;td&gt;195126&lt;/td&gt;
      &lt;td&gt;199713&lt;/td&gt;
      &lt;td&gt;203709&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Barbour County&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;335&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;283&lt;/td&gt;
      &lt;td&gt;260&lt;/td&gt;
      &lt;td&gt;269&lt;/td&gt;
      &lt;td&gt;27341&lt;/td&gt;
      &lt;td&gt;27226&lt;/td&gt;
      &lt;td&gt;27159&lt;/td&gt;
      &lt;td&gt;26973&lt;/td&gt;
      &lt;td&gt;26815&lt;/td&gt;
      &lt;td&gt;26489&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bibb County&lt;/td&gt;
      &lt;td&gt;44&lt;/td&gt;
      &lt;td&gt;266&lt;/td&gt;
      &lt;td&gt;245&lt;/td&gt;
      &lt;td&gt;259&lt;/td&gt;
      &lt;td&gt;247&lt;/td&gt;
      &lt;td&gt;253&lt;/td&gt;
      &lt;td&gt;22861&lt;/td&gt;
      &lt;td&gt;22733&lt;/td&gt;
      &lt;td&gt;22642&lt;/td&gt;
      &lt;td&gt;22512&lt;/td&gt;
      &lt;td&gt;22549&lt;/td&gt;
      &lt;td&gt;22583&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Blount County&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
      &lt;td&gt;744&lt;/td&gt;
      &lt;td&gt;710&lt;/td&gt;
      &lt;td&gt;646&lt;/td&gt;
      &lt;td&gt;618&lt;/td&gt;
      &lt;td&gt;603&lt;/td&gt;
      &lt;td&gt;57373&lt;/td&gt;
      &lt;td&gt;57711&lt;/td&gt;
      &lt;td&gt;57776&lt;/td&gt;
      &lt;td&gt;57734&lt;/td&gt;
      &lt;td&gt;57658&lt;/td&gt;
      &lt;td&gt;57673&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A continuación, observamos que la estructura del conjunto de datos admite, de manera ideal, dos índices: uno correspondiente al nombre del estado y otro al de la ciudad. Utilicemos adecuadamente la función &lt;code&gt;set_index()&lt;/code&gt; para conseguir tal característica:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.set_index([&amp;quot;STNAME&amp;quot;, &amp;quot;CTYNAME&amp;quot;])
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;BIRTHS2010&lt;/th&gt;
      &lt;th&gt;BIRTHS2011&lt;/th&gt;
      &lt;th&gt;BIRTHS2012&lt;/th&gt;
      &lt;th&gt;BIRTHS2013&lt;/th&gt;
      &lt;th&gt;BIRTHS2014&lt;/th&gt;
      &lt;th&gt;BIRTHS2015&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2010&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2011&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2012&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2013&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2014&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2015&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;STNAME&lt;/th&gt;
      &lt;th&gt;CTYNAME&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;Alabama&lt;/th&gt;
      &lt;th&gt;Autauga County&lt;/th&gt;
      &lt;td&gt;151&lt;/td&gt;
      &lt;td&gt;636&lt;/td&gt;
      &lt;td&gt;615&lt;/td&gt;
      &lt;td&gt;574&lt;/td&gt;
      &lt;td&gt;623&lt;/td&gt;
      &lt;td&gt;600&lt;/td&gt;
      &lt;td&gt;54660&lt;/td&gt;
      &lt;td&gt;55253&lt;/td&gt;
      &lt;td&gt;55175&lt;/td&gt;
      &lt;td&gt;55038&lt;/td&gt;
      &lt;td&gt;55290&lt;/td&gt;
      &lt;td&gt;55347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Baldwin County&lt;/th&gt;
      &lt;td&gt;517&lt;/td&gt;
      &lt;td&gt;2187&lt;/td&gt;
      &lt;td&gt;2092&lt;/td&gt;
      &lt;td&gt;2160&lt;/td&gt;
      &lt;td&gt;2186&lt;/td&gt;
      &lt;td&gt;2240&lt;/td&gt;
      &lt;td&gt;183193&lt;/td&gt;
      &lt;td&gt;186659&lt;/td&gt;
      &lt;td&gt;190396&lt;/td&gt;
      &lt;td&gt;195126&lt;/td&gt;
      &lt;td&gt;199713&lt;/td&gt;
      &lt;td&gt;203709&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Barbour County&lt;/th&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;335&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;283&lt;/td&gt;
      &lt;td&gt;260&lt;/td&gt;
      &lt;td&gt;269&lt;/td&gt;
      &lt;td&gt;27341&lt;/td&gt;
      &lt;td&gt;27226&lt;/td&gt;
      &lt;td&gt;27159&lt;/td&gt;
      &lt;td&gt;26973&lt;/td&gt;
      &lt;td&gt;26815&lt;/td&gt;
      &lt;td&gt;26489&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Bibb County&lt;/th&gt;
      &lt;td&gt;44&lt;/td&gt;
      &lt;td&gt;266&lt;/td&gt;
      &lt;td&gt;245&lt;/td&gt;
      &lt;td&gt;259&lt;/td&gt;
      &lt;td&gt;247&lt;/td&gt;
      &lt;td&gt;253&lt;/td&gt;
      &lt;td&gt;22861&lt;/td&gt;
      &lt;td&gt;22733&lt;/td&gt;
      &lt;td&gt;22642&lt;/td&gt;
      &lt;td&gt;22512&lt;/td&gt;
      &lt;td&gt;22549&lt;/td&gt;
      &lt;td&gt;22583&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Blount County&lt;/th&gt;
      &lt;td&gt;183&lt;/td&gt;
      &lt;td&gt;744&lt;/td&gt;
      &lt;td&gt;710&lt;/td&gt;
      &lt;td&gt;646&lt;/td&gt;
      &lt;td&gt;618&lt;/td&gt;
      &lt;td&gt;603&lt;/td&gt;
      &lt;td&gt;57373&lt;/td&gt;
      &lt;td&gt;57711&lt;/td&gt;
      &lt;td&gt;57776&lt;/td&gt;
      &lt;td&gt;57734&lt;/td&gt;
      &lt;td&gt;57658&lt;/td&gt;
      &lt;td&gt;57673&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Ahora, para consultar, por ejemplo, los datos de &lt;em&gt;Washtenaw County&lt;/em&gt;, hemos de pasar al atributo &lt;code&gt;loc&lt;/code&gt; también el valor del estado donde se encuentra dicha ciudad, &lt;em&gt;Michigan&lt;/em&gt;, y respetando el orden declarado arriba en el interior de la función &lt;code&gt;set_index()&lt;/code&gt;(estado, ciudad).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&amp;quot;Michigan&amp;quot;, &amp;quot;Washtenaw County&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BIRTHS2010            977
BIRTHS2011           3826
BIRTHS2012           3780
BIRTHS2013           3662
BIRTHS2014           3683
BIRTHS2015           3709
POPESTIMATE2010    345563
POPESTIMATE2011    349048
POPESTIMATE2012    351213
POPESTIMATE2013    354289
POPESTIMATE2014    357029
POPESTIMATE2015    358880
Name: (Michigan, Washtenaw County), dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, generar tablas comparativas entre diferentes ciudades de interés es sumamente sencillo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[[(&amp;quot;Michigan&amp;quot;, &amp;quot;Washtenaw County&amp;quot;),
        (&amp;quot;Michigan&amp;quot;, &amp;quot;Wayne County&amp;quot;)]]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;BIRTHS2010&lt;/th&gt;
      &lt;th&gt;BIRTHS2011&lt;/th&gt;
      &lt;th&gt;BIRTHS2012&lt;/th&gt;
      &lt;th&gt;BIRTHS2013&lt;/th&gt;
      &lt;th&gt;BIRTHS2014&lt;/th&gt;
      &lt;th&gt;BIRTHS2015&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2010&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2011&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2012&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2013&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2014&lt;/th&gt;
      &lt;th&gt;POPESTIMATE2015&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;STNAME&lt;/th&gt;
      &lt;th&gt;CTYNAME&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;Michigan&lt;/th&gt;
      &lt;th&gt;Washtenaw County&lt;/th&gt;
      &lt;td&gt;977&lt;/td&gt;
      &lt;td&gt;3826&lt;/td&gt;
      &lt;td&gt;3780&lt;/td&gt;
      &lt;td&gt;3662&lt;/td&gt;
      &lt;td&gt;3683&lt;/td&gt;
      &lt;td&gt;3709&lt;/td&gt;
      &lt;td&gt;345563&lt;/td&gt;
      &lt;td&gt;349048&lt;/td&gt;
      &lt;td&gt;351213&lt;/td&gt;
      &lt;td&gt;354289&lt;/td&gt;
      &lt;td&gt;357029&lt;/td&gt;
      &lt;td&gt;358880&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Wayne County&lt;/th&gt;
      &lt;td&gt;5918&lt;/td&gt;
      &lt;td&gt;23819&lt;/td&gt;
      &lt;td&gt;23270&lt;/td&gt;
      &lt;td&gt;23377&lt;/td&gt;
      &lt;td&gt;23607&lt;/td&gt;
      &lt;td&gt;23586&lt;/td&gt;
      &lt;td&gt;1815199&lt;/td&gt;
      &lt;td&gt;1801273&lt;/td&gt;
      &lt;td&gt;1792514&lt;/td&gt;
      &lt;td&gt;1775713&lt;/td&gt;
      &lt;td&gt;1766008&lt;/td&gt;
      &lt;td&gt;1759335&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Finalmente, el concepto de índices múltiples no se restringe únicamente a las filas, sino que también es posible obtener esta característica para las columnas. Basta trasponer el conjunto de datos (mediante el atributo &lt;code&gt;T&lt;/code&gt;) y utilizar adecuadamente la función &lt;code&gt;set_index()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: indexa los registros de compras del siguiente &lt;code&gt;DataFrama&lt;/code&gt; jerárquicamente, primero por tienda y luego por persona. Designa dichos índices como &lt;code&gt;&amp;quot;Location&amp;quot;&lt;/code&gt; y &lt;code&gt;&amp;quot;Nombre&amp;quot;&lt;/code&gt;. Después, añade un nuevo registro a la tabla con el siguiente valor:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Name: &#39;Kevyn&#39;, Item Purchased: &#39;Kitty Food&#39;, Cost: 3.00 Location: &#39;Store 2&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;purchase_1 = pd.Series({&#39;Name&#39;: &#39;Chris&#39;,
                        &#39;Item Purchased&#39;: &#39;Dog Food&#39;,
                        &#39;Cost&#39;: 22.50})
purchase_2 = pd.Series({&#39;Name&#39;: &#39;Kevyn&#39;,
                        &#39;Item Purchased&#39;: &#39;Kitty Litter&#39;,
                        &#39;Cost&#39;: 2.50})
purchase_3 = pd.Series({&#39;Name&#39;: &#39;Vinod&#39;,
                        &#39;Item Purchased&#39;: &#39;Bird Seed&#39;,
                        &#39;Cost&#39;: 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=[&#39;Store 1&#39;, &#39;Store 1&#39;, &#39;Store 2&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;purchase_1 = pd.Series({&#39;Name&#39;: &#39;Chris&#39;,
                        &#39;Item Purchased&#39;: &#39;Dog Food&#39;,
                        &#39;Cost&#39;: 22.50})
purchase_2 = pd.Series({&#39;Name&#39;: &#39;Kevyn&#39;,
                        &#39;Item Purchased&#39;: &#39;Kitty Litter&#39;,
                        &#39;Cost&#39;: 2.50})
purchase_3 = pd.Series({&#39;Name&#39;: &#39;Vinod&#39;,
                        &#39;Item Purchased&#39;: &#39;Bird Seed&#39;,
                        &#39;Cost&#39;: 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], 
                  index=[&#39;Store 1&#39;, &#39;Store 1&#39;, &#39;Store 2&#39;])


df = df.set_index([df.index, &#39;Name&#39;])
df.index.names = [&#39;Location&#39;, &#39;Name&#39;]
df = df.append(pd.Series(data={&#39;Cost&#39;: 3.00, 
                               &#39;Item Purchased&#39;: &#39;Kitty Food&#39;}, 
                         name=(&#39;Store 2&#39;, &#39;Kevyn&#39;)))
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Item Purchased&lt;/th&gt;
      &lt;th&gt;Cost&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Location&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;Store 1&lt;/th&gt;
      &lt;th&gt;Chris&lt;/th&gt;
      &lt;td&gt;Dog Food&lt;/td&gt;
      &lt;td&gt;22.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Kevyn&lt;/th&gt;
      &lt;td&gt;Kitty Litter&lt;/td&gt;
      &lt;td&gt;2.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;Store 2&lt;/th&gt;
      &lt;th&gt;Vinod&lt;/th&gt;
      &lt;td&gt;Bird Seed&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Kevyn&lt;/th&gt;
      &lt;td&gt;Kitty Food&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;section-8&#34;&gt;8. Valores perdidos&lt;/h2&gt;

&lt;p&gt;Dado que es bastante frecuente encontrar valores perdidos en conjuntos de datos, veamos cómo podemos gestionarlos con la librería &lt;code&gt;pandas&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar, importemos un conjunto de datos que registra la actividad de visualización de vídeos de algunos estudiantes en una plataforma de aprendizaje en línea.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&amp;quot;data/log.csv&amp;quot;)
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;user&lt;/th&gt;
      &lt;th&gt;video&lt;/th&gt;
      &lt;th&gt;playback position&lt;/th&gt;
      &lt;th&gt;paused&lt;/th&gt;
      &lt;th&gt;volume&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1469974424&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1469974454&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1469974544&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1469974574&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1469977514&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;1469977544&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;1469977574&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;1469977604&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;1469974604&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1469974694&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;1469974724&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;1469974454&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;1469974524&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;1469974424&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;1469974554&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;15&lt;/th&gt;
      &lt;td&gt;1469974624&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;1469974654&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;17&lt;/th&gt;
      &lt;td&gt;1469974724&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;1469974484&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;1469974514&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;20&lt;/th&gt;
      &lt;td&gt;1469974754&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;1469974824&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;1469974854&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;1469974924&lt;/td&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;1469977424&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;1469977454&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;td&gt;1469977484&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;27&lt;/th&gt;
      &lt;td&gt;1469977634&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28&lt;/th&gt;
      &lt;td&gt;1469977664&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29&lt;/th&gt;
      &lt;td&gt;1469974634&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30&lt;/th&gt;
      &lt;td&gt;1469974664&lt;/td&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;31&lt;/th&gt;
      &lt;td&gt;1469977694&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32&lt;/th&gt;
      &lt;td&gt;1469977724&lt;/td&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;La columna &lt;code&gt;time&lt;/code&gt; registra, respecto a &lt;em&gt;Epoch&lt;/em&gt;, cuándo se accedió a un determinado vídeo por un usuario concreto (columnas &lt;code&gt;video&lt;/code&gt; y &lt;code&gt;user&lt;/code&gt;). Además, tenemos información sobre qué momento del vídeo está visualizando el estudiante (&lt;code&gt;playback position&lt;/code&gt;), el volumen (&lt;code&gt;volume&lt;/code&gt;) y si está pausado dicho recurso (&lt;code&gt;paused&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Podemos observar que existe gran cantidad de valores perdidos en este conjunto de datos. Ello se explica porque el sistema, si no hay cambio significativo en el estado de la información de cierta columna, simplemente inserta &lt;code&gt;NaN&lt;/code&gt; como registro.&lt;/p&gt;

&lt;p&gt;Una útil función, para trabajar con valores perdidos, que incorpora la librería &lt;code&gt;pandas&lt;/code&gt; es &lt;code&gt;fillna()&lt;/code&gt;, que en su parámetro &lt;code&gt;method&lt;/code&gt; nos permite, por ejemplo, asignar a un valor perdido el valor existente en el registro anterior (&lt;code&gt;method=ffil&lt;/code&gt;) o en el posterior (&lt;code&gt;method=bfill&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.fillna?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, para aplicar los anteriores métodos, hemos de ordenar el conjunto de datos previamente. Para ello, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.set_index(&amp;quot;time&amp;quot;)
df = df.sort_index()
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;user&lt;/th&gt;
      &lt;th&gt;video&lt;/th&gt;
      &lt;th&gt;playback position&lt;/th&gt;
      &lt;th&gt;paused&lt;/th&gt;
      &lt;th&gt;volume&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974424&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974424&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974454&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974454&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974484&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974514&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974524&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974544&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974554&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974574&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974604&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974624&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974634&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974654&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974664&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974694&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974724&lt;/th&gt;
      &lt;td&gt;cheryl&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974724&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974754&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974824&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974854&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974924&lt;/th&gt;
      &lt;td&gt;sue&lt;/td&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977424&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977454&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977484&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977514&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977544&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977574&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977604&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977634&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977664&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977694&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977724&lt;/th&gt;
      &lt;td&gt;bob&lt;/td&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Ahora bien, examinando el resultado, apreciamos que, en ocasiones, dos usuarios utilizan el sistema al mismo tiempo (situación habitual en grandes plataformas de aprendizaje en línea). Por tanto, en este caso particular, utilizar múltiples índices es una buena idea.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.reset_index()
df = df.set_index([&amp;quot;time&amp;quot;, &amp;quot;user&amp;quot;])
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;video&lt;/th&gt;
      &lt;th&gt;playback position&lt;/th&gt;
      &lt;th&gt;paused&lt;/th&gt;
      &lt;th&gt;volume&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;user&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;1469974424&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;1469974454&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974484&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974514&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974524&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974544&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974554&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974574&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974604&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974624&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974634&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974654&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974664&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974694&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;1469974724&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974754&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974824&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974854&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974924&lt;/th&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977424&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977454&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977484&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977514&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977544&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977574&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977604&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977634&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977664&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977694&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469977724&lt;/th&gt;
      &lt;th&gt;bob&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Acto seguido, utilizamos la función &lt;code&gt;fillna()&lt;/code&gt;, pasándole como argumento el valor &lt;code&gt;&amp;quot;ffill&amp;quot;&lt;/code&gt; al parámetro &lt;code&gt;method&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.fillna(method=&amp;quot;ffill&amp;quot;)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;video&lt;/th&gt;
      &lt;th&gt;playback position&lt;/th&gt;
      &lt;th&gt;paused&lt;/th&gt;
      &lt;th&gt;volume&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;user&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;1469974424&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;1469974454&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sue&lt;/th&gt;
      &lt;td&gt;advanced.html&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1469974484&lt;/th&gt;
      &lt;th&gt;cheryl&lt;/th&gt;
      &lt;td&gt;intro.html&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: muchas funciones, por defecto, ignoran los valores perdidos a la hora de realizar cálculos. Hemos de proceder pues con cautela si este comportamiento no es el que nos interesa.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
