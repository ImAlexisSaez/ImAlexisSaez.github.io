<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Presentación on Infinitos Contrastes</title>
    <link>https://imalexissaez.github.io/courses/python-basic/</link>
    <description>Recent content in Presentación on Infinitos Contrastes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Alexis Sáez &amp;copy;{year}</copyright>
    <lastBuildDate>Sun, 28 Apr 2019 00:01:00 +0000</lastBuildDate>
    
	    <atom:link href="https://imalexissaez.github.io/courses/python-basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Presentación del curso</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb01-presentacion-del-curso/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb01-presentacion-del-curso/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/G2FCfQj-9ig&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo, se presenta el curso de &lt;em&gt;Python&lt;/em&gt; y los motivos de su desarrollo. Después se revisa el &lt;strong&gt;temario&lt;/strong&gt;, que aborda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introducción. Requisitos previos. Instalación software.&lt;/li&gt;
&lt;li&gt;Fundamentos y sintaxis básica del lenguaje.&lt;/li&gt;
&lt;li&gt;POO con Python.&lt;/li&gt;
&lt;li&gt;Algoritmos, listas y tramos.&lt;/li&gt;
&lt;li&gt;BBDD.&lt;/li&gt;
&lt;li&gt;Trabajo con gráficos y contenidos.&lt;/li&gt;
&lt;li&gt;Procesos y tareas.&lt;/li&gt;
&lt;li&gt;Programación de red. Sockets.&lt;/li&gt;
&lt;li&gt;Ejercicios prácticos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La lección termina con un breve apartado de FAQ.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2. Introducción a Python</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb02-introduccion/</link>
      <pubDate>Sun, 28 Apr 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb02-introduccion/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/9ojhJsXNWCI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo, se repasa la historia de &lt;em&gt;Python&lt;/em&gt; y sus principales características. Entre ellas, destacan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lenguaje interpretado de alto nivel, orientado a objetos, versátil y que es de código abierto.&lt;/li&gt;
&lt;li&gt;Gramática sencilla, clara y muy legible, con tipado dinámico y fuerte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A través de &lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; descargamos la última versión de &lt;em&gt;Python&lt;/em&gt; (3.7.3 a la hora de escribir estas líneas). Si queremos la versión de 64 bits para &lt;em&gt;Windows&lt;/em&gt;, hemos de buscarla en &lt;a href=&#34;https://www.python.org/downloads/windows/&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Durante su instalación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activamos la casilla que añade la ruta de &lt;em&gt;Python&lt;/em&gt; al &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pulsamos, al final de la instalación, sobre la opción que elimina la restricción de longitud máxima sobre las rutas del &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con respecto a los IDE, en el curso se utilizará &lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;Sublime Text 3&lt;/a&gt;, aunque se ofrecen como alternativas &lt;a href=&#34;https://www.eclipse.org/ide/&#34; target=&#34;_blank&#34;&gt;Eclipse&lt;/a&gt; y &lt;a href=&#34;https://notepad-plus-plus.org/download/v7.6.6.html&#34; target=&#34;_blank&#34;&gt;Notepad++&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3. Sintaxis básica</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb03-sintaxis-basica/</link>
      <pubDate>Sun, 28 Apr 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb03-sintaxis-basica/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/yppT6GPZMyo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En el IDLE de &lt;em&gt;Python&lt;/em&gt;, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;¡Hola mundo!&amp;quot;) # Esto es una instrucción
¡Hola mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usando &lt;code&gt;;&lt;/code&gt; escribimos varias instrucciones en una misma línea, aunque es desaconsejable por restar legibilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;¡Hola mundo!&amp;quot;); print(&amp;quot;¡Bienvenidos!&amp;quot;)
¡Hola mundo!
¡Bienvenidos!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Introducimos los &lt;strong&gt;comentarios&lt;/strong&gt; con el símbolo &lt;code&gt;#&lt;/code&gt; para:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anotar el código, facilitando futuros mantenimientos.&lt;/li&gt;
&lt;li&gt;Desactivar bloques de instrucciones, para localizar errores cometidos.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Esto es un comentario
... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mediante el símbolo &lt;code&gt;\&lt;/code&gt; dividimos una instrucción en varias líneas, aunque es desaconsejable por restar legibilidad.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mi_nombre = &amp;quot;Mi nombre es Alexis.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; mi_nombre
&#39;Mi nombre es Alexis.&#39;
&amp;gt;&amp;gt;&amp;gt; mi_nombre = &amp;quot;Mi nombre es \
... Alexis&amp;quot;
&amp;gt;&amp;gt;&amp;gt; mi_nombre
&#39;Mi nombre es Alexis&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Construimos los bloques de código mediante &lt;strong&gt;identación&lt;/strong&gt;. El IDLE se encarga automáticamente de procurarla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 0
&amp;gt;&amp;gt;&amp;gt; for i in range(5):
...     a += 1
...     print(a)
... 
1
2
3
4
5
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Durante el curso, usaremos el IDLE de &lt;em&gt;Sublime Text 3&lt;/em&gt;. Para ello, descargamos el editor a través de &lt;a href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt; y lo instalamos. Al iniciarlo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desplegamos el menú &lt;code&gt;Tools&lt;/code&gt; y seleccionamos &lt;code&gt;Command Palette...&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Escribimos &lt;code&gt;Install Package Control&lt;/code&gt; y clicamos sobre la opción que aparece.&lt;/li&gt;
&lt;li&gt;Desplegamos, de nuevo, el menú &lt;code&gt;Tools&lt;/code&gt;, seleccionamos &lt;code&gt;Command Palette...&lt;/code&gt; y tecleamos &lt;code&gt;install package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;En la siguiente ventana, escribimos &lt;code&gt;SublimeREPL&lt;/code&gt;, para así tener el interprete de &lt;em&gt;Python&lt;/em&gt; disponible desde el propio editor.&lt;/li&gt;
&lt;li&gt;Para activarlo, desde el menú &lt;code&gt;Tools&lt;/code&gt;, seleccionamos ahora &lt;code&gt;SublimeREPL&lt;/code&gt; y buscamos &lt;code&gt;Python&lt;/code&gt;. Entre las opciones que aparecen, escogemos &lt;code&gt;Python&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4. Tipos, operadores y variables</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb04-tipos-y-variables/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb04-tipos-y-variables/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/u4I9PqhqCo8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Los &lt;strong&gt;tipos de datos&lt;/strong&gt; disponibles en &lt;em&gt;Python&lt;/em&gt; son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numéricos

&lt;ul&gt;
&lt;li&gt;Enteros (&lt;code&gt;int&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Coma flotante (&lt;code&gt;float&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Complejos&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Textos&lt;/li&gt;
&lt;li&gt;Booleanos

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los principales &lt;strong&gt;operadores&lt;/strong&gt; en &lt;em&gt;Python&lt;/em&gt; son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aritméticos: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; y &lt;code&gt;//&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comparación: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; y &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lógicos: &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt; y &lt;code&gt;NOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Asignación: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;**=&lt;/code&gt; y &lt;code&gt;//=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Especiales: &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;is not&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt; y &lt;code&gt;not in&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los operadores aritméticos nos permiten utilizar &lt;em&gt;Python&lt;/em&gt; a modo de calculadora.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 + 6 # Suma
11
&amp;gt;&amp;gt;&amp;gt; 11 - 8 # Resta
3
&amp;gt;&amp;gt;&amp;gt; 2 * 6 # Multiplicación
12
&amp;gt;&amp;gt;&amp;gt; 7 / 2 # División
3.5
&amp;gt;&amp;gt;&amp;gt; 10 % 3 # Módulo
1
&amp;gt;&amp;gt;&amp;gt; 5 ** 2 # Exponenciación
25
&amp;gt;&amp;gt;&amp;gt; 7 // 2 # División entera
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una &lt;strong&gt;variable&lt;/strong&gt; es un espacio en la memoria del ordenador donde se almacenará un valor que podrá cambiar durante la ejecución del programa. Para declararla, utilizamos el patrón &lt;code&gt;nombre = valor&lt;/code&gt; y su tipo lo establece el contenido, no el contenedor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;Python&lt;/em&gt; todo son objetos (variables, números&amp;hellip;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nombre = 5
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; nombre = &amp;quot;Alexis&amp;quot;
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; nombre = 5.2
&amp;gt;&amp;gt;&amp;gt; type(nombre)
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Definimos cadenas de texto mediante los símbolos &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt; y &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;, permitiendo esta última opción saltos de líneas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mensaje = &#39;Esto es un mensaje.&#39;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje.
&amp;gt;&amp;gt;&amp;gt; mensaje = &amp;quot;Esto es un mensaje.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje.
&amp;gt;&amp;gt;&amp;gt; mensaje = &#39;&#39;&#39;Esto es un mensaje
... con tres saltos
... de línea.&#39;&#39;&#39;
&amp;gt;&amp;gt;&amp;gt; print(mensaje)
Esto es un mensaje
con tres saltos
de línea.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Los operadores de comparación suelen aparecer en bloques condicionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numero1 = 5
&amp;gt;&amp;gt;&amp;gt; numero2 = 7
&amp;gt;&amp;gt;&amp;gt; if numero1 &amp;gt; numero2:
...     print(&amp;quot;El número 1 es mayor.&amp;quot;)
... else:
...     print(&amp;quot;El número 2 es mayor.&amp;quot;)
... 
El número 2 es mayor.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: no confundir el operador de asignación &lt;code&gt;=&lt;/code&gt; con el operador de comparación &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numero1 = 2
&amp;gt;&amp;gt;&amp;gt; numero2 = 3
&amp;gt;&amp;gt;&amp;gt; if numero1 == numero2:
...     print(&amp;quot;Los números son iguales.&amp;quot;)
... else:
...     print(&amp;quot;Los números son diferentes.&amp;quot;)
... 
Los números son diferentes.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5. Funciones I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb05-funciones-i/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb05-funciones-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/VY448UWAQ_0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;función&lt;/strong&gt; es un conjunto de líneas de código agrupadas, que funcionan como una unidad realizando una tarea específica. Puede devolver valores, tener parámetros o argumentos y recibe el nombre de &lt;strong&gt;método&lt;/strong&gt; cuando está definida dentro de una clase.&lt;/p&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt; existen funciones predifinidas, como por ejemplo &lt;code&gt;print()&lt;/code&gt;. Su principal utilidad es la reutilización de código y su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def nombre(parámetros):
    instrucciones de la función
    return(opcional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos (o llamamos) una función tecleando &lt;code&gt;nombre_función(parámetros)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, dejamos de lado el IDLE de &lt;em&gt;Sublime Text 3&lt;/em&gt; y pasamos a compilar directamente ficheros desde el propio editor. Para ello, desplegamos el menú &lt;code&gt;Tools&lt;/code&gt; y en el apartado &lt;code&gt;Build System&lt;/code&gt; escogemos la opción &lt;code&gt;Python&lt;/code&gt;. Acto seguido, creamos el fichero &lt;code&gt;funciones.py&lt;/code&gt;, que contendrá la instrucción&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y utilizamos la combinación de teclas &lt;code&gt;ctrl + b&lt;/code&gt; para compilar. En la parte inferior de la ventana aparecerá el resultado de la ejecución y el tiempo invertido.&lt;/p&gt;

&lt;p&gt;Ampliemos el anterior fichero a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e imaginemos que necesitamos que las anteriores tres líneas se impriman cinco veces. Podemos, simplemente, copiar y pegar el anterior bloque de código reiteradamente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)

print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Las funciones nos permiten reutilizar código para, precisamente, evitar que actuemos como arriba. Definamos una función llamada &lt;code&gt;mensaje()&lt;/code&gt; y ejecutémosla tantas veces como deseemos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def mensaje():
    print(&amp;quot;Estamos aprendiendo Python.&amp;quot;)
    print(&amp;quot;Estamos aprendiendo instrucciones básicas.&amp;quot;)
    print(&amp;quot;Poco a poco iremos avanzando.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, la tarea que buscábamos realizar quedaría como:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mensaje()
mensaje()
mensaje()
mensaje()
mensaje()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre distintas llamadas a una función puede haber cualquier otro tipo de instrucción:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mensaje()

print(&amp;quot;Ejecutando código fuera de función&amp;quot;)

mensaje()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/05/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6. Funciones II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb06-funciones-ii/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:03 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb06-funciones-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/vawEHhV_HFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Comencemos definiendo una función que suma dos números dados (5 y 7), mediante el mecanismo aprendido en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma():
    num1 = 5
    num2 = 7
    print(num1 + num2)


suma()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos reutilizar tantas veces como queramos la función &lt;code&gt;suma()&lt;/code&gt;. No obstante, su utilidad así declarada es bastante limitada. Nos gustaría que no siempre sumara los dos mismos valores, sino aquellos que nos interesen en cada llamada. Para ello emplearemos los &lt;strong&gt;parámetros&lt;/strong&gt; o &lt;strong&gt;argumentos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: aunque el autor del curso se refiere a los términos &amp;ldquo;parámetros&amp;rdquo; y &amp;ldquo;argumentos&amp;rdquo; casi como si fueran sinónimos, en realidad hay un sutil matiz que los diferencia: los &lt;strong&gt;parámetros&lt;/strong&gt; son las variables que aparecen en la definición de una función o método; cuando se produce la llamada a dicha función, los &lt;strong&gt;argumentos&lt;/strong&gt; son los datos que pasamos a los parámetros de la mencionada función.&lt;/p&gt;

&lt;p&gt;Definamos de nuevo la función &lt;code&gt;suma()&lt;/code&gt;, ahora con dos parámetros, con el objetivo de que realice la suma de dos números que pasaremos como argumentos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    print(num1 + num2)


suma(5, 7)  # 12
suma(2, 3)  # 5
suma(35, 358)  # 393
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tal y como está declarada la nueva función de suma, &lt;strong&gt;obligatoriamente&lt;/strong&gt; hemos de pasarle dos argumentos o sino aparecerán errores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(7)
# TypeError: suma() missing 1 required positional argument: &#39;num2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(1, 2, 3)
# TypeError: suma() takes 2 positional arguments but 3 were given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puede resultar conveniente, por legibilidad, pasar los argumentos a una función utilizando el esquema &lt;code&gt;parámetro=valor&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;suma(num1=5, num2=7)  # 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, las funciones&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pueden poseer parámetros de diferentes tipos y&lt;/li&gt;
&lt;li&gt;devuelven valores siempre y cuando empleemos la instrucción &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    resultado = num1 + num2
    return resultado


suma(5, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La ejecución del anterior bloque de código no muestra resultado alguno en la consola. La función devuelve el resultado, pero no lo hemos imprimido. Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(suma(5, 7))  # 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una ventaja de utilizar la instrucción &lt;code&gt;return&lt;/code&gt; reside en que podemos almacenar los valores que devuelve una función en variables y trabajar posteriormente con ellas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;almacena_resultado = suma(5, 8)
print(almacena_resultado)  # 13

actualiza_resultado = suma(almacena_resultado, 8)
print(actualiza_resultado)  # 13 + 8 = 21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: &lt;em&gt;Python&lt;/em&gt; pasa siempre los valores por referencia, no por valor.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/06/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7. Listas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb07-listas/</link>
      <pubDate>Mon, 29 Apr 2019 00:01:04 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb07-listas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Q8hugySbLQQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;lista&lt;/strong&gt; es una estructura de datos que nos permite almacenar gran cantidad de valores. En &lt;em&gt;Python&lt;/em&gt;, estos pueden añadirse de manera dinámica y ser de diferentes tipos.&lt;/p&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = [elem1, elem2, elem3...]&lt;/code&gt; y los elementos están localizados mediante un índice, que en &lt;em&gt;Python&lt;/em&gt; comienza por 0.&lt;/p&gt;

&lt;p&gt;A continuación, creemos una lista con cuatro elementos de tipo texto y veamos cómo imprimirla y acceder a elementos concretos de ella:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista = [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]

print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
print(mi_lista[:])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]

print(mi_lista[2])  # Marta
print(mi_lista[0])  # María
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si empleamos índices que superan el rango de elementos de una lista, &lt;em&gt;Python&lt;/em&gt; nos arroja un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[4])
# IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, sí es posible utilizar índices con valor negativo, que nos permiten acceder (empezando por &lt;code&gt;-1&lt;/code&gt;) a los elementos de una lista desde la derecha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[-1]) # Antonio
print(mi_lista[-3]) # Pepe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, esta estrategia también está limitada por el número de elementos de la lista y no podemos pasar índices negativos fuera de su correspondiente rango:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[-5])
# IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, podemos acceder a porciones de una lista, mediante la sintaxis &lt;code&gt;nombre[a:b]&lt;/code&gt;, que extrae todos los elementos comprendidos entre los índices &lt;code&gt;a&lt;/code&gt; y el anterior a &lt;code&gt;b&lt;/code&gt;. Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[0:2])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;]
print(mi_lista[0:1])  # [&amp;quot;María&amp;quot;]
print(mi_lista[-3:-1])  # [&amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se pueden omitir algunos de los anteriores índices indicados y &lt;em&gt;Python&lt;/em&gt; sobreentiende que comienza o acaba en el extremo correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista[:2])  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;]
print(mi_lista[2:])  # [&amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
print(mi_lista[-2:])  # [&amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: cuando accedemos a una porción, se conserva el tipo lista, pero no así si se extrae un único elemento en particular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(mi_lista[2]))  # &amp;lt;class &#39;str&#39;&amp;gt;
print(type(mi_lista[2:3]))  # &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agregamos elementos al final de la lista utilizando &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista.append(&amp;quot;Sandra&amp;quot;)
print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;, &amp;quot;Sandra&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usaremos &lt;code&gt;.insert(posición, elemento)&lt;/code&gt;, si buscamos añadir un elemento en un punto intermedio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista.insert(2, &amp;quot;Paco&amp;quot;)
print(mi_lista)  # [&amp;quot;María&amp;quot;, &amp;quot;Pepe&amp;quot;, &amp;quot;Paco&amp;quot;, &amp;quot;Marta&amp;quot;, &amp;quot;Antonio&amp;quot;, &amp;quot;Sandra&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es posible agregar varios elementos al final de una lista utilizando &lt;code&gt;.extend()&lt;/code&gt; y pasando como argumento otra lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_compra = [&amp;quot;Manzanas&amp;quot;]
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;]

mi_compra.extend([&amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;])
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acceder al índice de un elemento, empleamos &lt;code&gt;.index(elemento)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_lista.index(&amp;quot;Antonio&amp;quot;))  # 4
print(mi_compra.index(&amp;quot;Sandía&amp;quot;))  # 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si intentamos acceder al índice de elementos que no están incluidos en la lista, &lt;em&gt;Python&lt;/em&gt; arroja un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_compra.index(&amp;quot;Melón&amp;quot;))
# ValueError: &#39;Melón&#39; is not in list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En una lista, puede haber elementos iguales en posiciones distintas. La función &lt;code&gt;.index()&lt;/code&gt; nos devolverá el valor del índice del primer elemento repetido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_compra.extend(mi_compra)
print(mi_compra)  # [&amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;, &amp;quot;Manzanas&amp;quot;, &amp;quot;Aguacates&amp;quot;, &amp;quot;Sandía&amp;quot;]
print(mi_compra.index(&amp;quot;Manzanas&amp;quot;))  # 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para comprobar si un elemento se encuentra o no en una lista, utilizamos &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Pepe&amp;quot; in mi_lista)  # True
print(&amp;quot;Ana&amp;quot; in mi_lista)  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tal y como mencionamos arriba, una lista puede almacenar sin problemas elementos de diferentes tipos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla = [&amp;quot;Alexis&amp;quot;, True, 10, 3.14]
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, True, 10, 3.14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para eliminar elementos, usamos &lt;code&gt;.remove()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla.remove(True)
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, 10, 3.14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En particular, podemos suprimir el último elemento de una lista mediante &lt;code&gt;.pop()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mezcla.pop()
print(mezcla)  # [&amp;quot;Alexis&amp;quot;, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;+&lt;/code&gt; concatena listas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista1 = [&amp;quot;Ana&amp;quot;, 5]
lista2 = [True, 2.1]
lista3 = lista1 + lista2
print(lista3)  # [&amp;quot;Ana&amp;quot;, 5, True, 2.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El operador &lt;code&gt;*&lt;/code&gt; repite la lista un número determinado de veces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(lista1 * 2)  # [&amp;quot;Ana&amp;quot;, 5, &amp;quot;Ana&amp;quot;, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/07/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8. Tuplas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb08-tuplas/</link>
      <pubDate>Tue, 30 Apr 2019 00:01:00 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb08-tuplas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Ufqh8aoR9hE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;tupla&lt;/strong&gt; es una lista inmutable que&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no permite añadir, eliminar, mover elementos&amp;hellip;&lt;/li&gt;
&lt;li&gt;permite la extracción de porciones, que continuan siendo tuplas, y&lt;/li&gt;
&lt;li&gt;posibilita búsquedas de índice (&lt;code&gt;.index()&lt;/code&gt;) y comprobaciones de si un elemento pertenece o no a ella (&lt;code&gt;in&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Son útiles porque&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;son más rápidas en cuanto a ejecución se refiere,&lt;/li&gt;
&lt;li&gt;requieren menos espacio (mayor optimización),&lt;/li&gt;
&lt;li&gt;formatean cadenas de texto, y&lt;/li&gt;
&lt;li&gt;pueden utilizarse como claves en un diccionario, a diferencia de las listas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = (elem1, elem2, elem3...)&lt;/code&gt;, siendo el uso de los paréntesis opcional aunque recomendable. El acceso a los elementos funciona como en las listas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)

print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)
print(mi_tupla[1])  # 10
print(mi_tupla[-1])  # 1995
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen funciones que nos permiten convertir tuplas en listas (&lt;code&gt;list()&lt;/code&gt;) y viceversa (&lt;code&gt;tuple()&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_lista = list(mi_tupla)
print(mi_lista)  # [&amp;quot;Alexis&amp;quot;, 10, 1, 1995]

mi_tupla = tuple(mi_lista)
print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 10, 1, 1995)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comprobamos la pertenencia de un elemento a la tupla mediante &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Alexis&amp;quot; in mi_tupla)  # True
print(3.14 in mi_tupla)  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con &lt;code&gt;.count()&lt;/code&gt; obtenemos el número de elementos que se encuentran dentro de una tupla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 1, 2, 2, True, 2, &amp;quot;Alexis&amp;quot;)

print(mi_tupla.count(&amp;quot;Alexis&amp;quot;))  # 2
print(mi_tupla.count(1))  # 2 (True cuenta como 1)
print(mi_tupla.count(2))  # 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El método &lt;code&gt;len&lt;/code&gt; nos permite hallar la longitud de una tupla, siendo el índice del último elemento igual a &lt;code&gt;len - 1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(len(mi_tupla))  # 7
print(mi_tupla[len(mi_tupla) - 1])  # &amp;quot;Alexis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos crear tuplas unitarias siguiendo el patrón &lt;code&gt;nombre = (elem,)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;,)

print(type(mi_tupla))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
print(len(mi_tupla))  # 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como mencionamos, los paréntesis son opcionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = &amp;quot;Alexis&amp;quot;, 3.14, True, 10

print(type(mi_tupla))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
print(mi_tupla)  # (&amp;quot;Alexis&amp;quot;, 3.14, True, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta sintaxis se conoce como &lt;strong&gt;empaquetado de tupla&lt;/strong&gt; y hemos de ser cautos, pues en un futuro, al combinarla con el uso de funciones, puede dar lugar a confusiones.&lt;/p&gt;

&lt;p&gt;El proceso inverso, &lt;strong&gt;desempaquetado de tuplas&lt;/strong&gt;, nos permite asignar los elementos de una tupla a diferentes variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;Alexis&amp;quot;, 3.14, True, 10)

nombre, pi, alto, mes = mi_tupla

print(nombre)  # Alexis
print(pi)  # 3.14
print(alto)  # True
print(mes)  # 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/08/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9. Diccionarios</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb09-diccionarios/</link>
      <pubDate>Tue, 30 Apr 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb09-diccionarios/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2OmgHl8lp0I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;diccionario&lt;/strong&gt; es una estructura de datos que nos permite almacenar valores de diferentes tipos (enteros, cadenas de texto, decimales&amp;hellip;) e incluso listas, tuplas y otros diccionarios.&lt;/p&gt;

&lt;p&gt;Su principal característica reside en que cada dato se almacena asociado a una clave única, de tal forma que se crea una relación de tipo &lt;code&gt;clave:valor&lt;/code&gt; para cada elemento guardado. Además, los mencionados elementos no están ordenados, es decir, el orden es indiferente (por la presencia las referidas claves únicas) a la hora de guardar información en un diccionario.&lt;/p&gt;

&lt;p&gt;Su sintaxis es &lt;code&gt;nombre = {clave:valor}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Creemos un diccionario que almacene países (clave) y capitales (valor), y veamos cómo se accede a cada uno de sus elementos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {&amp;quot;Alemania&amp;quot;: &amp;quot;Berlin&amp;quot;,
           &amp;quot;Francia&amp;quot;: &amp;quot;París&amp;quot;,
           &amp;quot;Reino Unido&amp;quot;: &amp;quot;Londres&amp;quot;,
           &amp;quot;España&amp;quot;: &amp;quot;Madrid&amp;quot;}

print(mi_dicc[&amp;quot;Francia&amp;quot;])  # París
print(mi_dicc[&amp;quot;España&amp;quot;])  # Madrid

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agregamos nuevos elementos al diccionario con el patrón &lt;code&gt;nombre[clave] = valor&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc[&amp;quot;Italia&amp;quot;] = &amp;quot;Lisboa&amp;quot;

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Lisboa&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modificamos un valor asignado a una clave simplemente sobreescribiéndolo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc[&amp;quot;Italia&amp;quot;] = &amp;quot;Roma&amp;quot;

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Roma&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suprimimos elementos con &lt;code&gt;del&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del mi_dicc[&amp;quot;Reino Unido&amp;quot;]

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlin&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;España&#39;: &#39;Madrid&#39;, &#39;Italia&#39;: &#39;Roma&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos un diccionario que presente diferentes tipos de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {&amp;quot;Alemania&amp;quot;: &amp;quot;Berlín&amp;quot;,
           23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Mosqueteros&amp;quot;: 3}

print(mi_dicc)  # {&#39;Alemania&#39;: &#39;Berlín&#39;, 23: &#39;Jordan&#39;, &#39;Mosqueteros&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empleemos una tupla (el procedimiento sería similar si optamos por una lista) para asignar la clave a cada uno de los valores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_tupla = (&amp;quot;España&amp;quot;, &amp;quot;Francia&amp;quot;, &amp;quot;Reino Unido&amp;quot;, &amp;quot;Alemania&amp;quot;)
mi_dicc = {mi_tupla[0]: &amp;quot;Madrid&amp;quot;,
           mi_tupla[1]: &amp;quot;París&amp;quot;,
           mi_tupla[2]: &amp;quot;Londres&amp;quot;,
           mi_tupla[3]: &amp;quot;Berlín&amp;quot;}

print(mi_dicc)  # {&#39;España&#39;: &#39;Madrid&#39;, &#39;Francia&#39;: &#39;París&#39;, &#39;Reino Unido&#39;: &#39;Londres&#39;, &#39;Alemania&#39;: &#39;Berlín&#39;}

print(mi_dicc[&amp;quot;España&amp;quot;])  # Madrid
print(mi_dicc[mi_tupla[0]])  # Madrid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;También podemos almacenar tuplas (o listas&amp;hellip;) como valores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Nombre&amp;quot;: &amp;quot;Michael&amp;quot;,
           &amp;quot;Equipo&amp;quot;: &amp;quot;Chicago&amp;quot;,
           &amp;quot;Anillos&amp;quot;: (1991, 1992, 1993, 1996, 1997, 1998)}

print(mi_dicc)  # {23: &#39;Jordan&#39;, &#39;Nombre&#39;: &#39;Michael&#39;, &#39;Equipo&#39;: &#39;Chicago&#39;, &#39;Anillos&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}
print(mi_dicc[&amp;quot;Equipo&amp;quot;])  # Chicago
print(mi_dicc[&amp;quot;Anillos&amp;quot;])  # (1991, 1992, 1993, 1996, 1997, 1998)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Asimismo, guardemos un diccionario dentro de otro:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_dicc = {23: &amp;quot;Jordan&amp;quot;,
           &amp;quot;Nombre&amp;quot;: &amp;quot;Michael&amp;quot;,
           &amp;quot;Equipo&amp;quot;: &amp;quot;Chicago&amp;quot;,
           &amp;quot;Anillos&amp;quot;: {&amp;quot;Temporadas&amp;quot;: (1991, 1992, 1993, 1996, 1997, 1998)}}

print(mi_dicc)  # {23: &#39;Jordan&#39;, &#39;Nombre&#39;: &#39;Michael&#39;, &#39;Equipo&#39;: &#39;Chicago&#39;, &#39;Anillos&#39;: {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}}
print(mi_dicc[&amp;quot;Anillos&amp;quot;])  # {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algunos métodos interesantes a conocer son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;, para acceder a las claves de un diccionario;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;, para conocer los valores de un diccionario; y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt;, para averiguar la longitud de un diccionario:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mi_dicc.keys())  # dict_keys([23, &#39;Nombre&#39;, &#39;Equipo&#39;, &#39;Anillos&#39;])
print(mi_dicc.values())  # dict_values([&#39;Jordan&#39;, &#39;Michael&#39;, &#39;Chicago&#39;, {&#39;Temporadas&#39;: (1991, 1992, 1993, 1996, 1997, 1998)}])
print(len(mi_dicc))  # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/09/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10. Condicionales I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb10-condicionales-i/</link>
      <pubDate>Tue, 30 Apr 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb10-condicionales-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/iV-4F0jGWak&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Las estructuras condicionales nos permiten alterar el flujo de ejecución de un programa. Por lo que respecta al condicional &lt;code&gt;if&lt;/code&gt;, tiene la siguiente sintaxis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if condición:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La anterior condición suele venir expresada a través de operadores de comparación (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;). Veamos un sencillo ejemplo de aplicación de una estructura condicional &lt;code&gt;if&lt;/code&gt; en la definición de una función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(evaluacion(6))  # Aprobado
print(evaluacion(1))  # Suspenso
print(evaluacion(2.1))  # Suspenso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Programemos una versión interactiva del anterior bloque de instrucciones, donde el usuario ha de introducir la nota durante la ejecución del código (a través de la función &lt;code&gt;input()&lt;/code&gt;). Para ello, necesitamos activar la consola mediante el menú &lt;code&gt;Tools&lt;/code&gt;, opción &lt;code&gt;SublimeREPL&lt;/code&gt; y en el apartado &lt;code&gt;Python&lt;/code&gt; seleccionamos &lt;code&gt;Python - RUN current file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input()

print(evaluacion(nota_alumno))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si ejecutamos e insertamos una nota numérica (por ejemplo, &lt;code&gt;8&lt;/code&gt;), &lt;em&gt;Python&lt;/em&gt; nos arroja el siguiente error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# TypeError: &#39;&amp;lt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ello es debido a que cualquier información introducida por el usuario desde el teclado se almacena como cadena de texto (&lt;code&gt;&amp;quot;8&amp;quot;&lt;/code&gt;), y el operador &lt;code&gt;&amp;lt;&lt;/code&gt; no está preparado para comparar textos y números. Resolvemos esta situación empleando la función &lt;code&gt;int()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input()

print(evaluacion(int(nota_alumno)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo una iteración del programa, por ejemplo,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Programa de evaluación de notas de alumnos
8
Aprobado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;input()&lt;/code&gt; admite la posibilidad de indicar un mensaje:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluacion(nota):
    valoracion = &amp;quot;Aprobado&amp;quot;
    if nota &amp;lt; 5:
        valoracion = &amp;quot;Suspenso&amp;quot;
    return valoracion


print(&amp;quot;Programa de evaluación de notas de alumnos&amp;quot;)

nota_alumno = input(&amp;quot;Introduce la nota del alumno: &amp;quot;)

print(evaluacion(int(nota_alumno)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo ahora una iteración del programa, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Programa de evaluación de notas de alumnos
Introduce la nota del alumno: 8
Aprobado
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/10/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11. Condicionales II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb11-condicionales-ii/</link>
      <pubDate>Tue, 30 Apr 2019 00:03:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb11-condicionales-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/cf7o4s9nFu8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En este vídeo ampliaremos las posibilidades de la estructura condicional &lt;code&gt;if&lt;/code&gt; mediante &lt;code&gt;else&lt;/code&gt; y &lt;code&gt;elif&lt;/code&gt;, quedando entonces su sintaxis como&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if condicion:
    instrucciones
elif condicion:
    instrucciones
else:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos creando un programa de control de acceso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Verificación de acceso&amp;quot;)

edad_usuario = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

if edad_usuario &amp;lt; 18:
    print(&amp;quot;No puedes pasar.&amp;quot;)
else:
    print(&amp;quot;Puedes pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de algunas ejecuciones de este programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 19
Puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 15
No puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadamos al programa la posibilidad de mostrar un mensaje de error si el usuario introduce un dato excesivamente elevado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Verificación de acceso&amp;quot;)

edad_usuario = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

if edad_usuario &amp;lt; 18:
    print(&amp;quot;No puedes pasar.&amp;quot;)
elif edad_usuario &amp;gt; 100:
    print(&amp;quot;Edad incorrecta.&amp;quot;)
else:
    print(&amp;quot;Puedes pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de ejecutar el anterior programa con distintos valores de edad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 25
Puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 15
No puedes pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Verificación de acceso
Introduce tu edad: 124
Edad incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para reforzar el uso de esta estructura condicional, elaboremos un programa que asigna a cada calificación numérica su correspondiente etiqueta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Control de calificaciones&amp;quot;)

nota_alumno = int(input(&amp;quot;Introduce la nota: &amp;quot;))

if nota_alumno &amp;lt; 0:
    print(&amp;quot;Nota incorrecta.&amp;quot;)
elif nota_alumno &amp;lt; 5:
    print(&amp;quot;Insuficiente.&amp;quot;)
elif nota_alumno &amp;lt; 6:
    print(&amp;quot;Suficiente.&amp;quot;)
elif nota_alumno &amp;lt; 7:
    print(&amp;quot;Bien.&amp;quot;)
elif nota_alumno &amp;lt; 9:
    print(&amp;quot;Notable.&amp;quot;)
elif nota_alumno &amp;lt;= 10:
    print(&amp;quot;Sobresaliente.&amp;quot;)
else:
    print(&amp;quot;Nota incorrecta.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el resultado de ejecutar el anterior programa con distintas calificaciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: -6
Nota incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 4
Insuficiente.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 6
Bien.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 7
Notable.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 10
Sobresaliente.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Control de calificaciones
Introduce la nota: 12
Nota incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que pida dos números &lt;em&gt;enteros&lt;/em&gt; por teclado. El programa tendrá una función llamada &lt;code&gt;devuelve_max&lt;/code&gt; encargada de devolver el número más alto de los dos introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_max(n1, n2):
    if n1 &amp;lt; n2:
        return n2
    else:
        return n1


num1 = int(input(&amp;quot;Introduce el primer número: &amp;quot;))
num2 = int(input(&amp;quot;Introduce el segundo número: &amp;quot;))

print(&amp;quot;El máximo es: &amp;quot; + str(devuelve_max(num1, num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida por teclado &amp;ldquo;Nombre&amp;rdquo;, &amp;ldquo;Apellido&amp;rdquo; y &amp;ldquo;Tfno&amp;rdquo;. Esos tres datos deberán ser almacenados en una lista y mostrar en consola el mensaje: &amp;ldquo;Los datos personales son: nombre apellido teléfono&amp;rdquo; (Se mostrarán los datos introducidos por teclado).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = input(&amp;quot;Nombre: &amp;quot;)
apell = input(&amp;quot;Apellido: &amp;quot;)
tfno = input(&amp;quot;Teléfono: &amp;quot;)

datos = [nombre, apell, tfno]

print(&amp;quot;Los datos personales son: &amp;quot; + 
      datos[0] + &amp;quot; &amp;quot; + datos[1] + &amp;quot; &amp;quot; + datos[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 3&lt;/strong&gt;: crea un programa que pida tres números por teclado. El programa imprime en consola la media aritmética de los números introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num1 = float(input(&amp;quot;Introduce el primer número: &amp;quot;))
num2 = float(input(&amp;quot;Introduce el segundo número: &amp;quot;))
num3 = float(input(&amp;quot;Introduce el tercer número: &amp;quot;))

media = (num1 + num2 + num3) / 3

print(&amp;quot;La media aritmética es: &amp;quot; + str(media))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/11/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12. Condicionales III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb12-condicionales-iii/</link>
      <pubDate>Wed, 01 May 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb12-condicionales-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/qxgEolsC6rg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Aunque en &lt;em&gt;Python&lt;/em&gt; no existe una instrucción de tipo &lt;code&gt;switch&lt;/code&gt;, como en otros lenguajes de programación, veremos que, gracias a la concatenación de operadores de comparación, a los operadores lógicos &lt;code&gt;and&lt;/code&gt; y &lt;code&gt;or&lt;/code&gt;, y al operador &lt;code&gt;in&lt;/code&gt;, disponemos de bastante versatilidad a la hora de trabajar con estructuras condicionales.&lt;/p&gt;

&lt;p&gt;Antes de nada, siguiendo las instrucciones de &lt;a href=&#34;https://stackoverflow.com/a/19977184&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt;, creamos un atajo para ejecutar de manera más ágil nuestros programas. Ahora ya no hemos de navegar por los menús cada vez que deseemos realizar una ejecución en la consola, simplemente hemos de emplear la combinación de teclas &lt;code&gt;ctrl + alt + b&lt;/code&gt; (mientras que para cerrarla usamos la combinación de teclas &lt;code&gt;ctrl + w&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Empecemos creando un programa que controle si un dato numérico introducido para la edad es válido, es decir, no es negativo ni un valor muy elevado. Para ello, utilizaremos la concatenación de operadores de comparación, teniendo en cuenta que su lectura se realiza de izquierda a derecha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def comprueba_edad(edad):
    if 0 &amp;lt; edad &amp;lt; 100:
        print(&amp;quot;La edad es correcta.&amp;quot;)
    else:
        print(&amp;quot;La edad es incorrecta.&amp;quot;)


comprueba_edad(5)  # La edad es correcta.
comprueba_edad(135)  # La edad es incorrecta.
comprueba_edad(-7)  # La edad es incorrecta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creemos ahora un programa que evaluará el salario de diferentes trabajadores de una empresa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sal_presidente = int(input(&amp;quot;Introduce el salario del presidente: &amp;quot;))
print(&amp;quot;Salario presidente: &amp;quot; + str(sal_presidente))

sal_director = int(input(&amp;quot;Introduce el salario del director: &amp;quot;))
print(&amp;quot;Salario director: &amp;quot; + str(sal_director))

sal_jefe_area = int(input(&amp;quot;Introduce el salario del jefe de área: &amp;quot;))
print(&amp;quot;Salario jefe de área: &amp;quot; + str(sal_jefe_area))

sal_administrativo = int(input(&amp;quot;Introduce el salario del administrativo: &amp;quot;))
print(&amp;quot;Salario administrativo: &amp;quot; + str(sal_administrativo))

if sal_administrativo &amp;lt; sal_jefe_area &amp;lt; sal_director &amp;lt; sal_presidente:
    print(&amp;quot;Todo funciona correctamente.&amp;quot;)
else:
    print(&amp;quot;Algo falla en esta empresa.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/12/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>13. Condicionales IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb13-condicionales-iv/</link>
      <pubDate>Wed, 01 May 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb13-condicionales-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rDGsWYnQEJY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A continuación, veremos el uso de los operadores lógicos &lt;code&gt;and&lt;/code&gt; y &lt;code&gt;or&lt;/code&gt;, y del operador &lt;code&gt;in&lt;/code&gt;. Para ello, crearemos un programa que evalúe si un alumno tiene o no derecho a beca, dependiendo de&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la distancia a la que vive del centro,&lt;/li&gt;
&lt;li&gt;el número de hermanos, y&lt;/li&gt;
&lt;li&gt;el salario familiar.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Programa de evaluación de becas - Curso 2018/19&amp;quot;)

dist_escuela = int(input(&amp;quot;Introduce la distancia a la escuela (en km): &amp;quot;))
print(&amp;quot;Distancia a la escuela: &amp;quot; + str(dist_escuela))

num_hermanos = int(input(&amp;quot;Introduce el número de hermanos en el centro: &amp;quot;))
print(&amp;quot;Número de hermanos: &amp;quot; + str(num_hermanos))

sal_familiar = int(input(&amp;quot;Introduce el salario anual bruto: &amp;quot;))
print(&amp;quot;Salario anual bruto: &amp;quot; + str(sal_familiar))

if dist_escuela &amp;gt; 40 and num_hermanos &amp;gt; 2 and sal_familiar &amp;lt;= 20000:
    print(&amp;quot;Tienes derecho a beca&amp;quot;)
else:
    print(&amp;quot;No tienes derecho a beca&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Revisemos la estrutura condicional para que no sea tan complicado tener derecho a una beca:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Programa de evaluación de becas - Curso 2018/19&amp;quot;)

distancia_escuela = int(input(&amp;quot;Introduce la distancia a la escuela (en km): &amp;quot;))
print(&amp;quot;Distancia a la escuela: &amp;quot; + str(distancia_escuela))

numero_hermanos = int(input(&amp;quot;Introduce el número de hermanos en el centro: &amp;quot;))
print(&amp;quot;Número de hermanos: &amp;quot; + str(numero_hermanos))

salario_familiar = int(input(&amp;quot;Introduce el salario anual bruto: &amp;quot;))
print(&amp;quot;Salario anual bruto: &amp;quot; + str(salario_familiar))

if distancia_escuela &amp;gt; 40 or numero_hermanos &amp;gt; 2 or salario_familiar &amp;lt;= 20000:
    print(&amp;quot;Tienes derecho a beca&amp;quot;)
else:
    print(&amp;quot;No tienes derecho a beca&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estudiemos ahora el uso del operador &lt;code&gt;in&lt;/code&gt;. Crearemos un programa donde un alumno debe escoger una asignatura opcional de entre un listado predeterminado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Asignaturas optativas - Curso 2018/19&amp;quot;)

print(&amp;quot;- Informática gráfica&amp;quot;)
print(&amp;quot;- Pruebas de software&amp;quot;)
print(&amp;quot;- Usabilidad y accesibilidad&amp;quot;)

asignatura = input(&amp;quot;Escoge la asignatura optativa: &amp;quot;)

if asignatura in (&amp;quot;Informática gráfica&amp;quot;, &amp;quot;Pruebas de software&amp;quot;,
                  &amp;quot;Usabilidad y accesibilidad&amp;quot;):
    print(&amp;quot;Asignatura elegida: &amp;quot; + asignatura)
else:
    print(&amp;quot;La asignatura escogida no está contemplada.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es &lt;strong&gt;case sensitive&lt;/strong&gt; (distingue entre mayúsculas y minúsculas). Para solucionar esta situación, utilizamos las funciones &lt;code&gt;lower()&lt;/code&gt; y &lt;code&gt;upper()&lt;/code&gt;, funciones que escriben, respectivamente, una cadena de caracteres toda en minúsculas o mayúsculas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Asignaturas optativas - Curso 2018/19&amp;quot;)

print(&amp;quot;- Informática gráfica&amp;quot;)
print(&amp;quot;- Pruebas de software&amp;quot;)
print(&amp;quot;- Usabilidad y accesibilidad&amp;quot;)

opcion = input(&amp;quot;Escoge la asignatura optativa: &amp;quot;)

asignatura = opcion.lower()

if asignatura in (&amp;quot;informática gráfica&amp;quot;, &amp;quot;pruebas de software&amp;quot;,
                  &amp;quot;usabilidad y accesibilidad&amp;quot;):
    print(&amp;quot;Asignatura elegida: &amp;quot; + asignatura)
else:
    print(&amp;quot;La asignatura escogida no está contemplada.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/13/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>14. Bucles I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb14-bucles-i/</link>
      <pubDate>Wed, 01 May 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb14-bucles-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/GQGhU1526Oo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Abordaremos ahora otro tipo de estructura de control de flujo (las estructuras condicionales asimismo lo eran): los &lt;strong&gt;bucles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La utilidad de un &lt;strong&gt;bucle&lt;/strong&gt; es repetir una o varias líneas de código tantas veces como sea preciso (siendo esta cantidad conocida de antemano o no). En &lt;em&gt;Python&lt;/em&gt; tenemos dos tipos de bucles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;determinados&lt;/em&gt;: sabemos a priori cuántas veces se repetirá el bloque de código, e&lt;/li&gt;
&lt;li&gt;&lt;em&gt;indeterminados&lt;/em&gt;: desconocemos a priori el número de repeticiones del bloque de código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empecemos viendo el primer tipo, al que pertenece la instrucción &lt;code&gt;for&lt;/code&gt;, cuya sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for variable in elemento_a_recorrer:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde el &lt;code&gt;elemento_a_recorrer&lt;/code&gt; puede ser una lista, una tupla, una cadena de texto&amp;hellip;&lt;/p&gt;

&lt;p&gt;Por ejemplo, para imprimir tres veces una palabra, una posible estrategia sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [1, 2, 3]:
    print(&amp;quot;Hola&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aunque hemos utilizado una lista de números, no es imprescindible. El siguiente ejemplo consigue el mismo resultado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(&amp;quot;Hola&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En ambos casos, el elemento a recorrer es una lista de tres elementos y es por ello que el mensaje &lt;code&gt;&amp;quot;Hola&amp;quot;&lt;/code&gt; se repite en tres ocasiones, tantas como el mencionado número de elementos de la correspondiente lista.&lt;/p&gt;

&lt;p&gt;Si en lugar de un texto predeterminado optamos por imprimir la propia variable en ambos casos, el resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [1, 2, 3]:
    print(i)

# 1
# 2
# 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(i)

# enero
# febrero
# marzo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La variable no tiene que denominarse necesariamente &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for meses in [&amp;quot;enero&amp;quot;, &amp;quot;febrero&amp;quot;, &amp;quot;marzo&amp;quot;]:
    print(meses)

# enero
# febrero
# marzo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/14/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>15. Bucles II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb15-bucles-ii/</link>
      <pubDate>Thu, 02 May 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb15-bucles-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/D416qOEDrhI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Las instrucciones &lt;code&gt;print()&lt;/code&gt; que aparecen en los bucles de tipo &lt;code&gt;for&lt;/code&gt; insertan un salto de línea en cada iteración:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;Píldoras&amp;quot;, &amp;quot;Informáticas&amp;quot;, 3]:
    print(&amp;quot;Hola&amp;quot;)

# Hola
# Hola
# Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si deseamos que la impresión se produzca en la misma línea, hemos de declarar adecuadamente el argumento &lt;code&gt;end&lt;/code&gt; de la función &lt;code&gt;print()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [&amp;quot;Píldoras&amp;quot;, &amp;quot;Informáticas&amp;quot;, 3]:
    print(&amp;quot;Hola&amp;quot;, end=&amp;quot; &amp;quot;)

# Hola Hola Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si el elemento a recorrer es una cadena de texto, el bucle &lt;code&gt;for&lt;/code&gt; ejecutará tantas iteraciones como letras tenga esta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in &amp;quot;Alexis&amp;quot;:
    print(i, end=&amp;quot;-&amp;quot;)

# A-l-e-x-i-s-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta característica nos permite, por ejemplo, programar una primera aproximación a un verificador de direcciones de correo electrónico, que nos indique que una es correcta si alberga una arroba en su declaración:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = False

for i in &amp;quot;direccion@dominio.com&amp;quot;:
    if i == &amp;quot;@&amp;quot;:
        email = True

if email == True:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)

# El email es correcto.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior bloque de código se puede simplificar un tanto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in &amp;quot;direccion@dominio.com&amp;quot;:
    if i == &amp;quot;@&amp;quot;:
        email = True

if email:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)

# El email es correcto.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos una versión interactiva de este programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_email(direcc):
    email = False

    for i in direcc:
        if i == &amp;quot;@&amp;quot;:
            email = True
    if email:
        print(&amp;quot;El email es correcto.&amp;quot;)
    else:
        print(&amp;quot;El email no es correcto.&amp;quot;)


direcc = input(&amp;quot;Introduce tu dirección de correo electrónico: &amp;quot;)

evalua_email(direcc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos ampliar la función de verificación de correos electrónicos para que compruebe si también hay un carácter &lt;code&gt;.&lt;/code&gt; en la cadena de texto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_email(direcc):
    arroba = False
    punto = False

    for i in direcc:
        if i == &amp;quot;@&amp;quot;:
            arroba = True
        if i == &amp;quot;.&amp;quot;:
            punto = True
    if arroba and punto:
        print(&amp;quot;El email es correcto.&amp;quot;)
    else:
        print(&amp;quot;El email no es correcto.&amp;quot;)


direcc = input(&amp;quot;Introduce tu dirección de correo electrónico: &amp;quot;)

evalua_email(direcc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos el uso del tipo &lt;code&gt;range&lt;/code&gt; en combinación con el bucle &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(i)

# 0
# 1
# 2
# 3
# 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/15/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>16. Bucles III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb16-bucles-iii/</link>
      <pubDate>Thu, 02 May 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb16-bucles-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/KFz-mXB7qVI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Veamos algunas opciones de la función &lt;code&gt;print()&lt;/code&gt; a la hora de imprimir el valor de variables durante la ejecución de un bucle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 0
# valor de la variable 1
# valor de la variable 2
# valor de la variable 3
# valor de la variable 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La &lt;code&gt;f&lt;/code&gt; que aparece antes del texto entrecomillado indica el uso de &lt;strong&gt;funciones f&lt;/strong&gt;, que permiten interesantes opciones de cara a la impresión de textos en la consola. En esta ocasión, concatena la cadena de caracteres con el valor que toma la variable en cada iteración, indicada por &lt;code&gt;{i}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El tipo &lt;code&gt;range&lt;/code&gt; admite el uso de argumentos adicionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5, 10):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 5
# valor de la variable 6
# valor de la variable 7
# valor de la variable 8
# valor de la variable 9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5, 50, 5):
    print(f&amp;quot;valor de la variable {i}&amp;quot;)

# valor de la variable 5
# valor de la variable 10
# valor de la variable 15
# valor de la variable 20
# valor de la variable 25
# valor de la variable 30
# valor de la variable 35
# valor de la variable 40
# valor de la variable 45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;len&lt;/code&gt; también resulta de utilidad a la hora de emplear bucles &lt;code&gt;for&lt;/code&gt;. Veámosla en acción retomando el ejemplo de la validación de una dirección de correo electrónico visto en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;valido = False

email = input(&amp;quot;Introduce tu email: &amp;quot;)

for i in range(len(email)):
    if email[i] == &amp;quot;@&amp;quot;:
        valido = True

if valido:
    print(&amp;quot;El email es correcto.&amp;quot;)
else:
    print(&amp;quot;El email no es correcto.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que muestre los números impares del 1 al 100. Los números deberán aparecer una al lado del otro sin salto de línea.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, 100, 2):
    print(i, end=&amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida por teclado introducir una contraseña. La contraseña no podrá tener menos de 8 caracteres ni espacios en blanco. Si la contraseña es correcta, el programa imprime &amp;ldquo;Contraseña OK&amp;rdquo;. En caso contrario imprime &amp;ldquo;Contraseña errónea&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_password(password):
    valido = True
    if len(password) &amp;lt; 8 or &amp;quot; &amp;quot; in password:
        valido = False
    return valido


password = input(&amp;quot;Introduce contraseña: &amp;quot;)

if evalua_password(password):
    print(&amp;quot;Constraseña OK.&amp;quot;)
else:
    print(&amp;quot;Contraseña errónea.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 3&lt;/strong&gt;: crea un programa que evalúe si una dirección de correo electrónico es válida o no en función de si tiene &lt;code&gt;@&lt;/code&gt; o &lt;code&gt;.&lt;/code&gt; Hay que tener en cuenta que la dirección se considera correcta si solo tiene una &lt;code&gt;@&lt;/code&gt; y si tiene uno o más &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_mail(mail):
    arroba = False
    punto = False

    if &amp;quot;.&amp;quot; in mail:
        punto = True

    contador = 0
    for i in mail:
        if i == &amp;quot;@&amp;quot;:
            contador += 1

    if contador == 1:
        arroba = True

    return punto and arroba


mail = input(&amp;quot;Introduce dirección de correo electrónico: &amp;quot;)

if evalua_mail(mail):
    print(&amp;quot;Dirección de correo electrónico VÁLIDA.&amp;quot;)
else:
    print(&amp;quot;Dirección de correo electrónico INVÁLIDA.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/16/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>17. Bucles IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb17-bucles-iv/</link>
      <pubDate>Fri, 03 May 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb17-bucles-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/UfUM6uzl5SM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos el bucle &lt;strong&gt;while&lt;/strong&gt;, que es tipo &lt;em&gt;indeterminado&lt;/em&gt; porque no sabemos a priori cuántas veces ejecutará el bloque de código contenido en su interior. Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while condición:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el siguiente ejemplo, no obstante, vemos cómo programar un bucle &lt;code&gt;while&lt;/code&gt; para que funcione como uno de tipo &lt;em&gt;determinado&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;i = 1

while i &amp;lt;= 10:
    print(f&amp;quot;Iteración: {i}.&amp;quot;)
    i += 1

print(&amp;quot;Fin de ejecución del bucle while.&amp;quot;)

# Iteración: 1.
# Iteración: 2.
# Iteración: 3.
# Iteración: 4.
# Iteración: 5.
# Iteración: 6.
# Iteración: 7.
# Iteración: 8.
# Iteración: 9.
# Iteración: 10.
# Fin de ejecución del bucle while.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos ahora un programa que nos solicite la edad y, en caso de ser el dato introducido un número negativo, vuelva a preguntarnos de nuevo (siendo así un ejemplo de bucle &lt;code&gt;while&lt;/code&gt; de tipo &lt;em&gt;indeterminado&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;edad = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

while edad &amp;lt; 0 or edad &amp;gt; 110:
    print(&amp;quot;Has introducido una edad incorrecta. Vuelve a intentarlo.&amp;quot;)
    edad = int(input(&amp;quot;Introduce tu edad: &amp;quot;))

print(f&amp;quot;Tienes {edad} años. Gracias por colaborar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si un usuario se empeña en introducir datos negativos o muy elevados, puede dar lugar a la aparición de un bucle &amp;ldquo;infinito&amp;rdquo;. Veamos una estrategia para evitar este tipo de situaciones con un programa que nos permita hallar la raíz cuadrada de un número:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

print(&amp;quot;Programa de cálculo de raíces cuadradas&amp;quot;)

numero = int(input(&amp;quot;Introduce un número: &amp;quot;))

intentos = 0  # Para ejecutar el bucle while un número de veces determinado

while numero &amp;lt; 0:
    print(&amp;quot;No se puede hallar la raíz de un número negativo.&amp;quot;)
    if intentos == 2:
        print(&amp;quot;Has consumido demasiados intentos.&amp;quot;)
        print(&amp;quot;El programa ha finalizado&amp;quot;)
        break
    numero = int(input(&amp;quot;Introduce un número: &amp;quot;))
    if numero &amp;lt; 0:
        intentos += 1

if intentos &amp;lt; 2:
    solucion = math.sqrt(numero)
    print(f&amp;quot;La raíz cuadrada de {numero} es {solucion}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La instrucción &lt;code&gt;break&lt;/code&gt; detiene la ejecución del bucle. Es decir, si durante el transcurso de la ejecución de un bucle llegamos a una situación donde se lee una instrucción &lt;code&gt;break&lt;/code&gt;, en ese instante, el flujo del programa deja el bucle y salta a la primera línea de código que se encuentra a continuación del mencionado bucle.&lt;/li&gt;
&lt;li&gt;En la línea &lt;code&gt;solucion = math.sqrt(numero)&lt;/code&gt; introducimos el uso de la clase &lt;code&gt;math&lt;/code&gt;, que hemos importado en la primera línea de código (&lt;code&gt;import math&lt;/code&gt;). Es un concepto que se estudiará posteriormente en el curso, pero dicha instrucción sirve para encontrar la raíz cuadrada de un número. La utilidad de importar clases reside en que podemos aprovechar funciones ya programadas y no hemos de &amp;ldquo;reinventar la rueda&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 1&lt;/strong&gt;: crea un programa que pida números infinitamente. Los números introducidos deben ser cada vez mayores. El programa finalizará cuando se introduce un número menor que el anterior.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numero = int(input(&amp;quot;Introduce un número entero: &amp;quot;))

condicion = True

while condicion:
    num1 = numero
    numero = int(input(&amp;quot;Introduce un número entero mayor que el anterior: &amp;quot;))
    if num1 &amp;gt; numero:
        print(f&amp;quot;Valor incorrecto: {num1} no es mayor que {numero}.&amp;quot;)
        condicion = False
    else:
        print(f&amp;quot;Valor correcto: {numero} es mayor que {num1}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio 2&lt;/strong&gt;: crea un programa que pida números positivos indefinidamente. El programa termina cuando se introduce un número negativo. Finalmente el programa muestras la suma de todos los números introducidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Cálculo de la suma de una serie de números positivos.&amp;quot;)
print(&amp;quot;Instrucciones: &amp;quot;)
print(&amp;quot;- Introduce tantos números positivos como desees sumar.&amp;quot;)
print(&amp;quot;- Introduce un número negativo para calcular la suma.&amp;quot;)

suma = 0
num = int(input(&amp;quot;Introduce un número positivo: &amp;quot;))

while num &amp;gt; 0:
    suma += num
    num = int(input(&amp;quot;Introduce un número positivo: &amp;quot;))

print(f&amp;quot;La suma de los valores positivos introducios es {suma}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/17/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>18. Bucles V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb18-bucles-v/</link>
      <pubDate>Sun, 05 May 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb18-bucles-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/c8WCRTU4udo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el uso de las instrucciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;: provoca que el flujo de ejecución de un programa, dentro de un bucle, salte a la siguiente iteración de este.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass&lt;/code&gt;: en cuanto se lee en el interior de un bucle, devuelve &lt;code&gt;null&lt;/code&gt; (es como si no ejecutara el bucle). Su uso es reducido, salvo en definición de clases o casos muy concretos (dejar bucles vacíos, que sabemos serán precisos, para programar en un futuro próximo).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt;: cuando un bucle finaliza todas sus iteraciones, entonces comienza a leer las contenidas en el bloque de código asociado a esta instrucción.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos algunos ejemplos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for letra in &amp;quot;Python&amp;quot;:
    print(f&amp;quot;Viendo la letra {letra}.&amp;quot;)

# Viendo la letra P.
# Viendo la letra y.
# Viendo la letra t.
# Viendo la letra h.
# Viendo la letra o.
# Viendo la letra n.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for letra in &amp;quot;Python&amp;quot;:
    if letra == &amp;quot;h&amp;quot;:
        continue
    print(f&amp;quot;Viendo la letra {letra}.&amp;quot;)

# Viendo la letra P.
# Viendo la letra y.
# Viendo la letra t.
# Viendo la letra o.
# Viendo la letra n.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elaboremos, a continuación, un programa que cuente el número de caracteres de una cadena de texto, ignorando los espacios en blanco:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre = &amp;quot;Píldoras Informáticas&amp;quot;

print(len(nombre))  # 21 (considera espacio en blanco como carácter)

contador = 0

for i in nombre:
    if i == &amp;quot; &amp;quot;:
        continue
    contador += 1

print(contador)  # 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cuando queremos crear una clase (o función), tan pequeña como sea posible, pero que seguramente en un futuro ampliemos, la instrucción &lt;code&gt;pass&lt;/code&gt; es de suma utilidad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class mi_clase:
    pass  # A implementar más tarde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por lo que respecta a la instrucción &lt;code&gt;else&lt;/code&gt;, veamos un código para comprobar si una dirección de correo electrónico posee o no una arroba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = input(&amp;quot;Introduce tu email: &amp;quot;)

for i in email:
    if i == &amp;quot;@&amp;quot;:
        arroba = True
        break
else:
    arroba = False

print(arroba)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de ser cautos, pues generalmente asociamos la instrucción &lt;code&gt;else&lt;/code&gt; a estructuras condicionales y no a bucles. Fijarse en la identación del programa es clave.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/18/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>19. Generadores I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb19-generadores-i/</link>
      <pubDate>Sun, 05 May 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb19-generadores-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TLVnoqXGWpY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;generador&lt;/strong&gt; es una estructura que extrae valores de una función y los almacena, de uno en uno, en objetos iterables (que se pueden recorrer). Cada vez que un generador almacena un valor, permanece en un estado pausado hasta que se solicita el siguiente, característica que se conoce como &lt;strong&gt;suspensión de estado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La utilidad de los generadores reside en que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;son más eficientes que las funciones tradicionales (sobretodo en consumo de recursos y tiempo, al no tener que construir &amp;ldquo;estructuras completas de datos&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;resultan muy útiles con listas de valores infinitos; y&lt;/li&gt;
&lt;li&gt;bajo determinados escenarios, será recomendable que un generador devuelva los valores de uno en uno.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def nombre():
    yield
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creemos un programa que nos genere una lista de números pares, primero a través de una función y luego utilizando generadores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    lista_pares = []
    while num &amp;lt; limite:
        lista_pares.append(num * 2)
        num += 1
    return lista_pares


print(genera_pares(10))  # [2, 4, 6, 8, 10, 12, 14, 16, 18]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    while num &amp;lt; limite:
        yield num * 2
        num += 1


# Creo el objeto iterable que genera la función
devuelve_pares = genera_pares(10)

# Recorro el objeto iterable con, por ejemplo, un bucle for
for i in devuelve_pares:
    print(i)

# 2
# 4
# 6
# 8
# 10
# 12
# 14
# 16
# 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imaginemos ahora que nuestro objetivo es imprimir en la consola únicamente los tres primeros números pares. Con el método &lt;code&gt;next()&lt;/code&gt; podemos solicitar valores de uno en uno al objeto iterable fruto del generador:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def genera_pares(limite):
    num = 1
    while num &amp;lt; limite:
        yield num * 2
        num += 1


# Creo el objeto iterable que genera la función
devuelve_pares = genera_pares(10)

print(next(devuelve_pares))  # 2

print(&amp;quot;Aquí podría ir más código.&amp;quot;)

print(next(devuelve_pares))  # 4

print(&amp;quot;Aquí podría ir más código.&amp;quot;)

print(next(devuelve_pares))  # 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/19/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20. Generadores II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb20-generadores-ii/</link>
      <pubDate>Sun, 05 May 2019 00:03:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb20-generadores-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ucaHqGII350&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos el uso de la instrucción &lt;code&gt;yield from&lt;/code&gt;, cuya utilidad reside en la simplificación del código de los generadores en el caso de utilizar bucles anidados.&lt;/p&gt;

&lt;p&gt;Por ejemplo, elaboremos un generador que nos devuelva ciudades:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        yield elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # Madrid

print(next(ciudades_devueltas))  # Barcelona
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;em&gt;Python&lt;/em&gt;, cuando colocamos un &lt;code&gt;*&lt;/code&gt; delante de un parámetro, estamos indicando que podemos pasar un número indeterminado de argumentos, que los recibirá en forma de tupla.&lt;/p&gt;

&lt;p&gt;Imaginemos que ahora deseamos acceder a los elementos de cada una de las ciudades (sus letras en este caso):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        for sub_elemento in elemento:
            yield sub_elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # M

print(next(ciudades_devueltas))  # a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El anterior ejemplo lo podemos simplificar utilizando la instrucción &lt;code&gt;yield from&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        yield from elemento


# Creamos objeto generador
ciudades_devueltas = devuelve_ciudades(&amp;quot;Madrid&amp;quot;, &amp;quot;Barcelona&amp;quot;, &amp;quot;Bilbao&amp;quot;,
                                       &amp;quot;Valencia&amp;quot;)

print(next(ciudades_devueltas))  # M

print(next(ciudades_devueltas))  # a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/20/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>21. Excepciones I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb21-excepciones-i/</link>
      <pubDate>Mon, 06 May 2019 00:01:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb21-excepciones-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2MaAs7XU2T0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;excepción&lt;/strong&gt; es un error que acontece durante la ejecución de un programa. La sintaxis del código es correcta, pero, en el momento de ejecutarse el algoritmo, sucede &amp;ldquo;algo inesperado&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Para ilustrar la aparición de excepciones, trabajemos con el siguiente código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    return num1 + num2


def resta(num1, num2):
    return num1 - num2


def multiplica(num1, num2):
    return num1 * num2


def divide(num1, num2):
    return num1 / num2


op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))

print(&amp;quot;Operaciones disponibles: &amp;quot;)
print(&amp;quot;- Suma&amp;quot;)
print(&amp;quot;- Resta&amp;quot;)
print(&amp;quot;- Multiplica&amp;quot;)
print(&amp;quot;- Divide&amp;quot;)

operacion = input(&amp;quot;Introduce la operación a realizar: &amp;quot;)

if operacion == &amp;quot;Suma&amp;quot;:
    print(suma(op1, op2))
elif operacion == &amp;quot;Resta&amp;quot;:
    print(resta(op1, op2))
elif operacion == &amp;quot;Multiplica&amp;quot;:
    print(multiplica(op1, op2))
elif operacion == &amp;quot;Divide&amp;quot;:
    print(divide(op1, op2))
else:
    print(&amp;quot;Operación no contemplada.&amp;quot;)

print(&amp;quot;Operación ejecutada. Continuación de ejecución del programa &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un posible ejemplo de ejecución sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 16
Introduce el segundo número: 4
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Multiplica
64
Operación ejecutada. Continuación de ejecución del programa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, si por accidente intentamos realizar una división entre 0:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 2
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Divide
Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    print(divide(op1, op2))
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 14, in divide
    return num1 / num2
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De forma que el código se detiene en el preciso instante de la llamada a la función &lt;code&gt;divide()&lt;/code&gt; y deja de ejecutar las restantes líneas (la instrucción &lt;code&gt;print()&lt;/code&gt; final en esta ocasión), cuya importancia puede ser vital para nosotros.&lt;/p&gt;

&lt;p&gt;Este tipo de situaciones se aborda mediante una &lt;strong&gt;captura&lt;/strong&gt; o &lt;strong&gt;control de excepción&lt;/strong&gt;. La idea es intentar realizar un bloque de código y, en el caso de no poderse llevar a cabo dicha acción, que al menos el resto de programa siga adelante.&lt;/p&gt;

&lt;p&gt;Si nos fijamos en la &lt;strong&gt;pila de llamadas&lt;/strong&gt; que nos muestran antes de arrojar el error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    print(divide(op1, op2))
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 14, in divide
    return num1 / num2
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leyendo de abajo hacia arriba, la instrucción &lt;code&gt;return num1 / num2&lt;/code&gt;, ubicada en la línea 14 del código, arroja un error de división por cero (&lt;code&gt;ZeroDivisionError&lt;/code&gt;). Para controlar esta circunstancia, usaremos un bloque de tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    instrucciones
except error:
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, nuestra función &lt;code&gt;divide()&lt;/code&gt; la podríamos reescribir como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre 0.&amp;quot;)
        return &amp;quot;Operación errónea.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera que, replicando el anterior conflictivo ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 2
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Divide
No se puede dividir entre 0.
Operación errónea.
Operación ejecutada. Continuación de ejecución del programa 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apreciamos que la última línea de código, aquel &lt;code&gt;print()&lt;/code&gt; final, ahora efectivamente sí llega a ejecutarse.&lt;/p&gt;

&lt;p&gt;Por desgracia, no es el único punto conflictivo que presenta el código mostrado. Por ejemplo, ¿qué sucede si introducimos una cadena de texto en lugar de un número?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 3
Introduce el segundo número: a
Traceback (most recent call last):
  File &amp;quot;prac21_excepciones1_1.py&amp;quot;, line 22, in &amp;lt;module&amp;gt;
    op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
ValueError: invalid literal for int() with base 10: &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; arroja un error de tipo &lt;code&gt;ValueError&lt;/code&gt; que también habríamos de controlar a través de un bloque &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;except&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/21/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>22. Excepciones II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb22-excepciones-ii/</link>
      <pubDate>Mon, 06 May 2019 00:02:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb22-excepciones-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/HH3c6ZBvSx8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Recordemos el código final de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def suma(num1, num2):
    return num1 + num2


def resta(num1, num2):
    return num1 - num2


def multiplica(num1, num2):
    return num1 * num2


def divide(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre 0.&amp;quot;)
        return &amp;quot;Operación errónea.&amp;quot;


op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))

print(&amp;quot;Operaciones disponibles: &amp;quot;)
print(&amp;quot;- Suma&amp;quot;)
print(&amp;quot;- Resta&amp;quot;)
print(&amp;quot;- Multiplica&amp;quot;)
print(&amp;quot;- Divide&amp;quot;)

operacion = input(&amp;quot;Introduce la operación a realizar: &amp;quot;)

if operacion == &amp;quot;Suma&amp;quot;:
    print(suma(op1, op2))
elif operacion == &amp;quot;Resta&amp;quot;:
    print(resta(op1, op2))
elif operacion == &amp;quot;Multiplica&amp;quot;:
    print(multiplica(op1, op2))
elif operacion == &amp;quot;Divide&amp;quot;:
    print(divide(op1, op2))
else:
    print(&amp;quot;Operación no contemplada.&amp;quot;)

print(&amp;quot;Operación ejecutada. Continuación de ejecución del programa.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, este código es susceptible de presentar más errores. Por ejemplo, introduciendo una cadena de texto en lugar de un número cuando nos solicitan los datos.&lt;/p&gt;

&lt;p&gt;Para solucionar ese detalle, podemos reescribir el correspondiente bloque de código como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
    op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
except ValueError:
    print(&amp;quot;Los valores introducidos no son correctos.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El programa así modificado, presenta errores de lógica ahora, ya que si introducimos una cadena de texto como dato, &lt;em&gt;Python&lt;/em&gt; no arroja error, pero continua la ejecución del programa y al intentar llevar a cabo cualquier operación de las disponibles, lanza un error de tipo &lt;code&gt;NameError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 5
Introduce el segundo número: a
Los valores introducidos no son correctos.
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Suma
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_1.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;
    print(suma(op1, op2))
NameError: name &#39;op2&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una manera de abordar esta problemática es mediante un bucle infinito de tipo &lt;code&gt;while&lt;/code&gt;, forzando que el usuario introduzca valores admisibles para continuar la ejecución del programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    try:
        op1 = (int(input(&amp;quot;Introduce el primer número: &amp;quot;)))
        op2 = (int(input(&amp;quot;Introduce el segundo número: &amp;quot;)))
        break
    except ValueError:
        print(&amp;quot;Los valores introducidos no son correctos. Inténtalo de nuevo.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siendo una posible ejecución del programa la que se muestra acto seguido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce el primer número: 5
Introduce el segundo número: a
Los valores introducidos no son correctos. Inténtalo de nuevo.
Introduce el primer número: ag
Los valores introducidos no son correctos. Inténtalo de nuevo.
Introduce el primer número: 5
Introduce el segundo número: 0
Operaciones disponibles: 
- Suma
- Resta
- Multiplica
- Divide
Introduce la operación a realizar: Suma
5
Operación ejecutada. Continuación de ejecución del programa.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elaboremos ahora una función &lt;code&gt;divide()&lt;/code&gt; diferente a la vista en el ejemplo anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
    op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
    print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como antes, el programa arroja excepciones si intentamos dividir por cero o introducimos cadenas de texto como datos. Capturémoslas de manera consecutiva:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    except ValueError:
        print(&amp;quot;El valor introducido es erróneo.&amp;quot;)
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre cero.&amp;quot;)
    print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existe una alternativa genérica, aunque poco recomendable, que consiste en teclear &lt;code&gt;except:&lt;/code&gt; sin más e imprimir un mensaje neutro de error. Captura una excepción de forma general, pero no informa sobre lo acontencido.&lt;/p&gt;

&lt;p&gt;Por otro lado, cuando queremos que un código se ejecute siempre, existe la posibilidad de ubicarlo en el interior de una claúsula &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    except ValueError:
        print(&amp;quot;El valor introducido es erróneo.&amp;quot;)
    except ZeroDivisionError:
        print(&amp;quot;No se puede dividir entre cero.&amp;quot;)
    finally:
        print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Además, es posible también programar utilizando la combinación &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def divide():
    try:
        op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
        op2 = (float(input(&amp;quot;Divisor: &amp;quot;)))
        print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
    finally:
        print(&amp;quot;Cálculo finalizado.&amp;quot;)


divide()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos algunas posibles ejecuciones de este último bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: 4
Divisor: 2
La división resulta: 2.0
Cálculo finalizado.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: aaa
Cálculo finalizado.
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;
    divide()
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 3, in divide
    op1 = (float(input(&amp;quot;Dividendo: &amp;quot;)))
ValueError: could not convert string to float: &#39;aaa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Dividendo: 5
Divisor: 0
Cálculo finalizado.
Traceback (most recent call last):
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;
    divide()
  File &amp;quot;prac22_excepciones2_3.py&amp;quot;, line 5, in divide
    print(&amp;quot;La división resulta: &amp;quot; + str(op1 / op2))
ZeroDivisionError: float division by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La cadena de texto &lt;code&gt;&amp;quot;Cálculo finalizado&amp;quot;&lt;/code&gt; se muestra por pantalla, independientemente de la presencia o no de excepciones durante la ejecución del algoritmo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: toda instrucción &lt;code&gt;try&lt;/code&gt; ha de estar acompañada bien de su correspondiente &lt;code&gt;except&lt;/code&gt;, bien de &lt;code&gt;finally&lt;/code&gt;, bien de ambas; pero no puede aparecer en solitario.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/22/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>23. Excepciones III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb23-excepciones-iii/</link>
      <pubDate>Tue, 07 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb23-excepciones-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/dLH-oay4Bts&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Estudiemos cómo lanzar excepciones, de forma intencionada, a través de la instrucción &lt;code&gt;raise&lt;/code&gt;. Veremos su utilidad cuando trabajemos, más adelante, con clases.&lt;/p&gt;

&lt;p&gt;Generemos un sencillo programa cuyo objetivo sea evaluar nuestra edad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_edad(edad):
    if edad &amp;lt; 20:
        return &amp;quot;Eres muy joven.&amp;quot;
    elif edad &amp;lt; 40:
        return &amp;quot;Eres joven.&amp;quot;
    elif edad &amp;lt; 65:
        return &amp;quot;Eres maduro.&amp;quot;
    elif edad &amp;lt; 100:
        return &amp;quot;Cuídate.&amp;quot;


print(evalua_edad(18))  # Eres muy joven.
print(evalua_edad(70))  # Cuídate.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin embargo, la función así definida presenta este curioso comportamiento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(evalua_edad(-15))  # Eres muy joven.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evidentemente, podemos arreglar esta situación mediante estructuras condicionales, pero veremos a continuación cómo emplear la instrucción &lt;code&gt;raise&lt;/code&gt; para abordar el presente caso.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evalua_edad(edad):
    if edad &amp;lt; 0:
        raise TypeError(&amp;quot;No se permiten edades negativas.&amp;quot;)
    if edad &amp;lt; 20:
        return &amp;quot;Eres muy joven.&amp;quot;
    elif edad &amp;lt; 40:
        return &amp;quot;Eres joven.&amp;quot;
    elif edad &amp;lt; 65:
        return &amp;quot;Eres maduro.&amp;quot;
    elif edad &amp;lt; 100:
        return &amp;quot;Cuídate.&amp;quot;


print(evalua_edad(18))
print(evalua_edad(70))
print(evalua_edad(-15))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior programa, obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Eres muy joven.
Cuídate.
Traceback (most recent call last):
  File &amp;quot;prac23_excepciones3_2.py&amp;quot;, line 16, in &amp;lt;module&amp;gt;
    print(evalua_edad(-15))
  File &amp;quot;prac23_excepciones3_2.py&amp;quot;, line 3, in evalua_edad
    raise TypeError(&amp;quot;No se permiten edades negativas.&amp;quot;)
TypeError: No se permiten edades negativas.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: hemos de usar alguno de los tipos de error disponibles en &lt;em&gt;Python&lt;/em&gt;, no pdemos cualquier cadena de texto sin más ahí. No obstante, dicho esto, cuando generemos clases podremos elaborar también errores personalizados.&lt;/p&gt;

&lt;p&gt;Pasemos a programar un algoritmo que calcule la raíz cuadrada de un número mayor o igual que cero:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math


def calcula_raiz(num):
    if num &amp;lt; 0:
        raise ValueError(&amp;quot;El número no puede ser negativo.&amp;quot;)
    else:
        return math.sqrt(num)


op = (int(input(&amp;quot;Introduce un número mayor o igual que cero: &amp;quot;)))

print(calcula_raiz(op))

print(&amp;quot;Programa terminado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Controlemos la excepción que aparece si introducimos un número negativo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math


def calcula_raiz(num):
    if num &amp;lt; 0:
        raise ValueError(&amp;quot;El número no puede ser negativo.&amp;quot;)
    else:
        return math.sqrt(num)


op = (int(input(&amp;quot;Introduce un número mayor o igual que cero: &amp;quot;)))

try:
    print(calcula_raiz(op))
except ValueError as ErrorDeNumeroNegativo:
    print(ErrorDeNumeroNegativo)

print(&amp;quot;Programa terminado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un par de ejecuciones del anterior programa, por ejemplo, podrían ser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce un número mayor o igual que cero: 144
12.0
Programa terminado.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce un número mayor o igual que cero: -144
El número no puede ser negativo.
Programa terminado.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/23/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>24. Programación orientada a objetos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb24-poo-i/</link>
      <pubDate>Wed, 08 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb24-poo-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/5Ohme4A2Weg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es un lenguaje de programación orientado a objetos (POO). Existen, principalemente, dos paradigmas de programación:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programación orientada a procedimientos.&lt;/li&gt;
&lt;li&gt;Programación orientada a objetos.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;programación-orientada-a-procedimientos&#34;&gt;Programación orientada a procedimientos&lt;/h3&gt;

&lt;p&gt;Algunos ejemplos de lenguajes de programación que siguen este paradigma son: Fortan, Cobol, Basic&amp;hellip;&lt;/p&gt;

&lt;p&gt;Entre sus principales desventajas encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Las unidades de código son muy grandes en aplicaciones complejas (resultando en un número de líneas significativamente elevado).&lt;/li&gt;
&lt;li&gt;En aplicaciones complejas, el código resulta difícil de descifrar.&lt;/li&gt;
&lt;li&gt;Las aplicaciones generadas suelen ser poco reutilizables.&lt;/li&gt;
&lt;li&gt;Si existen fallos en alguna línea del código, es muy probable que el programa caiga en su totalidad.&lt;/li&gt;
&lt;li&gt;Aparición frecuente de &lt;strong&gt;código espaguetti&lt;/strong&gt; (saltos en el flujo de ejecución del programa).&lt;/li&gt;
&lt;li&gt;Es difícil de depurar el código por otros programadores en caso de necesidad o error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;programación-orientada-a-objetos&#34;&gt;Programación orientada a objetos&lt;/h3&gt;

&lt;p&gt;La programación orientada a objetos consiste en trasladar el comportamiento que tienen los objetos en la vida real al código de programación. Los objetos tienen un estado, un comportamiento (¿qué puede hacer?) y unas propiedades.&lt;/p&gt;

&lt;p&gt;Por ejemplo, pensemos en el objeto &amp;ldquo;coche&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;¿Cuál es el estado de un coche? Puede estar parado, circulando, aparcado&amp;hellip;&lt;/li&gt;
&lt;li&gt;¿Qué propiedades tiene un coche? Tiene un color, un peso, un tamaño&amp;hellip;&lt;/li&gt;
&lt;li&gt;¿Qué comportamiento tiene un coche? Puede arrancar, frenar, acelerar, girar&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Objeto&lt;/th&gt;
&lt;th&gt;Coche&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Propiedades (atributos)&lt;/td&gt;
&lt;td&gt;Color, peso, alto, largo&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Comportamiento&lt;/td&gt;
&lt;td&gt;Arrancar, frenar, girar, acelerar&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Algunos ejemplos de lenguajes de programación que emplean este paradigma son: C++, Java, VisualNet&amp;hellip;&lt;/p&gt;

&lt;p&gt;Entre las principales ventajas encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los programas están divididos en &amp;ldquo;trozos&amp;rdquo;, &amp;ldquo;partes&amp;rdquo;, &amp;ldquo;módulos&amp;rdquo; o &amp;ldquo;clases&amp;rdquo;, es decir, existe &lt;strong&gt;modularización&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;El código es muy reutilizable. Aparece en el concepto de &lt;strong&gt;herencia&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Si existen fallos en alguna línea del código, el programa es posible que continue con su funcionamiento, debido al &lt;strong&gt;control de excepciones&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Surge el concepto de &lt;strong&gt;encapsulamiento&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El vocabulario más frecuente de este paradigma de programación incluye palabras o expresiones como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clase.&lt;/li&gt;
&lt;li&gt;Objeto.&lt;/li&gt;
&lt;li&gt;Ejemplar de clase. Instancia de clase. Ejemplarizar una clase. Instanciar una clase.&lt;/li&gt;
&lt;li&gt;Modularización.&lt;/li&gt;
&lt;li&gt;Encapsulamiento / encapsulación.&lt;/li&gt;
&lt;li&gt;Herencia.&lt;/li&gt;
&lt;li&gt;Polimorfismo.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>25. Programación orientada a objetos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb25-poo-ii/</link>
      <pubDate>Wed, 08 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb25-poo-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2UNrSiKEI8w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una &lt;strong&gt;clase&lt;/strong&gt; es un modelo donde se redactan las características comunes de un grupo de objetos.&lt;/p&gt;

&lt;p&gt;Una &lt;strong&gt;instancia&lt;/strong&gt; (o &lt;strong&gt;ejemplar&lt;/strong&gt; u &lt;strong&gt;objeto&lt;/strong&gt;) es un miembro concreto de una clase.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;modularización&lt;/strong&gt; surge cuando un programa está compuesto de diversas clases. Cada una de ellas funciona de manera independiente (facilitando así enormemente su mantenimiento y control de excepciones) y es posible su reutilización en otros programas.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;encapsulación&lt;/strong&gt; nos permite proteger el funcionamiento interno de cierto bloque de código, para que no pueda accederse o alterarse desde el exterior de manera inadecuada. No obstante, todas las clases de un programa estarán &amp;ldquo;conectadas&amp;rdquo; entre sí de cierta manera (mediante &lt;strong&gt;métodos de acceso&lt;/strong&gt; a ciertas características de cada una de las clases).&lt;/p&gt;

&lt;p&gt;El mencionado acceso se llevará a cabo empleando la &lt;strong&gt;nomenclatura del punto&lt;/strong&gt;. Por ejemplo, supongamos que hemos creado un objeto, de la clase &lt;code&gt;coche&lt;/code&gt;, llamado &lt;code&gt;miCoche&lt;/code&gt;. Para acceder a sus propiedades, utilizaremos la sintaxis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;miCoche.color = &#39;&#39;rojo&#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.peso = 1500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.ancho = 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.alto = 900&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De forma similar, el acceso al comportamiento de este objeto se realizará mediante la mencionada nomenclatura:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;miCoche.arranca()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.frena()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.gira()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;miCoche.acelera()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>26. Programación orientada a objetos III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb26-poo-iii/</link>
      <pubDate>Wed, 08 May 2019 00:00:03 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb26-poo-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Y_SiIgxc-xI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Traslademos a código fuente algunos de los conceptos examinados en las dos lecciones anteriores. La sintaxis para crear la clase &lt;code&gt;Coche&lt;/code&gt; sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    instrucciones
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empecemos declarando las &lt;strong&gt;propiedades&lt;/strong&gt; de la clase &lt;code&gt;Coche&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Definamos &lt;strong&gt;comportamientos&lt;/strong&gt; para los futuros objetos que pertenezcan a esta clase, que vienen determinados por distintos métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def function(self):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En &lt;em&gt;Sublime Text 3&lt;/em&gt; cuando empezamos a escribir &lt;code&gt;def&lt;/code&gt; nos ofrece dos opciones, crear una &lt;strong&gt;función&lt;/strong&gt; o un &lt;strong&gt;método&lt;/strong&gt;. La principal diferencia radica en que la primera no pertenece a ninguna clase, al contrario que la segunda. Podemos, a través de los cursores, escoger en el editor la opción que apunta a un método y se nos proporciona la sintaxis de uno por defecto, como el que se muestra arriba.&lt;/p&gt;

&lt;p&gt;Una vez editado, el código queda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: &lt;code&gt;self&lt;/code&gt; hace referencia al propio objeto perteneciente a la clase, es decir, a la instancia perteneciente a la clase.&lt;/p&gt;

&lt;p&gt;Construyamos un objeto de la clase &lt;code&gt;Coche&lt;/code&gt; y veamos cómo acceder a sus propiedades:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche = Coche()  # Instanciación de una clase

print(&amp;quot;Largo del coche: &amp;quot;, mi_coche.largo_chasis)  # Largo del coche:  250
print(&amp;quot;Número de ruedas: &amp;quot;, mi_coche.ruedas)  # Número de ruedas:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trabajemos en el método declarado, para ello, escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;En marcha: &amp;quot;, mi_coche.en_marcha)  # En marcha:  False
mi_coche.arrancar()
print(&amp;quot;En marcha: &amp;quot;, mi_coche.en_marcha)  # En marcha:  True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta última acción la podríamos haber llevado a cabo a través de otro comportamiento, &lt;code&gt;estado&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True

    def estado(self):
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;


print(mi_coche.estado())  # El coche está parado.
mi_coche.arrancar()
print(mi_coche.estado())  # El coche está en marcha.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En resumen, hemos creado la clase &lt;code&gt;Coche&lt;/code&gt;, que se caracteriza por poseer cuatro propiedades y dos comportamientos.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/26/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>27. Programación orientada a objetos IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb27-poo-iv/</link>
      <pubDate>Thu, 09 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb27-poo-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/x5CY8fVyYLo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Partamos del código del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self):
        self.en_marcha = True

    def estado(self):
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generemos dos objetos y comparémoslos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche1 = Coche()
mi_coche2 = Coche()

print(&amp;quot;Largo mi_coche1: &amp;quot;, mi_coche1.largo_chasis)  # Largo mi_coche1:  250
print(&amp;quot;Largo mi_coche2: &amp;quot;, mi_coche2.largo_chasis)  # Largo mi_coche2:  250

mi_coche1.arrancar()
print(mi_coche1.estado())  # El coche está en marcha.
print(mi_coche2.estado())  # El coche está parado.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sería buena idea que el método &lt;code&gt;arrancar()&lt;/code&gt;, además de arrancar el coche, nos informase de su estado (en marcha o parado). También, programaremos el método &lt;code&gt;estado()&lt;/code&gt; para que nos ofrezca información del coche:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    largo_chasis = 250
    ancho_chasis = 120
    ruedas = 4
    en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)


mi_coche1 = Coche()
mi_coche2 = Coche()

print(mi_coche1.arrancar(True))  # El coche está en marcha.
print(mi_coche2.arrancar(False))  # # El coche está parado.
mi_coche1.estado()
# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
mi_coche2.estado()
# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En programación orientada a objetos, las características comunes suelen formar parte de lo que se conoce como &lt;strong&gt;estado inicial&lt;/strong&gt;. Para especificar dicho estado utilizaremos un &lt;strong&gt;constructor&lt;/strong&gt;, que es un método especial que le da estado a los objetos que pertenecen a una clase. Su sintaxis vendrá dada por&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self):
    propiedades
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, el código de la clase quedaría:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.largo_chasis = 250
        self.ancho_chasis = 120
        self.ruedas = 4
        self.en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Qué sucede si intentamos ahora incrementar a cinco el número de ruedas del segundo coche?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.ruedas = 5

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
El coche tiene 5 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta acción, en ciertos casos, no debería estar permitida. Para ello, entra en juego el concepto de &lt;strong&gt;encapsulación&lt;/strong&gt;, que nos permitirá proteger propiedades para que no se puedan modificar desde fuera de la propia clase. Su aplicación es tan sencilla como preceder con &lt;code&gt;__&lt;/code&gt; el nombre de la propiedad a proteger y en aquellos lugares donde luego aparezca:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.largo_chasis = 250
        self.ancho_chasis = 120
        self.__ruedas = 4
        self.en_marcha = False

    def arrancar(self, arrancamos):
        self.en_marcha = arrancamos
        if self.en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.largo_chasis, &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.__ruedas = 5

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En esta ocasión, las cuatro propiedades deberían encapsularse. Incluso &lt;code&gt;en_marcha&lt;/code&gt;, ya que queremos modificarla únicamente desde el interior de la clase.&lt;/p&gt;

&lt;p&gt;La clase entonces quedaría:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos
        if self.__en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De la misma manera, se pueden encapsular métodos, opción que estudiaremos en futuras lecciones.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/27/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>28. Programación orientada a objetos V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb28-poo-v/</link>
      <pubDate>Thu, 09 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb28-poo-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OU-e2uhoGxE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A continuación, abordaremos la encapsulación de métodos partiendo del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos
        if self.__en_marcha:
            return &amp;quot;El coche está en marcha.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encapsular un método es hacer que sea únicamente accesible desde la propia clase, no desde fuera.&lt;/p&gt;

&lt;p&gt;Como aplicación práctica de este procedimiento, generemos un método que compruebe que todo está en orden antes de arrancar, &lt;code&gt;chequeo_interno(self)&lt;/code&gt;, que llamaremos desde &lt;code&gt;arrancar()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos

        if self.__en_marcha:
            chequeo = self.chequeo_interno()

        if self.__en_marcha and chequeo:
            return &amp;quot;El coche está en marcha.&amp;quot;
        elif self.__en_marcha and not chequeo:
            return &amp;quot;Algo ha ido mal en el chequeo. No podemos arrancar.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)

    def chequeo_interno(self):
        print(&amp;quot;Realizando chequeo interno.&amp;quot;)

        self.gas = &amp;quot;Ok&amp;quot;
        self.aceite = &amp;quot;Ok&amp;quot;
        self.puertas = &amp;quot;Ok&amp;quot;

        if self.gas == &amp;quot;Ok&amp;quot; and self.aceite == &amp;quot;Ok&amp;quot; and self.puertas == &amp;quot;Ok&amp;quot;:
            return True
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche1 = Coche()

print(mi_coche1.arrancar(True))

mi_coche1.estado()

print(&amp;quot;---- Segundo vehículo ----&amp;quot;)

mi_coche2 = Coche()

print(mi_coche2.arrancar(False))

mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Realizando chequeo interno.
El coche está en marcha.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
---- Segundo vehículo ----
El coche está parado.
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El método &lt;code&gt;chequeo_interno()&lt;/code&gt; es accesible desde fuera de la clase (no está encapsulado), pero, ¿es lógico que podamos acceder a él en cualquier momento? ¿Incluso si está parado? Si el método está diseñado para ejecutarse únicamente en el momento previo a arrancar, hemos de &amp;ldquo;protegerlo&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))
print(mi_coche2.chequeo_interno())  # Absurdo en este caso
mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
Realizando chequeo interno.
True
El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para encapsular el mencionado método, utilizamos la estrategia de &lt;code&gt;__&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def __init__(self):
        self.__largo_chasis = 250
        self.__ancho_chasis = 120
        self.__ruedas = 4
        self.__en_marcha = False

    def arrancar(self, arrancamos):
        self.__en_marcha = arrancamos

        if self.__en_marcha:
            chequeo = self.__chequeo_interno()

        if self.__en_marcha and chequeo:
            return &amp;quot;El coche está en marcha.&amp;quot;
        elif self.__en_marcha and not chequeo:
            return &amp;quot;Algo ha ido mal en el chequeo. No podemos arrancar.&amp;quot;
        else:
            return &amp;quot;El coche está parado.&amp;quot;

    def estado(self):
        print(&amp;quot;El coche tiene&amp;quot;, self.__ruedas, &amp;quot;ruedas. Un ancho de&amp;quot;,
              self.__ancho_chasis, &amp;quot;cm y un largo de&amp;quot;, self.__largo_chasis,
              &amp;quot;cm.&amp;quot;)

    def __chequeo_interno(self):
        print(&amp;quot;Realizando chequeo interno.&amp;quot;)

        self.gas = &amp;quot;Ok&amp;quot;
        self.aceite = &amp;quot;Ok&amp;quot;
        self.puertas = &amp;quot;Ok&amp;quot;

        if self.gas == &amp;quot;Ok&amp;quot; and self.aceite == &amp;quot;Ok&amp;quot; and self.puertas == &amp;quot;Ok&amp;quot;:
            return True
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De forma que si ahora escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_coche2 = Coche()

print(mi_coche2.arrancar(False))
print(mi_coche2.__chequeo_interno())
mi_coche2.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El coche está parado.
Traceback (most recent call last):
  File &amp;quot;prac28_poo5_1.py&amp;quot;, line 50, in &amp;lt;module&amp;gt;
    print(mi_coche2.__chequeo_interno())
AttributeError: &#39;Coche&#39; object has no attribute &#39;__chequeo_interno&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, &lt;em&gt;Python&lt;/em&gt; arroja un error. No nos deja llamar al método &lt;code&gt;__chequeo_interno()&lt;/code&gt; desde fuera de la propia clase &lt;code&gt;Coche&lt;/code&gt; porque está encapsulado.&lt;/p&gt;

&lt;p&gt;¿Cuándo encapsular una variable o un método? No existe una &amp;ldquo;regla de oro&amp;rdquo;, esto es, habremos de hacerlo cuando la clase así lo precise, dependiendo del comportamiento que posea una clase y en función del criterio del propio programador.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/28/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>29. Programación orientada a objetos VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb29-poo-vi/</link>
      <pubDate>Thu, 09 May 2019 00:00:03 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb29-poo-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/u_VbLsIyzRk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En programación orientada a objetos, el concepto de &lt;strong&gt;herencia&lt;/strong&gt; intenta dar una réplica aproximada de su contrapartida en la vida real. De una clase, denominada en ocasiones &lt;strong&gt;clase padre&lt;/strong&gt; o &lt;strong&gt;superclase&lt;/strong&gt;, heredarán otras clases atributos, métodos&amp;hellip; Se conocen estas últimas como &lt;strong&gt;subclases&lt;/strong&gt; de la anterior (y también como &lt;strong&gt;superclases&lt;/strong&gt; si de ellas también heredan otras).&lt;/p&gt;

&lt;p&gt;La principal utilidad de la herencia es la reutilización de código cuando se generan clases &amp;ldquo;similares&amp;rdquo;. Hemos de estudiar las características y comportamientos que poseen en común todos los objetos con los que deseamos trabajar. Todo ello lo englobaremos en una &lt;strong&gt;superclase&lt;/strong&gt;, de la cual luego heredarán otras clases, que aun teniendo características en común, también es cierto que existen otras peculiaridades que las diferencian.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo práctico:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Clase Padre
class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


# Clase hija
class Moto(Vehiculo):
    pass


mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estamos utilizando métodos de la clase &lt;code&gt;Vehiculo&lt;/code&gt; a través de la clase &lt;code&gt;Moto&lt;/code&gt; gracias a la herencia.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/29/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>30. Programación orientada a objetos VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb30-poo-vii/</link>
      <pubDate>Thu, 09 May 2019 00:00:04 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb30-poo-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/jMQQN9OxwVc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Continuemos con el ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Clase Padre
class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


# Clase hija
class Moto(Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Construyamos la clase &lt;code&gt;Moto&lt;/code&gt;, añadiendo un comportamiento nuevo, &lt;code&gt;caballito&lt;/code&gt;, que se va a sumar a los cuatro heredados de la clase &lt;code&gt;Vehiculo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podríamos teclear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.caballito()

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El programa &amp;ldquo;funciona&amp;rdquo; (al menos no arroja errores), pero no nos está informando si estamos haciendo el caballito o no.&lt;/p&gt;

&lt;p&gt;Abordemos esta situación sobreescribiendo el método &lt;code&gt;estado&lt;/code&gt; heredado de la clase &lt;code&gt;Vehiculo&lt;/code&gt;, para así incorporar la información sobre el nuevo comportamiento de la clase &lt;code&gt;Moto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para sobreescribir un método de la clase padre definimos uno en la clase hija que se caracterice por tener el mismo nombre y número de parámetros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, la ejecución del siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_moto = Moto(&amp;quot;Honda&amp;quot;, &amp;quot;CBR&amp;quot;)

mi_moto.caballito()

mi_moto.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Produce como resultado ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Honda 
Modelo: CBR 
En marcha: False 
Acelerando: False 
Frenando: False 
 Voy haciendo el caballito.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiquemos el código para albergar la posibilidad de trabajar con furgonetas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_furgo = Furgoneta(&amp;quot;Renault&amp;quot;, &amp;quot;Kangoo&amp;quot;)

mi_furgo.arrancar()

mi_furgo.estado()

mi_furgo.carga(True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Renault 
Modelo: Kangoo 
En marcha: True 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Todo funciona de manera adecuada, con la salvedad de que no estamos viendo que la furgoneta está cargada. Como el método &lt;code&gt;carga()&lt;/code&gt; devuelve una cadena de texto, añadiendo una función &lt;code&gt;print()&lt;/code&gt; solucionamos el entuerto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_furgo = Furgoneta(&amp;quot;Renault&amp;quot;, &amp;quot;Kangoo&amp;quot;)

mi_furgo.arrancar()

mi_furgo.estado()

print(mi_furgo.carga(True))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Renault 
Modelo: Kangoo 
En marcha: True 
Acelerando: False 
Frenando: False
La furgoneta está cargada.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviamente, una instrucción del tipo &lt;code&gt;mi_moto.carga()&lt;/code&gt; arroja un error, ya que no hereda de &lt;code&gt;Furgoneta&lt;/code&gt; la clase &lt;code&gt;Moto&lt;/code&gt;, sino de &lt;code&gt;Vehiculo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Añademos soporte para vehículos electrónicos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class VehiculoElec():
    def __init__(self):
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y, a continuación, generemos una clase para trabajar con biciletas eléctricas. Estas tienen marca, modelo, pueden arrancar, frenar&amp;hellip; y a la vez también poseen autonomia y la posibilidad de cargar energía. &lt;em&gt;Python&lt;/em&gt; nos permite heredar de dos o más clases, que se conoce como &lt;strong&gt;herencia múltiple&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos de tener en cuenta que cuando se da herencia múltiple, a la hora de tomar el constructor o los diferentes métodos, se da la preferencia según hayamos ordenado las clases padres de las que hereda. En este caso, no podemos iniciar una bicicleta eléctrica con marca y modelo, aprovechando así el constructor de la clase &lt;code&gt;Vehiculo&lt;/code&gt;, ya que la clase &lt;code&gt;VehiculoElec&lt;/code&gt; posee su propio constructor y este último tiene preferencia por haber colocado esta clase primero en la definición de &lt;code&gt;BicicletaElec&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac30_poo7_3.py&amp;quot;, line 58, in &amp;lt;module&amp;gt;
    mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)
TypeError: __init__() takes 1 positional argument but 3 were given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si intercambiamos el orden de las clases padre en la definición de &lt;code&gt;BicicletaElec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BicicletaElec(Vehiculo, VehiculoElec):
    pass


mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)

mi_bici.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La ejecución ya no arroja errores, mostrando el siguiente resultado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Orbea 
Modelo: HCI30 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/30/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>31. Programación orientada a objetos VIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb31-poo-viii/</link>
      <pubDate>Fri, 10 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb31-poo-viii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/oe04X1B14YY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección estudiaremos el uso de las funciones&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;super()&lt;/code&gt; e&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isinstance()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partimos del último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec():
    def __init__(self):
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True


class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si queremos crear un objeto de la clase &lt;code&gt;BicicletaElec&lt;/code&gt; que posea una marca y un modelo, tenemos dos opciones disponibles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acudir al método &lt;code&gt;__init__()&lt;/code&gt; de la clase &lt;code&gt;VehiculoElec&lt;/code&gt; y copiar las líneas que nos interesen del método homónimo de la clase &lt;code&gt;Vehiculo&lt;/code&gt;. No obstante, este enfoque es, cuanto menos, poco elegante.&lt;/li&gt;
&lt;li&gt;Utilizar la función &lt;code&gt;super()&lt;/code&gt;, cuya utilidad reside en que procede a llamar al método de la clase padre.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos esta segunda aproximación con un ejemplo un tanto más sencillo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Persona():
    def __init__(self, nombre, edad, residencia):
        self.nombre = nombre
        self.edad = edad
        self.residencia = residencia

    def describir(self):
        print(&amp;quot;Nombre:&amp;quot;, self.nombre, &amp;quot;\nEdad:&amp;quot;, self.edad, &amp;quot;\nResidencia:&amp;quot;,
              self.residencia)


class Empleado(Persona):
    def __init__(self, salario, antiguedad):
        self.salario = salario
        self.antiguedad = antiguedad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podríamos comenzar a construir objetos de ambas clases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;antonio = Persona(&amp;quot;Antonio&amp;quot;, 55, &amp;quot;España&amp;quot;)

antonio.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Antonio 
Edad: 55 
Residencia: España
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para constuir un objeto de la clase &lt;code&gt;Empleado&lt;/code&gt;, hemos de tener en cuenta que tomará como argumentos los parámetros declarados en dicha clase, y no los de &lt;code&gt;Persona&lt;/code&gt;. No obstante, a la hora de emplear el método &lt;code&gt;describir()&lt;/code&gt; encontraremos problemas tal y como están programadas ambas clases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;prac31_poo8_2.py&amp;quot;, line 24, in &amp;lt;module&amp;gt;
    juan.describir()
  File &amp;quot;prac31_poo8_2.py&amp;quot;, line 8, in describir
    print(&amp;quot;Nombre:&amp;quot;, self.nombre, &amp;quot;\nEdad:&amp;quot;, self.edad, &amp;quot;\nResidencia:&amp;quot;,
AttributeError: &#39;Empleado&#39; object has no attribute &#39;nombre&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos reescribir el constructor de la clase &lt;code&gt;Empleado&lt;/code&gt;, haciendo uso de la función &lt;code&gt;super()&lt;/code&gt;, como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado(Persona):
    def __init__(self, salario, antiguedad):
        super().__init__(&amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)
        self.salario = salario
        self.antiguedad = antiguedad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De manera que ahora el código no arrojará error alguno:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Juan 
Edad: 33 
Residencia: Italia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, programado así, todos nuestros empleados se llamarían Juan, tendrían 33 años y serían italianos. Veamos cómo generalizar el funcionamiento de la anterior clase:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado(Persona):
    def __init__(self, salario, antiguedad, nombre_empleado, edad_empleado,
                 residencia_empleado):
        super().__init__(nombre_empleado, edad_empleado, residencia_empleado)
        self.salario = salario
        self.antiguedad = antiguedad

    def describir(self):
        super().describir()
        print(&amp;quot;Salario:&amp;quot;, self.salario, &amp;quot;\nAntigüedad:&amp;quot;, self.antiguedad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De paso, hemos mejorado también el método &lt;code&gt;describir()&lt;/code&gt;, que procede a llamar al de la clase padre y, además, añade la información correspondiente al salario y a la antigüedad. De este modo,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15, &amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)

juan.describir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Nombre: Juan 
Edad: 33 
Residencia: Italia
Salario: 1500 
Antigüedad: 15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;isinstance()&lt;/code&gt; nos informa si un objeto es instancia de una clase determinada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Empleado(1500, 15, &amp;quot;Juan&amp;quot;, 33, &amp;quot;Italia&amp;quot;)

juan.describir()

print(isinstance(juan, Persona))  # True
print(isinstance(juan, Empleado))  # True

marco = Persona(&amp;quot;Marco&amp;quot;, 51, &amp;quot;Francia&amp;quot;)

print(isinstance(marco, Persona))  # True
print(isinstance(marco, Empleado))  # False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con todo, modifiquemos el ejemplo inicial para permitir que una bicicleta eléctrica admita marca y modelo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec(Vehiculo):
    def __init__(self, marca, modelo):
        super().__init__(marca, modelo)
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True


class BicicletaElec(VehiculoElec, Vehiculo):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notemos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hemos utilizado la función &lt;code&gt;super()&lt;/code&gt; en el método &lt;code&gt;__init__()&lt;/code&gt; de &lt;code&gt;VehiculoElec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hemos declarado que la clase &lt;code&gt;VehiculoElec&lt;/code&gt; hereda de &lt;code&gt;Vehiculo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_bici = BicicletaElec(&amp;quot;Orbea&amp;quot;, &amp;quot;HCI30&amp;quot;)

mi_bici.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Orbea 
Modelo: HCI30 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/31/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>32. Programación orientada a objetos IX</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb32-poo-ix/</link>
      <pubDate>Fri, 10 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb32-poo-ix/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/kV1cN_bqcSw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el concepto de &lt;strong&gt;polimorfismo&lt;/strong&gt;. Un objeto puede cambiar de forma dependiendo del contexto en el que se utilice y, por tanto, modificar tanto sus propiedades como sus comportamientos asociados.&lt;/p&gt;

&lt;p&gt;Como &lt;em&gt;Python&lt;/em&gt; es un lenguaje de tipado dinámico, esta característica es sencilla de utilizar.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Coche():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando cuatro ruedas.&amp;quot;)


class Moto():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando dos ruedas.&amp;quot;)


class Camion():
    def desplazamiento(self):
        print(&amp;quot;Me desplazo utilizando seis ruedas.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_vehiculo = Moto()

mi_vehiculo.desplazamiento()

mi_vehiculo2 = Coche()

mi_vehiculo2.desplazamiento()

mi_vehiculo3 = Camion()

mi_vehiculo3.desplazamiento()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Me desplazo utilizando dos ruedas.
Me desplazo utilizando cuatro ruedas.
Me desplazo utilizando seis ruedas.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tuviésemos cientos de vehículos y quisiéramos utilizar sus comportamientos, habríamos de seguir el patrón esbozado arriba.&lt;/p&gt;

&lt;p&gt;No obstante, nos podemos aprovechar de la magia del polimorfismo creando una función como se muestra a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def desplazamiento_vehiculo(vehiculo):
    vehiculo.desplazamiento()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y como el objeto &lt;code&gt;vehiculo&lt;/code&gt; posee la capacidad de adquirir el rol de cualquiera de los vehículos programados arriba (coche, moto o camión), &lt;em&gt;Python&lt;/em&gt; en todo momento sabrá a qué método &lt;code&gt;desplazamiento()&lt;/code&gt; acudir en cada instante.&lt;/p&gt;

&lt;p&gt;Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_vehiculo = Camion()

desplazamiento_vehiculo(mi_vehiculo)

mi_vehiculo = Coche()

desplazamiento_vehiculo(mi_vehiculo)

mi_vehiculo = Moto()

desplazamiento_vehiculo(mi_vehiculo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Me desplazo utilizando seis ruedas.
Me desplazo utilizando cuatro ruedas.
Me desplazo utilizando dos ruedas.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/32/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>33. Métodos de cadenas</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb33-cadenas/</link>
      <pubDate>Sat, 11 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb33-cadenas/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/zH0VsRuD2ok&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Examinemos algunos de los métodos disponibles en &lt;em&gt;Python&lt;/em&gt; a la hora de trabajar con cadenas de texto, que son objetos de tipo &lt;code&gt;String&lt;/code&gt;. Entre los más habituales encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capitalize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isdigit()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isalum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isalpha()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rfind()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener más información sobre su utilización, conviene que visitemos &lt;a href=&#34;http://pyspanishdoc.sourceforge.net/lib/string-methods.html&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veamos algunos ejemplos sencillos que ilustren el uso de algunos de los anteriores métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombre_usuario = input(&amp;quot;Introduce tu nombre de usuario: &amp;quot;)

print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario)
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.upper())
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.lower())
print(&amp;quot;El nombre es:&amp;quot;, nombre_usuario.capitalize())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce tu nombre de usuario: Alexis Sáez
El nombre es: Alexis Sáez
El nombre es: ALEXIS SÁEZ
El nombre es: alexis sáez
El nombre es: Alexis sáez
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algunas de estas funciones resultan útiles a la hora de validar los datos que un usuario proporciona a nuestros programas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;edad = input(&amp;quot;Introduce la edad: &amp;quot;)

while not edad.isdigit():
    print(&amp;quot;Por favor, introduce un valor numérico.&amp;quot;)
    edad = input(&amp;quot;Introduce la edad: &amp;quot;)

if int(edad) &amp;lt; 18:
    print(&amp;quot;No puede pasar.&amp;quot;)
else:
    print(&amp;quot;Puede pasar.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Introduce la edad: 8iu9
Por favor, introduce un valor numérico.
Introduce la edad: o9098
Por favor, introduce un valor numérico.
Introduce la edad: 99
Puede pasar.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ejercicio&lt;/strong&gt;: crea un programa que pida introducir una dirección de email por teclado. El programa debe imprimir en consola si la dirección de email es correcta o no en función de si esta tiene el símbolo &lt;code&gt;@&lt;/code&gt;. Si tiene una &lt;code&gt;@&lt;/code&gt; la dirección será correcta. Si tiene más de una o ninguna &lt;code&gt;@&lt;/code&gt; la dirección será errónea. Si la &lt;code&gt;@&lt;/code&gt; está al comienzo de la dirección de email o al final, la dirección también será errónea&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;email = input(&amp;quot;Introduce email: &amp;quot;)

if email.count(&amp;quot;@&amp;quot;) == 1 and email.count(&amp;quot;@&amp;quot;, 1, len(email) - 1) == 1:
    print(&amp;quot;La dirección de correo es correcta.&amp;quot;)
else:
    print(&amp;quot;La dirección de correo es incorrecta.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/33/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>34. Módulos</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb34-modulos/</link>
      <pubDate>Sun, 12 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb34-modulos/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/t93x-vnFvP4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;módulo&lt;/strong&gt; es un archivo con extensión &lt;code&gt;.py&lt;/code&gt;, &lt;code&gt;.pyc&lt;/code&gt; (Python compilado) o fichero escrito en &lt;em&gt;C&lt;/em&gt; para &lt;em&gt;CPython&lt;/em&gt;, que posee su propio espacio de nombres y que puede contener variables, funciones, clases e incluso otros módulos.&lt;/p&gt;

&lt;p&gt;Sirve para organizar y reutilizar el código (&lt;strong&gt;modularización&lt;/strong&gt; y &lt;strong&gt;reutilización&lt;/strong&gt;). Se genera uno creando un archivo con extensión &lt;code&gt;.py&lt;/code&gt; (o &lt;code&gt;.pyc&lt;/code&gt; o archivo en C) y guardándolo donde nos interese.&lt;/p&gt;

&lt;p&gt;Vamos a crear un módulo que, siguiendo la organización del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; de código, se llamará &lt;code&gt;modulo_matematicas.py&lt;/code&gt;. En su interior tecleamos las siguientes líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, generamos otro archivo, &lt;code&gt;script_1.py&lt;/code&gt;, e importamos el anterior módulo, utilizando para ello la instrucción &lt;code&gt;import&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import modulo_matematicas as modulo

modulo.sumar(5, 7)

modulo.restar(9, 5)

modulo.multiplicar(4, 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 4
El resultado de la multiplicación es: 36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como el nombre del módulo generado es un tanto extenso, he utilizado la instrucción &lt;code&gt;as&lt;/code&gt;, que permite reescribir dicho nombre y, en mi caso, abreviarlo para que su uso sea más cómodo.&lt;/p&gt;

&lt;p&gt;Una alternativa a esta estrategia la encontramos en el fichero &lt;code&gt;script_2.py&lt;/code&gt;, donde se utiliza &lt;code&gt;from ... import ...&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import sumar

sumar(5, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el bloque de código anterior, únicamente hemos importado la función &lt;code&gt;sumar()&lt;/code&gt; de nuestro módulo. Podemos añadir más funciones separándolas mediante comas o importar todo el contenido del módulo utilizando el carácter &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import sumar, restar

sumar(5, 7)

restar(12, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_matematicas import *

sumar(5, 7)

restar(12, 6)

multiplicar(12, 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la resta es: 6
El resultado de la multiplicación es: 144
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, es peligroso actuar así, pues, en ocasiones, podemos reescribir métodos de manera accidental y arribar a resultados no deseados. Además, en aplicaciones complejas, por motivos de optimización, utilizar el carácter &lt;code&gt;*&lt;/code&gt; provoca que se reserve demasiado espacio en memoria al tener que almacenar todo el contenido del módulo importado.&lt;/p&gt;

&lt;p&gt;Creemos un módulo, &lt;code&gt;modulo_vehiculos.py&lt;/code&gt; con las clases utilizadas en la lección de herencia asociada al apartado de programación orientada a objetos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


class Furgoneta(Vehiculo):
    def carga(self, cargar):
        self.cargado = cargar
        if self.cargado:
            return &amp;quot;La furgoneta está cargada.&amp;quot;
        else:
            return &amp;quot;La furgoneta no está cargada.&amp;quot;


class Moto(Vehiculo):
    hcaballito = &amp;quot;&amp;quot;

    def caballito(self):
        self.hcaballito = &amp;quot;Voy haciendo el caballito.&amp;quot;

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena, &amp;quot;\n&amp;quot;, self.hcaballito)


class VehiculoElec(Vehiculo):
    def __init__(self, marca, modelo):
        super().__init__(marca, modelo)
        self.autonomia = 100

    def cargar_energia(self):
        self.cargando = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora, en el fichero &lt;code&gt;script_5.py&lt;/code&gt; tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modulo_vehiculos import *

mi_coche = Vehiculo(&amp;quot;Mazda&amp;quot;, &amp;quot;MX5&amp;quot;)
mi_coche.estado()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Mazda 
Modelo: MX5 
En marcha: False 
Acelerando: False 
Frenando: False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; busca los módulos en el mismo directorio donde está guardado el fichero desde el cual se realiza la llamada de importación. En caso de no hallarlo ahí, pasa a revisar el &lt;code&gt;syspath&lt;/code&gt; (es un conjunto de directorios entre los que está, por ejemplo, el de instalación de &lt;em&gt;Python&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Si no tenemos los módulos en ninguna de ambas ubicaciones, &lt;em&gt;Python&lt;/em&gt; arrojará un error al ejecutar el programa. Para solucionar esta situación estudiaremos el uso de &lt;strong&gt;paquetes&lt;/strong&gt; en la próxima lección.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/34/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>35. Paquetes I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb35-paquetes-i/</link>
      <pubDate>Sun, 12 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb35-paquetes-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nRieWujis4s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Los &lt;strong&gt;paquetes&lt;/strong&gt; son directorios donde se almacenarán módulos relacionados entre sí. Sirven para organizar el código de una aplicación y reutilizar los mencionados módulos.&lt;/p&gt;

&lt;p&gt;Un paquete se crea generando un directorio en cuyo interior haya presente un archivo denominado &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imaginemos que nuestro objetivo es elaborar un programa que realice diversos cálculos matemáticos y estadísticos. Vamos a empezar creando un directorio denominado &lt;code&gt;calculos&lt;/code&gt;, en consonancia con la nomenclatura que estamos siguiendo para los ficheros del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En su interior creamos el mencionado archivo &lt;code&gt;__init__.py&lt;/code&gt; (sin contenido alguno), acción que le transmite a &lt;em&gt;Python&lt;/em&gt; la información de que la carpeta &lt;code&gt;calculos&lt;/code&gt; funcionará como un paquete.&lt;/p&gt;

&lt;p&gt;Añadimos ahora a la carpeta el módulo &lt;code&gt;calculos_generales.py&lt;/code&gt;, cuyo contenido es el siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)


def dividir(dividendo, divisor):
    print(&amp;quot;El resultado de la división es:&amp;quot;, dividendo / divisor)


def potenciar(base, exponente):
    print(&amp;quot;El resultado de la potenciación es:&amp;quot;, base**exponente)


def redondear(numero):
    print(&amp;quot;El resultado del redondeo es:&amp;quot;, round(numero))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, desde la raíz del directorio, veamos cómo podemos utilizar nuestro paquete recién creado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import dividir

dividir(10, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la división es: 3.3333333333333335
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recordemos que podemos importar todo el contenido del módulo utilizando el carácter &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import *

dividir(10, 3)

redondear(4.6)

potenciar(2, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la división es: 3.3333333333333335
El resultado del redondeo es: 5
El resultado de la potenciación es: 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos crear &lt;strong&gt;subpaquetes&lt;/strong&gt;, esto es, un paquete dentro de otro, siguiendo de manera recursiva el procedimiento explicado.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para afinar un poco más, creemos dos directorios dentro de la carpeta del paquete, denominados &lt;code&gt;basicos&lt;/code&gt; (para suma, resta, multiplicación y división) y &lt;code&gt;redondeo-potencia&lt;/code&gt; (para redondear y calcular potencias). Cada una de ellas ha de llevar en su interior su correspondiente fichero &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la carpeta &lt;code&gt;basicos&lt;/code&gt; incluimos el módulo &lt;code&gt;operaciones_basicas.py&lt;/code&gt;, cuyo contenido será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sumar(op1, op2):
    print(&amp;quot;El resultado de la suma es:&amp;quot;, op1 + op2)


def restar(op1, op2):
    print(&amp;quot;El resultado de la resta es:&amp;quot;, op1 - op2)


def multiplicar(op1, op2):
    print(&amp;quot;El resultado de la multiplicación es:&amp;quot;, op1 * op2)


def dividir(dividendo, divisor):
    print(&amp;quot;El resultado de la división es:&amp;quot;, dividendo / divisor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mientras que en la carpeta &lt;code&gt;redondeo_potencia&lt;/code&gt; generamos el módulo &lt;code&gt;redondea_y_potencia&lt;/code&gt;, compuesto por el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def potenciar(base, exponente):
    print(&amp;quot;El resultado de la potenciación es:&amp;quot;, base**exponente)


def redondear(numero):
    print(&amp;quot;El resultado del redondeo es:&amp;quot;, round(numero))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para utilizar estos últimos módulos creados, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.basicos.operaciones_basicas import sumar
from calculos.redondeo_potencia.redondea_y_potencia import potenciar

sumar(5, 7)
potenciar(2, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 12
El resultado de la potenciación es: 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/35/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>36. Paquetes distribuibles</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb36-paquetes-ii/</link>
      <pubDate>Mon, 13 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb36-paquetes-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Zf9sN-w0BVE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Veamos cómo crear &lt;strong&gt;paquetes distribuibles&lt;/strong&gt; para que otras personas puedan utilizar nuestro código fuente. El proceso a seguir se reduce a dos sencillos pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Crear el paquete.&lt;/li&gt;
&lt;li&gt;Instalar el paquete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En la lección anterior generamos el paquete &lt;code&gt;calculos&lt;/code&gt; como una carpeta en el interior del directorio del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; donde estamos almacenando todos los archivos de este curso. Desde la raíz del mencionado directorio, utilizamos los módulos contenidos en dicho paquete en, por ejemplo, &lt;code&gt;paquetes_1.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora bien, si movemos este último archivo a otro directorio, &lt;em&gt;Python&lt;/em&gt; seguramente no será capaz de encontrar el paquete &lt;code&gt;calculos&lt;/code&gt;. Para solventar esta situación, hemos de proceder a su instalación.&lt;/p&gt;

&lt;p&gt;En primer lugar, creamos un archivo denominado &lt;code&gt;setup.py&lt;/code&gt; en la raíz del directorio, que contendrá una descripción del paquete que vamos a distribuir (nombre, versión, autor&amp;hellip;). En su interior, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import setup

setup(name=&amp;quot;prac35_calculos&amp;quot;,
      version=&amp;quot;1.0&amp;quot;,
      description=&amp;quot;Paquete de cálculos matemáticos&amp;quot;,
      author=&amp;quot;Alexis Sáez&amp;quot;,
      author_email=&amp;quot;cucoalexis@hotmail.com&amp;quot;,
      url=&amp;quot;https://imalexissaez.github.io/&amp;quot;,
      packages=[&amp;quot;prac35_calculos&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, abrimos la terminal de &lt;em&gt;Windows&lt;/em&gt; y nos dirigimos a la carpeta donde hemos almacenado el fichero &lt;code&gt;setup.py&lt;/code&gt; (la instrucción &lt;code&gt;cd&lt;/code&gt; es clave en este proceso). Escribimos ahora&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py sdist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si todo ha ido bien, habrán aparecido dos nuevas carpetas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;calculos.egg-info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta última hallamos el archivo comprimido denominado &lt;code&gt;calculos-1.0.tar.gz&lt;/code&gt;. Este es el fichero que podemos enviar por correo electrónico o subir a alguna plataforma online para distribuirlo a otras personas.&lt;/p&gt;

&lt;p&gt;Acto seguido, imaginemos que lo hemos recibido y queremos instalarlo. Para ello, desde la terminal de &lt;em&gt;Windows&lt;/em&gt; acudimos al directorio donde resida el fichero comprimido y tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install calculos-1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibiremos rápidamente en la consola el mensaje &amp;ldquo;Successfully installed calculos-1.0&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ahora, desde cualquier carpeta de nuestro ordenador, podemos emplear el paquete recién instalado escribiendo, por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from calculos.calculos_generales import sumar

sumar(6, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El resultado de la suma es: 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para comprobar que efectivamente el procedimiento se ha llevado a cabo con éxito, he creado una nueva carpeta, &lt;code&gt;test_paquete&lt;/code&gt;, y allí he ubicado el archivo &lt;code&gt;paquetes.py&lt;/code&gt;. De no haber instalado correctamente el paquete, &lt;em&gt;Python&lt;/em&gt; habría sido incapaz de encontrar la función &lt;code&gt;sumar()&lt;/code&gt; utilizando la instrucción dada arriba.&lt;/p&gt;

&lt;p&gt;Finalmente, para desinstalar el paquete, desde la terminal de &lt;em&gt;Windows&lt;/em&gt; tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 uninstall calculos
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/36/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>37. Archivos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb37-archivos-i/</link>
      <pubDate>Tue, 14 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb37-archivos-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/V87m9SltcI8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección abordaremos cómo trabajar con ficheros externos de texto, utilizando para tal empresa el módulo &lt;code&gt;io&lt;/code&gt;. Nuestro objetivo será conseguir la &lt;strong&gt;persistencia de datos&lt;/strong&gt;, es decir, salvaguardar los datos que estamos manipulando para que no se pierdan al finalizar una sesión de &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Existen dos alternativas para conseguir el mencionado objetivo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manejar archivos externos.&lt;/li&gt;
&lt;li&gt;Trabajar con bases de datos (BBDD).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las fases necesarias para guardar cierta información en archivos externos son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creación del archivo externo.&lt;/li&gt;
&lt;li&gt;Apertura del archivo externo.&lt;/li&gt;
&lt;li&gt;Manipulación del archivo externo.&lt;/li&gt;
&lt;li&gt;Cierre del archivo externo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La documentación del módulo &lt;code&gt;io&lt;/code&gt; la podemos encontrar en &lt;a href=&#34;https://docs.python.org/3/library/io.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo sencillo en el que crearemos un archivo donde almacenar una frase. Empecemos tecleando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: un archivo lo podemos abrir en modo lectura (&lt;code&gt;r&lt;/code&gt;), escritura (&lt;code&gt;w&lt;/code&gt;), agregar (&lt;code&gt;a&lt;/code&gt;)&amp;hellip;&lt;/p&gt;

&lt;p&gt;Si ahora acudimos al interior de la carpeta, encontraremos un archivo de texto vacío denominado &lt;code&gt;archivo.txt&lt;/code&gt;. En absoluto es necesario que almacenemos el fichero en una carpeta, pero únicamente procedo así para que el &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt; mantenga una estructura coherente.&lt;/p&gt;

&lt;p&gt;A continuación, veamos cómo incluir información (texto) en dicho archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

# Creación + Apertura
archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;w&amp;quot;)

frase = &amp;quot;Es un estupendo día para estudiar Python\nen Youtube.&amp;quot;

# Manipulación
archivo_texto.write(frase)

# Cierre
archivo_texto.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera, hemos incluido el texto declarado en la variable &lt;code&gt;frase&lt;/code&gt; en el fichero &lt;code&gt;archivo.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, estudiemos cómo abrir un archivo en modo lectura y acceder a su contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)

texto = archivo_texto.read()

archivo_texto.close()

print(texto)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otro método que nos puede resultar de utilidad a la hora de leer un archivo es &lt;code&gt;readlines()&lt;/code&gt;, que accede a la información almacenada línea a línea y la guarda en una lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo_texto = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)

lineas_texto = archivo_texto.readlines()

archivo_texto.close()

print(lineas_texto)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#39;Es un estupendo día para estudiar Python\n&#39;, &#39;en Youtube.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ser una lista, podemos utilizar ahora todo lo que hemos aprendido sobre ellas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(lineas_texto[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, veamos cómo abrir un archivo para agregar información. Para no alterar el contenido de &lt;code&gt;archivo.txt&lt;/code&gt;, almacenaremos sus frases en una variable, las escribiremos en un nuevo fichero, &lt;code&gt;archivo2.txt&lt;/code&gt;, y sobre este último será donde agreguemos contenido adicional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo1 = open(&amp;quot;archivo.txt&amp;quot;, &amp;quot;r&amp;quot;)
texto = archivo1.read()
archivo1.close()

archivo2 = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;w&amp;quot;)
archivo2.write(texto)
archivo2.close()

archivo2 = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;a&amp;quot;)
archivo2.write(&amp;quot;\n¡Mañana más!&amp;quot;)
archivo2.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si acudimos a la carpeta, comprobaremos la existencia de un fichero denominado &lt;code&gt;archivo2.txt&lt;/code&gt;, que contiene tres líneas.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/37/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>38. Archivos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb38-archivos-ii/</link>
      <pubDate>Tue, 14 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb38-archivos-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/0dEYVSRYl_s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Continuemos el estudio de la manipulación de ficheros externos de texto, con el módulo &lt;code&gt;io&lt;/code&gt;, analizando en esta ocasión cómo manejar punteros en texto.&lt;/p&gt;

&lt;p&gt;Para ello, movamos el último archivo de texto generado en la lección anterior (&lt;code&gt;archivo2.txt&lt;/code&gt;) a la carpeta, para así mantener la coherencia de la estructura de ficheros del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;. Tras ello, tecleemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si no indicamos lo contrario, la función &lt;code&gt;.read()&lt;/code&gt; sitúa el puntero al inicio del archivo y comienza entonces su lectura. Cuando finaliza esta, la posición del puntero se ubica tras el último carácter. Esto implica que si ahora escribimos de nuevo la instrucción &lt;code&gt;print(archivo.read())&lt;/code&gt;, nada se mostraría en la consola, puesto que tras la posición que ha quedado el puntero no existe información alguna.&lt;/p&gt;

&lt;p&gt;Se puede inicializar la posición del puntero utilizando la función &lt;code&gt;.seek()&lt;/code&gt;, que como argumento recibe el carácter desde el que deseamos comenzar la lectura del archivo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read())

archivo.seek(0)  # Reinicio posición puntero

print(archivo.read())

archivo.seek(10)  # Establezco posición puntero en carácter 10

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
Es un estupendo día para estudiar Python
en Youtube.
¡Mañana más!
pendo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con el método &lt;code&gt;.read()&lt;/code&gt; también podemos modificar la función del puntero, aunque de manera algo diferente a cómo se lleva a cabo el proceso con &lt;code&gt;.seek()&lt;/code&gt;. La primera lee hasta la posición del puntero que le indiquemos como argumento, mientras que la segunda posiciona el puntero en una posición y la lectura se efectúa a partir de dicha posición.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

print(archivo.read(11))
print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Es un estup
endo día para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para situar el puntero justo en medio de un archivo de texto podemos emplear la siguiente estrategia:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

archivo.seek(len(archivo.read()) / 2)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;r Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Y si queremos situar el puntero al final de la primera línea?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo2.txt&amp;quot;, &amp;quot;r&amp;quot;)

archivo.seek(len(archivo.readline()))

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un archivo lo podemos abrir, simultáneamente, en modo lectura y escritura (&lt;code&gt;&amp;quot;r+&amp;quot;&lt;/code&gt;), para realizar ambas acciones a la vez si nos es preciso. Generemos un fichero denominado &lt;code&gt;archivo3.txt&lt;/code&gt;, con el mismo contenido que aquel con el que llevamos trabajando a lo largo de toda esta lección. Después, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo3.txt&amp;quot;, &amp;quot;r+&amp;quot;)  # lectura y escritura

archivo.write(&amp;quot;Comienzo del texto: &amp;quot;)

archivo.seek(0)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Comienzo del texto: para estudiar Python
en Youtube.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al abrir el archivo, el puntero se posiciona al principio del mismo. Así, cuando usamos el método &lt;code&gt;.write()&lt;/code&gt;, efectivamente sobreescribimos el contenido que originalmente hubiera (en tantas posiciones como longitud posea la nueva cadena de texto).&lt;/p&gt;

&lt;p&gt;Así, para incluir una línea en mitad del documento (la segunda en este caso particular), un posible enfoque sería:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from io import open

archivo = open(&amp;quot;archivo3.txt&amp;quot;, &amp;quot;r+&amp;quot;)  # lectura y escritura

lineas = archivo.readlines()

lineas[1] = &amp;quot;Esta línea ha sido incluida desde el exterior.\n&amp;quot;

archivo.seek(0)

archivo.writelines(lineas)

archivo.seek(0)

print(archivo.read())

archivo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Comienzo del texto: para estudiar Python
Esta línea ha sido incluida desde el exterior.
¡Mañana más!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/38/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>39. Serialización I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb39-serializacion-i/</link>
      <pubDate>Wed, 15 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb39-serializacion-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/SOimkkfQIOM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección estudiaremos cómo serializar colecciones de ciertos objetos. La &lt;strong&gt;serialización&lt;/strong&gt; consiste en guardar en un fichero externo una lista, un diccionario o, incluso, un objeto; con la particularidad de que la codificación de dicho fichero es binaria.&lt;/p&gt;

&lt;p&gt;Esta estrategia resulta de utilidad a la hora de compartir archivos por Internet, ya que su distribución es más sencilla, o bien si deseamos guardarlo en un dispositivo de almacenamiento externo o en una base de datos.&lt;/p&gt;

&lt;p&gt;Para tal empresa utilizaremos la biblioteca de &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;pickle&lt;/code&gt;, para aprovechar los métodos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dump()&lt;/code&gt;: vuelca datos en un fichero binario externo, y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load()&lt;/code&gt;: carga datos de un fichero binario externo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos un ejemplo sencillo de aplicación de ambas funciones. Almacenaremos en un archivo binario externo una lista de nombres y, posteriormente, la rescataremos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

nombres = [&amp;quot;Pedro&amp;quot;, &amp;quot;Ana&amp;quot;, &amp;quot;María&amp;quot;, &amp;quot;Isabel&amp;quot;]

fichero = open(&amp;quot;lista_nombres&amp;quot;, &amp;quot;wb&amp;quot;)

pickle.dump(nombres, fichero)

fichero.close()

del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A la hora de crear el fichero externo en modo escritura, con el método &lt;code&gt;open()&lt;/code&gt;, hemos de indicarle que esta será binaria, para lo cual el correspondiente parámetro toma como valor de argumento &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;La instrucción &lt;code&gt;del&lt;/code&gt; borra el puntero de la memoria hacia la variable &lt;code&gt;fichero&lt;/code&gt;, dejando de estar disponible su acceso a partir de ese momento.&lt;/li&gt;
&lt;li&gt;Al ejecutar el anterior bloque de código, en la carpeta correspondiente del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;), aparecerá un archivo externo de tipo binario denominado &lt;code&gt;lista_nombres&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A continuamos, veamos cómo rescatar la información que reside en el interior del mencionado fichero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

fichero = open(&amp;quot;lista_nombres&amp;quot;, &amp;quot;rb&amp;quot;)

lista = pickle.load(fichero)

fichero.close()

print(lista)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#39;Pedro&#39;, &#39;Ana&#39;, &#39;María&#39;, &#39;Isabel&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para activar el modo de lectura de archivos binarios, el  parámetro correspondiente de la función &lt;code&gt;open()&lt;/code&gt; ha de tomar el valor de argumento &lt;code&gt;&amp;quot;rb&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/39/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>40. Serialización II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb40-serializacion-ii/</link>
      <pubDate>Thu, 16 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb40-serializacion-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/CkfDnMC79b4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos estudiando el tema de la serialización, analizando ahora cómo llevar a cabo el proceso cuando hay objetos implicados.&lt;/p&gt;

&lt;p&gt;Aprovechemos la clase &lt;code&gt;Vehiculo&lt;/code&gt; que generamos anteriormente y cuyo código fuente recordemos era:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, importemos la librería &lt;code&gt;pickle&lt;/code&gt; y creemos una lista con algunas instancias de la clase &lt;code&gt;Vehiculo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle

coche1 = Vehiculo(&amp;quot;Mazda&amp;quot;, &amp;quot;MX5&amp;quot;)
coche2 = Vehiculo(&amp;quot;Seat&amp;quot;, &amp;quot;León&amp;quot;)
coche3 = Vehiculo(&amp;quot;Renault&amp;quot;, &amp;quot;Megane&amp;quot;)

coches = [coche1, coche2, coche3]

fichero = open(&amp;quot;coches&amp;quot;, &amp;quot;wb&amp;quot;)

pickle.dump(coches, fichero)

fichero.close()

del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recordemos que estamos creando ficheros externos cuya codificación es binaria, es por ello que el valor del parámetro correspondiente de la función &lt;code&gt;open()&lt;/code&gt; es &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Al ejecutar el anterior bloque de código, aparecerá en la carpeta asociada del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;) el fichero &lt;code&gt;coches&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para rescatar la información de este archivo que acabamos de generar, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Vehiculo():
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo
        self.enmarcha = False
        self.acelera = False
        self.frena = False

    def arrancar(self):
        self.enmarcha = True

    def acelerar(self):
        self.acelera = True

    def frenar(self):
        self.frena = True

    def estado(self):
        print(&amp;quot;Marca:&amp;quot;, self.marca, &amp;quot;\nModelo:&amp;quot;, self.modelo, &amp;quot;\nEn marcha:&amp;quot;,
              self.enmarcha, &amp;quot;\nAcelerando:&amp;quot;, self.acelera, &amp;quot;\nFrenando:&amp;quot;,
              self.frena)


fichero = open(&amp;quot;coches&amp;quot;, &amp;quot;rb&amp;quot;)

coches = pickle.load(fichero)

print(coches)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&amp;lt;__main__.Vehiculo object at 0x00000259428D65C0&amp;gt;, &amp;lt;__main__.Vehiculo object at 0x00000259428F7F28&amp;gt;, &amp;lt;__main__.Vehiculo object at 0x00000259428F7F98&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Efectivamente, disponemos ahora de una lista con tres objetos. No obstante, recordemos que tenemos el método &lt;code&gt;estado&lt;/code&gt; para acceder a información de interés sobre dichos objetos. Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for coche in coches:
    print(coche.estado())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Marca: Mazda 
Modelo: MX5 
En marcha: False 
Acelerando: False 
Frenando: False
None
Marca: Seat 
Modelo: León 
En marcha: False 
Acelerando: False 
Frenando: False
None
Marca: Renault 
Modelo: Megane 
En marcha: False 
Acelerando: False 
Frenando: False
None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: como podemos comprobar arriba, si hacemos la recuperación de la serialización en un fichero distinto, la definición de la clase &lt;code&gt;Vehiculo&lt;/code&gt; es necesario que figure asimismo (en caso contrario arroja &lt;em&gt;Python&lt;/em&gt; un error). El problema radica en que el nuevo archivo no tiene información sobre la clase &lt;code&gt;Vehiculo&lt;/code&gt; ni, por supuesto, del método &lt;code&gt;estado()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/40/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>41. Guardado permanente</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb41-guardado-permanente/</link>
      <pubDate>Mon, 20 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb41-guardado-permanente/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/J3qvf1fTCsU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, continuaremos estudiando cómo guardar datos de forma permanente en ficheros externos, reforzando así los contenidos aprendidos hasta el momento.&lt;/p&gt;

&lt;p&gt;Empecemos importando la librería &lt;code&gt;pickle&lt;/code&gt; y creando una clase sencilla: &lt;code&gt;Persona&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Persona:
    def __init__(self, nombre, genero, edad):
        self.nombre = nombre
        self.genero = genero
        self.edad = edad
        print(&amp;quot;Se ha creado una persona nueva con el nombre de&amp;quot;, self.nombre)

    def __str__(self):
        return &amp;quot;{} {} {}&amp;quot;.format(self.nombre, self.genero, self.edad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: el método &lt;code&gt;__str__()&lt;/code&gt; convierte en cadena de texto la información de un objeto.&lt;/p&gt;

&lt;p&gt;Así, si ahora tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Sandra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El objetivo será crear algunos objetos de dicha clase, almacenarlos en una lista (empresa que realizaremos a través de otra clase, &lt;code&gt;ListaPersonas&lt;/code&gt;) y después volcar la información en un fichero externo, al cual podamos acceder en cualquier instante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle


class Persona:
    def __init__(self, nombre, genero, edad):
        self.nombre = nombre
        self.genero = genero
        self.edad = edad
        print(&amp;quot;Se ha creado una persona nueva con el nombre de&amp;quot;, self.nombre)

    def __str__(self):
        return &amp;quot;{} {} {}&amp;quot;.format(self.nombre, self.genero, self.edad)


class ListaPersonas:
    personas = []

    def agregar_personas(self, persona):
        self.personas.append(persona)

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())


lista_personas = ListaPersonas()

sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
lista_personas.agregar_personas(sandra)

antonio = Persona(&amp;quot;Antonio&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;39&amp;quot;)
lista_personas.agregar_personas(antonio)

ana = Persona(&amp;quot;Ana&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;20&amp;quot;)
lista_personas.agregar_personas(ana)

lista_personas.mostrar_personas()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Sandra
Se ha creado una persona nueva con el nombre de Antonio
Se ha creado una persona nueva con el nombre de Ana
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Almacenemos ahora la lista de personas que hemos generado en un fichero externo. Para ello, incluiremos los pasos necesarios del mencionado proceso en el constructor de la clase &lt;code&gt;ListaPersonas&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())


lista_personas = ListaPersonas()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El fichero está vacío.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en la función &lt;code&gt;open()&lt;/code&gt;, el valor del argumento &lt;code&gt;&amp;quot;ab+&amp;quot;&lt;/code&gt; nos permite agregar información a un fichero de codificación binaria.&lt;/p&gt;

&lt;p&gt;A continuación, modifiquemos el método &lt;code&gt;agregar_personas()&lt;/code&gt; para que una vez añadida a la lista la nueva información, la almacene en el fichero externo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)
        self.guardar_personas()

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())

    def guardar_personas(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;wb&amp;quot;)
        pickle.dump(self.personas, fichero)
        fichero.close()
        del fichero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, si ejecutamos ahora el siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_personas = ListaPersonas()

sandra = Persona(&amp;quot;Sandra&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;29&amp;quot;)
lista_personas.agregar_personas(sandra)

antonio = Persona(&amp;quot;Antonio&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;39&amp;quot;)
lista_personas.agregar_personas(antonio)

ana = Persona(&amp;quot;Ana&amp;quot;, &amp;quot;Femenino&amp;quot;, &amp;quot;20&amp;quot;)
lista_personas.agregar_personas(ana)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El fichero está vacío.
Se ha creado una persona nueva con el nombre de Sandra
Se ha creado una persona nueva con el nombre de Antonio
Se ha creado una persona nueva con el nombre de Ana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recuperemos la información guardada en el fichero externo, utilizando para ello un método que añadiremos a la clase &lt;code&gt;ListaPersonas&lt;/code&gt;, &lt;code&gt;mostrar_informacion&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ListaPersonas:
    personas = []

    def __init__(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;ab+&amp;quot;)
        fichero.seek(0)  # Desplazamos cursor al principio

        try:
            self.personas = pickle.load(fichero)  # Cargamos información
            print(&amp;quot;Se cargaron {} personas.&amp;quot;.format(len(self.personas)))
        except EOFError:
            print(&amp;quot;El fichero está vacío.&amp;quot;)  # Para la primera vez que abrimos
        finally:
            fichero.close()
            del fichero

    def agregar_personas(self, persona):
        self.personas.append(persona)
        self.guardar_personas()

    def mostrar_personas(self):
        for persona in self.personas:
            print(persona.__str__())

    def guardar_personas(self):
        fichero = open(&amp;quot;lista_de_personas&amp;quot;, &amp;quot;wb&amp;quot;)
        pickle.dump(self.personas, fichero)
        fichero.close()
        del fichero

    def mostrar_informacion(self):
        print(&amp;quot;La información del fichero externo es la siguiente:&amp;quot;)
        for persona in self.personas:
            print(persona.__str__())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lista_personas.mostrar_informacion()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;La información del fichero externo es la siguiente:
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agreguemos una nueva persona. Para ello, tecleamos por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;juan = Persona(&amp;quot;Juan&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;47&amp;quot;)
lista_personas.agregar_personas(juan)

lista_personas.mostrar_informacion()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Se ha creado una persona nueva con el nombre de Juan
La información del fichero externo es la siguiente:
Sandra Femenino 29
Antonio Masculino 39
Ana Femenino 20
Juan Masculino 47
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/41/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>42. Interfaces gráficas I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb42-interfaces-graficas-i/</link>
      <pubDate>Mon, 20 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb42-interfaces-graficas-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/hTUJC8HsC2I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, comenzamos el estudio de las &lt;strong&gt;interfaces gráficas&lt;/strong&gt; en &lt;em&gt;Python&lt;/em&gt;, analizando para ello la librería &lt;code&gt;Tkinter&lt;/code&gt;. Las interfaces gráficas, también denominadas GUI, son intermediarios entre el programa y el usuario. Están formadas por un conjunto de gráficos como ventanas, botones, menús, casillas de verificación, etc.&lt;/p&gt;

&lt;p&gt;Además de la mencionada, existen otras librerías alternativas para trabajar con interfaces gráficas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WxPython&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyQT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyGTK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Tkinter&lt;/code&gt; es un &amp;ldquo;puente&amp;rdquo; entre &lt;em&gt;Python&lt;/em&gt; y la librería &lt;code&gt;TCL / TK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La estructura de una interfaz gráfica en &lt;em&gt;Python&lt;/em&gt; es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Raíz&lt;/em&gt;: la ventana de la aplicación propiamente dicha.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frame&lt;/em&gt;: estructura que agrupa diversos elementos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Widgets&lt;/em&gt;: elementos de la aplicación. En ocasiones, al &lt;em&gt;frame&lt;/em&gt; también se le considera un &lt;em&gt;widget&lt;/em&gt; más.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A continuación, veamos cómo construir la raíz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior bloque de código aparece una ventana en blanco en nuestro escritorio, con algunos botones que permiten interactuar con ella a la manera que estamos habituados.&lt;/p&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primera ventana.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Para que una ventana pueda mantenerse en ejecución, debe estar en una especie de &amp;ldquo;bucle infinito&amp;rdquo; (a la espera o escucha de eventos), estado que conseguimos a través de la función &lt;code&gt;mainloop()&lt;/code&gt;, que, por el momento, habrá de estar siempre al final de nuestros programas.&lt;/p&gt;

&lt;p&gt;La documentación para la librería &lt;code&gt;Tkinter&lt;/code&gt; la podemos encontrar siguiendo &lt;a href=&#34;https://docs.python.org/3/library/tk.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Modifiquemos algunas de las características que esta ventana posee por defecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=False, height=False)  # raiz.resizable(0, 0)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.geometry(&amp;quot;450x300&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)
raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title()&lt;/code&gt; nos permite cambiar el título de la ventana generada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resizable()&lt;/code&gt; acepta dos valores booleanos para indicar si permitimos que se modifique la anchura o la altura de la ventana. Según los argumentos escogidos, incluso queda deshabilitado el botón de maximizar ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iconbitmap()&lt;/code&gt; nos da la posibilidad de cambiar el icono de la ventana generada, que, por defecto, es una especie de pluma. Para ello, hemos de almacenar en el directorio de la aplicación (o tener bien localizada su ruta) un archivo de extensión &lt;code&gt;.ico&lt;/code&gt; (buscar en &lt;em&gt;Google&lt;/em&gt; &amp;ldquo;conversor .ico&amp;rdquo; para acceder a aplicaciones online que nos generen este tipo de ficheros).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry()&lt;/code&gt; configura el ancho y el alto de la ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config()&lt;/code&gt;, entre otras acciones, nos permite cambiar el color del fondo.&lt;/li&gt;
&lt;/ul&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb42-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Modificando propiedades de la ventana.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Hasta el momento, las ventanas requieren de la consola de &lt;em&gt;Python&lt;/em&gt; para su funcionamiento. Si queremos que este sea independiente de ella, hemos de modificar la extensión de la aplicación de &lt;code&gt;.py&lt;/code&gt; a &lt;code&gt;.pyw&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/42/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>43. Interfaces gráficas II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb43-interfaces-graficas-ii/</link>
      <pubDate>Tue, 21 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb43-interfaces-graficas-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/M80CzDC1Crc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Después de introducir, en la lección anterior, la &lt;em&gt;raíz&lt;/em&gt; de una interfaz gráfica, en esta abordaremos la construcción y uso de &lt;em&gt;frames&lt;/em&gt;. Comencemos recuperando el código fuente de la &amp;ldquo;aplicación&amp;rdquo; que generamos con anterioridad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=False, height=False)  # raiz.resizable(0, 0)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.geometry(&amp;quot;450x300&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)
raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, crearemos un frame y lo empaquetaremos (ubicaremos) dentro de la raíz disponible a través del método &lt;code&gt;pack()&lt;/code&gt;. Además, prescindiremos de la instrucción &lt;code&gt;raiz.geometry()&lt;/code&gt;, para así estar en condiciones de configurar el tamaño del &lt;em&gt;frame&lt;/em&gt; (la raíz se adaptará automáticamente al tamaño de sus elementos internos):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack()
frame.config(bg=&amp;quot;tomato&amp;quot;, width=&amp;quot;450&amp;quot;, height=&amp;quot;300&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A primera vista, al ejecutar el aterior bloque de código, da la sensación de que hemos perdido el color de fondo declarado para la aplicación (&lt;code&gt;lightblue&lt;/code&gt;). No obstante, como ahora permitimos manipular el tamaño de la ventana (mediante la instrucción &lt;code&gt;raiz.resizable(width=True, height=True)&lt;/code&gt;), al agrandarla comprobamos que todo funciona correctamente.&lt;/p&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Los dos colores de fondo siguen disponibles.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: en &lt;a href=&#34;http://www.science.smith.edu/dftwiki/index.php/Color_Charts_for_TKinter&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; podemos encontrar un buen recurso para acceder a una paleta de colores declarados por nombres y disponibles para la librería &lt;code&gt;tkinter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por otro lado, observamos que el &lt;em&gt;frame&lt;/em&gt; tiene un tamaño fijo, por mucho que manipulemos el tamaño de la ventana, las dimensiones del &lt;em&gt;frame&lt;/em&gt; no se alteran, así como su posición, que permanece centrada en la parte superior de la ventana de la aplicación. Este comportamiento es el dado por defecto, que podemos configurar de manera diferente, si así lo deseamos, a través del método &lt;code&gt;pack()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack(side=&amp;quot;left&amp;quot;, anchor=&amp;quot;s&amp;quot;, fill=&amp;quot;x&amp;quot;, expand=&amp;quot;True&amp;quot;)
frame.config(bg=&amp;quot;tomato&amp;quot;, width=&amp;quot;450&amp;quot;, height=&amp;quot;300&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Modificando propiedades del &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Las opciones de configuración de los &lt;em&gt;frames&lt;/em&gt; son ciertamente numerosas. Por ejemplo, podemos añadirle un borde (parámetros &lt;code&gt;bd&lt;/code&gt; y &lt;code&gt;relief&lt;/code&gt;) o cambiar el icono del ratón cuando se adentra en el interior del &lt;em&gt;frame&lt;/em&gt; (parámetro &lt;code&gt;cursor&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

raiz = Tk()

raiz.title(&amp;quot;Ventana de pruebas&amp;quot;)
raiz.resizable(width=True, height=True)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)
raiz.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame()
frame.pack(side=&amp;quot;left&amp;quot;, anchor=&amp;quot;s&amp;quot;)
frame.config(bg=&amp;quot;tomato&amp;quot;,
             width=&amp;quot;450&amp;quot;,
             height=&amp;quot;300&amp;quot;,
             bd=35,
             relief=&amp;quot;groove&amp;quot;,
             cursor=&amp;quot;pirate&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb43-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Añadiendo un marco al &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Obviamente, todo aquello que hemos visto de cara a configurar un &lt;em&gt;frame&lt;/em&gt; es aplicable a la propia &lt;em&gt;raíz&lt;/em&gt; y dependerá de cómo deseemos diseñar nuestra aplicación.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/43/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>44. Interfaces gráficas III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb44-interfaces-graficas-iii/</link>
      <pubDate>Tue, 21 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb44-interfaces-graficas-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Nf4-gvf-tNg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, analizaremos cómo trabajar con el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;, perteneciente a la librería &lt;code&gt;tkinter&lt;/code&gt;, que nos permite mostrar texto o imágenes en nuestras interfaces gráficas. No es un elemento con el que podamos interactuar, es decir, no podremos borrarlo, arrastrarlo, etc.&lt;/p&gt;

&lt;p&gt;Su sintaxis es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;variable = Label(contenedor, opciones)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En &lt;a href=&#34;http://effbot.org/tkinterbook/label.htm&#34; target=&#34;_blank&#34;&gt;esta página&lt;/a&gt; podemos consultar qué opciones disponibles ofrece el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ver en acción este &lt;em&gt;widget&lt;/em&gt;, reutilicemos como base parte del código generado en lecciones anteriores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadimos ahora, antes de la instrucción &lt;code&gt;root.mainloop()&lt;/code&gt;, las líneas de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;label = Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;)
label.pack()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Quedando el resultado de la ejecución como una ventana bastante reducida porque, recordemos, la raíz se adapta al tamaño de sus elementos integrados (aunque le hayamos indicado ciertas dimensiones previamente). Ello se debe al uso del método &lt;code&gt;pack()&lt;/code&gt;. Veamos el efecto que produce utilizar la función &lt;code&gt;place()&lt;/code&gt; en su lugar, pasándole las coordenadas donde deseamos situar el &lt;em&gt;widget&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

label = Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;)
label.place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Utilizando la función &lt;code&gt;place()&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: &lt;em&gt;Python&lt;/em&gt; utiliza un curioso sistema de coordenadas. La coordenada &lt;code&gt;x&lt;/code&gt; indica la distancia horizontal al comienzo del &lt;em&gt;widget&lt;/em&gt; tal como estamos acostumbrados en matemáticas. Sin embargo, la coordenada &lt;code&gt;y&lt;/code&gt; indica la distancia vertical al comienzo del &lt;em&gt;widget&lt;/em&gt; tomando como referencia la parte superior de la ventana y siendo los valores positivos desplazamientos hacia abajo.&lt;/p&gt;

&lt;p&gt;Si no vamos a utilizar en ningún momento la variable &lt;code&gt;label&lt;/code&gt;, podemos aligerar un tanto el código escribiendo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;).place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A partir de aquí, ya únicamente nos queda experimentar con las diferentes opciones asociadas al &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

Label(frame, text=&amp;quot;Mi primera etiqueta.&amp;quot;, fg=&amp;quot;tomato&amp;quot;,
      font=(&amp;quot;Arial&amp;quot;, 18)).place(x=100, y=200)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Probando opciones adicionales para &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Adicionalmente, el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt; nos permite incluir (de forma nativa en la librería &lt;code&gt;tkinter&lt;/code&gt;) imágenes de tipo &lt;em&gt;gif&lt;/em&gt; o &lt;em&gt;png&lt;/em&gt;. Por ejemplo, insertemos en nuestra aplicación &lt;a href=&#34;https://www.freepng.es/png-lwhgke/&#34; target=&#34;_blank&#34;&gt;esta imagen&lt;/a&gt;, que, en un alarde de originalidad, llamaremos &lt;code&gt;avengers.png&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Label, PhotoImage

root = Tk()

root.title(&amp;quot;Probando el widget Label&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=500, height=400)

frame.pack()

imagen = PhotoImage(file=&amp;quot;avengers.png&amp;quot;)

Label(frame, image=imagen).pack()  # .place() es otra posibilidad

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb44-img04.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Una imagen como &lt;code&gt;Label&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: para que la ventana se adaptase automáticamente al tamaño de la imagen descargada, he utilizado el método &lt;code&gt;pack()&lt;/code&gt; en lugar de la función &lt;code&gt;place()&lt;/code&gt;. No obstante, con ambas opciones se puede conseguir el mismo resultado si ajustamos de manera fina sus correspondientes opciones.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/44/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>45. Interfaces gráficas IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb45-interfaces-graficas-iv/</link>
      <pubDate>Wed, 22 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb45-interfaces-graficas-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/YRs8j0QGEn0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, tras haber estudiado en la anterior el &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Label&lt;/code&gt;, abordaremos el uso del &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Entry&lt;/code&gt;, cuyo funcionamento es realmente similar a nivel de sintaxis. Este último habilita, en nuestras ventanas, la posibilidad de introducir un cuadro de texto, desde el cual el usuario puede suministrar cierta información.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Entry

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

cuadro_texto = Entry(root)
cuadro_texto.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Entry&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;A partir de ahora, podemos reutilizar los conceptos y propiedades aprendidas hasta el momento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

cuadro_texto = Entry(frame)
cuadro_texto.place(x=100, y=100)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Insertando el &lt;em&gt;widget&lt;/em&gt; en un &lt;em&gt;frame&lt;/em&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Empecemos a combinar &lt;em&gt;widgets&lt;/em&gt; añadiendo al lado del cuadro de texto una etiqueta que rece &amp;ldquo;Nombre:&amp;ldquo;, como si quisiéramos elaborar un formulario de registro de datos personales. Utilizando la función &lt;code&gt;place()&lt;/code&gt; es posible, pero resulta muy complicado cuadrar adecuadamente todos los espacios de la ventana de la aplicación.&lt;/p&gt;

&lt;p&gt;Existen dos alternativas a la hora de abordar esta situación:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pack()&lt;/code&gt;, aunque ya sabemos que después se ajustará la ventana al tamaño de sus elementos internos, ignorando pues las dimensiones que establecimos en su declaración.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid()&lt;/code&gt;, construye una tabla dentro de la interfaz gráfica con tantas filas y columnas como nosotros queramos. Tras ello, podemos ubicar en la casilla que deseemos el elemento que nos interese.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estudiemos el uso de esta última función mencionada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Probando el método &lt;code&gt;grid()&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Por defecto, los elementos se alinean centrados dentro de su correspondiente casilla de la rejilla. Con el parámetro &lt;code&gt;sticky&lt;/code&gt; y los cuatro puntos cardinales (&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; y sus combinaciones por parejas) podemos modificar dicho comportamiento.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img04.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;El parámetro &lt;code&gt;sticky&lt;/code&gt; en acción.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Para evitar que los elementos aparezcan tan juntos, los parámetros &lt;code&gt;padx&lt;/code&gt; y &lt;code&gt;pady&lt;/code&gt; pueden resultarnos de utilidad, ya que nos permiten configurar la distancia del elemento al límite del contenedor donde se haya ubicado.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img05.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Separando elementos con &lt;code&gt;padx&lt;/code&gt; y &lt;code&gt;pady&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Ahora, ya únicamente nos resta experimentar con la configuración de los distintos &lt;em&gt;widgets&lt;/em&gt; estudiados, empleando para ello principalmente la función &lt;code&gt;config()&lt;/code&gt; asociada a cada &lt;em&gt;widget&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, veamos cómo añadir un cuadro de texto que nos permita introducir contraseñas. Buscamos que al suministrar la información, esta aparezca &amp;ldquo;oculta&amp;rdquo; tras asteriscos. El parámetro &lt;code&gt;show&lt;/code&gt; de la función &lt;code&gt;config()&lt;/code&gt; cumple dicho cometido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1)
pass_texto.config(show=&amp;quot;*&amp;quot;)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb45-img06.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Una contraseña más segura con &lt;code&gt;show&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/45/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>46. Interfaces gráficas V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb46-interfaces-graficas-v/</link>
      <pubDate>Thu, 23 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb46-interfaces-graficas-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nZF9SwhmPRo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, presentaremos dos &lt;em&gt;widgets&lt;/em&gt; nuevos: &lt;code&gt;Text&lt;/code&gt; y &lt;code&gt;Button&lt;/code&gt;. El primero de ellos nos permite introducir un texto de extensión considerable en un cuadro, mientras que el segundo simplemente se trata de la clase asociada a los botones que habitualmente pulsamos en cualquier aplicación.&lt;/p&gt;

&lt;p&gt;Retomemos el último ejemplo de la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Entry, Label

root = Tk()

root.title(&amp;quot;Probando el widget Entry&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1)
pass_texto.config(show=&amp;quot;*&amp;quot;)

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadamos, a continuación del campo declarado para la introducción de la contraseña, uno dedicado a la biografía de la persona que está rellenando el formulario. Ello nos permitirá hacer uso de la clase &lt;code&gt;Text&lt;/code&gt;, que habremos de importar al inicio del código. Así, si escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bio_label = Label(frame, text=&amp;quot;Biografía:&amp;quot;)
bio_label.grid(row=6, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

bio_texto = Text(frame, width=15, height=5)
bio_texto.grid(row=6, column=1, padx=2, pady=2)

scroll_vert = Scrollbar(frame, command=bio_texto.yview)
scroll_vert.grid(row=6, column=2, sticky=&amp;quot;nsew&amp;quot;)
bio_texto.config(yscrollcommand=scroll_vert.set)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Text&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conviene que declaremos unas longitudes adecuadas mediante los parámetros &lt;code&gt;width&lt;/code&gt; y &lt;code&gt;height&lt;/code&gt;, ya que las asignadas por defecto son ciertamente elevadas.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Text&lt;/code&gt; automáticamente permite la posibilidad de &lt;em&gt;scroll&lt;/em&gt;, aunque si deseamos que aparezca una barra de desplazamiento lateral, hemos de indicarlo. Para ello, se requiere la construcción de un objeto de la clase &lt;code&gt;Scrollbar&lt;/code&gt; (que hemos de importar de la librería &lt;code&gt;tkinter&lt;/code&gt;) y asociarlo al cuadro de texto generado. La correspondiente instrucción que se ocupa de tal tarea en el bloque de código anterior es:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scroll_vert = Scrollbar(frame, command=bio_texto.yview)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Acto seguido, mediante el método &lt;code&gt;grid()&lt;/code&gt;, y teniendo cuidado con el valor correspondiente para el parámetro &lt;code&gt;column&lt;/code&gt;, terminamos haciendo que aparezca en la ventana de la aplicación. Para que se adapte al tamaño del cuadro de texto asociado, una posible estrategia es incluir &lt;code&gt;sticky=&amp;quot;nsew&amp;quot;&lt;/code&gt; en la declaración del &lt;em&gt;scroll&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Por otro lado, si queremos que se posicione la barra de desplazamiento al nivel del texto que estamos introduciendo, incluiremos la instrucción &lt;code&gt;bio_texto.config(yscrollcommand=scroll_vert.set)&lt;/code&gt; tras la declaración de la variable &lt;code&gt;scroll_vert&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pasemos ahora a añadir un botón a nuestra interfaz gráfica, para lo cual haremos uso de la clase &lt;code&gt;Button&lt;/code&gt;. Posicionemos uno en la raíz (&lt;code&gt;root&lt;/code&gt;) de la ventana de la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;)
boton_envio.pack()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Button&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;A continuación, veamos cómo añadir cierta funcionalidad al botón generado. Para ello, incluimos en su declaración el parámetro &lt;code&gt;command=codigo_boton&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;, command=codigo_boton)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;codigo_boton&lt;/code&gt; será una función que contendrá el código con las acciones que deseemos se lleven a cabo cuando el usuario pulse sobre el botón.&lt;/p&gt;

&lt;p&gt;Por ejemplo, aunque no sea la característica habitual de este tipo de botones, hagamos que cuando el usuario pulse sobre el mencionado botón, se escriba nuestro nombre automáticamente en el cuadro de texto correspondiente. Así, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def codigo_boton():
    mi_nombre.set(&amp;quot;Alexis&amp;quot;)


root = Tk()

mi_nombre = StringVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La instrucción &lt;code&gt;mi_nombre = StringVar()&lt;/code&gt; únicamente le indica a &lt;em&gt;Python&lt;/em&gt; que la variable &lt;code&gt;mi_nombre&lt;/code&gt; es una cadena de caracteres. Como viene siendo habitual, habremos de importar la correspondiente clase al comienzo del código (o, directamente, utilizar el esquema &lt;code&gt;from ... import *&lt;/code&gt;). Ahora, modificamos la declaración del cuadro de texto asociado al nombre del usuario introduciendo el parámetro &lt;code&gt;textvariable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cuadro_nombre = Entry(frame, textvariable=mi_nombre)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: no podemos utilizar &lt;code&gt;StringVar()&lt;/code&gt; antes de definir la raíz (&lt;code&gt;root&lt;/code&gt;) de la aplicación.&lt;/p&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb46-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;¡El botón está vivo!¡Vivo!&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Si la función &lt;code&gt;set()&lt;/code&gt; nos permite declarar el valor de un cuadro de texto, para obtener la información que el usuario introduzca en uno, utilizaremos, en próximas lecciones, el método &lt;code&gt;get()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, comparto el código completo de esta última aplicación generada, para tener acceso así a una visión global de la misma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk, Frame, Button, Entry, Label, Scrollbar, StringVar, Text


def codigo_boton():
    mi_nombre.set(&amp;quot;Alexis&amp;quot;)


root = Tk()

mi_nombre = StringVar()

root.title(&amp;quot;Probando los widgets Text y Button&amp;quot;)
root.resizable(width=True, height=True)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)
root.config(bg=&amp;quot;lightblue&amp;quot;)

frame = Frame(root, width=450, height=300)
frame.pack()

nombre_label = Label(frame, text=&amp;quot;Nombre:&amp;quot;)
nombre_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

cuadro_nombre = Entry(frame, textvariable=mi_nombre)
cuadro_nombre.grid(row=0, column=1, padx=2, pady=2)

apellido_label = Label(frame, text=&amp;quot;Apellido:&amp;quot;)
apellido_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

apellido_texto = Entry(frame)
apellido_texto.grid(row=1, column=1, padx=2, pady=2)

direccion_label = Label(frame, text=&amp;quot;Dirección:&amp;quot;)
direccion_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

direccion_texto = Entry(frame)
direccion_texto.grid(row=2, column=1, padx=2, pady=2)

tfno_label = Label(frame, text=&amp;quot;Teléfono (fijo):&amp;quot;)
tfno_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

tfno_texto = Entry(frame)
tfno_texto.grid(row=3, column=1, padx=2, pady=2)

movil_label = Label(frame, text=&amp;quot;Teléfono (móvil):&amp;quot;)
movil_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

movil_texto = Entry(frame)
movil_texto.grid(row=4, column=1, padx=2, pady=2)

pass_label = Label(frame, text=&amp;quot;Constraseña:&amp;quot;)
pass_label.grid(row=5, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

pass_texto = Entry(frame)
pass_texto.grid(row=5, column=1, padx=2, pady=2)
pass_texto.config(show=&amp;quot;*&amp;quot;)

bio_label = Label(frame, text=&amp;quot;Biografía:&amp;quot;)
bio_label.grid(row=6, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

bio_texto = Text(frame, width=15, height=5)
bio_texto.grid(row=6, column=1, padx=2, pady=2)

scroll_vert = Scrollbar(frame, command=bio_texto.yview)
scroll_vert.grid(row=6, column=2, sticky=&amp;quot;nsew&amp;quot;)
bio_texto.config(yscrollcommand=scroll_vert.set)

boton_envio = Button(root, text=&amp;quot;Enviar&amp;quot;, command=codigo_boton)
boton_envio.pack()

root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/46/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>47. Interfaces gráficas VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb47-interfaces-graficas-vi/</link>
      <pubDate>Thu, 23 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb47-interfaces-graficas-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/kbTl3DaFJUk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;A partir de esta lección, utilizando los conocimientos adquiridos a lo largo de todo el curso, empezaremos un nuevo proyecto: la creación de una calculadora. Comencemos elaborando su interfaz gráfica:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Pantalla
pantalla = Entry(frame)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)

# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3)
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3)
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3)
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3)
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3)
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3)
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3)
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3)
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3)
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3)
boton0.grid(row=5, column=1)
boton_coma = Button(frame, text=&amp;quot;.&amp;quot;, width=3)
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3)
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3)
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: la pantalla ha de ocupar no una columna, sino cuatro, ya que hemos generado después filas de cuatro botones. Para ello, utilizamos el parámetro &lt;code&gt;columnspan&lt;/code&gt; en la función &lt;code&gt;grid()&lt;/code&gt; correspondiente a la pantalla y le asignamos el valor &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb47-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Interfaz gráfica de la calculadora.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/47/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>48. Interfaces gráficas VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb48-interfaces-graficas-vii/</link>
      <pubDate>Fri, 24 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb48-interfaces-graficas-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/oIzt6ESA7nU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Una vez elaborada la interfaz gráfica de la calculadora, en esta lección abordaremos cómo programar parte de la funcionalidad de la misma. Para empezar, nuestro objetivo será conseguir que al pulsar los diferentes botones numéricos aparezcan sus valores asociados en la pantalla.&lt;/p&gt;

&lt;p&gt;Empecemos creando una variable para almacenar una cadena de texto y asociémosla a la pantalla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numero_pantalla = StringVar()

pantalla = Entry(frame, textvariable=numero_pantalla)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, creemos una función que, por ejemplo, escriba el número &lt;code&gt;4&lt;/code&gt; en pantalla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pulsaciones teclado
def numero_pulsado():
    numero_pantalla.set(&amp;quot;4&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, asociémosla al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=numero_pulsado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, al pulsar en el botón del número cuatro, aparece un &lt;code&gt;4&lt;/code&gt; en la pantalla. Vemos que si pulsamos en varias ocasiones, no se añaden más cuatros, que sería el comportamiento deseable. Modifiquemos la función &lt;code&gt;numero_pulsado()&lt;/code&gt; para conseguir tal efecto. Para ello, obtendremos la información actual de la pantalla y le agregaremos el número &lt;code&gt;4&lt;/code&gt; después:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pulsaciones teclado
def numero_pulsado():
    numero_pantalla.set(numero_pantalla.get() + &amp;quot;4&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para generalizar, necesitaremos el uso de funciones &lt;em&gt;lambda&lt;/em&gt; o &lt;em&gt;anónimas&lt;/em&gt; en la declaración de los botones. De no utilizarlas, tal y como transcurre el flujo del programa, al llegar a la línea de la declaración de &lt;code&gt;boton4&lt;/code&gt;, se produciría directamente la llamada de la función &lt;code&gt;numero_pulsado(&amp;quot;4&amp;quot;)&lt;/code&gt;, mostrando (sin que el usuario pulse sobre nada) un &lt;code&gt;4&lt;/code&gt; en la pantalla al abrir la calculadura y, además, deshabilitando la funcionalidad del botón, puesto que al seguir pulsando sobre él no añade más cuatros.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_pulsado(num):
    numero_pantalla.set(numero_pantalla.get() + num)

boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para finalizar, incluyo el código completo de la aplicación elaborada hasta este instante, para obtener así una visión global de la calculadora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    numero_pantalla.set(numero_pantalla.get() + num)


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3)
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3)
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/48/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>49. Interfaces gráficas VIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb49-interfaces-graficas-viii/</link>
      <pubDate>Sat, 25 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb49-interfaces-graficas-viii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/LnO35TiFuQY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, nuestro objetivo será conseguir que la calculadora que estamos generando sea capaz de sumar valores numéricos enteros.&lt;/p&gt;

&lt;p&gt;Empecemos declarando una variable global, que será accesible desde todos las funciones del programa, denominada &lt;code&gt;operacion&lt;/code&gt; y que almacenará la operación aritmética que desea el usuario llevar a cabo. Además, la utilizaremos para conseguir que la pantalla vuelva a su estado inicial a través del uso de bloques condicionales.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;operación = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta variable cambiará de valor a medida que pulsemos los botones de operaciones aritméticas. Por ejemplo, para la suma, definimos la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función suma
def suma():
    global operacion
    operacion = &amp;quot;suma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, modificamos el código de &lt;code&gt;boton_suma&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_suma = Button(frame, text=&amp;quot;+&amp;quot;, width=3, command=lambda: suma())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, hemos de conseguir que, cuando se pulse dicho botón, la pantalla se borre y permita el almacenamiento de un nuevo número. Modifiquemos la función &lt;code&gt;numero_pulsado()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_pulsado(num):
    global operacion
    if operacion != &amp;quot;&amp;quot;:
        numero_pantalla.set(num)
        operacion = &amp;quot;&amp;quot;
    else:
        numero_pantalla.set(numero_pantalla.get() + num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si pulsamos sobre el botón de sumar, la condición &lt;code&gt;operacion != &amp;quot;&amp;quot;&lt;/code&gt; sería cierta, por lo que entraríamos en esa parte de la estructura condicional. En su interior, apreciamos que no concatenamos el número con nada más y volvemos a declarar el valor de la variable &lt;code&gt;operacion&lt;/code&gt; como una cadena vacía, para permitir así la correcta introducción de un nuevo número.&lt;/p&gt;

&lt;p&gt;Ahora necesitamos una variable global, que denominaremos &lt;code&gt;resultado&lt;/code&gt;, que vaya almacenando los valores introducidos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resultado = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La siguiente tarea consiste en actualizar la función &lt;code&gt;suma()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función suma
def suma(num):
    global operacion, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    numero_pantalla.set(resultado)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &lt;code&gt;num&lt;/code&gt; representa el número que aparece en la pantalla de la calculadora al pulsar el botón de sumar. Como estamos trabajando con cuadros de texto, &lt;em&gt;Python&lt;/em&gt; almacena los textos, lógicamente como su nombre indica, como cadenas de caracteres, de ahí la necesidad de utilizar la función &lt;code&gt;int()&lt;/code&gt;. Una vez realizada la operación aritmética, mostramos su resultado en la pantalla con &lt;code&gt;numero_pantalla.set(resultado)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El nuevo parámetro de la función &lt;code&gt;suma()&lt;/code&gt; nos obliga a modificar el código de &lt;code&gt;boton_suma&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, programemos el comportamiento del botón del símbolo igual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función el_resultado (para el botón igual)
def el_resultado():
    global resultado
    numero_pantalla.set(resultado + int(numero_pantalla.get()))
    resultado = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es decir, al resultado acumulado hemos de sumarle el número que figure en pantalla antes de pulsar el botón del símbolo igual. Tras ello, reseteamos la variable &lt;code&gt;resultado&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Procedamos ahora a modificar el código el mencionado botón:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como viene siendo habitual, comparto el código completo de la aplicación para que podamos tener una visión global de la calculadora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()
operacion = &amp;quot;&amp;quot;
resultado = 0

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    global operacion
    if operacion != &amp;quot;&amp;quot;:
        numero_pantalla.set(num)
        operacion = &amp;quot;&amp;quot;
    else:
        numero_pantalla.set(numero_pantalla.get() + num)


# Función suma
def suma(num):
    global operacion, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    numero_pantalla.set(resultado)


# Función el_resultado (para el botón igual)
def el_resultado():
    global resultado
    numero_pantalla.set(resultado + int(numero_pantalla.get()))
    resultado = 0


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame, text=&amp;quot;/&amp;quot;, width=3)
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame, text=&amp;quot;*&amp;quot;, width=3)
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame, text=&amp;quot;-&amp;quot;, width=3)
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/49/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>50. Interfaces gráficas IX</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb50-interfaces-graficas-ix/</link>
      <pubDate>Sat, 25 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb50-interfaces-graficas-ix/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/YfYUOUGMaXU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;Partamos, en esta lección, del siguiente código fuente, que incluye, además de la función para sumar, las correspondientes a las operaciones resta, multiplicación y división:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, Entry, Frame, StringVar, Tk

# Raíz
raiz = Tk()
raiz.title(&amp;quot;Calculadora&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Frame
frame = Frame(raiz)
frame.pack()

# Variables
numero_pantalla = StringVar()
operacion = &amp;quot;&amp;quot;
resultado = 0
reset_pantalla = False

# Pantalla
pantalla = Entry(frame, textvariable=numero_pantalla)
pantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)
pantalla.config(background=&amp;quot;black&amp;quot;, fg=&amp;quot;#03f943&amp;quot;, justify=&amp;quot;right&amp;quot;)


# Pulsaciones teclado
def numero_pulsado(num):
    global operacion, reset_pantalla
    if reset_pantalla:
        numero_pantalla.set(num)
        reset_pantalla = False
    else:
        numero_pantalla.set(numero_pantalla.get() + num)


# Función suma
def suma(num):
    global operacion, reset_pantalla, resultado
    operacion = &amp;quot;suma&amp;quot;
    resultado += int(num)
    reset_pantalla = True
    numero_pantalla.set(resultado)


# Función resta
num1 = 0
contador_resta = 0


def resta(num):
    global contador_resta, num1, operacion, reset_pantalla, resultado
    if contador_resta == 0:
        num1 = int(num)
        resultado = num1
    else:
        if contador_resta == 1:
            resultado = num1 - int(num)
        else:
            resultado = int(resultado) - int(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_resta = contador_resta + 1
    operacion = &amp;quot;resta&amp;quot;
    reset_pantalla = True


# Función multiplicación
contador_multi = 0


def multiplica(num):
    global contador_multi, num1, operacion, reset_pantalla, resultado
    if contador_multi == 0:
        num1 = int(num)
        resultado = num1
    else:
        if contador_multi == 1:
            resultado = num1 * int(num)
        else:
            resultado = int(resultado) * int(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_multi = contador_multi + 1
    operacion = &amp;quot;multiplicacion&amp;quot;
    reset_pantalla = True


# Función división
contador_divi = 0


def divide(num):
    global contador_divi, num1, operacion, reset_pantalla, resultado
    if contador_divi == 0:
        num1 = float(num)
        resultado = num1
    else:
        if contador_resta == 1:
            resultado = num1 / float(num)
        else:
            resultado = float(resultado) / float(num)
        numero_pantalla.set(resultado)
        resultado = numero_pantalla.get()
    contador_divi = contador_divi + 1
    operacion = &amp;quot;division&amp;quot;
    reset_pantalla = True


# Función el_resultado (para el botón igual)
def el_resultado():
    global contador_divi, contador_multi, contador_resta, operacion, resultado
    if operacion == &amp;quot;suma&amp;quot;:
        numero_pantalla.set(resultado + int(numero_pantalla.get()))
        resultado = 0
    elif operacion == &amp;quot;resta&amp;quot;:
        numero_pantalla.set(int(resultado) - int(numero_pantalla.get()))
        resultado = 0
        contador_resta = 0
    elif operacion == &amp;quot;multiplicacion&amp;quot;:
        numero_pantalla.set(int(resultado) * int(numero_pantalla.get()))
        resultado = 0
        contador_multi = 0
    elif operacion == &amp;quot;division&amp;quot;:
        numero_pantalla.set(int(resultado) / int(numero_pantalla.get()))
        resultado = 0
        contador_divi = 0


# Fila 1 de botones
boton7 = Button(frame, text=&amp;quot;7&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;7&amp;quot;))
boton7.grid(row=2, column=1)
boton8 = Button(frame, text=&amp;quot;8&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;8&amp;quot;))
boton8.grid(row=2, column=2)
boton9 = Button(frame, text=&amp;quot;9&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;9&amp;quot;))
boton9.grid(row=2, column=3)
boton_div = Button(frame,
                   text=&amp;quot;/&amp;quot;,
                   width=3,
                   command=lambda: divide(numero_pantalla.get()))
boton_div.grid(row=2, column=4)

# Fila 2 de botones
boton4 = Button(frame, text=&amp;quot;4&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;4&amp;quot;))
boton4.grid(row=3, column=1)
boton5 = Button(frame, text=&amp;quot;5&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;5&amp;quot;))
boton5.grid(row=3, column=2)
boton6 = Button(frame, text=&amp;quot;6&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;6&amp;quot;))
boton6.grid(row=3, column=3)
boton_mult = Button(frame,
                    text=&amp;quot;*&amp;quot;,
                    width=3,
                    command=lambda: multiplica(numero_pantalla.get()))
boton_mult.grid(row=3, column=4)

# Fila 3 de botones
boton1 = Button(frame, text=&amp;quot;1&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;1&amp;quot;))
boton1.grid(row=4, column=1)
boton2 = Button(frame, text=&amp;quot;2&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;2&amp;quot;))
boton2.grid(row=4, column=2)
boton3 = Button(frame, text=&amp;quot;3&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;3&amp;quot;))
boton3.grid(row=4, column=3)
boton_rest = Button(frame,
                    text=&amp;quot;-&amp;quot;,
                    width=3,
                    command=lambda: resta(numero_pantalla.get()))
boton_rest.grid(row=4, column=4)

# Fila 4 de botones
boton0 = Button(frame, text=&amp;quot;0&amp;quot;, width=3, command=lambda: numero_pulsado(&amp;quot;0&amp;quot;))
boton0.grid(row=5, column=1)
boton_coma = Button(frame,
                    text=&amp;quot;.&amp;quot;,
                    width=3,
                    command=lambda: numero_pulsado(&amp;quot;.&amp;quot;))
boton_coma.grid(row=5, column=2)
boton_igual = Button(frame, text=&amp;quot;=&amp;quot;, width=3, command=lambda: el_resultado())
boton_igual.grid(row=5, column=3)
boton_suma = Button(frame,
                    text=&amp;quot;+&amp;quot;,
                    width=3,
                    command=lambda: suma(numero_pantalla.get()))
boton_suma.grid(row=5, column=4)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, veremos cómo trabajar con botones de radio, es decir, con la clase &lt;code&gt;Radiobutton&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Radiobutton&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;A primera vista, observamos dos inconvenientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;aparecen ambas opciones seleccionadas al abrir la aplicación y&lt;/li&gt;
&lt;li&gt;por mucho que pulse sobre ellas, la selección no se modifica.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para abordar esta situación, comenzamos creando una variable global, &lt;code&gt;opcion&lt;/code&gt;, perteneciente a la clase &lt;code&gt;IntVar&lt;/code&gt; y se la asignamos a ambos botones a través del parámetro &lt;code&gt;variable&lt;/code&gt;; junto con un valor para cada uno de ellos, utilizando el parámetro &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()

Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Permitiendo la posibilidad de seleccionar una de las opciones.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: si asignamos &lt;code&gt;value=0&lt;/code&gt; a alguno de los botones, aparecerá seleccionado por defecto cuando abramos la aplicación. Esta característica puede resultar de cierta utilidad en algunos contextos.&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿cómo rescatamos el valor que ha seleccionado el usuario? Al igual que sucedía en el caso de la calculadora, recurriremos al uso de funciones en esta ocasión.&lt;/p&gt;

&lt;p&gt;Así, generemos una, denominada &lt;code&gt;imprimir&lt;/code&gt;, que imprima en la consola de &lt;em&gt;Python&lt;/em&gt; el valor del botón seleccionado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    print(opcion.get())


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiquemos el código para ver dichos valores en la propia interfaz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    if opcion.get() == 1:
        etiqueta.config(text=&amp;quot;Has elegido género femenino.&amp;quot;)
    else:
        etiqueta.config(text=&amp;quot;Has elegido género masculino.&amp;quot;)


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()

etiqueta = Label(raiz)
etiqueta.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Mostrando la opción seleccionada en la ventana de la aplicación.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Incorporar un botón adicional que contemple otros géneros es sencillo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import IntVar, Label, Radiobutton, Tk

raiz = Tk()
raiz.title(&amp;quot;Botones de radio&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

opcion = IntVar()


def imprimir():
    if opcion.get() == 1:
        etiqueta.config(text=&amp;quot;Has elegido género femenino.&amp;quot;)
    elif opcion.get() == 2:
        etiqueta.config(text=&amp;quot;Has elegido género masculino.&amp;quot;)
    else:
        etiqueta.config(text=&amp;quot;Has elegido otras opciones para género.&amp;quot;)


Label(raiz, text=&amp;quot;Género:&amp;quot;).pack()
Radiobutton(raiz, text=&amp;quot;Femenino&amp;quot;, variable=opcion, value=1,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Masculino&amp;quot;, variable=opcion, value=2,
            command=imprimir).pack()
Radiobutton(raiz, text=&amp;quot;Otras opciones&amp;quot;, variable=opcion, value=3,
            command=imprimir).pack()

etiqueta = Label(raiz)
etiqueta.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb50-img04.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Añadiendo una nueva opción a las disponibles.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/50/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>51. Interfaces gráficas X</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb51-interfaces-graficas-x/</link>
      <pubDate>Sun, 26 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb51-interfaces-graficas-x/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TzeU61X-dnI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, introduciremos el funcionamiento de la clase &lt;code&gt;Checkbutton&lt;/code&gt;, que se encarga de gestionar los clásicos &lt;em&gt;botones de selección&lt;/em&gt; (también denominados &lt;em&gt;casillas de verificación&lt;/em&gt;). Estos nos permiten la posibilidad de realizar una selección múltiple sobre distintas opciones ofrecidas.&lt;/p&gt;

&lt;p&gt;Acto seguido, veamos un sencillo ejemplo de aplicación de la mencionada clase, donde el usuario ha de escoger qué tipo de destinos prefiere para sus vacaciones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Checkbutton, Frame, IntVar, Label, PhotoImage, Tk

raiz = Tk()
raiz.title(&amp;quot;Casillas de verificación&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

playa = IntVar()
montana = IntVar()
turismo_rural = IntVar()


def opciones_viaje():
    opcion_escogida = &amp;quot;&amp;quot;
    if playa.get() == 1:
        opcion_escogida += &amp;quot; playa&amp;quot;
    if montana.get() == 1:
        opcion_escogida += &amp;quot; montaña&amp;quot;
    if turismo_rural.get() == 1:
        opcion_escogida += &amp;quot; turismo rural&amp;quot;
    texto_final.config(text=opcion_escogida)


foto = PhotoImage(file=&amp;quot;helicoptero.png&amp;quot;)
Label(raiz, image=foto).pack()

frame = Frame(raiz)
frame.pack()

Label(frame, text=&amp;quot;Escoge destinos:&amp;quot;, width=50).pack()

Checkbutton(frame,
            text=&amp;quot;Playa&amp;quot;,
            variable=playa,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
Checkbutton(frame,
            text=&amp;quot;Montaña&amp;quot;,
            variable=montana,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
Checkbutton(frame,
            text=&amp;quot;Turismo rural&amp;quot;,
            variable=turismo_rural,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()

texto_final = Label(frame)
texto_final.pack()

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para empezar, el siguiente bloque de código&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;foto = PhotoImage(file=&amp;quot;helicoptero.png&amp;quot;)
Label(raiz, image=foto).pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nos permite introducir, como cabecera de nuestra aplicación, la imagen de un helicóptero (disponible en &lt;a href=&#34;https://www.freepng.es/png-ct7rpy/download.html&#34; target=&#34;_blank&#34;&gt;este enlace&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A continuación, las líneas de código asociadas a la primera casilla de verificación son&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Checkbutton(frame,
            text=&amp;quot;Playa&amp;quot;,
            variable=playa,
            onvalue=1,
            offvalue=0,
            command=opciones_viaje).pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observamos que dicha casilla está ubicada en el &lt;em&gt;frame&lt;/em&gt; &lt;code&gt;frame&lt;/code&gt; y muestra como texto, en la ventana de la aplicación, la palabra &lt;code&gt;Playa&lt;/code&gt;. Para posibilitar la interacción con ella, almacenamos su valor en la variable &lt;code&gt;playa&lt;/code&gt;, siendo este &lt;code&gt;1&lt;/code&gt; cuando esté seleccionada y &lt;code&gt;0&lt;/code&gt; en otro caso. Finalmente, su comportamiento se gestiona a través de la función &lt;code&gt;opciones_viaje()&lt;/code&gt;, tal y como figura en el valor del parámetro &lt;code&gt;command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la variable &lt;code&gt;playa&lt;/code&gt;, así como al resto, las declaramos utilizando la clase &lt;code&gt;IntVar&lt;/code&gt;, puesto que nuestra intención es almacenar en ellas valores enteros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;playa = IntVar()
montana = IntVar()
turismo_rural = IntVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por otro lado, mostraremos las opciones seleccionadas por el usuario empleando una etiqueta para ello, de ahí que figure el siguiente bloque de código al final del programa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;texto_final = Label(frame)
texto_final.pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, la función que gestiona el comportamiento de las casillas de verificación simplemente se ocupa de establecer el texto de la variable &lt;code&gt;texto_final&lt;/code&gt; según una serie de bloques condicionales:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def opciones_viaje():
    opcion_escogida = &amp;quot;&amp;quot;
    if playa.get() == 1:
        opcion_escogida += &amp;quot; playa&amp;quot;
    if montana.get() == 1:
        opcion_escogida += &amp;quot; montaña&amp;quot;
    if turismo_rural.get() == 1:
        opcion_escogida += &amp;quot; turismo rural&amp;quot;
    texto_final.config(text=opcion_escogida)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb51-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Checkbutton&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/51/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>52. Interfaces gráficas XI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb52-interfaces-graficas-xi/</link>
      <pubDate>Mon, 27 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb52-interfaces-graficas-xi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Dv1ALaWwScI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos el estudio del &lt;em&gt;widget&lt;/em&gt; &lt;code&gt;Menu&lt;/code&gt;, que nos permitirá la posibilidad de crear barras de menús.&lt;/p&gt;

&lt;p&gt;Comencemos utilizando el siguiente esqueleto de aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, generamos una variable, &lt;code&gt;barra_menu&lt;/code&gt;, que será la encargada de almacenar el menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barra_menu = Menu(raiz)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y configuramos el valor del parámetro &lt;code&gt;menu&lt;/code&gt; de la &lt;em&gt;raíz&lt;/em&gt; para que figure en nuestra aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raiz.config(menu=barra_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, establecemos los elementos que conformarán nuestro menú. Por ejemplo, para crear uno denominado &lt;em&gt;Archivo&lt;/em&gt;, generamos la variable &lt;code&gt;archivo_menu&lt;/code&gt;, indicándole que pertenece a la barra de menús &lt;code&gt;barra_menu&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu = Menu(barra_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, si ejecutamos el código, todavía no aparece barra de menús alguna. Añadamos el texto correspondiente a cada elemento. Así,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, ya únicamente nos resta la tarea de añadir elementos de submenú. Para ello, tras la línea de declaración del elemento &lt;code&gt;archivo_menu&lt;/code&gt;, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aparece una barra separadora, que identificamos por los símbolos &lt;code&gt;- - - -&lt;/code&gt;, al pulsar sobre cualquier elemento de la barra de menús. Para suprimirla, modificamos como sigue la línea de declaración de la variable &lt;code&gt;archivo_menu&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu = Menu(barra_menu, tearoff=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, aunque la mencionada barra separada no nos interesaba, sí que podemos desear diferenciar, de alguna manera, los diversos elementos de un submenú, para que así queden agrupados por cierto criterio. Con tal objetivo, donde nos convenga, introducimos la instrucción&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_separator()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para acabar, comparto el código completo de la aplicación, para obtener así una visión global del funcionamiento de la clase &lt;code&gt;Menu&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb52-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primer contacto con la clase &lt;code&gt;Menu&lt;/code&gt;.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/52/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>53. Interfaces gráficas XII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb53-interfaces-graficas-xii/</link>
      <pubDate>Tue, 28 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb53-interfaces-graficas-xii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/xUGUglpaTJc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo construir ventanas emergentes, que son ventanas modales para informar, avisar o permitir realizar ciertas tareas al usuario.&lt;/p&gt;

&lt;p&gt;Para comenzar, recuperemos el código fuente generado en la lección anterior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, Tk

raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, nuestro objetivo será construir una ventana emergente que aparezca cuando el usuario pulse sobre la opción &lt;em&gt;Acerca de&amp;hellip;&lt;/em&gt;, ubicada en el menú &lt;em&gt;Ayuda&lt;/em&gt;. Para ello, empecemos creando una función que será la responsable de generar la mencionada ventana emergente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hemos de importar el módulo &lt;code&gt;messagebox&lt;/code&gt; al principio de nuestro código.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;title&lt;/code&gt; gestiona el texto que aparecerá en la barra que figura en la parte superior de la ventana emergente.&lt;/li&gt;
&lt;li&gt;El parámetro &lt;code&gt;text&lt;/code&gt; declara el texto que se ubicará en el cuerpo de la ventana emergente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acto seguido, modificamos la declaración del submenú &lt;em&gt;Acerca de&amp;hellip;&lt;/em&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img01.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Primera ventana emergente.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Estas ventanas emergentes admiten enormes posibilidades de configuración y podemos adaptarlas según nuestra intención sea informar al usuario de algún detalle concreto (como el ejemplo que se muestra en la imagen que figura arriba), avisarle de algún error, etc. Los símbolos y la disposición de los diferentes botones asociados variarían en función de nuestro objetivo.&lt;/p&gt;

&lt;p&gt;Por ejemplo, generemos una ventana emergente que nos avise del estado de la licencia de nuestra aplicación. Para ello, creamos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y modificamos la correspondiente opción del menú &lt;em&gt;Ayuda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img02.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente de aviso.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Acto seguido, veamos un nuevo tipo de ventana emergente, que asociaremos al submenú &lt;em&gt;Salir&lt;/em&gt; y que nos pedirá confirmación antes de proceder a cerrar la aplicación. Con tal objetivo en mente, empecemos construyendo la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def salir_aplicacion():
    messagebox.askquestion(title=&amp;quot;Salir&amp;quot;,
                           message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;para luego modificar la opción del menú &lt;em&gt;Archivo&lt;/em&gt; asociada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img03.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente con pregunta.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Ahora, si pulsamos sobre el botón &lt;em&gt;No&lt;/em&gt;, volvemos a la aplicación, como cabría esperar. No obstante, al pulsar sobre el botón &lt;em&gt;Sí&lt;/em&gt; debería salir de la aplicación y no sucede tal acción, puesto que hemos de programar todavía dicho comportamiento.&lt;/p&gt;

&lt;p&gt;La función &lt;code&gt;askquestion()&lt;/code&gt; devuelve una cadena de texto en función del botón pulsado, &lt;code&gt;&amp;quot;yes&amp;quot;&lt;/code&gt; o &lt;code&gt;&amp;quot;no&amp;quot;&lt;/code&gt;, por lo que basta modificar la función &lt;code&gt;salir_aplicacion()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;destroy()&lt;/code&gt; posee un nombre lo suficientemente explicativo para que intuyamos cómo afecta a la &lt;em&gt;raíz&lt;/em&gt; de la aplicación.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: con la función &lt;code&gt;askokcancel()&lt;/code&gt; tenemos una variante de la anterior ventana emergente, cuyos botones son del tipo &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, veamos una ventana emergente de tipo &amp;ldquo;reintentar&amp;rdquo;, asociada a la opción &lt;em&gt;Cerrar&lt;/em&gt; del menú &lt;em&gt;Archivo&lt;/em&gt;. Para ello, construimos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y modificamos el correspondiente elemento del menú &lt;em&gt;Archivo&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
&lt;/code&gt;&lt;/pre&gt;




&lt;figure&gt;

&lt;img src=&#34;https://imalexissaez.github.io/courses/python-basic/img/pb53-img04.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figura &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Ventana emergente para reintentar una acción.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Finalmente, como viene siendo habitual en este subapartado del curso dedicado a las interfaces gráficas, comparto el código completo de la aplicación generada para así ofrecer una visión global de la misma.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/53/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>54. Interfaces gráficas XIII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb54-interfaces-graficas-xiii/</link>
      <pubDate>Tue, 28 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb54-interfaces-graficas-xiii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TmQZBzwIMGk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, construiremos la típica ventana emergente que nos permite abrir un archivo en una aplicación. Para empezar, recuperemos el código fuente generado en las últimas lecciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, importamos el módulo &lt;code&gt;filedialog&lt;/code&gt;, de la librería &lt;code&gt;tkinter&lt;/code&gt;, y construimos la siguiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;)
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la variable &lt;code&gt;fichero&lt;/code&gt;, almacenamos la ruta al archivo que seleccionemos a través de la ventana emergente, como bien podremos comprobar en la consola de &lt;em&gt;Python&lt;/em&gt; gracias a la función &lt;code&gt;print()&lt;/code&gt; que hemos incorporado en el interior de &lt;code&gt;abrir_archivo()&lt;/code&gt;. Después, acudimos al elemento del menú &lt;em&gt;Archivo&lt;/em&gt; correspondiente y modificamos la línea como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;, command=abrir_archivo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A la vista del resultado, es posible que nos interese modificar la ubicación de la ruta desde la que un usuario ha de comenzar la búsqueda de un archivo. Para ello, modificamos la función &lt;code&gt;abrir_archivo()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;,
                                         initialdir=&amp;quot;/&amp;quot;)
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y, de esta manera, ahora la ventana emergente nos muestra los directorios ubicados en la raíz de nuestro disco duro.&lt;/p&gt;

&lt;p&gt;Además, podemos restringir el tipo de archivo que deseamos un usuario examine (por ejemplo, restringir la búsqueda a imágenes o documentos) mediante el parámetro &lt;code&gt;filetypes&lt;/code&gt;. Así, si modificamos la función &lt;code&gt;abrir_archivo()&lt;/code&gt; como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(title=&amp;quot;Abrir archivo&amp;quot;,
                                         initialdir=&amp;quot;/&amp;quot;,
                                         filetypes=((&amp;quot;Ficheros de Excel&amp;quot;,
                                                     &amp;quot;*.xlsx&amp;quot;),
                                                    (&amp;quot;Ficheros de texto&amp;quot;,
                                                     &amp;quot;*.txt&amp;quot;)))
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ahora la ventana emergente nos restringe el tipo de fichero que podemos seleccionar y, además, nos permite filtrar por dos opciones diferentes (de Excel o de texto), según sus correspondientes extensiones.&lt;/p&gt;

&lt;p&gt;Para comodidad del usuario, conviene siempre incluir una opción para abrir cualquier tipo de archivo, independientemente de su extensión:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abrir_archivo():
    fichero = filedialog.askopenfilename(
        title=&amp;quot;Abrir archivo&amp;quot;,
        initialdir=&amp;quot;/&amp;quot;,
        filetypes=((&amp;quot;Ficheros de Excel&amp;quot;, &amp;quot;*.xlsx&amp;quot;),
                   (&amp;quot;Ficheros de texto&amp;quot;, &amp;quot;*.txt&amp;quot;),
                   (&amp;quot;Todos los archivos&amp;quot;, &amp;quot;*.*&amp;quot;)))
    print(fichero)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como ya viene siendo habitual en esta serie de lecciones dedicadas a las interfaces gráficas, comparto el código fuente completo de la aplicación generada, para tener así una visión global de la misma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import filedialog, Menu, messagebox, Tk


def info_adicional():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)


def aviso_licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


def salir_aplicacion():
    respuesta = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;, message=&amp;quot;¿Desear salir de la aplicación?&amp;quot;)
    if respuesta == &amp;quot;yes&amp;quot;:
        raiz.destroy()


def cerrar_documento():
    messagebox.askretrycancel(
        title=&amp;quot;Reintentar&amp;quot;,
        message=&amp;quot;No es posible cerrar. Documento bloqueado.&amp;quot;)


def abrir_archivo():
    fichero = filedialog.askopenfilename(
        title=&amp;quot;Abrir archivo&amp;quot;,
        initialdir=&amp;quot;/&amp;quot;,
        filetypes=((&amp;quot;Ficheros de Excel&amp;quot;, &amp;quot;*.xlsx&amp;quot;),
                   (&amp;quot;Ficheros de texto&amp;quot;, &amp;quot;*.txt&amp;quot;),
                   (&amp;quot;Todos los archivos&amp;quot;, &amp;quot;*.*&amp;quot;)))
    print(fichero)


raiz = Tk()
raiz.title(&amp;quot;Menús&amp;quot;)
raiz.iconbitmap(&amp;quot;icon.ico&amp;quot;)

barra_menu = Menu(raiz)

raiz.config(menu=barra_menu, width=300, height=300)

archivo_menu = Menu(barra_menu, tearoff=0)
archivo_menu.add_command(label=&amp;quot;Nuevo&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Abrir&amp;quot;, command=abrir_archivo)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Guardar&amp;quot;)
archivo_menu.add_command(label=&amp;quot;Guardar como...&amp;quot;)
archivo_menu.add_separator()
archivo_menu.add_command(label=&amp;quot;Cerrar&amp;quot;, command=cerrar_documento)
archivo_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=salir_aplicacion)

edicion_menu = Menu(barra_menu, tearoff=0)
edicion_menu.add_command(label=&amp;quot;Copiar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Cortar&amp;quot;)
edicion_menu.add_command(label=&amp;quot;Pegar&amp;quot;)

herramientas_menu = Menu(barra_menu, tearoff=0)

ayuda_menu = Menu(barra_menu, tearoff=0)
ayuda_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=aviso_licencia)
ayuda_menu.add_separator()
ayuda_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=info_adicional)

barra_menu.add_cascade(label=&amp;quot;Archivo&amp;quot;, menu=archivo_menu)
barra_menu.add_cascade(label=&amp;quot;Edición&amp;quot;, menu=edicion_menu)
barra_menu.add_cascade(label=&amp;quot;Herramientas&amp;quot;, menu=herramientas_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=ayuda_menu)

raiz.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/54/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>55. Bases de datos I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb55-bases-de-datos-i/</link>
      <pubDate>Wed, 29 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb55-bases-de-datos-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ZJuVQ9jUg-A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, cambiamos de tercio y abordamos el tratamiento de las bases de datos (BBDD) en &lt;em&gt;Python&lt;/em&gt;. Estudiaremos cómo crearlas, conectar con ellas e insertar registros en su interior.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; es capaz de gestionar la información que se encuentra almacenada en diferentes gestores de bases de datos, como, por ejemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SQL Server&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Oracle&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SQLite&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PostgreSQL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En este curso trabajaremos, principalmente, con &lt;em&gt;MySQL&lt;/em&gt; y &lt;em&gt;SQLite&lt;/em&gt; debido a su popularidad. No obstante, ello requiere que tengamos unos mínimos conocimientos del lenguaje utilizado para realizar consultas en bases de datos: &lt;strong&gt;SQL&lt;/strong&gt; (&lt;em&gt;Structured Query Language&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Por lo que respecta a &lt;em&gt;SQLite&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es un sistema de gestión de BBDD relacional.&lt;/li&gt;
&lt;li&gt;Está escrito en &lt;em&gt;C&lt;/em&gt;, siendo de código abierto.&lt;/li&gt;
&lt;li&gt;La BBDD forma parte integral del programa y se guarda como un único fichero en &lt;em&gt;host&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así, entre sus ventajas, encontramos que ocupa muy poco espacio en disco y memoria, es muy eficiente y rápido, es multiplataforma, no requiere configuración o administración y es de dominio público, esto es, sin costo alguno añadido. Sin embargo, también posee asociadas una serie de desventajas, como que no admite cláusulas anidadas (de tipo &lt;code&gt;where&lt;/code&gt;), no existen usuarios (no permite acceso simultáneo por parte de varios usuarios) y carece de clave foránea cuando se crea en modo consola.&lt;/p&gt;

&lt;p&gt;A continuación, los pasos a seguir para conectar con una BBDD son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Abrir (o crear) una conexión.&lt;/li&gt;
&lt;li&gt;Crear un puntero (o cursor).&lt;/li&gt;
&lt;li&gt;Ejecutar una consulta (&lt;em&gt;query&lt;/em&gt;) &lt;em&gt;SQL&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Manejar los resultados de la consulta.

&lt;ul&gt;
&lt;li&gt;Insertar, leer, actualizar, borrar (&lt;em&gt;Create&lt;/em&gt;, &lt;em&gt;Read&lt;/em&gt;, &lt;em&gt;Update&lt;/em&gt;, &lt;em&gt;Delete&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cerrar puntero.&lt;/li&gt;
&lt;li&gt;Cerrar conexión.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt;, comenzamos importando la librería &lt;code&gt;sqlite3&lt;/code&gt; para luego crear la conexión con la BBDD. La primera vez que realizamos este proceso, al no haber disponible ninguna, procederemos a su creación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el anterior bloque de código, aparece en el correspondiente directorio una BBDD de datos vacía, de nombre &lt;code&gt;base-de-datos&lt;/code&gt;. Veamos, acto seguido, cómo crear nuestra primera tabla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;CREATE TABLE PRODUCTOS (NOMBRE_ARTICULO VARCHAR(50), PRECIO INTEGER, SECCION VARCHAR(20))&amp;quot;)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tras crear el puntero o cursor, &lt;code&gt;mi_cursor&lt;/code&gt;, lanzamos, a través de la función &lt;code&gt;execute()&lt;/code&gt;, el comando &lt;em&gt;SQL&lt;/em&gt; correspondiente a la creación de una tabla que poseerá tres columnas. Si ejecutamos el anterior bloque de código, observaremos que el tamaño del fichero &lt;code&gt;base-de-datos&lt;/code&gt; se incrementa y deja de estar vacío.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: podemos investigar qué contiene el archivo &lt;code&gt;base-de-datos&lt;/code&gt;, de manera visual, mediante la herramienta &lt;a href=&#34;https://sqlitebrowser.org/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, analicemos cómo insertar información en la tabla que acabamos de crear. Para ello, comentamos la anterior línea de código, que precisamente generaba la tabla (porque ya existe y entonces &lt;em&gt;Python&lt;/em&gt; arrojaría un error llegado a ese momento), y ejecutamos, a través del cursor, la instrucción de &lt;em&gt;SQL&lt;/em&gt; apropiada. Tras ello, verificamos que deseamos realizar el cambio en la tabla, utiliando el método &lt;code&gt;commit()&lt;/code&gt; asociado a la conexión:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: cuando trabajamos con cadenas de caracteres que poseen comillas anidadas, hemos de alternar los simbolos &lt;code&gt;&#39;&lt;/code&gt; y &lt;code&gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/55/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>56. Bases de datos II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb56-bases-de-datos-ii/</link>
      <pubDate>Wed, 29 May 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb56-bases-de-datos-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/eM0MkDc34qo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, aprenderemos cómo insertar varios registros simultáneamente en nuestra base de datos (BBDD), así como después estudiaremos cómo recuperar información de la BBDD.&lt;/p&gt;

&lt;p&gt;En primer lugar, importemos la librería &lt;code&gt;sqlite3&lt;/code&gt; y construyamos, tanto la conexión a la BBDD, como un cursor. Con tal objetivo en mente, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, mediante una lista de tuplas, establecemos los productos que nos interese insertar en la BBDD:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;productos = [(&amp;quot;Camiseta&amp;quot;, 10, &amp;quot;Deportes&amp;quot;), (&amp;quot;Jarrón&amp;quot;, 90, &amp;quot;Cerámica&amp;quot;),
             (&amp;quot;Camión&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y con el método &lt;code&gt;executemany()&lt;/code&gt; ejecutamos la instrucción &lt;em&gt;SQL&lt;/em&gt; adecuada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?)&amp;quot;, productos)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota técnica&lt;/em&gt;: en las instrucciones de &lt;em&gt;SQL&lt;/em&gt; parametrizadas, hemos de insertar tantos interrogantes, &lt;code&gt;?&lt;/code&gt;, como campos posee cada registro.&lt;/p&gt;

&lt;p&gt;Finalmente, confirmamos los cambios y cerramos la conexión abierta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, veamos cómo accedemos a la información registrada en la BBDD. Para ello, simplemente hemos de ejecutar, desde el cursor, una instrucción de &lt;em&gt;SQL&lt;/em&gt; de tipo &lt;code&gt;SELECT&lt;/code&gt;, para luego almacenar en una variable la información utilizando el método &lt;code&gt;fetchall()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS&amp;quot;)

productos = mi_cursor.fetchall()

print(productos)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;), (&#39;Camiseta&#39;, 10, &#39;Deportes&#39;), (&#39;Jarrón&#39;, 90, &#39;Cerámica&#39;), (&#39;Camión&#39;, 20, &#39;Juguetería&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, aplicando aquello que conocemos sobre listas, podemos mostrar la información de manera más cómoda para el usuario:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;base-de-datos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS&amp;quot;)

productos = mi_cursor.fetchall()

for producto in productos:
    print(producto)

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(&#39;BALÓN&#39;, 15, &#39;DEPORTES&#39;)
(&#39;Camiseta&#39;, 10, &#39;Deportes&#39;)
(&#39;Jarrón&#39;, 90, &#39;Cerámica&#39;)
(&#39;Camión&#39;, 20, &#39;Juguetería&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/56/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>57. Bases de datos III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb57-bases-de-datos-iii/</link>
      <pubDate>Thu, 30 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb57-bases-de-datos-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/HVd6mPiD3pc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos cómo gestionar las claves principales de nuestras bases de datos (BBDD). Los registros de una BBDD relacional han de estar identificados de manera única mediante un &lt;strong&gt;campo clave&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hasta el momento, hemos creado una tabla en nuestra BBDD e insertado algunos registros, pero carece de dicho campo clave. Analicemos cómo añadir esta característica a las tablas de una BBDD. Para ello, partamos del siguiente bloque de código:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En primer lugar, generemos una tabla, denominada &lt;code&gt;PRODUCTOS&lt;/code&gt;, cuyos registros se van a caracterizar por poseer cuatro campos, uno de ellos clave. Así, tras la declaración del cursor, tecleamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    CODIGO_ARTICULO VARCHAR(4) PRIMARY KEY,
    NOMBRE_ARTICULO VARCHAR(50),
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como apreciamos, la única novedad, con respecto a lecciones anteriores, es la aparición de la instrucción &lt;code&gt;PRIMARY KEY&lt;/code&gt;, que convierte en clave el respectivo campo declarado, &lt;code&gt;CODIGO_ARTICULO&lt;/code&gt; en este caso concreto. Por otro lado, el número que figura en el tipo de campo &lt;code&gt;VARCHAR&lt;/code&gt; indica su longitud máxima.&lt;/p&gt;

&lt;p&gt;Acto seguido, insertamos algunos registros en la tabla &lt;code&gt;PRODUCTOS&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;productos = [(&amp;quot;AR01&amp;quot;, &amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;AR02&amp;quot;, &amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;AR03&amp;quot;, &amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;AR04&amp;quot;, &amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?, ?)&amp;quot;, productos)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el programa, observamos que en el directorio donde hemos almacenado el código aparece un archivo denominado &lt;code&gt;gestion-productos&lt;/code&gt;, que contiene la BBDD recién generada.&lt;/p&gt;

&lt;p&gt;A continuación, insertemos un nuevo registro en la BBDD:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR05&#39;, &#39;Tren&#39;, 15, &#39;Juguetería&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora intentamos añadir un nuevo artículo a la BBDD cuyo código coincida con uno de los asignados a los cuatro productos existentes, &lt;em&gt;Python&lt;/em&gt; nos arrojará un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR03&#39;, &#39;Portátil&#39;, 750, &#39;Informática&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;bbdd_3.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (&#39;AR03&#39;, &#39;Portátil&#39;, 750, &#39;Informática&#39;)&amp;quot;)
sqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.CODIGO_ARTICULO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la práctica, por comodidad, la construcción e inserción del campo clave se suele automatizar. Para ello, la estrategia consiste en crear un campo clave de tipo entero que sea autoincrementable.&lt;/p&gt;

&lt;p&gt;Retomemos el primer ejemplo examinado en esta lección (modificando el fichero que contiene la BBDD) y estudiemos cómo implementar la funcionalidad comentada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos-2&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE_ARTICULO VARCHAR(50),
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)

productos = [(&amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)&amp;quot;, productos)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por convención, los campos de una tabla que van a ser automatizados reciben el nombre de &lt;code&gt;ID&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Con la instrucción &lt;code&gt;AUTOINCREMENT&lt;/code&gt; conseguimos la mencionada gestión automática del campo entero que ahora hemos declarado como clave.&lt;/li&gt;
&lt;li&gt;La instrucción donde realizamos la llamada a la función &lt;code&gt;executemany()&lt;/code&gt; hemos de modificarla, con respecto a lo programado anteriormente, ya que las tuplas de &lt;code&gt;productos&lt;/code&gt; poseen tres elementos, mientras que figuran cuatro símbolos &lt;code&gt;?&lt;/code&gt; en el comando &lt;em&gt;SQL&lt;/em&gt; &lt;code&gt;INSERT INTO&lt;/code&gt;. Para solucionar este escollo, sustituimos el primer &lt;code&gt;?&lt;/code&gt; por la instrucción &lt;code&gt;NULL&lt;/code&gt;, acción que permitirá a &lt;em&gt;Python&lt;/em&gt; gestionar el campo clave de forma automática.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/57/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>58. Bases de datos IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb58-bases-de-datos-iv/</link>
      <pubDate>Fri, 31 May 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb58-bases-de-datos-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/m_FzVf9JTV8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos la cláusula &lt;code&gt;UNIQUE&lt;/code&gt; y operaciones &lt;em&gt;CRUD&lt;/em&gt; (&lt;em&gt;Create, Read, Update, Delete&lt;/em&gt;). Para ello, partamos de un código ciertamente similar a los examinados en anteriores ocasiones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&#39;&#39;&#39;
    CREATE TABLE PRODUCTOS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE_ARTICULO VARCHAR(50) UNIQUE,
    PRECIO INTEGER,
    SECCION VARCHAR(20))
    &#39;&#39;&#39;)

productos = [(&amp;quot;Pelota&amp;quot;, 20, &amp;quot;Juguetería&amp;quot;),
             (&amp;quot;Pantalón&amp;quot;, 15, &amp;quot;Confección&amp;quot;),
             (&amp;quot;Destornillador&amp;quot;, 25, &amp;quot;Ferretería&amp;quot;),
             (&amp;quot;Jarrón&amp;quot;, 45, &amp;quot;Cerámica&amp;quot;)]

mi_cursor.executemany(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)&amp;quot;,
                      productos)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recordemos que al incorporar &lt;code&gt;PRIMARY KEY&lt;/code&gt; en el campo &lt;code&gt;ID&lt;/code&gt; (nuestro anterior campo &lt;code&gt;CODIGO_ARTICULO&lt;/code&gt;) lo convertimos en clave y, de manera implícita, estamos forzando que la infomación registrada en él no pueda repetirse.&lt;/li&gt;
&lt;li&gt;Añadiendo &lt;code&gt;UNIQUE&lt;/code&gt; al campo &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt; impedimos la posibilidad de que dos artículos posean el mismo nombre. Esta cláusula la podemos ubicar en tantos campos como deseemos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¿Qué sucede ahora si intentamos insertar un registro cuyo para &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt; ya figura en la base de datos (BBDD)?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, &#39;Pelota&#39;, 57, &#39;Deportes&#39;)&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;bbdd_2.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    mi_cursor.execute(&amp;quot;INSERT INTO PRODUCTOS VALUES (NULL, &#39;Pelota&#39;, 57, &#39;Deportes&#39;)&amp;quot;)
sqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.NOMBRE_ARTICULO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto es, &lt;em&gt;Python&lt;/em&gt; arroja un error de integridad por violarse la restricción de unicidad para el campo &lt;code&gt;NOMBRE_ARTICULO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, abordemos las operaciones de tipo operaciones &lt;em&gt;CRUD&lt;/em&gt; (&lt;em&gt;Create, Read, Update, Delete&lt;/em&gt;). Aunque las dos primeras ya las hemos analizado en lecciones anteriores, recordemos brevemente cómo realizar una de tipo &lt;em&gt;Read&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;SELECT * FROM PRODUCTOS WHERE SECCION=&#39;Confección&#39;&amp;quot;)

productos = mi_cursor.fetchall()

for producto in productos:
    print(producto)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(2, &#39;Pantalón&#39;, 15, &#39;Confección&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: las instrucciones suministradas a la BBDD son &lt;em&gt;case sensitive&lt;/em&gt;, es decir, hemos de proceder con cautela a la hora de introducir los datos y utilizar adecuadamente las mayúsculas y las minúsculas (además de los acentos y otros posibles caracteres conflictivos).&lt;/p&gt;

&lt;p&gt;Para realizar una actualización de registro (operación de tipo &lt;em&gt;Update&lt;/em&gt;), simplemente hemos de modificar la instrucción &lt;em&gt;SQL&lt;/em&gt; de manera acertada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;UPDATE PRODUCTOS SET PRECIO=35 WHERE NOMBRE_ARTICULO=&#39;Pelota&#39;&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, para borrar registros (operación de tipo &lt;em&gt;Delete&lt;/em&gt;), la manera de proceder es similar a la vista antes, ya que únicamente hemos de emplear la instrucción &lt;em&gt;SQL&lt;/em&gt; adecuada (y borrar por un criterio que no ocasione conflictos con otros registros almacenados en la BBDD):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

mi_conexion = sqlite3.connect(&amp;quot;gestion-productos&amp;quot;)

mi_cursor = mi_conexion.cursor()

mi_cursor.execute(&amp;quot;DELETE FROM PRODUCTOS WHERE ID=1&amp;quot;)

mi_conexion.commit()

mi_conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: cuando utilicemos una cláusula &lt;code&gt;DELETE&lt;/code&gt;, no hemos de olvidar jamás añadir otra de tipo &lt;code&gt;WHERE&lt;/code&gt; o terminaremos suprimiendo la tabla completa en lugar de uno o varios registros.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/58/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>59. Práctica guiada I</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb59-practica-guiada-i/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb59-practica-guiada-i/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/E0OqddzjFUY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, y con el objetivo de reforzar los contenidos vistos hasta la fecha, comenzaremos a esbozar una aplicación gráfica de tipo &lt;em&gt;CRUD&lt;/em&gt;. Mediante ella, conectaremos con una base de datos (BBDD) y podremos realizar las operaciones básicas: &lt;em&gt;Create&lt;/em&gt;, &lt;em&gt;Read&lt;/em&gt;, &lt;em&gt;Update&lt;/em&gt; y &lt;em&gt;Delete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el vídeo se explican los diferentes elementos y funcionalidades que caracterizan a la aplicación propuesta, por si queremos lanzarnos a su elaboración de antemano. No obstante, se procederá a su implementación en posteriores lecciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>60. Práctica guiada II</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb60-practica-guiada-ii/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb60-practica-guiada-ii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/o8E869dmK3U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, comenzaremos a esbozar la interfaz gráfica de nuestra aplicación &lt;em&gt;CRUD&lt;/em&gt;. Para ello, empezamos tecleando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Tk

# Raíz de la aplicación
root = Tk()
root.title(&amp;quot;Aplicación CRUD&amp;quot;)
root.iconbitmap(&amp;quot;icon.ico&amp;quot;)

# Ejecución de la aplicación
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, generamos la barra de menú superior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Menú superior de la aplicación
barra_menu = Menu(root)
root.config(menu=barra_menu)

bbdd_menu = Menu(barra_menu, tearoff=0)
bbdd_menu.add_command(label=&amp;quot;Conectar&amp;quot;)
bbdd_menu.add_separator()
bbdd_menu.add_command(label=&amp;quot;Salir&amp;quot;)

borrar_menu = Menu(barra_menu, tearoff=0)
borrar_menu.add_command(label=&amp;quot;Borrar campos&amp;quot;)

crud_menu = Menu(barra_menu, tearoff=0)
crud_menu.add_command(label=&amp;quot;Crear&amp;quot;)
crud_menu.add_command(label=&amp;quot;Leer&amp;quot;)
crud_menu.add_command(label=&amp;quot;Actualizar&amp;quot;)
crud_menu.add_command(label=&amp;quot;Borrar&amp;quot;)

help_menu = Menu(barra_menu, tearoff=0)
help_menu.add_command(label=&amp;quot;Licencia&amp;quot;)
help_menu.add_separator()
help_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;)

barra_menu.add_cascade(label=&amp;quot;BBDD&amp;quot;, menu=bbdd_menu)
barra_menu.add_cascade(label=&amp;quot;Borrar&amp;quot;, menu=borrar_menu)
barra_menu.add_cascade(label=&amp;quot;CRUD&amp;quot;, menu=crud_menu)
barra_menu.add_cascade(label=&amp;quot;Ayuda&amp;quot;, menu=help_menu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por lo que respecta al cuerpo de la aplicación, lo dividiremos en dos &lt;em&gt;frames&lt;/em&gt;: uno superior para organizar los campos de introducción de datos y otro inferior para distribuir los cuatro botones que nos permitirán llevar a cabo acciones de tipo &lt;em&gt;CRUD&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Así pues, si, por ejemplo, optamos por construir los diferentes campos de entrada que poseerá la aplicación, el bloque de código a escribir será:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Frame superior
campos_frame = Frame(root)
campos_frame.pack()

id_entry = Entry(campos_frame)
id_entry.grid(row=0, column=1, padx=2, pady=2)

name_entry = Entry(campos_frame)
name_entry.grid(row=1, column=1, padx=2, pady=2)

lastname_entry = Entry(campos_frame)
lastname_entry.grid(row=2, column=1, padx=2, pady=2)

address_entry = Entry(campos_frame)
address_entry.grid(row=3, column=1, padx=2, pady=2)

password_entry = Entry(campos_frame)
password_entry.grid(row=4, column=1, padx=2, pady=2)
password_entry.config(show=&amp;quot;*&amp;quot;)

comment_text = Text(campos_frame, width=15, height=5)
comment_text.grid(row=5, column=1, padx=2, pady=2)
comment_text_scrollvert = Scrollbar(campos_frame, command=comment_text.yview)
comment_text_scrollvert.grid(row=5, column=2, sticky=&amp;quot;nsew&amp;quot;)
comment_text.config(yscrollcommand=comment_text_scrollvert)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/60/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>61. Práctica guiada III</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb61-practica-guiada-iii/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:02 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb61-practica-guiada-iii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OJzFGgOSpvI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, una vez declarados los campos de introducción de datos en la anterior, nos centraremos en ubicar las etiquetas en la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_label = Label(campos_frame, text=&amp;quot;ID:&amp;quot;)
id_label.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

name_label = Label(campos_frame, text=&amp;quot;Nombre:&amp;quot;)
name_label.grid(row=1, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

lastname_label = Label(campos_frame, text=&amp;quot;Apellido:&amp;quot;)
lastname_label.grid(row=2, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

address_label = Label(campos_frame, text=&amp;quot;Dirección:&amp;quot;)
address_label.grid(row=3, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

password_label = Label(campos_frame, text=&amp;quot;Contraseña:&amp;quot;)
password_label.grid(row=4, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

comment_label = Label(campos_frame, text=&amp;quot;Comentarios:&amp;quot;)
comment_label.grid(row=5, column=0, sticky=&amp;quot;ne&amp;quot;, padx=2, pady=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, ocupémonos de construir un &lt;em&gt;frame&lt;/em&gt; en la parte inferior del ya disponible y disponer cuatro botones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Frame inferior
botones_frame = Frame(root)
botones_frame.pack(expand=True)

crear_button = Button(botones_frame, text=&amp;quot;Create&amp;quot;)
crear_button.grid(row=0, column=0, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

read_button = Button(botones_frame, text=&amp;quot;Read&amp;quot;)
read_button.grid(row=0, column=1, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

update_button = Button(botones_frame, text=&amp;quot;Update&amp;quot;)
update_button.grid(row=0, column=2, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)

delete_button = Button(botones_frame, text=&amp;quot;Delete&amp;quot;)
delete_button.grid(row=0, column=3, sticky=&amp;quot;e&amp;quot;, padx=2, pady=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Así, ya únicamente nos resta programar la funcionalidad de la aplicación, tanto para el menú, como para los botones recién creados.&lt;/p&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/61/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>62. Práctica guiada IV</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb62-practica-guiada-iv/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb62-practica-guiada-iv/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/5XPLCDp7nDk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, implementaremos cierta funcionalidad a nuestra aplicación, comenzando por el menú &lt;em&gt;BBDD&lt;/em&gt;. Programaremos la función que realiza la conexión a la base de datos (BBDD) y la que posibilita la opción de salir de la aplicación.&lt;/p&gt;

&lt;p&gt;Por lo que respecta a la conexión de la BBDD, como la primera vez que pulsemos la función va a encargarse de crear la tabla, después hemos de controlar la excepción que aparece al volver a llamar la función con dicha tabla ya creada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función para conectar a la BBDD
def conecta_bbdd():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    try:
        cursor.execute(&#39;&#39;&#39;
            CREATE TABLE DATOS_USUARIOS (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            NOMBRE_USUARIO VARCHAR(50),
            APELLIDO VARCHAR(50),
            DIRECCION VARCHAR(50),
            PASSWORD VARCHAR(50),
            COMENTARIOS VARCHAR(250))
            &#39;&#39;&#39;)
    except sqlite3.OperationalError:
        pass
    finally:
        messagebox.showinfo(
            title=&amp;quot;Conexión a la base de datos&amp;quot;,
            message=&amp;quot;La conexión a la base de datos se ha realizado con éxito.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, acudimos a la instrucción que gestiona el elemento del menú &lt;em&gt;BBDD&lt;/em&gt; correspondiente y la modificamos como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bbdd_menu.add_command(label=&amp;quot;Conectar&amp;quot;, command=conecta_bbdd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, implementemos la función que gestiona la salida de la aplicación. El código es idéntico al visto en lecciones anteriores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función para salir de la aplicación
def sale_aplicacion():
    valor = messagebox.askquestion(
        title=&amp;quot;Salir&amp;quot;,
        message=&amp;quot;¿Deseas realmente salir de la aplicación?&amp;quot;)
    if valor == &amp;quot;yes&amp;quot;:
        root.destroy()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y añadimos la funcionalidad al correspondiente elemento del menú &lt;em&gt;BBDD&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bbdd_menu.add_command(label=&amp;quot;Salir&amp;quot;, command=sale_aplicacion)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/62/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>63. Práctica guiada V</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb63-practica-guiada-v/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb63-practica-guiada-v/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/mNzHPglBuUk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, analizaremos cómo limpiar los campos de registros (por si el usuario comete algún error al transcribir los datos) e insertar datos en la base de datos (BBDD), es decir, ejecutar la operación de tipo &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar, de cara a poder realizar manipulaciones sobre el texto que un usuario escriba en los campos de registros, hemos de emplear variables de tipo &lt;code&gt;StringVar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_data = StringVar()
name_data = StringVar()
lastname_data = StringVar()
address_data = StringVar()
password_data = StringVar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, las asignamos a sus correspondientes &lt;code&gt;Entry&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_entry = Entry(campos_frame, width=40, textvariable=id_data)
name_entry = Entry(campos_frame, width=40, textvariable=name_data)
lastname_entry = Entry(campos_frame, width=40, textvariable=lastname_data)
address_entry = Entry(campos_frame, width=40, textvariable=address_data)
password_entry = Entry(campos_frame, width=40, textvariable=password_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después, construimos la función que limpia los campos de registros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que limpia los registros de la aplicación
def limpia_registros():
    id_data.set(&amp;quot;&amp;quot;)
    name_data.set(&amp;quot;&amp;quot;)
    lastname_data.set(&amp;quot;&amp;quot;)
    address_data.set(&amp;quot;&amp;quot;)
    password_data.set(&amp;quot;&amp;quot;)
    comment_text.delete(1.0, END)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notemos cómo se limpia un cuadro de comentario, ya que el procedimiento a seguir es un tanto diferente. Hemos de utilizar la función &lt;code&gt;delete()&lt;/code&gt;, indicándole el punto de partida (&lt;code&gt;1.0&lt;/code&gt;) y el de finalización (&lt;code&gt;END&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Al hilo de lo anterior, &lt;code&gt;END&lt;/code&gt; es asimismo una instrucción de la librería &lt;code&gt;tkinter&lt;/code&gt;, de manera que hemos de importarla si estamos siguiendo la estrategia de &lt;code&gt;from tkinter import ...&lt;/code&gt;. De hecho, en mi código dicha instrucción comienza a adquirir una longitud considerable, siendo en la actualidad:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tkinter import Button, END, Entry, Frame, Label, Menu, messagebox, Scrollbar, StringVar, Text, Tk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, asignamos esta funcionalidad al elemento correspondiente el menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;borrar_menu.add_command(label=&amp;quot;Borrar campos&amp;quot;, command=limpia_registros)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, abordemos la primera operación &lt;em&gt;CRUD&lt;/em&gt;, &lt;em&gt;Create&lt;/em&gt;, que nos permitirá añadir registros a la BBDD.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que inserta registros en la BBDD
def crud_create():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, &#39;&amp;quot; +
                   name_data.get() + &amp;quot;&#39;, &#39;&amp;quot; + lastname_data.get() + &amp;quot;&#39;,&#39;&amp;quot; +
                   address_data.get() + &amp;quot;&#39;,&#39;&amp;quot; + password_data.get() + &amp;quot;&#39;,&#39;&amp;quot; +
                   comment_text.get(&amp;quot;1.0&amp;quot;, END) + &amp;quot;&#39;)&amp;quot;)
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Crear registro&amp;quot;,
        message=&amp;quot;Registro insertado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No recogemos aquello que el usuario escribe en el campo &lt;em&gt;ID&lt;/em&gt;, ya que lo hemos declarado en la tabla como clave primaria autoincrementable (de ahí el &lt;code&gt;NULL&lt;/code&gt; en la instrucción &lt;em&gt;SQL&lt;/em&gt; de arriba). Este proceder puede resultar un tanto confuso para el usuario y admite margen de mejora.&lt;/li&gt;
&lt;li&gt;Es muy sencillo equivocarse a la hora de escribir la anterior instrucción &lt;em&gt;SQL&lt;/em&gt; por el elevado número de concatenaciones. Un enfoque alternativo consiste en escribir primero una serie de datos concretos de ejemplo y, después, poco a poco sustituir dichos datos por las correspondientes variables con sus métodos &lt;code&gt;get()&lt;/code&gt; asociados.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, añadimos la funcionalidad, tanto al elemento de menú correspondiente, como al botón que figura en la parte inferior de la aplicación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Crear&amp;quot;, command=crud_create)

crear_button = Button(botones_frame, text=&amp;quot;Create&amp;quot;, command=crud_create)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/63/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>64. Práctica guiada VI</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb64-practica-guiada-vi/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb64-practica-guiada-vi/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nx3OE31y0IY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos la implementación de las operaciones de tipo &lt;em&gt;Read&lt;/em&gt; y &lt;em&gt;Update&lt;/em&gt;. El criterio para posibilitar la lectura de registros será que el usuario introduzca en el formulario la &lt;em&gt;ID&lt;/em&gt; de la cual desea consultar la información pertinente.&lt;/p&gt;

&lt;p&gt;En primer lugar, implementemos la función de lectura, apoyándonos en cómo procedimos en anteriores lecciones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que lee registros de la BBDD
def crud_read():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;SELECT * FROM DATOS_USUARIOS WHERE ID=&amp;quot; + id_data.get())
    usuario = cursor.fetchall()
    for u in usuario:
        id_data.set(u[0])
        name_data.set(u[1])
        lastname_data.set(u[2])
        address_data.set(u[3])
        password_data.set(u[4])
        comment_text.insert(1.0, u[5])
    conexion.commit()
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luego, añadimos la funcionalidad, tanto al elemento del menú correspondiente, como al botón asociado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Leer&amp;quot;, command=crud_read)

read_button = Button(botones_frame, text=&amp;quot;Read&amp;quot;, command=crud_read)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: así programa la funcionalidad, la aplicación no responde cuando se inserta un &lt;em&gt;ID&lt;/em&gt; que no figura en la base de datos. Habría de mostrar un mensaje de advertencia mediante la clase &lt;code&gt;messagebox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acto seguido, ocupémonos de la función de tipo &lt;em&gt;Update&lt;/em&gt;, que será muy similar a la programada para &lt;em&gt;Create&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que actualiza registros de la BBDD
def crud_update():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO=&#39;&amp;quot; +
                   name_data.get() + &amp;quot;&#39;, APELLIDO=&#39;&amp;quot; + lastname_data.get() +
                   &amp;quot;&#39;, DIRECCION=&#39;&amp;quot; + address_data.get() + &amp;quot;&#39;, PASSWORD=&#39;&amp;quot; +
                   password_data.get() + &amp;quot;&#39;, COMENTARIOS=&#39;&amp;quot; +
                   comment_text.get(&amp;quot;1.0&amp;quot;, END) + &amp;quot;&#39;&amp;quot;)
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Actualizar registro&amp;quot;,
        message=&amp;quot;Registro actualizado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después, añadimos el comportamiento, tanto al elemento del menú asociado, como al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Actualizar&amp;quot;, command=crud_update)

update_button = Button(botones_frame, text=&amp;quot;Update&amp;quot;, command=crud_update)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/64/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>65. Práctica guiada VII</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb65-practica-guiada-vii/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb65-practica-guiada-vii/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nj-alxd7YvM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, abordaremos cómo borrar registros (operación de tipo &lt;em&gt;Delete&lt;/em&gt;) y la creación de consultas parametrizadas.&lt;/p&gt;

&lt;p&gt;En cuanto a la primera tarea, empecemos construyendo la correspondiente función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que borra registros de la BBDD
def crud_delete():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    cursor.execute(&amp;quot;DELETE FROM DATOS_USUARIOS WHERE ID=&amp;quot; + id_data.get())
    conexion.commit()
    conexion.close()
    messagebox.showinfo(
        title=&amp;quot;Borrar registro&amp;quot;,
        message=&amp;quot;Registro borrado con éxito en la base de datos.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acto seguido, añadimos la funcionalidad, tanto al elemento del menú asociado, como al botón correspondiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;crud_menu.add_command(label=&amp;quot;Borrar&amp;quot;, command=crud_delete)

delete_button = Button(botones_frame, text=&amp;quot;Delete&amp;quot;, command=crud_delete)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, analicemos cómo modificar algunas de las consultas &lt;em&gt;SQL&lt;/em&gt; para hacerlas parametrizadas y que su escritura sea mucho más sencilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que inserta registros en la BBDD
def crud_create():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    datos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(&amp;quot;1.0&amp;quot;, END)
    cursor.execute(&amp;quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, ?, ?, ?, ?, ?)&amp;quot;, (datos))
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Crear registro&amp;quot;,
        message=&amp;quot;Registro insertado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función que actualiza registros de la BBDD
def crud_update():
    conexion = sqlite3.connect(&amp;quot;usuarios&amp;quot;)
    cursor = conexion.cursor()
    datos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(&amp;quot;1.0&amp;quot;, END)
    cursor.execute(&amp;quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO=?, APELLIDO=?, DIRECCION=?, PASSWORD=?, COMENTARIOS=? WHERE ID=&amp;quot; + id_data.get(), (datos))
    conexion.commit()
    messagebox.showinfo(
        title=&amp;quot;Actualizar registro&amp;quot;,
        message=&amp;quot;Registro actualizado con éxito en la base de datos.&amp;quot;)
    conexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente, como extra, incluyamos funcionalidad para los dos elementos del menú &lt;em&gt;Ayuda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Función licencia
def licencia():
    messagebox.showwarning(title=&amp;quot;Licencia&amp;quot;,
                           message=&amp;quot;Producto bajo licencia GNU.&amp;quot;)


# Función acerca de...
def acerca_de():
    messagebox.showinfo(title=&amp;quot;Acerca de...&amp;quot;,
                        message=&amp;quot;Aplicación creada por Alexis Sáez.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, incorporemos dicha funcionalidad en los elementos del menú:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help_menu.add_command(label=&amp;quot;Licencia&amp;quot;, command=licencia)

help_menu.add_command(label=&amp;quot;Acerca de...&amp;quot;, command=acerca_de)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/65/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>66. Funciones lambda</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb66-funciones-lambda/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb66-funciones-lambda/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/tfYLcHbjc_A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos las funciones &lt;em&gt;lambda&lt;/em&gt;. Una función &lt;strong&gt;lambda&lt;/strong&gt; es una función anónima, y se utilizan en &lt;em&gt;Python&lt;/em&gt; a la hora de programar para abreviar, ya que aligera la sintaxis del código. Además, no ocupan lugar en el espacio de nombres asociado a las funciones de una aplicación.&lt;/p&gt;

&lt;p&gt;Cualquier tarea que llevemos a cabo con una función &lt;em&gt;lambda&lt;/em&gt; se puede desarrollar mediante una función normal, pero no así a la inversa (sobre todo cuando su lógica es compleja).&lt;/p&gt;

&lt;p&gt;Por ejemplo, para calcular el área de un triángulo, podemos construir la función:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def area_triangulo(b, h):
    return b * h / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for b in range(1, 10, 5):
    for h in range(1, 10, 5):
        print(
            f&amp;quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El área del triángulo de base 1 y altura 1 es 0.5.
El área del triángulo de base 1 y altura 6 es 3.0.
El área del triángulo de base 6 y altura 1 es 3.0.
El área del triángulo de base 6 y altura 6 es 18.0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No obstante, una función tan sencilla puede ser abreviada como una función &lt;em&gt;lambda&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;area_triangulo = lambda b, h: b * h / 2

for b in range(1, 10, 5):
    for h in range(1, 10, 5):
        print(
            f&amp;quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.&amp;quot;
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El área del triángulo de base 1 y altura 1 es 0.5.
El área del triángulo de base 1 y altura 6 es 3.0.
El área del triángulo de base 6 y altura 1 es 3.0.
El área del triángulo de base 6 y altura 6 es 18.0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: las funciones &lt;em&gt;lambda&lt;/em&gt;, generalmente, no se asignan a variables. En tales casos, conviene hacer uso de la instrucción &lt;code&gt;def&lt;/code&gt; y definir una función tal y como estamos habituados.&lt;/p&gt;

&lt;p&gt;Usadas &amp;ldquo;al vuelo&amp;rdquo;, su sintaxis queda como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;El cubo de 3 es &amp;quot; + str((lambda x:x**3) (3)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;El cubo de 3 es 27
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/66/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>67. La función filter</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb67-filter/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb67-filter/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/mTJKU7IxL0U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos la función &lt;code&gt;filter()&lt;/code&gt;, que forma parte de un conjunto de funciones conocidas como &amp;ldquo;de orden superior&amp;rdquo; y nos permiten utilizar en &lt;em&gt;Python&lt;/em&gt; el paradigma de &lt;strong&gt;programación funcional&lt;/strong&gt;. La mencionada función verifica que los elementos de una secuencia cumplen una condición, devolviendo un iterador compuesto por aquellos que la satisfacen.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podemos construir un programa que detecte qué números son pares y cuáles no lo son, devolviéndonos una lista compuesta por los que verifiquen dicha condición:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_par(num):
    if num % 2 == 0:
        return True


numeros = [17, 24, 7, 39, 8, 51, 92]

print(filter(numero_par, numeros))  # objeto iterable

print(list(filter(numero_par, numeros)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;filter object at 0x0000029E5BA262B0&amp;gt;
[24, 8, 92]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La función &lt;code&gt;numero_par()&lt;/code&gt; la podemos abreviar un tanto como sigue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def numero_par(num):
    return num % 2 == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es más, como es tan sencilla, incluso podemos prescindir de ella utilizando una función &lt;em&gt;lambda&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numeros = [17, 24, 7, 39, 8, 51, 92]

print(list(filter(lambda x: x % 2 == 0, numeros)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[24, 8, 92]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Habitualmente, utilizaremos la función &lt;code&gt;filter()&lt;/code&gt; para filtrar objetos. Por ejemplo, supongamos que tenemos varias instancias de la clase &lt;code&gt;Empleado&lt;/code&gt; y deseamos filtrarlas por el valor de uno de sus atributos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 75000),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 85000),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 25000),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 27000),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 21000)
]

salarios_altos = filter(lambda e: e.salario &amp;gt; 50000, lista_empleados)

[print(s.__str__()) for s in salarios_altos]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 75000 €.
Ana trabaja como Presidenta y cobra 85000 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A modo de curiosidad, ya que me he avanzado y he utilizado comprensiones de listas (ver la última línea del bloque de código anterior), resulta que mediante ellas, en este ejemplo concreto, no es necesario recurrir al uso de la función &lt;code&gt;filter()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 75000),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 85000),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 25000),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 27000),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 21000)
]

[print(e.__str__()) for e in lista_empleados if e.salario &amp;gt; 50000]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 75000 €.
Ana trabaja como Presidenta y cobra 85000 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/67/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>68. La función map</title>
      <link>https://imalexissaez.github.io/courses/python-basic/pb68-map/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:01 +0100</pubDate>
      
      <guid>https://imalexissaez.github.io/courses/python-basic/pb68-map/</guid>
      <description>

&lt;h2 id=&#34;vídeo&#34;&gt;Vídeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/4dkjpHI6vpA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;notas-personales&#34;&gt;Notas personales&lt;/h2&gt;

&lt;p&gt;En esta lección, estudiaremos la función &lt;code&gt;map()&lt;/code&gt;, que, como &lt;code&gt;filter()&lt;/code&gt;, también forma parte de un conjunto de funciones conocidas como &amp;ldquo;de orden superior&amp;rdquo; y nos permiten utilizar en &lt;em&gt;Python&lt;/em&gt; el paradigma de &lt;strong&gt;programación funcional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La filosofía de ambas funciones es ciertamente similar ya que, por ejemplo, &lt;code&gt;map()&lt;/code&gt; aplica una función a cada elemento de un objeto de tipo iterable (listas, tuplas&amp;hellip;) devolviendo a su vez un objeto de tipo iterable que contiene los resultados de dicha aplicación.&lt;/p&gt;

&lt;p&gt;Retomemos la clase definida en la lección anterior, junto con la lista de empleados generada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Empleado:
    def __init__(self, nombre, cargo, salario):
        self.nombre = nombre
        self.cargo = cargo
        self.salario = salario

    def __str__(self):
        return f&amp;quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.&amp;quot;


lista_empleados = [
    Empleado(&amp;quot;Juan&amp;quot;, &amp;quot;Director&amp;quot;, 6700),
    Empleado(&amp;quot;Ana&amp;quot;, &amp;quot;Presidenta&amp;quot;, 7500),
    Empleado(&amp;quot;Antonio&amp;quot;, &amp;quot;Administrativo&amp;quot;, 1200),
    Empleado(&amp;quot;Sara&amp;quot;, &amp;quot;Secretaria&amp;quot;, 1250),
    Empleado(&amp;quot;Mario&amp;quot;, &amp;quot;Botones&amp;quot;, 1000)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota&lt;/em&gt;: hemos modificado los salarios para que sus cantidades sean mensuales, en lugar de las anuales declaradas en la lección anterior.&lt;/p&gt;

&lt;p&gt;Imaginemos ahora que todos los empleados recibien un extra monetario en forma de comisión, que hemos de agregar a su salario mensual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calcula_comision(empleado):
    empleado.salario *= 1.03
    return empleado


lista_empleados_comision = map(calcula_comision, lista_empleados)

[print(e) for e in lista_empleados_comision]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 6901.0 €.
Ana trabaja como Presidenta y cobra 7725.0 €.
Antonio trabaja como Administrativo y cobra 1236.0 €.
Sara trabaja como Secretaria y cobra 1287.5 €.
Mario trabaja como Botones y cobra 1030.0 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¿Y si queremos aplicar la comisión solamente a aquellos trabajadores que tengan un salario inferior a 3000 euros?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calcula_comision(empleado):
    if empleado.salario &amp;lt;= 3000:
        empleado.salario *= 1.03
    return empleado


lista_empleados_comision = map(calcula_comision, lista_empleados)

[print(e) for e in lista_empleados_comision]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Juan trabaja como Director y cobra 6700 €.
Ana trabaja como Presidenta y cobra 7500 €.
Antonio trabaja como Administrativo y cobra 1236.0 €.
Sara trabaja como Secretaria y cobra 1287.5 €.
Mario trabaja como Botones y cobra 1030.0 €.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-fuente&#34;&gt;Código fuente&lt;/h2&gt;

&lt;p&gt;El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta &lt;code&gt;/lecciones/68/&lt;/code&gt; del &lt;a href=&#34;https://github.com/ImAlexisSaez/curso-python-desde-0&#34; target=&#34;_blank&#34;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
