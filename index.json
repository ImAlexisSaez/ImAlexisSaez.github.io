[{"authors":["admin"],"categories":null,"content":"Infinitos Contrastes es una herramienta de aprendizaje en múltiples dimensiones. Su objetivo es posibilitar que el recorrido a través de las distintas enseñanzas se plantee de una manera activa, a partir de la transmisión de ideas o experiencias.\nMi educación e intereses condiciona evidentemente el trasfondo de esta página web, que refleja una constante batalla contra la Hidra de Lerna: cada conocimiento nuevo adquirido orgina, al menos, dos inesperadas carencias que suplir, haciendo de este infinito viaje una experiencia maravillosa.\n","date":1576274401,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1576274401,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://imalexissaez.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Infinitos Contrastes es una herramienta de aprendizaje en múltiples dimensiones. Su objetivo es posibilitar que el recorrido a través de las distintas enseñanzas se plantee de una manera activa, a partir de la transmisión de ideas o experiencias.\nMi educación e intereses condiciona evidentemente el trasfondo de esta página web, que refleja una constante batalla contra la Hidra de Lerna: cada conocimiento nuevo adquirido orgina, al menos, dos inesperadas carencias que suplir, haciendo de este infinito viaje una experiencia maravillosa.","tags":null,"title":"Alexis Sáez","type":"authors"},{"authors":null,"categories":null,"content":"En este inicio de curso académico, y de cara a la preparación del supuesto práctico (de la especialidad de matemáticas) para las oposiciones de secundaria de 2020 en la Comunidad Valenciana, comienzo un nuevo proyecto que recopilará los enunciados de los problemas que aborde.\nA diferencia del anteriormente disponible, no publicaré las soluciones de inmediato, sino que habilitaré enlaces a los artículos del blog donde se compartan por primera vez los enunciados, posibilitando así su discusión.\n","date":1569193201,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1569193201,"objectID":"02f332900c616d345d734e580078e990","permalink":"https://imalexissaez.github.io/courses/enunciados/","publishdate":"2019-09-23T00:00:01+01:00","relpermalink":"/courses/enunciados/","section":"courses","summary":"Problemas matemáticos para la preparación de las Oposiciones de 2020.","tags":null,"title":"Presentación","type":"docs"},{"authors":null,"categories":null,"content":"El objetivo de este proyecto no es otro que recopilar mis notas personales elaboradas a partir de la lista de reproducción Curso Python desde 0, ofrecida por Píldoras Informáticas.\nTras visualizar unas cuantas lecciones, he comprobado que el curso es más que recomendable, por lo que me he animado a seguirlo de una manera activa, es decir, replicando el código fuente que aparezca, así como anotando las ideas principales de cada vídeo. Todo ello quedará disponible a través del menú lateral que figura en la parte izquiera de esta página (o del menú superior desplegable para la versión móvil), por si alguna persona pudiera encontrarlo de utilidad.\nFinalmente, dejo aquí el enlace a una reseña del curso, redactada una vez he finalizado de abordar sus contenidos, donde detallo mi opinión sobre el mismo.\n","date":1556409660,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1560816060,"objectID":"855c05d8ae5a969cd4ba51da99d3cbfa","permalink":"https://imalexissaez.github.io/courses/python-basic/","publishdate":"2019-04-28T00:01:00Z","relpermalink":"/courses/python-basic/","section":"courses","summary":"Notas personales para el curso 'Python desde 0' ofrecido por 'Píldoras Informáticas'.","tags":null,"title":"Presentación","type":"docs"},{"authors":null,"categories":null,"content":"I. Divisibilidad  Ejercicio: Demuestra que el número $n(n^2 + 5)$ es divisible por $6$, para cada número natural $n$. (Discusión)\n Ejercicio: Demuestra que $(3^n - 2n^2 - 1)\\equiv 0\\pmod{8}$, para cada número natural $n$. ¿Es cierto que dicha expresión también es múltiplo de $24$ para todo número natural $n$? (Discusión)\n Ejercicio: Demuestra que $3\\cdot 5^{2n+1} + 2^{3n+1}$ es divisible por $17$, para cada número natural $n$. (Discusión)\n Ejercicio: Demuestra que $(6^n - 1)(7^n - 1)$ es múltiplo de $30$, para cada número natural $n$. (Discusión)\n Ejercicio: Demuestra que $11^{n+1} + 12^{2n-1}$ es múltiplo de $133$, para cada número natural $n$. (Discusión)\n Ejercicio: Demuestra que $3^{3n+3} - 26n - 27$ es múltiplo de $169$, para cada número natural $n$. (Discusión)\n ","date":1569193201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572390001,"objectID":"4deb420b4b3b31edb8d13eef200110cc","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista01-induccion/","publishdate":"2019-09-23T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista01-induccion/","section":"courses","summary":"I. Divisibilidad  Ejercicio: Demuestra que el número $n(n^2 + 5)$ es divisible por $6$, para cada número natural $n$. (Discusión)\n Ejercicio: Demuestra que $(3^n - 2n^2 - 1)\\equiv 0\\pmod{8}$, para cada número natural $n$. ¿Es cierto que dicha expresión también es múltiplo de $24$ para todo número natural $n$? (Discusión)\n Ejercicio: Demuestra que $3\\cdot 5^{2n+1} + 2^{3n+1}$ es divisible por $17$, para cada número natural $n$. (Discusión)","tags":null,"title":"Inducción","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En este vídeo, se presenta el curso de Python y los motivos de su desarrollo. Después se revisa el temario, que aborda:\n Introducción. Requisitos previos. Instalación software. Fundamentos y sintaxis básica del lenguaje. POO con Python. Algoritmos, listas y tramos. BBDD. Trabajo con gráficos y contenidos. Procesos y tareas. Programación de red. Sockets. Ejercicios prácticos.  La lección termina con un breve apartado de FAQ.\n","date":1556406001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556406001,"objectID":"9867bb5cf096261db4c2f35f9fd9abf5","permalink":"https://imalexissaez.github.io/courses/python-basic/pb01-presentacion-del-curso/","publishdate":"2019-04-28T00:00:01+01:00","relpermalink":"/courses/python-basic/pb01-presentacion-del-curso/","section":"courses","summary":"Vídeo   Notas personales En este vídeo, se presenta el curso de Python y los motivos de su desarrollo. Después se revisa el temario, que aborda:\n Introducción. Requisitos previos. Instalación software. Fundamentos y sintaxis básica del lenguaje. POO con Python. Algoritmos, listas y tramos. BBDD. Trabajo con gráficos y contenidos. Procesos y tareas. Programación de red. Sockets. Ejercicios prácticos.  La lección termina con un breve apartado de FAQ.","tags":null,"title":"1. Presentación del curso","type":"docs"},{"authors":null,"categories":null,"content":"I. Cambio de base  Ejercicio:\n (a) $125_{(3}$ a base $10$. (b) $231$ a base $5$. (c) $0.11_{(2}$ a base $10$. (d) $\\frac{3}{4}$ a base $2$. (e) $0.\\overline{1}_{(3}$ a base $10$. (f) $\\frac{1}{2}$ a base $3$. (g) $0.\\overline{12}_{(3}$ a base $10$.  (Discusión)\n II. Divisibilidad  Ejercicio: (Comunidad Valenciana (2006))\n (a) Halla la base en la que $3753_{(x} - 3586_{(x} = 189_{(x}$. (b) Una vez hallada, deduce el criterio de divisibilidad entre $x-1$ de dicha base. (c) Justifica si alguno de los números dados es divisible por $x-1$ en dicha base. (d) Convierte el primero de los números dados a base $9$.  (Discusión)\n III. Teoría de números  Ejercicio: En un sistema de numeración, cuya base se desconoce, dos números se escriben $302$ y $402$. El producto de ambos números es $75583$ en el sistema de numeración en base $9$. Halla la base desconocida. (Discusión)\n Ejercicio: Encuentra, en el sistema decimal, todos los números que en base $7$ se escriben con tres cifras y en base $9$ con las mismas cifras en orden inverso. (Discusión)\n Ejercicio: En la base $x$, $a=0.\\overline{37}$ y $b=0.\\overline{73}$, mientras que en la base $y$, $a=0.\\overline{25}$ y $b=0.\\overline{52}$. Halla $x+y$ en base $10$. (Discusión)\n Ejercicio: Demuestra que, en cualquier sistema de numeración, los números $10101$, $101010101$, $1010101010101,\\ldots$ no son primos. (Discusión)\n ","date":1569279601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572390001,"objectID":"a8cc0498cd53515940974d3d50ae7ec7","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista02-numeracion/","publishdate":"2019-09-24T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista02-numeracion/","section":"courses","summary":"I. Cambio de base  Ejercicio:\n (a) $125_{(3}$ a base $10$. (b) $231$ a base $5$. (c) $0.11_{(2}$ a base $10$. (d) $\\frac{3}{4}$ a base $2$. (e) $0.\\overline{1}_{(3}$ a base $10$. (f) $\\frac{1}{2}$ a base $3$. (g) $0.\\overline{12}_{(3}$ a base $10$.  (Discusión)\n II. Divisibilidad  Ejercicio: (Comunidad Valenciana (2006))\n (a) Halla la base en la que $3753_{(x} - 3586_{(x} = 189_{(x}$. (b) Una vez hallada, deduce el criterio de divisibilidad entre $x-1$ de dicha base.","tags":null,"title":"Sistemas de numeración","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En este vídeo, se repasa la historia de Python y sus principales características. Entre ellas, destacan:\n Lenguaje interpretado de alto nivel, orientado a objetos, versátil y que es de código abierto. Gramática sencilla, clara y muy legible, con tipado dinámico y fuerte  A través de este enlace descargamos la última versión de Python (3.7.3 a la hora de escribir estas líneas). Si queremos la versión de 64 bits para Windows, hemos de buscarla en esta página.\nDurante su instalación:\n Activamos la casilla que añade la ruta de Python al PATH. Pulsamos, al final de la instalación, sobre la opción que elimina la restricción de longitud máxima sobre las rutas del PATH.  Con respecto a los IDE, en el curso se utilizará Sublime Text 3, aunque se ofrecen como alternativas Eclipse y Notepad++.\n","date":1556406061,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556406061,"objectID":"89becfce2d8e289b03e022ef3cede429","permalink":"https://imalexissaez.github.io/courses/python-basic/pb02-introduccion/","publishdate":"2019-04-28T00:01:01+01:00","relpermalink":"/courses/python-basic/pb02-introduccion/","section":"courses","summary":"Vídeo   Notas personales En este vídeo, se repasa la historia de Python y sus principales características. Entre ellas, destacan:\n Lenguaje interpretado de alto nivel, orientado a objetos, versátil y que es de código abierto. Gramática sencilla, clara y muy legible, con tipado dinámico y fuerte  A través de este enlace descargamos la última versión de Python (3.7.3 a la hora de escribir estas líneas). Si queremos la versión de 64 bits para Windows, hemos de buscarla en esta página.","tags":null,"title":"2. Introducción a Python","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En el IDLE de Python, tecleamos:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026quot;¡Hola mundo!\u0026quot;) # Esto es una instrucción\r¡Hola mundo!\r Usando ; escribimos varias instrucciones en una misma línea, aunque es desaconsejable por restar legibilidad.\n\u0026gt;\u0026gt;\u0026gt; print(\u0026quot;¡Hola mundo!\u0026quot;); print(\u0026quot;¡Bienvenidos!\u0026quot;)\r¡Hola mundo!\r¡Bienvenidos!\r Introducimos los comentarios con el símbolo # para:\n Anotar el código, facilitando futuros mantenimientos. Desactivar bloques de instrucciones, para localizar errores cometidos.  \u0026gt;\u0026gt;\u0026gt; # Esto es un comentario\r...  Mediante el símbolo \\ dividimos una instrucción en varias líneas, aunque es desaconsejable por restar legibilidad.\n\u0026gt;\u0026gt;\u0026gt; mi_nombre = \u0026quot;Mi nombre es Alexis.\u0026quot;\r\u0026gt;\u0026gt;\u0026gt; mi_nombre\r'Mi nombre es Alexis.'\r\u0026gt;\u0026gt;\u0026gt; mi_nombre = \u0026quot;Mi nombre es \\\r... Alexis\u0026quot;\r\u0026gt;\u0026gt;\u0026gt; mi_nombre\r'Mi nombre es Alexis'\r Construimos los bloques de código mediante identación. El IDLE se encarga automáticamente de procurarla:\n\u0026gt;\u0026gt;\u0026gt; a = 0\r\u0026gt;\u0026gt;\u0026gt; for i in range(5):\r... a += 1\r... print(a)\r... 1\r2\r3\r4\r5\r\u0026gt;\u0026gt;\u0026gt;  Durante el curso, usaremos el IDLE de Sublime Text 3. Para ello, descargamos el editor a través de este enlace y lo instalamos. Al iniciarlo:\n Desplegamos el menú Tools y seleccionamos Command Palette.... Escribimos Install Package Control y clicamos sobre la opción que aparece. Desplegamos, de nuevo, el menú Tools, seleccionamos Command Palette... y tecleamos install package. En la siguiente ventana, escribimos SublimeREPL, para así tener el interprete de Python disponible desde el propio editor. Para activarlo, desde el menú Tools, seleccionamos ahora SublimeREPL y buscamos Python. Entre las opciones que aparecen, escogemos Python.  ","date":1556406061,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556406061,"objectID":"0af84785fe598bbc8ced6cee6109c0ca","permalink":"https://imalexissaez.github.io/courses/python-basic/pb03-sintaxis-basica/","publishdate":"2019-04-28T00:01:01+01:00","relpermalink":"/courses/python-basic/pb03-sintaxis-basica/","section":"courses","summary":"Vídeo   Notas personales En el IDLE de Python, tecleamos:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026quot;¡Hola mundo!\u0026quot;) # Esto es una instrucción\r¡Hola mundo!\r Usando ; escribimos varias instrucciones en una misma línea, aunque es desaconsejable por restar legibilidad.\n\u0026gt;\u0026gt;\u0026gt; print(\u0026quot;¡Hola mundo!\u0026quot;); print(\u0026quot;¡Bienvenidos!\u0026quot;)\r¡Hola mundo!\r¡Bienvenidos!\r Introducimos los comentarios con el símbolo # para:\n Anotar el código, facilitando futuros mantenimientos. Desactivar bloques de instrucciones, para localizar errores cometidos.  \u0026gt;\u0026gt;\u0026gt; # Esto es un comentario\r.","tags":null,"title":"3. Sintaxis básica","type":"docs"},{"authors":null,"categories":null,"content":"I. Congruencias  Ejercicio: Determina todos los números naturales $m$ tales que $1066\\equiv 1776\\pmod{m}$. (Discusión)\n Ejercicio: Demuestra que $4^n \\equiv(1+3n)\\pmod{9}$, para cada número natural $n$. (Discusión)\n Ejercicio: Dado $(1! + 2! + \\cdots + 100!)\\pmod{45}$, encuentra el menor resto no negativo. (Discusión)\n Ejercicio: Sea $n$ un número natural y $A_n = 2^n + 2^{2n} + 2^{3n}$.\n (a) Demuestra que $A_{n+3}\\equiv A_n\\pmod{2}$. (b) ¿Para qué valores de $n$ es $A_n$ múltiplo de $7$? (c) Los números, en base $2$, $1110$, $1010100$ y $1001001000$, ¿son divisibles por $7$?  (Discusión)\n Ejercicio: Divide el número $101$ en dos partes tales que una sea múltiplo de $11$ y la otra sea múltiplo de $17$. (Discusión)\n Ejercicio: ¿Qué enteros positivos, menores que $15$, tienen inverso módulo $15$? Encuentra los correspondientes inversos. (Discusión)\n Ejercicio: Encuentra todos los números naturales $n$ para los cuales se satisface que $1^n + 9^n + 10^n = 5^n + 6^n + 11^n$. (Discusión)\n Ejercicio: Halla el dígito final de $9^{9^9}$. (Discusión)\n Ejercicio: Calcula las dos últimas cifras de $2^{390}$. (Discusión)\n Ejercicio: Sabiendo que $7^4 = 2401$, halla los tres últimos dígitos de $7^{9999}$. (Discusión)\n II. mcd, mcm\u0026hellip;  Ejercicio: Determina todos los pares de números naturales $(a,b)$ tales que $mcd(a,b) = 18$ y $mcm(a,b) = 540$. (Discusión)\n Ejercicio: La suma de dos números vale $371$ y el cociente entre su mínimo común múltiplo y su máximo común divisor es $430$. Halla dichos números. (Discusión)\n Ejercicio: Halla dos números naturales sabiendo que su máximo común divisor es $120$ y la diferencia de sus cuadrados asciende a $345600$. (Discusión)\n Ejercicio: Demuestra que $mcd(14n+3, 21n+4)=1$, para cada número natural $n$. (Discusión)\n Ejercicio: Determina todos los posibles valores de $mcd(3n+1, n^2+1)$, donde $n$ es un número natural. (Discusión)\n Ejercicio: En una batalla, en la que participaron entre $10000$ y $11000$ soldados, resultaron muertos $23 / 165$ del total y heridos $35 / 143$ del total. Halla cuántos resultaron ilesos. (Discusión)\n Ejercicio:\n (a) Dados dos números $x$ e $y$, coprimos entre sí, prueba que $mcd(x+y, xy) = 1$. (b) Dados dos números enteros $a$ y $b$, prueba que $mcd(a,b) = mcd(a+b, mcm(a, b))$. (c) La suma de dos números naturales es $5264$ y su mínimo común múltiplo es $200340$, ¿cuáles son estos números?  (Discusión)\n III. Jugando con cifras  Ejercicio: Si a un número de $3$ cifras le quitamos la cifra central, resulta la séptima parte del número inicial. ¿De qué número se trata? (Discusión)\n Ejercicio: ¿Cuál es el número de tres cifras que es igual a doce veces la suma de sus cifras? (Discusión)\n Ejercicio: Se consideran los números naturales escritos del modo usual en base $10$. Se pide:\n (a) Encuentra el menor número tal que, al suprimir la primera cifra de la izquierda, quede reducido a su quinta parte. (b) Demuestre que no existe ningún número que, al suprimirle su primera cifra de la izquierda, quede reducido a su doceava parte.  (Discusión)\n Ejercicio: ¿Cuántas cifras tiene el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial? (Discusión)\n Ejercicio: Encuentra el número natural más pequeño, con $6$ como cifra de las unidades, de manera que, si el $6$ se mueve al principio, el número queda multiplicado por cuatro. (Discusión)\n Ejercicio: Halla un número de cinco cifras diferentes de manera que es igual a la suma de todos los de tres cifras que se pueden obtener con las variaciones ordinarias de dichas cifras tomadas de tres en tres. (Discusión)\n Ejercicio:\n (a) Halla el exponente de $2$ en la factorización de $10!$. ¿Cuál sería en el caso de $11!$? (b) Halla el exponente de $3$ en la factorización de $212!$.  (Discusión)\n Ejercicio:\n (a) ¿En cuántos ceros acaba el número $1000!$? (b) Demuestra que $1000!$ no es divisible por $2^{995}$, pero sí por $2^{994}$.  (Discusión)\n Ejercicio: Convierte $100!$ a base octal. ¿En cuántos ceros termina $100!$ en base octal? (Discusión)\n Ejercicio: ¿En cuántos ceros acaba $438_{(15}!$? (Discusión)\n Ejercicio:\n (a) ¿En cuántos ceros acaba $438_{(40}!$? (b) ¿En cuántos ceros acaba $(55555_{(6}!)^3$?  (Discusión)\n Ejercicio: Calcula el número de ceros en que acaba $(15348_{(16}!)^5$, con la condición de que debe operarse en base $16$, sin pasar a base decimal, hasta el final. (Discusión)\n IV. Criterios de divisibilidad  Ejercicio: (Galicia (2019)) Encuentra los criterios de divisibilidad por $4$ y por $13$. Aplica dichos criterios para determinar el mayor número de seis cifras divisible por $4$ y por $13$ simultáneamente. (Discusión)\n Ejercicio: Halla el criterio de divisibilidad por $5$ y por $10$ de un número en base $9$. ¿Es múltiplo de $5$ el número $213246_{(9}$? (Discusión)\n Ejercicio: Halla el criterio de divisibilidad por $5$ en base $12$ y aplícalo al número $12x75_{(12}$ para que sea divisible por $5$. (Discusión)\n Ejercicio: Halla el conjunto de los divisores del número $1001$. Sean $N = a_0 + a_1t + \\cdots + a_nt^n$ y $S = a_0 - a_1 + a_2 - \\cdots + (-1)^na_n$, donde $t=1000$ y $a_n$ es un número entero, para cada $n\\in\\mathbb{N}\\cup{0}$. Demuestra que $N\\equiv S\\pmod{1001}$. Deduce de ello un criterio de divisibilidad por $7$, por $11$ o por $13$, y aplícalo al número $312879645$. (Discusión)\n Ejercicio: Demuestra que\n (a) un número en base $7$ es par si, y solo si, la suma de sus cifras es par. (b) un número es divisible por $25$ si, y solo si, acaba en $00$, $25$, $50$ o $75$.  (Discusión)\n V. Divisibilidad  Ejercicio: Prueba que, si $n$ es un número natural, $3^{2 ^ n}+1$ es divisible por $2$, pero no por $4$. (Discusión)\n Ejercicio: Sean $a$, $b$, $c$ y $d$ números enteros cualesquiera. Prueba que\n$$ abcd(a^2 - b^2)(a^2 - c^2)(a^2 - d^2)(b^2 - c^2)(b^2 - d^2)(c^2 - d^2) $$\nes divisible por $7$. (Discusión)\n Ejercicio: Dado el número $123456789101112\\cdots100$, donde los números escritos son los naturales sin espacios, estudia si es múltiplo de $9$. (Discusión)\n Ejercicio:\n (a) Estudia, según los valores del número natural $n$, el resto de la división de $7^n$ entre $9$. (b) ¿Para qué valores de $n$ se cumple que $16^{3n} + 16^n - 2$ es múltiplo de $9$? (c) Permutando las cifras del número $1223334444555556666667777777$, ¿podrá obtenerse un cuadrado perfecto?  (Discusión)\n Ejercicio: Calcula el menor múltiplo de $23$ cuyas cifras son todas nueves. (Discusión)\n Ejercicio: Demuestra que, siendo $n$ un número entero, la expresión\n$$ \\frac{n^5 - 5n^3 + 4n}{n+2} $$\nsiempre es divisible por $24$. (Discusión)\n Ejercicio: Demuestra que, si el número natural $p=abc_{(10}$ es divisible por $37$, los números $bca_{(10}$ y $cab_{(10}$ son divisibles por $37$. (Discusión)\n Ejercicio: Demuestra que $n^5 - 5n^3 + 4n$ es múltiplo de $120$, para cada número natural $n$. (Discusión)\n Ejercicio: (Murcia (2002)) Demuestra que $A_n = 2903^n - 803^n - 464^n + 261^n$ es divisible por $1897$, para cada número natural $n$. (Discusión)\n Ejercicio: Halla los números enteros positivos $n$ tal que $n^4+2$ es divisible por $n+2$. (Discusión)\n VI. Divisores  Ejercicio: Halla el número $2^n 5^m$, con $n$ y $m$ números naturales, sabiendo que la suma de sus divisores es $961$. (Discusión)\n Ejercicio: Halla un número natural sabiendo que es múltiplo de $30$ y que la suma de sus $16$ divisores es $1440$. (Discusión)\n Ejercicio: Un número natural tiene dos factores primos y ocho divisores naturales, la suma de los cuales es $320$. Halla el número. (Discusión)\n Ejercicio: Halla el menor número entero $n$ que tiene $12$ divisores y solamente tres factores primos, cuya suma es $20$. (Discusión)\n Ejercicio: Halla un número con $15$ divisores tal que la suma de todos estos divisores sea igual a $1767$. (Discusión)\n Ejercicio: Un número natural $A$, descompuesto en producto de factores primos, es de la forma $A = a^x b^y c^z$. El número de divisores de $A$, $A^2$ y $A^3$ es, respectivamente, $60$, $315$ y $910$. El máximo común divisor de todos los posibles valores de $A$ es $900$. Hállalos. (Discusión)\n Ejercicio: Demuestra que un número es un cuadrado perfecto si, y solo si, tiene un número impar de divisores. (Discusión)\n VII. Cuadrados, cubos\u0026hellip;  Ejercicio: Halla los dígitos $A$, $B$ y $C$, en base $10$, que satisfacen $AA = \\sqrt{BBCC}$. (Discusión)\n Ejercicio: Halla un número de cuatro cifras tal que sea igual al cubo de la suma de sus cifras. (Discusión)\n Ejercicio: Encuentra los números de cuatro cifras, de la forma $abab$, que, disminuidos en una unidad, sean cuadrados perfectos. (Discusión)\n Ejercicio: Encuentra un número de cuatro cifras $abcd$ de manera que $abcd = 11(a+b+c+d)^2$. (Discusión)\n Ejercicio: Determina los números $n$ de tres cifras, divisibles por $11$, de manera que $n / 11$ es igual a la suma de los cuadrados de los dígitos de $n$. (Discusión)\n Ejercicio: Encuentra un número $abcd$, de $4$ cifras en base $12$, tal que es cuadrado perfecto y, además, los números $ab$ y $cd$ son consecutivos en base $12$. (Discusión)\n Ejercicio: Halla un número natural, cuadrado perfecto, tal que en base $7$ se escribe como $ab0cb$, siendo $a = c + 1$. (Discusión)\n Ejercicio: Demuestra que no es posible expresar $2019$ como suma de dos cuadrados perfectos. (Discusión)\n Ejercicio: Encuentra el menor número natural $n$ tal que $n / 2$ es cuadrado perfecto, $n / 3$ es cubo perfecto y $n / 7$ es potencia séptima perfecta. (Discusión)\n Ejercicio: Si $a=11\\cdots 11$ es un número con $2n$ dígitos y $b=22\\cdots 22$ es uno que posee $n$ dígitos, prueba que $a-b$ es un cuadrado perfecto. (Discusión)\n Ejercicio: Halla un número natural $n$ tal que su cuadrado tenga $202$ dígitos: los primeros $100$ (desde la izquierda) todos iguales a $1$, los siguientes $100$ todos iguales a $2$ y los dos últimos, desconocidos. Es decir, de la forma $111\\cdots111222\\cdots222xy$. (Discusión)\n Ejercicio: Se tienen los números $49$, $4489$, $444889$, $\\ldots$ obtenido cada uno intercalando $48$ en el centro del anterior. Demuestra que todos estos números son cuadrados perfectos y halla la raíz cuadrada del que consta de $2n$ cifras. (Discusión)\n Ejercicio: Determina todos los valores de $k$ para los cuales el número $11\\cdots 11$, compuesto por $k$ unos, es un cuadrado perfecto. (Discusión)\n VIII. Primalidad  Ejercicio: Encuentra diez números compuestos consecutivos. (Discusión)\n IX. Fermat y compañía  Ejercicio: Halla\n (a) el resto de dividir $4^{26} + 5^{28}$ entre $7$. (b) la última cifra de $8^{254}$. (c) el criterio de divisibilidad por $6$ en base $7$. ¿Es divisible $34500010_{(7}$ entre $6$?  (Discusión)\n Ejercicio: Halla el resto de dividir $2^{55}$ entre $7$. (Discusión)\n Ejercicio: Demuestra que $2222^{5555} + 5555^{2222}$ es múltiplo de $7$. (Discusión)\n Ejercicio: Halla todos los números naturales $n$ tales que $2^n + 3^n$ es un múltiplo de $7$. (Discusión)\n Ejercicio: Prueba que\n$$ A_k = 2^{2^{6k+2}}+3 $$\nes múltiplo de $19$, para todo número natural $k$. (Discusión)\n Ejercicio: Prueba que $(27 ^ 4) ^ 9 - (25 ^ 3) ^ 6$ es múltiplo de $37$. (Discusión)\n Ejercicio: Halla el resto de la división por $11$ de $37^{437}$. (Discusión)\n Ejercicio: Demuestra que $n^7 - n$ es múltiplo de $42$, para cada número natural $n$. (Discusión)\n Ejercicio: Halla el resto de dividir $13!$ entre $17$. (Discusión)\n Ejercicio: Halla el menor residuo positivo al dividir\n (a) $5^{500}$ entre $17$. (b) $12!$ entre $13$.  (Discusión)\n Ejercicio: Prueba que $437$ es divisor de\n (a) $16^{99} - 1$. (b) $18! + 1$.  (Discusión)\n Ejercicio: Calcula el resto cuando $90!$ se divide por $97$. (Discusión)\n Ejercicio: Calcula las dos últimas cifras de $3^{390}$. (Discusión)\n Ejercicio: Calcula las dos últimas cifras de $31^{263}$. (Discusión)\n Ejercicio: Para cada entero no negativo $n$, se considera\n$$ P(n) = \\frac{n^7}{7} + \\frac{n^3}{3} + \\frac{11n}{21}. $$\n (a) Demuestra que $3n^7 + 7n^3 + 11n = 0$ en $\\mathbb{Z}_3$ y en $\\mathbb{Z}_7$. (b) Demuestra que $P(n)$ es un número entero.  (Discusión)\n Ejercicio: Sea $p$ un número primo impar. Demuestra que\n (a) $(1^{p-1} + 2^{p-1} + \\cdots + (p-1)^{p-1})\\equiv (-1)\\pmod {p}$. (b) $(1^p + 2^p + \\cdots + (p-1)^p)\\equiv 0\\pmod{p}$.  (Discusión)\n Ejercicio: Dado un número primo $p\\geq 7$, prueba que el número $111\\cdots111$ (formado por $p-1$ unos) es divisible por $p$. (Discusión)\n Ejercicio: Demuestra que si $p$ es un número primo impar, se cumple que $p$ divide a $2^{p-1}-2$. (Discusión)\n Ejercicio: Sea $n$ un número natural y el conjunto de fracciones\n$$ A_n = \\left\\{\\frac{1}{n},\\frac{2}{n},\\ldots,\\frac{n}{n}\\right\\}. $$\nCalcula el número de fracciones irreducibles y la suma de estas.(Discusión)\n X. Teorema chino del resto  Ejercicio: Calcula el menor número natural $n$ tal que se cumpla que\n$$ \\begin{aligned} n\u0026amp;\\equiv 4\\pmod{5},\\\\ n\u0026amp;\\equiv 3\\pmod{7},\\\\ n\u0026amp;\\equiv 1\\pmod{9}. \\end{aligned} $$\n(Discusión)\n Ejercicio: Resuelve la ecuación en congruencias $7x\\equiv 6\\pmod{100}$. (Discusión)\n Ejercicio: ¿Existe algún entero positivo $x$ tal que cuando $x$ se divide entre 3, se obtiene un residuo igual a $2$; cuando $x$ se divide entre $5$, se obtiene de resto $4$; y cuando $x$ se divide entre $7$, el resto es igual a $6$? (Discusión)\n Ejercicio: Encuentra las soluciones del siguiente sistema de ecuaciones en congruencias lineales:\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{5},\\\\ x\u0026amp;\\equiv 4\\pmod{7},\\\\ x\u0026amp;\\equiv 6\\pmod{9}. \\end{aligned} $$\n(Discusión)\n Ejercicio: Determina el entero positivo más pequeño que deja de resto $1$, $2$, $3$ y $4$ cuando se divide, respectivamente, por $2$, $3$, $5$ y $11$. (Discusión)\n Ejercicio: El matemático y poeta chino Sun Tsu planteó, hace alrededor de $1800$ años, el siguiente problema: \u0026lsquo;\u0026lsquo;Tengo un conjunto de objetos. Cuando los cuanto de tres en tres, me sobran dos; cuando los cuento de cinco en cinco, me sobran tres; y cuando los cuento de siete en siete, me sobran dos. ¿Cuántos objetos poseo?''. (Discusión)\n Ejercicio: Resuelve la ecuación en congruencias $91x\\equiv 419\\pmod{440}$. (Discusión)\n Ejercicio: Resuelve la ecuación en congruencias $3x\\equiv 11\\pmod{2275}$. (Discusión)\n Ejercicio: Una mujer tiene un cesto de manzanas. Haciendo grupos de $3$ sobran $2$ y haciendo grupos de $4$ sobran $3$. Halla el número de manzanas que contiene el cesto sabiendo que están entre $100$ y $110$. (Discusión)\n Ejercicio: A una isla llegan $17$ piratas para repartirse un botín que consiste en un saco con más de $100$ monedas de oro. Efectuado el reparto equitativo, sobra una moneda. Con el objetivo de que no sobre ninguna, los piratas deciden matar a uno de ellos y efectuar nuevamente el reparto equitativo, pero vuelve a sobrar una moneda.\n (a) ¿Cuál es el número mínimo de monedas que contiene el saco? (b) Conocido dicho número mínimo, ¿cuántos piratas morirán hasta que, efectuado el reparto equitativo, no sobre ninguna moneda?  (Discusión)\n ","date":1569193201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573858801,"objectID":"175401283ccb0d975f3a653b25791a03","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista04-enteros/","publishdate":"2019-09-23T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista04-enteros/","section":"courses","summary":"I. Congruencias  Ejercicio: Determina todos los números naturales $m$ tales que $1066\\equiv 1776\\pmod{m}$. (Discusión)\n Ejercicio: Demuestra que $4^n \\equiv(1+3n)\\pmod{9}$, para cada número natural $n$. (Discusión)\n Ejercicio: Dado $(1! + 2! + \\cdots + 100!)\\pmod{45}$, encuentra el menor resto no negativo. (Discusión)\n Ejercicio: Sea $n$ un número natural y $A_n = 2^n + 2^{2n} + 2^{3n}$.\n (a) Demuestra que $A_{n+3}\\equiv A_n\\pmod{2}$. (b) ¿Para qué valores de $n$ es $A_n$ múltiplo de $7$?","tags":null,"title":"Números enteros","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Los tipos de datos disponibles en Python son:\n Numéricos  Enteros (int) Coma flotante (float) Complejos   Textos Booleanos  True False    Los principales operadores en Python son:\n Aritméticos: +, -, *, /, %, ** y //. Comparación: ==, !=, \u0026gt;, \u0026lt;, \u0026gt;= y \u0026lt;=. Lógicos: AND, OR y NOT. Asignación: =, +=, -=, *=, /=, %=, **= y //=. Especiales: is, is not, in y not in.  Los operadores aritméticos nos permiten utilizar Python a modo de calculadora.\n\u0026gt;\u0026gt;\u0026gt; 5 + 6 # Suma\r11\r\u0026gt;\u0026gt;\u0026gt; 11 - 8 # Resta\r3\r\u0026gt;\u0026gt;\u0026gt; 2 * 6 # Multiplicación\r12\r\u0026gt;\u0026gt;\u0026gt; 7 / 2 # División\r3.5\r\u0026gt;\u0026gt;\u0026gt; 10 % 3 # Módulo\r1\r\u0026gt;\u0026gt;\u0026gt; 5 ** 2 # Exponenciación\r25\r\u0026gt;\u0026gt;\u0026gt; 7 // 2 # División entera\r3\r Una variable es un espacio en la memoria del ordenador donde se almacenará un valor que podrá cambiar durante la ejecución del programa. Para declararla, utilizamos el patrón nombre = valor y su tipo lo establece el contenido, no el contenedor.\nNota: en Python todo son objetos (variables, números\u0026hellip;).\n\u0026gt;\u0026gt;\u0026gt; nombre = 5\r\u0026gt;\u0026gt;\u0026gt; type(nombre)\r\u0026lt;class 'int'\u0026gt;\r\u0026gt;\u0026gt;\u0026gt; nombre = \u0026quot;Alexis\u0026quot;\r\u0026gt;\u0026gt;\u0026gt; type(nombre)\r\u0026lt;class 'str'\u0026gt;\r\u0026gt;\u0026gt;\u0026gt; nombre = 5.2\r\u0026gt;\u0026gt;\u0026gt; type(nombre)\r\u0026lt;class 'float'\u0026gt;\r Definimos cadenas de texto mediante los símbolos ', \u0026quot; y ''', permitiendo esta última opción saltos de líneas.\n\u0026gt;\u0026gt;\u0026gt; mensaje = 'Esto es un mensaje.'\r\u0026gt;\u0026gt;\u0026gt; print(mensaje)\rEsto es un mensaje.\r\u0026gt;\u0026gt;\u0026gt; mensaje = \u0026quot;Esto es un mensaje.\u0026quot;\r\u0026gt;\u0026gt;\u0026gt; print(mensaje)\rEsto es un mensaje.\r\u0026gt;\u0026gt;\u0026gt; mensaje = '''Esto es un mensaje\r... con tres saltos\r... de línea.'''\r\u0026gt;\u0026gt;\u0026gt; print(mensaje)\rEsto es un mensaje\rcon tres saltos\rde línea.\r Los operadores de comparación suelen aparecer en bloques condicionales.\n\u0026gt;\u0026gt;\u0026gt; numero1 = 5\r\u0026gt;\u0026gt;\u0026gt; numero2 = 7\r\u0026gt;\u0026gt;\u0026gt; if numero1 \u0026gt; numero2:\r... print(\u0026quot;El número 1 es mayor.\u0026quot;)\r... else:\r... print(\u0026quot;El número 2 es mayor.\u0026quot;)\r... El número 2 es mayor.\r Nota: no confundir el operador de asignación = con el operador de comparación ==.\n\u0026gt;\u0026gt;\u0026gt; numero1 = 2\r\u0026gt;\u0026gt;\u0026gt; numero2 = 3\r\u0026gt;\u0026gt;\u0026gt; if numero1 == numero2:\r... print(\u0026quot;Los números son iguales.\u0026quot;)\r... else:\r... print(\u0026quot;Los números son diferentes.\u0026quot;)\r... Los números son diferentes.\r ","date":1556492461,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556492461,"objectID":"785d878eefbf97545aa14680b069da04","permalink":"https://imalexissaez.github.io/courses/python-basic/pb04-tipos-y-variables/","publishdate":"2019-04-29T00:01:01+01:00","relpermalink":"/courses/python-basic/pb04-tipos-y-variables/","section":"courses","summary":"Vídeo   Notas personales Los tipos de datos disponibles en Python son:\n Numéricos  Enteros (int) Coma flotante (float) Complejos   Textos Booleanos  True False    Los principales operadores en Python son:\n Aritméticos: +, -, *, /, %, ** y //. Comparación: ==, !=, \u0026gt;, \u0026lt;, \u0026gt;= y \u0026lt;=. Lógicos: AND, OR y NOT. Asignación: =, +=, -=, *=, /=, %=, **= y //=.","tags":null,"title":"4. Tipos, operadores y variables","type":"docs"},{"authors":null,"categories":null,"content":"I. Progresiones aritméticas  Ejercicio: (Comunidad Valenciana (2016)) Con un solo corte recto puedes dividir un pastel circular en dos partes. Un segundo corte, que atraviese al primero, producirá probablemente cuatro partes, y un tercer corte puede llegar a producir siete partes. ¿Cuál es el mayor número de trozos que puedes lograr con seis cortes rectos? ¿Y, en general, cuántos pedazos de tarta se obtienen con $n$ cortes? (Discusión)\n Ejercicio: Halla la suma de todas las fracciones irreducibles de denominador $3$ comprendidas entre $3$ y $6$. Generaliza el resultado para la suma de todas las fracciones irreducibles de denominador $3$ comprendidas entre los enteros $m$ y $n$, con $m \u0026lt; n$. (Discusión)\n ","date":1571007601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574031601,"objectID":"ac5435de6c1d28184324f7f46bd32582","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista08-sucesiones/","publishdate":"2019-10-14T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista08-sucesiones/","section":"courses","summary":"I. Progresiones aritméticas  Ejercicio: (Comunidad Valenciana (2016)) Con un solo corte recto puedes dividir un pastel circular en dos partes. Un segundo corte, que atraviese al primero, producirá probablemente cuatro partes, y un tercer corte puede llegar a producir siete partes. ¿Cuál es el mayor número de trozos que puedes lograr con seis cortes rectos? ¿Y, en general, cuántos pedazos de tarta se obtienen con $n$ cortes? (Discusión)\n Ejercicio: Halla la suma de todas las fracciones irreducibles de denominador $3$ comprendidas entre $3$ y $6$.","tags":null,"title":"Sucesiones","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una función es un conjunto de líneas de código agrupadas, que funcionan como una unidad realizando una tarea específica. Puede devolver valores, tener parámetros o argumentos y recibe el nombre de método cuando está definida dentro de una clase.\nEn Python existen funciones predifinidas, como por ejemplo print(). Su principal utilidad es la reutilización de código y su sintaxis es:\ndef nombre(parámetros):\rinstrucciones de la función\rreturn(opcional)\r Ejecutamos (o llamamos) una función tecleando nombre_función(parámetros).\nA continuación, dejamos de lado el IDLE de Sublime Text 3 y pasamos a compilar directamente ficheros desde el propio editor. Para ello, desplegamos el menú Tools y en el apartado Build System escogemos la opción Python. Acto seguido, creamos el fichero funciones.py, que contendrá la instrucción\nprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\r y utilizamos la combinación de teclas ctrl + b para compilar. En la parte inferior de la ventana aparecerá el resultado de la ejecución y el tiempo invertido.\nAmpliemos el anterior fichero a\nprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\r e imaginemos que necesitamos que las anteriores tres líneas se impriman cinco veces. Podemos, simplemente, copiar y pegar el anterior bloque de código reiteradamente:\nprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\r Las funciones nos permiten reutilizar código para, precisamente, evitar que actuemos como arriba. Definamos una función llamada mensaje() y ejecutémosla tantas veces como deseemos.\ndef mensaje():\rprint(\u0026quot;Estamos aprendiendo Python.\u0026quot;)\rprint(\u0026quot;Estamos aprendiendo instrucciones básicas.\u0026quot;)\rprint(\u0026quot;Poco a poco iremos avanzando.\u0026quot;)\r Ahora, la tarea que buscábamos realizar quedaría como:\nmensaje()\rmensaje()\rmensaje()\rmensaje()\rmensaje()\r Entre distintas llamadas a una función puede haber cualquier otro tipo de instrucción:\nmensaje()\rprint(\u0026quot;Ejecutando código fuera de función\u0026quot;)\rmensaje()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/05/ del repositorio.\n","date":1556492462,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556492462,"objectID":"adf21b06926feb2635a43785e2389b83","permalink":"https://imalexissaez.github.io/courses/python-basic/pb05-funciones-i/","publishdate":"2019-04-29T00:01:02+01:00","relpermalink":"/courses/python-basic/pb05-funciones-i/","section":"courses","summary":"Vídeo   Notas personales Una función es un conjunto de líneas de código agrupadas, que funcionan como una unidad realizando una tarea específica. Puede devolver valores, tener parámetros o argumentos y recibe el nombre de método cuando está definida dentro de una clase.\nEn Python existen funciones predifinidas, como por ejemplo print(). Su principal utilidad es la reutilización de código y su sintaxis es:\ndef nombre(parámetros):\rinstrucciones de la función\rreturn(opcional)\r Ejecutamos (o llamamos) una función tecleando nombre_función(parámetros).","tags":null,"title":"5. Funciones I","type":"docs"},{"authors":null,"categories":null,"content":"I. Cuadráticas, cúbicas\u0026hellip;  Ejercicio: Demuestra que $\\sqrt[3]{45 + 29\\sqrt{2}} + \\sqrt[3]{45 - 29\\sqrt{2}}$ es un número entero. (Discusión)\n ","date":1574031601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574031601,"objectID":"1d616383e636e3937a25449c832727c7","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista14-ecuaciones/","publishdate":"2019-11-18T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista14-ecuaciones/","section":"courses","summary":"I. Cuadráticas, cúbicas\u0026hellip;  Ejercicio: Demuestra que $\\sqrt[3]{45 + 29\\sqrt{2}} + \\sqrt[3]{45 - 29\\sqrt{2}}$ es un número entero. (Discusión)\n ","tags":null,"title":"Ecuaciones","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Comencemos definiendo una función que suma dos números dados (5 y 7), mediante el mecanismo aprendido en la lección anterior:\ndef suma():\rnum1 = 5\rnum2 = 7\rprint(num1 + num2)\rsuma()\r Podemos reutilizar tantas veces como queramos la función suma(). No obstante, su utilidad así declarada es bastante limitada. Nos gustaría que no siempre sumara los dos mismos valores, sino aquellos que nos interesen en cada llamada. Para ello emplearemos los parámetros o argumentos.\nNota: aunque el autor del curso se refiere a los términos \u0026lsquo;\u0026lsquo;parámetros\u0026rsquo;\u0026rsquo; y \u0026lsquo;\u0026lsquo;argumentos\u0026rsquo;\u0026rsquo; casi como si fueran sinónimos, en realidad hay un sutil matiz que los diferencia: los parámetros son las variables que aparecen en la definición de una función o método; cuando se produce la llamada a dicha función, los argumentos son los datos que pasamos a los parámetros de la mencionada función.\nDefinamos de nuevo la función suma(), ahora con dos parámetros, con el objetivo de que realice la suma de dos números que pasaremos como argumentos:\ndef suma(num1, num2):\rprint(num1 + num2)\rsuma(5, 7) # 12\rsuma(2, 3) # 5\rsuma(35, 358) # 393\r Tal y como está declarada la nueva función de suma, obligatoriamente hemos de pasarle dos argumentos o sino aparecerán errores.\nsuma(7)\r# TypeError: suma() missing 1 required positional argument: 'num2'\r suma(1, 2, 3)\r# TypeError: suma() takes 2 positional arguments but 3 were given\r Puede resultar conveniente, por legibilidad, pasar los argumentos a una función utilizando el esquema parámetro=valor.\nsuma(num1=5, num2=7) # 12\r Además, las funciones\n pueden poseer parámetros de diferentes tipos y devuelven valores siempre y cuando empleemos la instrucción return.  def suma(num1, num2):\rresultado = num1 + num2\rreturn resultado\rsuma(5, 7)\r La ejecución del anterior bloque de código no muestra resultado alguno en la consola. La función devuelve el resultado, pero no lo hemos imprimido. Así,\nprint(suma(5, 7)) # 12\r Una ventaja de utilizar la instrucción return reside en que podemos almacenar los valores que devuelve una función en variables y trabajar posteriormente con ellas.\nalmacena_resultado = suma(5, 8)\rprint(almacena_resultado) # 13\ractualiza_resultado = suma(almacena_resultado, 8)\rprint(actualiza_resultado) # 13 + 8 = 21\r Nota técnica: Python pasa siempre los valores por referencia, no por valor.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/06/ del repositorio.\n","date":1556492463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556492463,"objectID":"e68611d6d57f5e4b50c263c05fc010f1","permalink":"https://imalexissaez.github.io/courses/python-basic/pb06-funciones-ii/","publishdate":"2019-04-29T00:01:03+01:00","relpermalink":"/courses/python-basic/pb06-funciones-ii/","section":"courses","summary":"Vídeo   Notas personales Comencemos definiendo una función que suma dos números dados (5 y 7), mediante el mecanismo aprendido en la lección anterior:\ndef suma():\rnum1 = 5\rnum2 = 7\rprint(num1 + num2)\rsuma()\r Podemos reutilizar tantas veces como queramos la función suma(). No obstante, su utilidad así declarada es bastante limitada. Nos gustaría que no siempre sumara los dos mismos valores, sino aquellos que nos interesen en cada llamada.","tags":null,"title":"6. Funciones II","type":"docs"},{"authors":null,"categories":null,"content":"I. Dos variables  Ejercicio:\n (a) ¿Se puede llenar un depósito de $25$ litros, de manera exacta, con garrafas de $6$ y $8$ litros? (b) Halla las soluciones enteras de la ecuación $14x + 21y = 777$.  (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $79x + 23y = 5$. (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $14x + 10y = 4$. (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $16x + 26y = 14$. (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $525x + 100y = 50$. (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $1027x + 712y = 1$. (Discusión)\n Ejercicio: Estudia cuál de estas ecuaciones diofánticas tiene solución y, en caso afirmativo, calcúlala:\n (a) $25x + 36y = 10$. (b) $200x + 1768y = 8$. (c) $40x + 50y = 3$. (d) $213x + 1123y = 18$. (e) $14x + 165y = 1$.  (Discusión)\n Ejercicio: Halla la expresión general de las raíces enteras de la ecuación $37x - 13y = 8$. (Discusión)\n Ejercicio: Sea $c$ un número entero positivo tal que $10\\leq c\\leq 100$. ¿Cuál es el valor mínimo de $c$ para el cual la ecuación $84x + 990y = c$ admite soluciones enteras? (Discusión)\n Ejercicio: Halla el menor número natural $m$ de manera que la ecuación $533x + 299y = 20000 + m$ tenga soluciones enteras y calcúlalas. (Discusión)\n Ejercicio: Halla\n (a) el menor entero positivo $a$ tal que la ecuación $1001x + 770y = 10^6 + a$ admite soluciones naturales. (b) para dicho valor de $a$, determina las soluciones naturales de dicha ecuación.  (Discusión)\n Ejercicio: Se dispone de un gran suministro de agua, un gran cubo con desagüe y dos garrafas que contienen $7$ y $9$ litros. ¿Cómo podría ponerse un litro de agua en el cubo? (Discusión)\n Ejercicio: Un hombre compra caballos y vacas, pagando $1770$ euros. Una vaca cuesta $21$ euros y un caballo $31$ euros, ¿cuántos caballos y vacas ha comprado? (Discusión)\n Ejercicio: Para abonar una factura de $1840$ pesetas, se entregan libras esterlinas y dan la vuelta en marcos. Calcula las libras esterlinas entregadas y los marcos devueltos, suponiendo que se ha entregado la cantidad mínima de libras necesarias para pagar y que la devolución sea en marcos ($1$ marco $=70$ pesetas, $1$ libra esterlina $=180$ pesetas). (Discusión)\n Ejercicio: Se compran manzanas y naranjas. En total, $12$ piezas de fruta, que cuestan $1.32$ euros. Si una manzana vale $3$ céntimos más que una naranja y hay más manzanas que naranjas, ¿cuántas piezas de cada fruta se han comprado? (Discusión)\n Ejercicio: Una persona va a un supermercado y compra $12$ litros de leche, unos de leche entera y otros de desnatada, por $1200$ pesetas. Si la leche entera vale $30$ pesetas más por litro que la desnatada y ha comprado el mínimo posible de leche desnatada, ¿cuántos litros habrá comprado de cada una? (Discusión)\n Ejercicio: Los lados de un rectángulo vienen dados por números naturales. ¿Cuál será la longitud de dichos lados para que el perímetro y la superficie de dicha figura se expresen con el mismo número? (Discusión)\n Ejercicio: Determina las dimensiones de un rectángulo sabiendo que sus lados miden un número entero de centímetros, pero no un número entero de palmos; y que su área, expresada en palmos cuadrados, es igual a su perímetro, expresado en palmos lineales. Considera que un palmo equivale a $20$ centímetros. (Discusión)\n Ejercicio: (Extremadura (2018)) En su último viaje a Estados Unidos, el señor Martínez cambió un cheque de viaje. El cajero, al pagarle, confundió el número de dólares con el de centavos y viceversa. El señor Martínez gastó $68$ centavos en sellos y comprobó que el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado. ¿Qué valor mínimo tenía el cheque de viaje? (Discusión)\n Ejercicio: (Galicia (2018)) Una persona ha comprado entradas para el cine para personas adultas por un precio de $640$ u. m. cada una y para menores de edad a $330$ u. m. Sabiendo que invirtió $7140$ u. m. y que compró menos entradas de adultos que de menores, halla el número de entradas que adquirió. (Discusión)\n Ejercicio: Halla un número de seis cifras que es igual a las seis últimas cifras de su cuadrado. (Discusión)\n II. Tres o más variables  Ejercicio: Halla las soluciones enteras de las ecuaciones diofánticas\n (a) $6x + 8y + 14z = 22$. (b) $6x + 10y + 15z = 31$.  (Discusión)\n Ejercicio: Encuentra todas las soluciones enteras positivas de la ecuación $43x + 7y + 17z = 400$. (Discusión)\n Ejercicio: Un granjero compró vacas, cerdos y pollos. En total, $100$ animales por $100$ euros. Hay al menos uno de cada. Si una vaca cuesta $10$ euros, un cerdo $3$ euros y un pollo $0.50$ euros, ¿cuántos animales de cada clase compró? (Discusión)\n Ejercicio: En una tienda de animales los loros cuestan $5$ euros, los periquitos $3$ euros cada uno y los canarios $10$ céntimos cada uno. Compramos $100$ animales y pagamos $100$ euros. ¿Cuántos compramos de cada clase? (Discusión)\n Ejercicio: Resuelve, en los números naturales, el siguiente sistema, demostrando que tiene una única solución:\n$$ \\begin{aligned} x + y + z + p + t \u0026amp;= 25,\\\\ y - 2z - p \u0026amp;= 0,\\\\ x - t \u0026amp;= 1,\\\\ -x + y + z \u0026amp;= 0. \\end{aligned} $$\n(Discusión)\n III. Cuadráticas  Ejercicio: Halla las soluciones naturales de las ecuaciones\n (a) $x^2 - y^2 = 46$. (b) $x^2 - y^2 = 36$.  (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $x^2 - y^2 = 24$. (Discusión)\n Ejercicio: Encuentra todas las soluciones naturales de la ecuación $x^2 - y^2 = 252$. (Discusión)\n Ejercicio: Halla soluciones enteras no triviales para la ecuación $x^2 - 7y^2 = 1$. (Discusión)\n Ejercicio: Halla soluciones enteras no triviales para la ecuación $x^2 - 3y^2 = 1$. (Discusión)\n Ejercicio: Halla las soluciones enteras no triviales para la ecuación $x^2 - 15y^2 = 1$. (Discusión)\n Ejercicio: Prueba que $3$, $4$ y $5$ es la única solución de $x^2 + y^2 = z^2$ en enteros positivos consecutivos. (Discusión)\n Ejercicio: Halla dos números enteros tales que la suma de sus cuadrados es el doble de su suma. (Discusión)\n Ejercicio: ¿Qué cuadrado de cinco cifras, al quitarle una unidad, se puede descomponer en suma de cinco cuadrados idénticos? (Discusión)\n Ejercicio: Halla los números naturales $n$ de manera que se cumpla que $1+2+\\cdots+n = k^2$, con $k$ número natural. (Discusión)\n Ejercicio: ¿Cuál es el menor triángulo cuyos lados son números enteros consecutivos y su área es múltiplo de $20$? (Discusión)\n Ejercicio: Halla todos los triángulos cuyos lados son tres números enteros consecutivos y su área es asimismo un número entero. (Discusión)\n Ejercicio: Prueba que existen cuadrados de la forma $1 + 2 ^ {x^2} + 2 ^ {y^2}$. (Discusión)\n Ejercicio: Sean $a$, $b$ y $c$ números naturales distintos.\n (a) Halla un conjunto infinito de soluciones de la ecuación $a^2 + b^2 + c^2 = 2c(a + b)$. (b) Demuestra que, si $a\u0026lt;b\u0026lt;c$, la ecuación $a^3 - c^3 + b^3 = 3b(a - c)(a + c - b)$ no tiene solución.  (Discusión)\n IV. Polinómicas  Ejercicio: Halla las soluciones enteras de las ecuaciones diofánticas:\n (a) $2x^2 + x - 3y = 7$. (b) $x^2 + x + 2y = 3$. (c) $x^2 + x + 3y = 2$.  (Discusión)\n ","date":1572562801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575586801,"objectID":"a8fcf27d5c30f90b526ad0068ca55d5c","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista15-diofanticas/","publishdate":"2019-11-01T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista15-diofanticas/","section":"courses","summary":"I. Dos variables  Ejercicio:\n (a) ¿Se puede llenar un depósito de $25$ litros, de manera exacta, con garrafas de $6$ y $8$ litros? (b) Halla las soluciones enteras de la ecuación $14x + 21y = 777$.  (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $79x + 23y = 5$. (Discusión)\n Ejercicio: Halla las soluciones enteras de la ecuación $14x + 10y = 4$. (Discusión)","tags":null,"title":"Ecuaciones diofánticas","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una lista es una estructura de datos que nos permite almacenar gran cantidad de valores. En Python, estos pueden añadirse de manera dinámica y ser de diferentes tipos.\nSu sintaxis es nombre = [elem1, elem2, elem3...] y los elementos están localizados mediante un índice, que en Python comienza por 0.\nA continuación, creemos una lista con cuatro elementos de tipo texto y veamos cómo imprimirla y acceder a elementos concretos de ella:\nmi_lista = [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;, \u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;]\rprint(mi_lista) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;, \u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;]\rprint(mi_lista[:]) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;, \u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;]\rprint(mi_lista[2]) # Marta\rprint(mi_lista[0]) # María\r Si empleamos índices que superan el rango de elementos de una lista, Python nos arroja un error:\nprint(mi_lista[4])\r# IndexError: list index out of range\r No obstante, sí es posible utilizar índices con valor negativo, que nos permiten acceder (empezando por -1) a los elementos de una lista desde la derecha:\nprint(mi_lista[-1]) # Antonio\rprint(mi_lista[-3]) # Pepe\r Obviamente, esta estrategia también está limitada por el número de elementos de la lista y no podemos pasar índices negativos fuera de su correspondiente rango:\nprint(mi_lista[-5])\r# IndexError: list index out of range\r Además, podemos acceder a porciones de una lista, mediante la sintaxis nombre[a:b], que extrae todos los elementos comprendidos entre los índices a y el anterior a b. Por ejemplo:\nprint(mi_lista[0:2]) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;]\rprint(mi_lista[0:1]) # [\u0026quot;María\u0026quot;]\rprint(mi_lista[-3:-1]) # [\u0026quot;Pepe\u0026quot;, \u0026quot;Marta\u0026quot;]\r Se pueden omitir algunos de los anteriores índices indicados y Python sobreentiende que comienza o acaba en el extremo correspondiente:\nprint(mi_lista[:2]) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;]\rprint(mi_lista[2:]) # [\u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;]\rprint(mi_lista[-2:]) # [\u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;]\r Nota técnica: cuando accedemos a una porción, se conserva el tipo lista, pero no así si se extrae un único elemento en particular.\nprint(type(mi_lista[2])) # \u0026lt;class 'str'\u0026gt;\rprint(type(mi_lista[2:3])) # \u0026lt;class 'list'\u0026gt;\r Agregamos elementos al final de la lista utilizando .append():\nmi_lista.append(\u0026quot;Sandra\u0026quot;)\rprint(mi_lista) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;, \u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;, \u0026quot;Sandra\u0026quot;]\r Usaremos .insert(posición, elemento), si buscamos añadir un elemento en un punto intermedio:\nmi_lista.insert(2, \u0026quot;Paco\u0026quot;)\rprint(mi_lista) # [\u0026quot;María\u0026quot;, \u0026quot;Pepe\u0026quot;, \u0026quot;Paco\u0026quot;, \u0026quot;Marta\u0026quot;, \u0026quot;Antonio\u0026quot;, \u0026quot;Sandra\u0026quot;]\r Es posible agregar varios elementos al final de una lista utilizando .extend() y pasando como argumento otra lista:\nmi_compra = [\u0026quot;Manzanas\u0026quot;]\rprint(mi_compra) # [\u0026quot;Manzanas\u0026quot;]\rmi_compra.extend([\u0026quot;Aguacates\u0026quot;, \u0026quot;Sandía\u0026quot;])\rprint(mi_compra) # [\u0026quot;Manzanas\u0026quot;, \u0026quot;Aguacates\u0026quot;, \u0026quot;Sandía\u0026quot;]\r Para acceder al índice de un elemento, empleamos .index(elemento):\nprint(mi_lista.index(\u0026quot;Antonio\u0026quot;)) # 4\rprint(mi_compra.index(\u0026quot;Sandía\u0026quot;)) # 2\r Si intentamos acceder al índice de elementos que no están incluidos en la lista, Python arroja un error:\nprint(mi_compra.index(\u0026quot;Melón\u0026quot;))\r# ValueError: 'Melón' is not in list\r En una lista, puede haber elementos iguales en posiciones distintas. La función .index() nos devolverá el valor del índice del primer elemento repetido:\nmi_compra.extend(mi_compra)\rprint(mi_compra) # [\u0026quot;Manzanas\u0026quot;, \u0026quot;Aguacates\u0026quot;, \u0026quot;Sandía\u0026quot;, \u0026quot;Manzanas\u0026quot;, \u0026quot;Aguacates\u0026quot;, \u0026quot;Sandía\u0026quot;]\rprint(mi_compra.index(\u0026quot;Manzanas\u0026quot;)) # 0\r Para comprobar si un elemento se encuentra o no en una lista, utilizamos in:\nprint(\u0026quot;Pepe\u0026quot; in mi_lista) # True\rprint(\u0026quot;Ana\u0026quot; in mi_lista) # False\r Tal y como mencionamos arriba, una lista puede almacenar sin problemas elementos de diferentes tipos:\nmezcla = [\u0026quot;Alexis\u0026quot;, True, 10, 3.14]\rprint(mezcla) # [\u0026quot;Alexis\u0026quot;, True, 10, 3.14]\r Para eliminar elementos, usamos .remove():\nmezcla.remove(True)\rprint(mezcla) # [\u0026quot;Alexis\u0026quot;, 10, 3.14]\r En particular, podemos suprimir el último elemento de una lista mediante .pop():\nmezcla.pop()\rprint(mezcla) # [\u0026quot;Alexis\u0026quot;, 10]\r El operador + concatena listas:\nlista1 = [\u0026quot;Ana\u0026quot;, 5]\rlista2 = [True, 2.1]\rlista3 = lista1 + lista2\rprint(lista3) # [\u0026quot;Ana\u0026quot;, 5, True, 2.1]\r El operador * repite la lista un número determinado de veces.\nprint(lista1 * 2) # [\u0026quot;Ana\u0026quot;, 5, \u0026quot;Ana\u0026quot;, 5]\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/07/ del repositorio.\n","date":1556492464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556492464,"objectID":"caf31990a50c262f3c18e56903bb4959","permalink":"https://imalexissaez.github.io/courses/python-basic/pb07-listas/","publishdate":"2019-04-29T00:01:04+01:00","relpermalink":"/courses/python-basic/pb07-listas/","section":"courses","summary":"Vídeo   Notas personales Una lista es una estructura de datos que nos permite almacenar gran cantidad de valores. En Python, estos pueden añadirse de manera dinámica y ser de diferentes tipos.\nSu sintaxis es nombre = [elem1, elem2, elem3...] y los elementos están localizados mediante un índice, que en Python comienza por 0.\nA continuación, creemos una lista con cuatro elementos de tipo texto y veamos cómo imprimirla y acceder a elementos concretos de ella:","tags":null,"title":"7. Listas","type":"docs"},{"authors":null,"categories":null,"content":"I. Potencias  Ejercicio: Dada la matriz\n$$ \\begin{aligned} A = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}. \\end{aligned} $$\n (a) Halla las sucesivas potencias de $A$. (b) Si $B = I + A$, expresa $B^n$ en función de $I$, $A$ y $A^2$. (c) Demuestra que la inversa de $B$ es $I - A + A^2$. (d) Expresa $B^{-n}$ en función de $I$, $A$ y $A^2$.  (Discusión)\n ","date":1575586801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575586801,"objectID":"62eb3227ba58ff80cced646b58fda092","permalink":"https://imalexissaez.github.io/courses/enunciados/p1-lista18-matrices/","publishdate":"2019-12-06T00:00:01+01:00","relpermalink":"/courses/enunciados/p1-lista18-matrices/","section":"courses","summary":"I. Potencias  Ejercicio: Dada la matriz\n$$ \\begin{aligned} A = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0\\\\ 2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}. \\end{aligned} $$\n (a) Halla las sucesivas potencias de $A$. (b) Si $B = I + A$, expresa $B^n$ en función de $I$, $A$ y $A^2$. (c) Demuestra que la inversa de $B$ es $I - A + A^2$.","tags":null,"title":"Matrices","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una tupla es una lista inmutable que\n no permite añadir, eliminar, mover elementos\u0026hellip; permite la extracción de porciones, que continuan siendo tuplas, y posibilita búsquedas de índice (.index()) y comprobaciones de si un elemento pertenece o no a ella (in).  Son útiles porque\n son más rápidas en cuanto a ejecución se refiere, requieren menos espacio (mayor optimización), formatean cadenas de texto, y pueden utilizarse como claves en un diccionario, a diferencia de las listas.  Su sintaxis es nombre = (elem1, elem2, elem3...), siendo el uso de los paréntesis opcional aunque recomendable. El acceso a los elementos funciona como en las listas.\nmi_tupla = (\u0026quot;Alexis\u0026quot;, 10, 1, 1995)\rprint(mi_tupla) # (\u0026quot;Alexis\u0026quot;, 10, 1, 1995)\rprint(mi_tupla[1]) # 10\rprint(mi_tupla[-1]) # 1995\r Existen funciones que nos permiten convertir tuplas en listas (list()) y viceversa (tuple()):\nmi_lista = list(mi_tupla)\rprint(mi_lista) # [\u0026quot;Alexis\u0026quot;, 10, 1, 1995]\rmi_tupla = tuple(mi_lista)\rprint(mi_tupla) # (\u0026quot;Alexis\u0026quot;, 10, 1, 1995)\r Comprobamos la pertenencia de un elemento a la tupla mediante in:\nprint(\u0026quot;Alexis\u0026quot; in mi_tupla) # True\rprint(3.14 in mi_tupla) # False\r Con .count() obtenemos el número de elementos que se encuentran dentro de una tupla:\nmi_tupla = (\u0026quot;Alexis\u0026quot;, 1, 2, 2, True, 2, \u0026quot;Alexis\u0026quot;)\rprint(mi_tupla.count(\u0026quot;Alexis\u0026quot;)) # 2\rprint(mi_tupla.count(1)) # 2 (True cuenta como 1)\rprint(mi_tupla.count(2)) # 3\r El método len nos permite hallar la longitud de una tupla, siendo el índice del último elemento igual a len - 1:\nprint(len(mi_tupla)) # 7\rprint(mi_tupla[len(mi_tupla) - 1]) # \u0026quot;Alexis\u0026quot;\r Podemos crear tuplas unitarias siguiendo el patrón nombre = (elem,):\nmi_tupla = (\u0026quot;Alexis\u0026quot;,)\rprint(type(mi_tupla)) # \u0026lt;class 'tuple'\u0026gt;\rprint(len(mi_tupla)) # 1\r Como mencionamos, los paréntesis son opcionales:\nmi_tupla = \u0026quot;Alexis\u0026quot;, 3.14, True, 10\rprint(type(mi_tupla)) # \u0026lt;class 'tuple'\u0026gt;\rprint(mi_tupla) # (\u0026quot;Alexis\u0026quot;, 3.14, True, 10)\r Esta sintaxis se conoce como empaquetado de tupla y hemos de ser cautos, pues en un futuro, al combinarla con el uso de funciones, puede dar lugar a confusiones.\nEl proceso inverso, desempaquetado de tuplas, nos permite asignar los elementos de una tupla a diferentes variables:\nmi_tupla = (\u0026quot;Alexis\u0026quot;, 3.14, True, 10)\rnombre, pi, alto, mes = mi_tupla\rprint(nombre) # Alexis\rprint(pi) # 3.14\rprint(alto) # True\rprint(mes) # 10\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/08/ del repositorio.\n","date":1556578860,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556578860,"objectID":"091a302c4523167a0fc34839b531d8fe","permalink":"https://imalexissaez.github.io/courses/python-basic/pb08-tuplas/","publishdate":"2019-04-30T00:01:00+01:00","relpermalink":"/courses/python-basic/pb08-tuplas/","section":"courses","summary":"Vídeo   Notas personales Una tupla es una lista inmutable que\n no permite añadir, eliminar, mover elementos\u0026hellip; permite la extracción de porciones, que continuan siendo tuplas, y posibilita búsquedas de índice (.index()) y comprobaciones de si un elemento pertenece o no a ella (in).  Son útiles porque\n son más rápidas en cuanto a ejecución se refiere, requieren menos espacio (mayor optimización), formatean cadenas de texto, y pueden utilizarse como claves en un diccionario, a diferencia de las listas.","tags":null,"title":"8. Tuplas","type":"docs"},{"authors":null,"categories":null,"content":"I. Cambio de variable  Ejercicio: Dado $x\u0026gt;0$, calcula\n$$ \\int{\\sqrt{\\frac{x^2+1}{x^2}}dx}. $$\n(Discusión)\n ","date":1569193201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571007601,"objectID":"56c042b741c656749b2718f911443609","permalink":"https://imalexissaez.github.io/courses/enunciados/p2-lista30-integracion/","publishdate":"2019-09-23T00:00:01+01:00","relpermalink":"/courses/enunciados/p2-lista30-integracion/","section":"courses","summary":"I. Cambio de variable  Ejercicio: Dado $x\u0026gt;0$, calcula\n$$ \\int{\\sqrt{\\frac{x^2+1}{x^2}}dx}. $$\n(Discusión)\n ","tags":null,"title":"Integración","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Un diccionario es una estructura de datos que nos permite almacenar valores de diferentes tipos (enteros, cadenas de texto, decimales\u0026hellip;) e incluso listas, tuplas y otros diccionarios.\nSu principal característica reside en que cada dato se almacena asociado a una clave única, de tal forma que se crea una relación de tipo clave:valor para cada elemento guardado. Además, los mencionados elementos no están ordenados, es decir, el orden es indiferente (por la presencia las referidas claves únicas) a la hora de guardar información en un diccionario.\nSu sintaxis es nombre = {clave:valor}.\nCreemos un diccionario que almacene países (clave) y capitales (valor), y veamos cómo se accede a cada uno de sus elementos:\nmi_dicc = {\u0026quot;Alemania\u0026quot;: \u0026quot;Berlin\u0026quot;,\r\u0026quot;Francia\u0026quot;: \u0026quot;París\u0026quot;,\r\u0026quot;Reino Unido\u0026quot;: \u0026quot;Londres\u0026quot;,\r\u0026quot;España\u0026quot;: \u0026quot;Madrid\u0026quot;}\rprint(mi_dicc[\u0026quot;Francia\u0026quot;]) # París\rprint(mi_dicc[\u0026quot;España\u0026quot;]) # Madrid\rprint(mi_dicc) # {'Alemania': 'Berlin', 'Francia': 'París', 'Reino Unido': 'Londres', 'España': 'Madrid'}\r Agregamos nuevos elementos al diccionario con el patrón nombre[clave] = valor:\nmi_dicc[\u0026quot;Italia\u0026quot;] = \u0026quot;Lisboa\u0026quot;\rprint(mi_dicc) # {'Alemania': 'Berlin', 'Francia': 'París', 'Reino Unido': 'Londres', 'España': 'Madrid', 'Italia': 'Lisboa'}\r Modificamos un valor asignado a una clave simplemente sobreescribiéndolo:\nmi_dicc[\u0026quot;Italia\u0026quot;] = \u0026quot;Roma\u0026quot;\rprint(mi_dicc) # {'Alemania': 'Berlin', 'Francia': 'París', 'Reino Unido': 'Londres', 'España': 'Madrid', 'Italia': 'Roma'}\r Suprimimos elementos con del:\ndel mi_dicc[\u0026quot;Reino Unido\u0026quot;]\rprint(mi_dicc) # {'Alemania': 'Berlin', 'Francia': 'París', 'España': 'Madrid', 'Italia': 'Roma'}\r Generemos un diccionario que presente diferentes tipos de datos:\nmi_dicc = {\u0026quot;Alemania\u0026quot;: \u0026quot;Berlín\u0026quot;,\r23: \u0026quot;Jordan\u0026quot;,\r\u0026quot;Mosqueteros\u0026quot;: 3}\rprint(mi_dicc) # {'Alemania': 'Berlín', 23: 'Jordan', 'Mosqueteros': 3}\r Empleemos una tupla (el procedimiento sería similar si optamos por una lista) para asignar la clave a cada uno de los valores:\nmi_tupla = (\u0026quot;España\u0026quot;, \u0026quot;Francia\u0026quot;, \u0026quot;Reino Unido\u0026quot;, \u0026quot;Alemania\u0026quot;)\rmi_dicc = {mi_tupla[0]: \u0026quot;Madrid\u0026quot;,\rmi_tupla[1]: \u0026quot;París\u0026quot;,\rmi_tupla[2]: \u0026quot;Londres\u0026quot;,\rmi_tupla[3]: \u0026quot;Berlín\u0026quot;}\rprint(mi_dicc) # {'España': 'Madrid', 'Francia': 'París', 'Reino Unido': 'Londres', 'Alemania': 'Berlín'}\rprint(mi_dicc[\u0026quot;España\u0026quot;]) # Madrid\rprint(mi_dicc[mi_tupla[0]]) # Madrid\r También podemos almacenar tuplas (o listas\u0026hellip;) como valores:\nmi_dicc = {23: \u0026quot;Jordan\u0026quot;,\r\u0026quot;Nombre\u0026quot;: \u0026quot;Michael\u0026quot;,\r\u0026quot;Equipo\u0026quot;: \u0026quot;Chicago\u0026quot;,\r\u0026quot;Anillos\u0026quot;: (1991, 1992, 1993, 1996, 1997, 1998)}\rprint(mi_dicc) # {23: 'Jordan', 'Nombre': 'Michael', 'Equipo': 'Chicago', 'Anillos': (1991, 1992, 1993, 1996, 1997, 1998)}\rprint(mi_dicc[\u0026quot;Equipo\u0026quot;]) # Chicago\rprint(mi_dicc[\u0026quot;Anillos\u0026quot;]) # (1991, 1992, 1993, 1996, 1997, 1998)\r Asimismo, guardemos un diccionario dentro de otro:\nmi_dicc = {23: \u0026quot;Jordan\u0026quot;,\r\u0026quot;Nombre\u0026quot;: \u0026quot;Michael\u0026quot;,\r\u0026quot;Equipo\u0026quot;: \u0026quot;Chicago\u0026quot;,\r\u0026quot;Anillos\u0026quot;: {\u0026quot;Temporadas\u0026quot;: (1991, 1992, 1993, 1996, 1997, 1998)}}\rprint(mi_dicc) # {23: 'Jordan', 'Nombre': 'Michael', 'Equipo': 'Chicago', 'Anillos': {'Temporadas': (1991, 1992, 1993, 1996, 1997, 1998)}}\rprint(mi_dicc[\u0026quot;Anillos\u0026quot;]) # {'Temporadas': (1991, 1992, 1993, 1996, 1997, 1998)}\r Algunos métodos interesantes a conocer son:\n .keys(), para acceder a las claves de un diccionario; .values(), para conocer los valores de un diccionario; y len(), para averiguar la longitud de un diccionario:  print(mi_dicc.keys()) # dict_keys([23, 'Nombre', 'Equipo', 'Anillos'])\rprint(mi_dicc.values()) # dict_values(['Jordan', 'Michael', 'Chicago', {'Temporadas': (1991, 1992, 1993, 1996, 1997, 1998)}])\rprint(len(mi_dicc)) # 4\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/09/ del repositorio.\n","date":1556578861,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556578861,"objectID":"8a130b12783644f012cb005a33c8072a","permalink":"https://imalexissaez.github.io/courses/python-basic/pb09-diccionarios/","publishdate":"2019-04-30T00:01:01+01:00","relpermalink":"/courses/python-basic/pb09-diccionarios/","section":"courses","summary":"Vídeo   Notas personales Un diccionario es una estructura de datos que nos permite almacenar valores de diferentes tipos (enteros, cadenas de texto, decimales\u0026hellip;) e incluso listas, tuplas y otros diccionarios.\nSu principal característica reside en que cada dato se almacena asociado a una clave única, de tal forma que se crea una relación de tipo clave:valor para cada elemento guardado. Además, los mencionados elementos no están ordenados, es decir, el orden es indiferente (por la presencia las referidas claves únicas) a la hora de guardar información en un diccionario.","tags":null,"title":"9. Diccionarios","type":"docs"},{"authors":null,"categories":null,"content":"I. Definición y propiedades  Ejercicio: En una ciudad, el $55%$ de sus habitantes consume aceite del tipo $A$, el $30%$ del tipo $B$ y el $20%$ de ambos tipos de aceite. Se escoge una persona al azar.\n (a) Si esta consume aceite del tipo $A$, ¿cuál es la probabilidad de que consuma también del tipo $B$? (b) Si consume del tipo $B$, ¿cuál es la probabilidad de que no consuma del tipo $A$? (c) ¿Cuál es la probabilidad de que no consuma aceite del tipo $A$ ni del tipo $B$?  (Discusión)\n ","date":1571007601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571958001,"objectID":"ee8364c40097daa0b5a0e735a6dda6a3","permalink":"https://imalexissaez.github.io/courses/enunciados/p4-lista64-probcondicionada/","publishdate":"2019-10-14T00:00:01+01:00","relpermalink":"/courses/enunciados/p4-lista64-probcondicionada/","section":"courses","summary":"I. Definición y propiedades  Ejercicio: En una ciudad, el $55%$ de sus habitantes consume aceite del tipo $A$, el $30%$ del tipo $B$ y el $20%$ de ambos tipos de aceite. Se escoge una persona al azar.\n (a) Si esta consume aceite del tipo $A$, ¿cuál es la probabilidad de que consuma también del tipo $B$? (b) Si consume del tipo $B$, ¿cuál es la probabilidad de que no consuma del tipo $A$?","tags":null,"title":"Probabilidad condicionada","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Las estructuras condicionales nos permiten alterar el flujo de ejecución de un programa. Por lo que respecta al condicional if, tiene la siguiente sintaxis:\nif condición:\rinstrucciones\r La anterior condición suele venir expresada a través de operadores de comparación (\u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=, ==, !=). Veamos un sencillo ejemplo de aplicación de una estructura condicional if en la definición de una función:\ndef evaluacion(nota):\rvaloracion = \u0026quot;Aprobado\u0026quot;\rif nota \u0026lt; 5:\rvaloracion = \u0026quot;Suspenso\u0026quot;\rreturn valoracion\rprint(evaluacion(6)) # Aprobado\rprint(evaluacion(1)) # Suspenso\rprint(evaluacion(2.1)) # Suspenso\r Programemos una versión interactiva del anterior bloque de instrucciones, donde el usuario ha de introducir la nota durante la ejecución del código (a través de la función input()). Para ello, necesitamos activar la consola mediante el menú Tools, opción SublimeREPL y en el apartado Python seleccionamos Python - RUN current file.\ndef evaluacion(nota):\rvaloracion = \u0026quot;Aprobado\u0026quot;\rif nota \u0026lt; 5:\rvaloracion = \u0026quot;Suspenso\u0026quot;\rreturn valoracion\rprint(\u0026quot;Programa de evaluación de notas de alumnos\u0026quot;)\rnota_alumno = input()\rprint(evaluacion(nota_alumno))\r No obstante, si ejecutamos e insertamos una nota numérica (por ejemplo, 8), Python nos arroja el siguiente error:\n# TypeError: '\u0026lt;' not supported between instances of 'str' and 'int'\r Ello es debido a que cualquier información introducida por el usuario desde el teclado se almacena como cadena de texto (\u0026quot;8\u0026quot;), y el operador \u0026lt; no está preparado para comparar textos y números. Resolvemos esta situación empleando la función int().\ndef evaluacion(nota):\rvaloracion = \u0026quot;Aprobado\u0026quot;\rif nota \u0026lt; 5:\rvaloracion = \u0026quot;Suspenso\u0026quot;\rreturn valoracion\rprint(\u0026quot;Programa de evaluación de notas de alumnos\u0026quot;)\rnota_alumno = input()\rprint(evaluacion(int(nota_alumno)))\r Siendo una iteración del programa, por ejemplo,\nPrograma de evaluación de notas de alumnos\r8\rAprobado\r La función input() admite la posibilidad de indicar un mensaje:\ndef evaluacion(nota):\rvaloracion = \u0026quot;Aprobado\u0026quot;\rif nota \u0026lt; 5:\rvaloracion = \u0026quot;Suspenso\u0026quot;\rreturn valoracion\rprint(\u0026quot;Programa de evaluación de notas de alumnos\u0026quot;)\rnota_alumno = input(\u0026quot;Introduce la nota del alumno: \u0026quot;)\rprint(evaluacion(int(nota_alumno)))\r Siendo ahora una iteración del programa, por ejemplo:\nPrograma de evaluación de notas de alumnos\rIntroduce la nota del alumno: 8\rAprobado\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/10/ del repositorio.\n","date":1556578921,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556578921,"objectID":"4943a15cf7e9b833953d27aee3dc0f77","permalink":"https://imalexissaez.github.io/courses/python-basic/pb10-condicionales-i/","publishdate":"2019-04-30T00:02:01+01:00","relpermalink":"/courses/python-basic/pb10-condicionales-i/","section":"courses","summary":"Vídeo   Notas personales Las estructuras condicionales nos permiten alterar el flujo de ejecución de un programa. Por lo que respecta al condicional if, tiene la siguiente sintaxis:\nif condición:\rinstrucciones\r La anterior condición suele venir expresada a través de operadores de comparación (\u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=, ==, !=). Veamos un sencillo ejemplo de aplicación de una estructura condicional if en la definición de una función:\ndef evaluacion(nota):\rvaloracion = \u0026quot;Aprobado\u0026quot;\rif nota \u0026lt; 5:\rvaloracion = \u0026quot;Suspenso\u0026quot;\rreturn valoracion\rprint(evaluacion(6)) # Aprobado\rprint(evaluacion(1)) # Suspenso\rprint(evaluacion(2.","tags":null,"title":"10. Condicionales I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En este vídeo ampliaremos las posibilidades de la estructura condicional if mediante else y elif, quedando entonces su sintaxis como\nif condicion:\rinstrucciones\relif condicion:\rinstrucciones\relse:\rinstrucciones\r Empecemos creando un programa de control de acceso:\nprint(\u0026quot;Verificación de acceso\u0026quot;)\redad_usuario = int(input(\u0026quot;Introduce tu edad: \u0026quot;))\rif edad_usuario \u0026lt; 18:\rprint(\u0026quot;No puedes pasar.\u0026quot;)\relse:\rprint(\u0026quot;Puedes pasar.\u0026quot;)\r Veamos el resultado de algunas ejecuciones de este programa:\nVerificación de acceso\rIntroduce tu edad: 19\rPuedes pasar.\r Verificación de acceso\rIntroduce tu edad: 15\rNo puedes pasar.\r Añadamos al programa la posibilidad de mostrar un mensaje de error si el usuario introduce un dato excesivamente elevado:\nprint(\u0026quot;Verificación de acceso\u0026quot;)\redad_usuario = int(input(\u0026quot;Introduce tu edad: \u0026quot;))\rif edad_usuario \u0026lt; 18:\rprint(\u0026quot;No puedes pasar.\u0026quot;)\relif edad_usuario \u0026gt; 100:\rprint(\u0026quot;Edad incorrecta.\u0026quot;)\relse:\rprint(\u0026quot;Puedes pasar.\u0026quot;)\r Veamos el resultado de ejecutar el anterior programa con distintos valores de edad:\nVerificación de acceso\rIntroduce tu edad: 25\rPuedes pasar.\r Verificación de acceso\rIntroduce tu edad: 15\rNo puedes pasar.\r Verificación de acceso\rIntroduce tu edad: 124\rEdad incorrecta.\r Para reforzar el uso de esta estructura condicional, elaboremos un programa que asigna a cada calificación numérica su correspondiente etiqueta:\nprint(\u0026quot;Control de calificaciones\u0026quot;)\rnota_alumno = int(input(\u0026quot;Introduce la nota: \u0026quot;))\rif nota_alumno \u0026lt; 0:\rprint(\u0026quot;Nota incorrecta.\u0026quot;)\relif nota_alumno \u0026lt; 5:\rprint(\u0026quot;Insuficiente.\u0026quot;)\relif nota_alumno \u0026lt; 6:\rprint(\u0026quot;Suficiente.\u0026quot;)\relif nota_alumno \u0026lt; 7:\rprint(\u0026quot;Bien.\u0026quot;)\relif nota_alumno \u0026lt; 9:\rprint(\u0026quot;Notable.\u0026quot;)\relif nota_alumno \u0026lt;= 10:\rprint(\u0026quot;Sobresaliente.\u0026quot;)\relse:\rprint(\u0026quot;Nota incorrecta.\u0026quot;)\r Veamos el resultado de ejecutar el anterior programa con distintas calificaciones:\nControl de calificaciones\rIntroduce la nota: -6\rNota incorrecta.\r Control de calificaciones\rIntroduce la nota: 4\rInsuficiente.\r Control de calificaciones\rIntroduce la nota: 6\rBien.\r Control de calificaciones\rIntroduce la nota: 7\rNotable.\r Control de calificaciones\rIntroduce la nota: 10\rSobresaliente.\r Control de calificaciones\rIntroduce la nota: 12\rNota incorrecta.\r Ejercicio 1: crea un programa que pida dos números enteros por teclado. El programa tendrá una función llamada devuelve_max encargada de devolver el número más alto de los dos introducidos.\ndef devuelve_max(n1, n2):\rif n1 \u0026lt; n2:\rreturn n2\relse:\rreturn n1\rnum1 = int(input(\u0026quot;Introduce el primer número: \u0026quot;))\rnum2 = int(input(\u0026quot;Introduce el segundo número: \u0026quot;))\rprint(\u0026quot;El máximo es: \u0026quot; + str(devuelve_max(num1, num2)))\r Ejercicio 2: crea un programa que pida por teclado \u0026lsquo;\u0026lsquo;Nombre\u0026rsquo;', \u0026lsquo;\u0026lsquo;Apellido\u0026rsquo;\u0026rsquo; y \u0026lsquo;\u0026lsquo;Tfno\u0026rsquo;'. Esos tres datos deberán ser almacenados en una lista y mostrar en consola el mensaje: \u0026lsquo;\u0026lsquo;Los datos personales son: nombre apellido teléfono\u0026rsquo;\u0026rsquo; (Se mostrarán los datos introducidos por teclado).\nnombre = input(\u0026quot;Nombre: \u0026quot;)\rapell = input(\u0026quot;Apellido: \u0026quot;)\rtfno = input(\u0026quot;Teléfono: \u0026quot;)\rdatos = [nombre, apell, tfno]\rprint(\u0026quot;Los datos personales son: \u0026quot; + datos[0] + \u0026quot; \u0026quot; + datos[1] + \u0026quot; \u0026quot; + datos[2])\r Ejercicio 3: crea un programa que pida tres números por teclado. El programa imprime en consola la media aritmética de los números introducidos.\nnum1 = float(input(\u0026quot;Introduce el primer número: \u0026quot;))\rnum2 = float(input(\u0026quot;Introduce el segundo número: \u0026quot;))\rnum3 = float(input(\u0026quot;Introduce el tercer número: \u0026quot;))\rmedia = (num1 + num2 + num3) / 3\rprint(\u0026quot;La media aritmética es: \u0026quot; + str(media))\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/11/ del repositorio.\n","date":1556578981,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556578981,"objectID":"bb02ed9ab42660f7cdbe607c89e8759c","permalink":"https://imalexissaez.github.io/courses/python-basic/pb11-condicionales-ii/","publishdate":"2019-04-30T00:03:01+01:00","relpermalink":"/courses/python-basic/pb11-condicionales-ii/","section":"courses","summary":"Vídeo   Notas personales En este vídeo ampliaremos las posibilidades de la estructura condicional if mediante else y elif, quedando entonces su sintaxis como\nif condicion:\rinstrucciones\relif condicion:\rinstrucciones\relse:\rinstrucciones\r Empecemos creando un programa de control de acceso:\nprint(\u0026quot;Verificación de acceso\u0026quot;)\redad_usuario = int(input(\u0026quot;Introduce tu edad: \u0026quot;))\rif edad_usuario \u0026lt; 18:\rprint(\u0026quot;No puedes pasar.\u0026quot;)\relse:\rprint(\u0026quot;Puedes pasar.\u0026quot;)\r Veamos el resultado de algunas ejecuciones de este programa:","tags":null,"title":"11. Condicionales II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Aunque en Python no existe una instrucción de tipo switch, como en otros lenguajes de programación, veremos que, gracias a la concatenación de operadores de comparación, a los operadores lógicos and y or, y al operador in, disponemos de bastante versatilidad a la hora de trabajar con estructuras condicionales.\nAntes de nada, siguiendo las instrucciones de este post, creamos un atajo para ejecutar de manera más ágil nuestros programas. Ahora ya no hemos de navegar por los menús cada vez que deseemos realizar una ejecución en la consola, simplemente hemos de emplear la combinación de teclas ctrl + alt + b (mientras que para cerrarla usamos la combinación de teclas ctrl + w).\nEmpecemos creando un programa que controle si un dato numérico introducido para la edad es válido, es decir, no es negativo ni un valor muy elevado. Para ello, utilizaremos la concatenación de operadores de comparación, teniendo en cuenta que su lectura se realiza de izquierda a derecha:\ndef comprueba_edad(edad):\rif 0 \u0026lt; edad \u0026lt; 100:\rprint(\u0026quot;La edad es correcta.\u0026quot;)\relse:\rprint(\u0026quot;La edad es incorrecta.\u0026quot;)\rcomprueba_edad(5) # La edad es correcta.\rcomprueba_edad(135) # La edad es incorrecta.\rcomprueba_edad(-7) # La edad es incorrecta.\r Creemos ahora un programa que evaluará el salario de diferentes trabajadores de una empresa:\nsal_presidente = int(input(\u0026quot;Introduce el salario del presidente: \u0026quot;))\rprint(\u0026quot;Salario presidente: \u0026quot; + str(sal_presidente))\rsal_director = int(input(\u0026quot;Introduce el salario del director: \u0026quot;))\rprint(\u0026quot;Salario director: \u0026quot; + str(sal_director))\rsal_jefe_area = int(input(\u0026quot;Introduce el salario del jefe de área: \u0026quot;))\rprint(\u0026quot;Salario jefe de área: \u0026quot; + str(sal_jefe_area))\rsal_administrativo = int(input(\u0026quot;Introduce el salario del administrativo: \u0026quot;))\rprint(\u0026quot;Salario administrativo: \u0026quot; + str(sal_administrativo))\rif sal_administrativo \u0026lt; sal_jefe_area \u0026lt; sal_director \u0026lt; sal_presidente:\rprint(\u0026quot;Todo funciona correctamente.\u0026quot;)\relse:\rprint(\u0026quot;Algo falla en esta empresa.\u0026quot;)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/12/ del repositorio.\n","date":1556665261,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556665261,"objectID":"64fe9e154e845a2b62a58f6c9f706032","permalink":"https://imalexissaez.github.io/courses/python-basic/pb12-condicionales-iii/","publishdate":"2019-05-01T00:01:01+01:00","relpermalink":"/courses/python-basic/pb12-condicionales-iii/","section":"courses","summary":"Vídeo   Notas personales Aunque en Python no existe una instrucción de tipo switch, como en otros lenguajes de programación, veremos que, gracias a la concatenación de operadores de comparación, a los operadores lógicos and y or, y al operador in, disponemos de bastante versatilidad a la hora de trabajar con estructuras condicionales.\nAntes de nada, siguiendo las instrucciones de este post, creamos un atajo para ejecutar de manera más ágil nuestros programas.","tags":null,"title":"12. Condicionales III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales A continuación, veremos el uso de los operadores lógicos and y or, y del operador in. Para ello, crearemos un programa que evalúe si un alumno tiene o no derecho a beca, dependiendo de\n la distancia a la que vive del centro, el número de hermanos, y el salario familiar.  print(\u0026quot;Programa de evaluación de becas - Curso 2018/19\u0026quot;)\rdist_escuela = int(input(\u0026quot;Introduce la distancia a la escuela (en km): \u0026quot;))\rprint(\u0026quot;Distancia a la escuela: \u0026quot; + str(dist_escuela))\rnum_hermanos = int(input(\u0026quot;Introduce el número de hermanos en el centro: \u0026quot;))\rprint(\u0026quot;Número de hermanos: \u0026quot; + str(num_hermanos))\rsal_familiar = int(input(\u0026quot;Introduce el salario anual bruto: \u0026quot;))\rprint(\u0026quot;Salario anual bruto: \u0026quot; + str(sal_familiar))\rif dist_escuela \u0026gt; 40 and num_hermanos \u0026gt; 2 and sal_familiar \u0026lt;= 20000:\rprint(\u0026quot;Tienes derecho a beca\u0026quot;)\relse:\rprint(\u0026quot;No tienes derecho a beca\u0026quot;)\r Revisemos la estrutura condicional para que no sea tan complicado tener derecho a una beca:\nprint(\u0026quot;Programa de evaluación de becas - Curso 2018/19\u0026quot;)\rdistancia_escuela = int(input(\u0026quot;Introduce la distancia a la escuela (en km): \u0026quot;))\rprint(\u0026quot;Distancia a la escuela: \u0026quot; + str(distancia_escuela))\rnumero_hermanos = int(input(\u0026quot;Introduce el número de hermanos en el centro: \u0026quot;))\rprint(\u0026quot;Número de hermanos: \u0026quot; + str(numero_hermanos))\rsalario_familiar = int(input(\u0026quot;Introduce el salario anual bruto: \u0026quot;))\rprint(\u0026quot;Salario anual bruto: \u0026quot; + str(salario_familiar))\rif distancia_escuela \u0026gt; 40 or numero_hermanos \u0026gt; 2 or salario_familiar \u0026lt;= 20000:\rprint(\u0026quot;Tienes derecho a beca\u0026quot;)\relse:\rprint(\u0026quot;No tienes derecho a beca\u0026quot;)\r Estudiemos ahora el uso del operador in. Crearemos un programa donde un alumno debe escoger una asignatura opcional de entre un listado predeterminado:\nprint(\u0026quot;Asignaturas optativas - Curso 2018/19\u0026quot;)\rprint(\u0026quot;- Informática gráfica\u0026quot;)\rprint(\u0026quot;- Pruebas de software\u0026quot;)\rprint(\u0026quot;- Usabilidad y accesibilidad\u0026quot;)\rasignatura = input(\u0026quot;Escoge la asignatura optativa: \u0026quot;)\rif asignatura in (\u0026quot;Informática gráfica\u0026quot;, \u0026quot;Pruebas de software\u0026quot;,\r\u0026quot;Usabilidad y accesibilidad\u0026quot;):\rprint(\u0026quot;Asignatura elegida: \u0026quot; + asignatura)\relse:\rprint(\u0026quot;La asignatura escogida no está contemplada.\u0026quot;)\r Python es case sensitive (distingue entre mayúsculas y minúsculas). Para solucionar esta situación, utilizamos las funciones lower() y upper(), funciones que escriben, respectivamente, una cadena de caracteres toda en minúsculas o mayúsculas.\nprint(\u0026quot;Asignaturas optativas - Curso 2018/19\u0026quot;)\rprint(\u0026quot;- Informática gráfica\u0026quot;)\rprint(\u0026quot;- Pruebas de software\u0026quot;)\rprint(\u0026quot;- Usabilidad y accesibilidad\u0026quot;)\ropcion = input(\u0026quot;Escoge la asignatura optativa: \u0026quot;)\rasignatura = opcion.lower()\rif asignatura in (\u0026quot;informática gráfica\u0026quot;, \u0026quot;pruebas de software\u0026quot;,\r\u0026quot;usabilidad y accesibilidad\u0026quot;):\rprint(\u0026quot;Asignatura elegida: \u0026quot; + asignatura)\relse:\rprint(\u0026quot;La asignatura escogida no está contemplada.\u0026quot;)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/13/ del repositorio.\n","date":1556665321,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556665321,"objectID":"cda33719968e04d50405e364d1ae7a52","permalink":"https://imalexissaez.github.io/courses/python-basic/pb13-condicionales-iv/","publishdate":"2019-05-01T00:02:01+01:00","relpermalink":"/courses/python-basic/pb13-condicionales-iv/","section":"courses","summary":"Vídeo   Notas personales A continuación, veremos el uso de los operadores lógicos and y or, y del operador in. Para ello, crearemos un programa que evalúe si un alumno tiene o no derecho a beca, dependiendo de\n la distancia a la que vive del centro, el número de hermanos, y el salario familiar.  print(\u0026quot;Programa de evaluación de becas - Curso 2018/19\u0026quot;)\rdist_escuela = int(input(\u0026quot;Introduce la distancia a la escuela (en km): \u0026quot;))\rprint(\u0026quot;Distancia a la escuela: \u0026quot; + str(dist_escuela))\rnum_hermanos = int(input(\u0026quot;Introduce el número de hermanos en el centro: \u0026quot;))\rprint(\u0026quot;Número de hermanos: \u0026quot; + str(num_hermanos))\rsal_familiar = int(input(\u0026quot;Introduce el salario anual bruto: \u0026quot;))\rprint(\u0026quot;Salario anual bruto: \u0026quot; + str(sal_familiar))\rif dist_escuela \u0026gt; 40 and num_hermanos \u0026gt; 2 and sal_familiar \u0026lt;= 20000:\rprint(\u0026quot;Tienes derecho a beca\u0026quot;)\relse:\rprint(\u0026quot;No tienes derecho a beca\u0026quot;)\r Revisemos la estrutura condicional para que no sea tan complicado tener derecho a una beca:","tags":null,"title":"13. Condicionales IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Abordaremos ahora otro tipo de estructura de control de flujo (las estructuras condicionales asimismo lo eran): los bucles.\nLa utilidad de un bucle es repetir una o varias líneas de código tantas veces como sea preciso (siendo esta cantidad conocida de antemano o no). En Python tenemos dos tipos de bucles:\n determinados: sabemos a priori cuántas veces se repetirá el bloque de código, e indeterminados: desconocemos a priori el número de repeticiones del bloque de código.  Empecemos viendo el primer tipo, al que pertenece la instrucción for, cuya sintaxis es:\nfor variable in elemento_a_recorrer:\rinstrucciones\r donde el elemento_a_recorrer puede ser una lista, una tupla, una cadena de texto\u0026hellip;\nPor ejemplo, para imprimir tres veces una palabra, una posible estrategia sería:\nfor i in [1, 2, 3]:\rprint(\u0026quot;Hola\u0026quot;)\r Aunque hemos utilizado una lista de números, no es imprescindible. El siguiente ejemplo consigue el mismo resultado:\nfor i in [\u0026quot;enero\u0026quot;, \u0026quot;febrero\u0026quot;, \u0026quot;marzo\u0026quot;]:\rprint(\u0026quot;Hola\u0026quot;)\r En ambos casos, el elemento a recorrer es una lista de tres elementos y es por ello que el mensaje \u0026quot;Hola\u0026quot; se repite en tres ocasiones, tantas como el mencionado número de elementos de la correspondiente lista.\nSi en lugar de un texto predeterminado optamos por imprimir la propia variable en ambos casos, el resultado es:\nfor i in [1, 2, 3]:\rprint(i)\r# 1\r# 2\r# 3\r for i in [\u0026quot;enero\u0026quot;, \u0026quot;febrero\u0026quot;, \u0026quot;marzo\u0026quot;]:\rprint(i)\r# enero\r# febrero\r# marzo\r La variable no tiene que denominarse necesariamente i:\nfor meses in [\u0026quot;enero\u0026quot;, \u0026quot;febrero\u0026quot;, \u0026quot;marzo\u0026quot;]:\rprint(meses)\r# enero\r# febrero\r# marzo\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/14/ del repositorio.\n","date":1556665321,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556665321,"objectID":"ad41d773f6b8eb9aa49bcafc3ecbffd3","permalink":"https://imalexissaez.github.io/courses/python-basic/pb14-bucles-i/","publishdate":"2019-05-01T00:02:01+01:00","relpermalink":"/courses/python-basic/pb14-bucles-i/","section":"courses","summary":"Vídeo   Notas personales Abordaremos ahora otro tipo de estructura de control de flujo (las estructuras condicionales asimismo lo eran): los bucles.\nLa utilidad de un bucle es repetir una o varias líneas de código tantas veces como sea preciso (siendo esta cantidad conocida de antemano o no). En Python tenemos dos tipos de bucles:\n determinados: sabemos a priori cuántas veces se repetirá el bloque de código, e indeterminados: desconocemos a priori el número de repeticiones del bloque de código.","tags":null,"title":"14. Bucles I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Las instrucciones print() que aparecen en los bucles de tipo for insertan un salto de línea en cada iteración:\nfor i in [\u0026quot;Píldoras\u0026quot;, \u0026quot;Informáticas\u0026quot;, 3]:\rprint(\u0026quot;Hola\u0026quot;)\r# Hola\r# Hola\r# Hola\r Si deseamos que la impresión se produzca en la misma línea, hemos de declarar adecuadamente el argumento end de la función print():\nfor i in [\u0026quot;Píldoras\u0026quot;, \u0026quot;Informáticas\u0026quot;, 3]:\rprint(\u0026quot;Hola\u0026quot;, end=\u0026quot; \u0026quot;)\r# Hola Hola Hola\r Si el elemento a recorrer es una cadena de texto, el bucle for ejecutará tantas iteraciones como letras tenga esta:\nfor i in \u0026quot;Alexis\u0026quot;:\rprint(i, end=\u0026quot;-\u0026quot;)\r# A-l-e-x-i-s-\r Esta característica nos permite, por ejemplo, programar una primera aproximación a un verificador de direcciones de correo electrónico, que nos indique que una es correcta si alberga una arroba en su declaración:\nemail = False\rfor i in \u0026quot;direccion@dominio.com\u0026quot;:\rif i == \u0026quot;@\u0026quot;:\remail = True\rif email == True:\rprint(\u0026quot;El email es correcto.\u0026quot;)\relse:\rprint(\u0026quot;El email no es correcto.\u0026quot;)\r# El email es correcto.\r El anterior bloque de código se puede simplificar un tanto:\nfor i in \u0026quot;direccion@dominio.com\u0026quot;:\rif i == \u0026quot;@\u0026quot;:\remail = True\rif email:\rprint(\u0026quot;El email es correcto.\u0026quot;)\relse:\rprint(\u0026quot;El email no es correcto.\u0026quot;)\r# El email es correcto.\r Generemos una versión interactiva de este programa:\ndef evalua_email(direcc):\remail = False\rfor i in direcc:\rif i == \u0026quot;@\u0026quot;:\remail = True\rif email:\rprint(\u0026quot;El email es correcto.\u0026quot;)\relse:\rprint(\u0026quot;El email no es correcto.\u0026quot;)\rdirecc = input(\u0026quot;Introduce tu dirección de correo electrónico: \u0026quot;)\revalua_email(direcc)\r Podemos ampliar la función de verificación de correos electrónicos para que compruebe si también hay un carácter . en la cadena de texto:\ndef evalua_email(direcc):\rarroba = False\rpunto = False\rfor i in direcc:\rif i == \u0026quot;@\u0026quot;:\rarroba = True\rif i == \u0026quot;.\u0026quot;:\rpunto = True\rif arroba and punto:\rprint(\u0026quot;El email es correcto.\u0026quot;)\relse:\rprint(\u0026quot;El email no es correcto.\u0026quot;)\rdirecc = input(\u0026quot;Introduce tu dirección de correo electrónico: \u0026quot;)\revalua_email(direcc)\r Veamos el uso del tipo range en combinación con el bucle for:\nfor i in range(5):\rprint(i)\r# 0\r# 1\r# 2\r# 3\r# 4\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/15/ del repositorio.\n","date":1556751661,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556751661,"objectID":"b2c87510046c8f200db4f3c69a230617","permalink":"https://imalexissaez.github.io/courses/python-basic/pb15-bucles-ii/","publishdate":"2019-05-02T00:01:01+01:00","relpermalink":"/courses/python-basic/pb15-bucles-ii/","section":"courses","summary":"Vídeo   Notas personales Las instrucciones print() que aparecen en los bucles de tipo for insertan un salto de línea en cada iteración:\nfor i in [\u0026quot;Píldoras\u0026quot;, \u0026quot;Informáticas\u0026quot;, 3]:\rprint(\u0026quot;Hola\u0026quot;)\r# Hola\r# Hola\r# Hola\r Si deseamos que la impresión se produzca en la misma línea, hemos de declarar adecuadamente el argumento end de la función print():\nfor i in [\u0026quot;Píldoras\u0026quot;, \u0026quot;Informáticas\u0026quot;, 3]:\rprint(\u0026quot;Hola\u0026quot;, end=\u0026quot; \u0026quot;)\r# Hola Hola Hola\r Si el elemento a recorrer es una cadena de texto, el bucle for ejecutará tantas iteraciones como letras tenga esta:","tags":null,"title":"15. Bucles II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Veamos algunas opciones de la función print() a la hora de imprimir el valor de variables durante la ejecución de un bucle:\nfor i in range(5):\rprint(f\u0026quot;valor de la variable {i}\u0026quot;)\r# valor de la variable 0\r# valor de la variable 1\r# valor de la variable 2\r# valor de la variable 3\r# valor de la variable 4\r La f que aparece antes del texto entrecomillado indica el uso de funciones f, que permiten interesantes opciones de cara a la impresión de textos en la consola. En esta ocasión, concatena la cadena de caracteres con el valor que toma la variable en cada iteración, indicada por {i}.\nEl tipo range admite el uso de argumentos adicionales:\nfor i in range(5, 10):\rprint(f\u0026quot;valor de la variable {i}\u0026quot;)\r# valor de la variable 5\r# valor de la variable 6\r# valor de la variable 7\r# valor de la variable 8\r# valor de la variable 9\r for i in range(5, 50, 5):\rprint(f\u0026quot;valor de la variable {i}\u0026quot;)\r# valor de la variable 5\r# valor de la variable 10\r# valor de la variable 15\r# valor de la variable 20\r# valor de la variable 25\r# valor de la variable 30\r# valor de la variable 35\r# valor de la variable 40\r# valor de la variable 45\r La función len también resulta de utilidad a la hora de emplear bucles for. Veámosla en acción retomando el ejemplo de la validación de una dirección de correo electrónico visto en la lección anterior:\nvalido = False\remail = input(\u0026quot;Introduce tu email: \u0026quot;)\rfor i in range(len(email)):\rif email[i] == \u0026quot;@\u0026quot;:\rvalido = True\rif valido:\rprint(\u0026quot;El email es correcto.\u0026quot;)\relse:\rprint(\u0026quot;El email no es correcto.\u0026quot;)\r Ejercicio 1: crea un programa que muestre los números impares del 1 al 100. Los números deberán aparecer una al lado del otro sin salto de línea.\nfor i in range(1, 100, 2):\rprint(i, end=\u0026quot; \u0026quot;)\r Ejercicio 2: crea un programa que pida por teclado introducir una contraseña. La contraseña no podrá tener menos de 8 caracteres ni espacios en blanco. Si la contraseña es correcta, el programa imprime \u0026lsquo;\u0026lsquo;Contraseña OK\u0026rsquo;'. En caso contrario imprime \u0026lsquo;\u0026lsquo;Contraseña errónea\u0026rsquo;'.\ndef evalua_password(password):\rvalido = True\rif len(password) \u0026lt; 8 or \u0026quot; \u0026quot; in password:\rvalido = False\rreturn valido\rpassword = input(\u0026quot;Introduce contraseña: \u0026quot;)\rif evalua_password(password):\rprint(\u0026quot;Constraseña OK.\u0026quot;)\relse:\rprint(\u0026quot;Contraseña errónea.\u0026quot;)\r Ejercicio 3: crea un programa que evalúe si una dirección de correo electrónico es válida o no en función de si tiene @ o . Hay que tener en cuenta que la dirección se considera correcta si solo tiene una @ y si tiene uno o más ..\ndef evalua_mail(mail):\rarroba = False\rpunto = False\rif \u0026quot;.\u0026quot; in mail:\rpunto = True\rcontador = 0\rfor i in mail:\rif i == \u0026quot;@\u0026quot;:\rcontador += 1\rif contador == 1:\rarroba = True\rreturn punto and arroba\rmail = input(\u0026quot;Introduce dirección de correo electrónico: \u0026quot;)\rif evalua_mail(mail):\rprint(\u0026quot;Dirección de correo electrónico VÁLIDA.\u0026quot;)\relse:\rprint(\u0026quot;Dirección de correo electrónico INVÁLIDA.\u0026quot;)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/16/ del repositorio.\n","date":1556751721,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556751721,"objectID":"b2a5432ba1f73f7f4a8a05eb6cc820db","permalink":"https://imalexissaez.github.io/courses/python-basic/pb16-bucles-iii/","publishdate":"2019-05-02T00:02:01+01:00","relpermalink":"/courses/python-basic/pb16-bucles-iii/","section":"courses","summary":"Vídeo   Notas personales Veamos algunas opciones de la función print() a la hora de imprimir el valor de variables durante la ejecución de un bucle:\nfor i in range(5):\rprint(f\u0026quot;valor de la variable {i}\u0026quot;)\r# valor de la variable 0\r# valor de la variable 1\r# valor de la variable 2\r# valor de la variable 3\r# valor de la variable 4\r La f que aparece antes del texto entrecomillado indica el uso de funciones f, que permiten interesantes opciones de cara a la impresión de textos en la consola.","tags":null,"title":"16. Bucles III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Estudiemos el bucle while, que es tipo indeterminado porque no sabemos a priori cuántas veces ejecutará el bloque de código contenido en su interior. Su sintaxis es:\nwhile condición:\rinstrucciones\r En el siguiente ejemplo, no obstante, vemos cómo programar un bucle while para que funcione como uno de tipo determinado:\ni = 1\rwhile i \u0026lt;= 10:\rprint(f\u0026quot;Iteración: {i}.\u0026quot;)\ri += 1\rprint(\u0026quot;Fin de ejecución del bucle while.\u0026quot;)\r# Iteración: 1.\r# Iteración: 2.\r# Iteración: 3.\r# Iteración: 4.\r# Iteración: 5.\r# Iteración: 6.\r# Iteración: 7.\r# Iteración: 8.\r# Iteración: 9.\r# Iteración: 10.\r# Fin de ejecución del bucle while.\r Generemos ahora un programa que nos solicite la edad y, en caso de ser el dato introducido un número negativo, vuelva a preguntarnos de nuevo (siendo así un ejemplo de bucle while de tipo indeterminado):\nedad = int(input(\u0026quot;Introduce tu edad: \u0026quot;))\rwhile edad \u0026lt; 0 or edad \u0026gt; 110:\rprint(\u0026quot;Has introducido una edad incorrecta. Vuelve a intentarlo.\u0026quot;)\redad = int(input(\u0026quot;Introduce tu edad: \u0026quot;))\rprint(f\u0026quot;Tienes {edad} años. Gracias por colaborar.\u0026quot;)\r Si un usuario se empeña en introducir datos negativos o muy elevados, puede dar lugar a la aparición de un bucle \u0026lsquo;\u0026lsquo;infinito\u0026rsquo;'. Veamos una estrategia para evitar este tipo de situaciones con un programa que nos permita hallar la raíz cuadrada de un número:\nimport math\rprint(\u0026quot;Programa de cálculo de raíces cuadradas\u0026quot;)\rnumero = int(input(\u0026quot;Introduce un número: \u0026quot;))\rintentos = 0 # Para ejecutar el bucle while un número de veces determinado\rwhile numero \u0026lt; 0:\rprint(\u0026quot;No se puede hallar la raíz de un número negativo.\u0026quot;)\rif intentos == 2:\rprint(\u0026quot;Has consumido demasiados intentos.\u0026quot;)\rprint(\u0026quot;El programa ha finalizado\u0026quot;)\rbreak\rnumero = int(input(\u0026quot;Introduce un número: \u0026quot;))\rif numero \u0026lt; 0:\rintentos += 1\rif intentos \u0026lt; 2:\rsolucion = math.sqrt(numero)\rprint(f\u0026quot;La raíz cuadrada de {numero} es {solucion}.\u0026quot;)\r Notas:\n La instrucción break detiene la ejecución del bucle. Es decir, si durante el transcurso de la ejecución de un bucle llegamos a una situación donde se lee una instrucción break, en ese instante, el flujo del programa deja el bucle y salta a la primera línea de código que se encuentra a continuación del mencionado bucle. En la línea solucion = math.sqrt(numero) introducimos el uso de la clase math, que hemos importado en la primera línea de código (import math). Es un concepto que se estudiará posteriormente en el curso, pero dicha instrucción sirve para encontrar la raíz cuadrada de un número. La utilidad de importar clases reside en que podemos aprovechar funciones ya programadas y no hemos de \u0026lsquo;\u0026lsquo;reinventar la rueda\u0026rsquo;'.  Ejercicio 1: crea un programa que pida números infinitamente. Los números introducidos deben ser cada vez mayores. El programa finalizará cuando se introduce un número menor que el anterior.\nnumero = int(input(\u0026quot;Introduce un número entero: \u0026quot;))\rcondicion = True\rwhile condicion:\rnum1 = numero\rnumero = int(input(\u0026quot;Introduce un número entero mayor que el anterior: \u0026quot;))\rif num1 \u0026gt; numero:\rprint(f\u0026quot;Valor incorrecto: {num1} no es mayor que {numero}.\u0026quot;)\rcondicion = False\relse:\rprint(f\u0026quot;Valor correcto: {numero} es mayor que {num1}\u0026quot;)\r Ejercicio 2: crea un programa que pida números positivos indefinidamente. El programa termina cuando se introduce un número negativo. Finalmente el programa muestras la suma de todos los números introducidos.\nprint(\u0026quot;Cálculo de la suma de una serie de números positivos.\u0026quot;)\rprint(\u0026quot;Instrucciones: \u0026quot;)\rprint(\u0026quot;- Introduce tantos números positivos como desees sumar.\u0026quot;)\rprint(\u0026quot;- Introduce un número negativo para calcular la suma.\u0026quot;)\rsuma = 0\rnum = int(input(\u0026quot;Introduce un número positivo: \u0026quot;))\rwhile num \u0026gt; 0:\rsuma += num\rnum = int(input(\u0026quot;Introduce un número positivo: \u0026quot;))\rprint(f\u0026quot;La suma de los valores positivos introducios es {suma}.\u0026quot;)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/17/ del repositorio.\n","date":1556838061,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556838061,"objectID":"f93029f6c1995ee16bf4f539b5838df3","permalink":"https://imalexissaez.github.io/courses/python-basic/pb17-bucles-iv/","publishdate":"2019-05-03T00:01:01+01:00","relpermalink":"/courses/python-basic/pb17-bucles-iv/","section":"courses","summary":"Vídeo   Notas personales Estudiemos el bucle while, que es tipo indeterminado porque no sabemos a priori cuántas veces ejecutará el bloque de código contenido en su interior. Su sintaxis es:\nwhile condición:\rinstrucciones\r En el siguiente ejemplo, no obstante, vemos cómo programar un bucle while para que funcione como uno de tipo determinado:\ni = 1\rwhile i \u0026lt;= 10:\rprint(f\u0026quot;Iteración: {i}.\u0026quot;)\ri += 1\rprint(\u0026quot;Fin de ejecución del bucle while.","tags":null,"title":"17. Bucles IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos el uso de las instrucciones:\n continue: provoca que el flujo de ejecución de un programa, dentro de un bucle, salte a la siguiente iteración de este. pass: en cuanto se lee en el interior de un bucle, devuelve null (es como si no ejecutara el bucle). Su uso es reducido, salvo en definición de clases o casos muy concretos (dejar bucles vacíos, que sabemos serán precisos, para programar en un futuro próximo). else: cuando un bucle finaliza todas sus iteraciones, entonces comienza a leer las contenidas en el bloque de código asociado a esta instrucción.  Veamos algunos ejemplos:\nfor letra in \u0026quot;Python\u0026quot;:\rprint(f\u0026quot;Viendo la letra {letra}.\u0026quot;)\r# Viendo la letra P.\r# Viendo la letra y.\r# Viendo la letra t.\r# Viendo la letra h.\r# Viendo la letra o.\r# Viendo la letra n.\r for letra in \u0026quot;Python\u0026quot;:\rif letra == \u0026quot;h\u0026quot;:\rcontinue\rprint(f\u0026quot;Viendo la letra {letra}.\u0026quot;)\r# Viendo la letra P.\r# Viendo la letra y.\r# Viendo la letra t.\r# Viendo la letra o.\r# Viendo la letra n.\r Elaboremos, a continuación, un programa que cuente el número de caracteres de una cadena de texto, ignorando los espacios en blanco:\nnombre = \u0026quot;Píldoras Informáticas\u0026quot;\rprint(len(nombre)) # 21 (considera espacio en blanco como carácter)\rcontador = 0\rfor i in nombre:\rif i == \u0026quot; \u0026quot;:\rcontinue\rcontador += 1\rprint(contador) # 20\r Cuando queremos crear una clase (o función), tan pequeña como sea posible, pero que seguramente en un futuro ampliemos, la instrucción pass es de suma utilidad:\nclass mi_clase:\rpass # A implementar más tarde\r Por lo que respecta a la instrucción else, veamos un código para comprobar si una dirección de correo electrónico posee o no una arroba:\nemail = input(\u0026quot;Introduce tu email: \u0026quot;)\rfor i in email:\rif i == \u0026quot;@\u0026quot;:\rarroba = True\rbreak\relse:\rarroba = False\rprint(arroba)\r Hemos de ser cautos, pues generalmente asociamos la instrucción else a estructuras condicionales y no a bucles. Fijarse en la identación del programa es clave.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/18/ del repositorio.\n","date":1557010861,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010861,"objectID":"b59f3f56e01eb5a80ace5768e860c6da","permalink":"https://imalexissaez.github.io/courses/python-basic/pb18-bucles-v/","publishdate":"2019-05-05T00:01:01+01:00","relpermalink":"/courses/python-basic/pb18-bucles-v/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos el uso de las instrucciones:\n continue: provoca que el flujo de ejecución de un programa, dentro de un bucle, salte a la siguiente iteración de este. pass: en cuanto se lee en el interior de un bucle, devuelve null (es como si no ejecutara el bucle). Su uso es reducido, salvo en definición de clases o casos muy concretos (dejar bucles vacíos, que sabemos serán precisos, para programar en un futuro próximo).","tags":null,"title":"18. Bucles V","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Un generador es una estructura que extrae valores de una función y los almacena, de uno en uno, en objetos iterables (que se pueden recorrer). Cada vez que un generador almacena un valor, permanece en un estado pausado hasta que se solicita el siguiente, característica que se conoce como suspensión de estado.\nLa utilidad de los generadores reside en que:\n son más eficientes que las funciones tradicionales (sobretodo en consumo de recursos y tiempo, al no tener que construir \u0026lsquo;\u0026lsquo;estructuras completas de datos\u0026rsquo;'); resultan muy útiles con listas de valores infinitos; y bajo determinados escenarios, será recomendable que un generador devuelva los valores de uno en uno.  Su sintaxis es:\ndef nombre():\ryield\r Creemos un programa que nos genere una lista de números pares, primero a través de una función y luego utilizando generadores:\ndef genera_pares(limite):\rnum = 1\rlista_pares = []\rwhile num \u0026lt; limite:\rlista_pares.append(num * 2)\rnum += 1\rreturn lista_pares\rprint(genera_pares(10)) # [2, 4, 6, 8, 10, 12, 14, 16, 18]\r def genera_pares(limite):\rnum = 1\rwhile num \u0026lt; limite:\ryield num * 2\rnum += 1\r# Creo el objeto iterable que genera la función\rdevuelve_pares = genera_pares(10)\r# Recorro el objeto iterable con, por ejemplo, un bucle for\rfor i in devuelve_pares:\rprint(i)\r# 2\r# 4\r# 6\r# 8\r# 10\r# 12\r# 14\r# 16\r# 18\r Imaginemos ahora que nuestro objetivo es imprimir en la consola únicamente los tres primeros números pares. Con el método next() podemos solicitar valores de uno en uno al objeto iterable fruto del generador:\ndef genera_pares(limite):\rnum = 1\rwhile num \u0026lt; limite:\ryield num * 2\rnum += 1\r# Creo el objeto iterable que genera la función\rdevuelve_pares = genera_pares(10)\rprint(next(devuelve_pares)) # 2\rprint(\u0026quot;Aquí podría ir más código.\u0026quot;)\rprint(next(devuelve_pares)) # 4\rprint(\u0026quot;Aquí podría ir más código.\u0026quot;)\rprint(next(devuelve_pares)) # 6\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/19/ del repositorio.\n","date":1557010921,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010921,"objectID":"56c06c11409546b0ed618639734dfd97","permalink":"https://imalexissaez.github.io/courses/python-basic/pb19-generadores-i/","publishdate":"2019-05-05T00:02:01+01:00","relpermalink":"/courses/python-basic/pb19-generadores-i/","section":"courses","summary":"Vídeo   Notas personales Un generador es una estructura que extrae valores de una función y los almacena, de uno en uno, en objetos iterables (que se pueden recorrer). Cada vez que un generador almacena un valor, permanece en un estado pausado hasta que se solicita el siguiente, característica que se conoce como suspensión de estado.\nLa utilidad de los generadores reside en que:\n son más eficientes que las funciones tradicionales (sobretodo en consumo de recursos y tiempo, al no tener que construir \u0026lsquo;\u0026lsquo;estructuras completas de datos\u0026rsquo;'); resultan muy útiles con listas de valores infinitos; y bajo determinados escenarios, será recomendable que un generador devuelva los valores de uno en uno.","tags":null,"title":"19. Generadores I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Estudiemos el uso de la instrucción yield from, cuya utilidad reside en la simplificación del código de los generadores en el caso de utilizar bucles anidados.\nPor ejemplo, elaboremos un generador que nos devuelva ciudades:\ndef devuelve_ciudades(*ciudades):\rfor elemento in ciudades:\ryield elemento\r# Creamos objeto generador\rciudades_devueltas = devuelve_ciudades(\u0026quot;Madrid\u0026quot;, \u0026quot;Barcelona\u0026quot;, \u0026quot;Bilbao\u0026quot;,\r\u0026quot;Valencia\u0026quot;)\rprint(next(ciudades_devueltas)) # Madrid\rprint(next(ciudades_devueltas)) # Barcelona\r Nota: en Python, cuando colocamos un * delante de un parámetro, estamos indicando que podemos pasar un número indeterminado de argumentos, que los recibirá en forma de tupla.\nImaginemos que ahora deseamos acceder a los elementos de cada una de las ciudades (sus letras en este caso):\ndef devuelve_ciudades(*ciudades):\rfor elemento in ciudades:\rfor sub_elemento in elemento:\ryield sub_elemento\r# Creamos objeto generador\rciudades_devueltas = devuelve_ciudades(\u0026quot;Madrid\u0026quot;, \u0026quot;Barcelona\u0026quot;, \u0026quot;Bilbao\u0026quot;,\r\u0026quot;Valencia\u0026quot;)\rprint(next(ciudades_devueltas)) # M\rprint(next(ciudades_devueltas)) # a\r El anterior ejemplo lo podemos simplificar utilizando la instrucción yield from:\ndef devuelve_ciudades(*ciudades):\rfor elemento in ciudades:\ryield from elemento\r# Creamos objeto generador\rciudades_devueltas = devuelve_ciudades(\u0026quot;Madrid\u0026quot;, \u0026quot;Barcelona\u0026quot;, \u0026quot;Bilbao\u0026quot;,\r\u0026quot;Valencia\u0026quot;)\rprint(next(ciudades_devueltas)) # M\rprint(next(ciudades_devueltas)) # a\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/20/ del repositorio.\n","date":1557010981,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010981,"objectID":"ade50159a3124949beef220777b4bef2","permalink":"https://imalexissaez.github.io/courses/python-basic/pb20-generadores-ii/","publishdate":"2019-05-05T00:03:01+01:00","relpermalink":"/courses/python-basic/pb20-generadores-ii/","section":"courses","summary":"Vídeo   Notas personales Estudiemos el uso de la instrucción yield from, cuya utilidad reside en la simplificación del código de los generadores en el caso de utilizar bucles anidados.\nPor ejemplo, elaboremos un generador que nos devuelva ciudades:\ndef devuelve_ciudades(*ciudades):\rfor elemento in ciudades:\ryield elemento\r# Creamos objeto generador\rciudades_devueltas = devuelve_ciudades(\u0026quot;Madrid\u0026quot;, \u0026quot;Barcelona\u0026quot;, \u0026quot;Bilbao\u0026quot;,\r\u0026quot;Valencia\u0026quot;)\rprint(next(ciudades_devueltas)) # Madrid\rprint(next(ciudades_devueltas)) # Barcelona\r Nota: en Python, cuando colocamos un * delante de un parámetro, estamos indicando que podemos pasar un número indeterminado de argumentos, que los recibirá en forma de tupla.","tags":null,"title":"20. Generadores II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una excepción es un error que acontece durante la ejecución de un programa. La sintaxis del código es correcta, pero, en el momento de ejecutarse el algoritmo, sucede \u0026lsquo;\u0026lsquo;algo inesperado\u0026rsquo;'.\nPara ilustrar la aparición de excepciones, trabajemos con el siguiente código:\ndef suma(num1, num2):\rreturn num1 + num2\rdef resta(num1, num2):\rreturn num1 - num2\rdef multiplica(num1, num2):\rreturn num1 * num2\rdef divide(num1, num2):\rreturn num1 / num2\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rprint(\u0026quot;Operaciones disponibles: \u0026quot;)\rprint(\u0026quot;- Suma\u0026quot;)\rprint(\u0026quot;- Resta\u0026quot;)\rprint(\u0026quot;- Multiplica\u0026quot;)\rprint(\u0026quot;- Divide\u0026quot;)\roperacion = input(\u0026quot;Introduce la operación a realizar: \u0026quot;)\rif operacion == \u0026quot;Suma\u0026quot;:\rprint(suma(op1, op2))\relif operacion == \u0026quot;Resta\u0026quot;:\rprint(resta(op1, op2))\relif operacion == \u0026quot;Multiplica\u0026quot;:\rprint(multiplica(op1, op2))\relif operacion == \u0026quot;Divide\u0026quot;:\rprint(divide(op1, op2))\relse:\rprint(\u0026quot;Operación no contemplada.\u0026quot;)\rprint(\u0026quot;Operación ejecutada. Continuación de ejecución del programa \u0026quot;)\r Un posible ejemplo de ejecución sería:\nIntroduce el primer número: 16\rIntroduce el segundo número: 4\rOperaciones disponibles: - Suma\r- Resta\r- Multiplica\r- Divide\rIntroduce la operación a realizar: Multiplica\r64\rOperación ejecutada. Continuación de ejecución del programa\r Sin embargo, si por accidente intentamos realizar una división entre 0:\nIntroduce el primer número: 2\rIntroduce el segundo número: 0\rOperaciones disponibles: - Suma\r- Resta\r- Multiplica\r- Divide\rIntroduce la operación a realizar: Divide\rTraceback (most recent call last):\rFile \u0026quot;prac21_excepciones1_1.py\u0026quot;, line 35, in \u0026lt;module\u0026gt;\rprint(divide(op1, op2))\rFile \u0026quot;prac21_excepciones1_1.py\u0026quot;, line 14, in divide\rreturn num1 / num2\rZeroDivisionError: division by zero\r De forma que el código se detiene en el preciso instante de la llamada a la función divide() y deja de ejecutar las restantes líneas (la instrucción print() final en esta ocasión), cuya importancia puede ser vital para nosotros.\nEste tipo de situaciones se aborda mediante una captura o control de excepción. La idea es intentar realizar un bloque de código y, en el caso de no poderse llevar a cabo dicha acción, que al menos el resto de programa siga adelante.\nSi nos fijamos en la pila de llamadas que nos muestran antes de arrojar el error:\nTraceback (most recent call last):\rFile \u0026quot;prac21_excepciones1_1.py\u0026quot;, line 35, in \u0026lt;module\u0026gt;\rprint(divide(op1, op2))\rFile \u0026quot;prac21_excepciones1_1.py\u0026quot;, line 14, in divide\rreturn num1 / num2\rZeroDivisionError: division by zero\r Leyendo de abajo hacia arriba, la instrucción return num1 / num2, ubicada en la línea 14 del código, arroja un error de división por cero (ZeroDivisionError). Para controlar esta circunstancia, usaremos un bloque de tipo:\ntry:\rinstrucciones\rexcept error:\rinstrucciones\r Así, nuestra función divide() la podríamos reescribir como sigue:\ndef divide(num1, num2):\rtry:\rreturn num1 / num2\rexcept ZeroDivisionError:\rprint(\u0026quot;No se puede dividir entre 0.\u0026quot;)\rreturn \u0026quot;Operación errónea.\u0026quot;\r De manera que, replicando el anterior conflictivo ejemplo:\nIntroduce el primer número: 2\rIntroduce el segundo número: 0\rOperaciones disponibles: - Suma\r- Resta\r- Multiplica\r- Divide\rIntroduce la operación a realizar: Divide\rNo se puede dividir entre 0.\rOperación errónea.\rOperación ejecutada. Continuación de ejecución del programa  Apreciamos que la última línea de código, aquel print() final, ahora efectivamente sí llega a ejecutarse.\nPor desgracia, no es el único punto conflictivo que presenta el código mostrado. Por ejemplo, ¿qué sucede si introducimos una cadena de texto en lugar de un número?\nIntroduce el primer número: 3\rIntroduce el segundo número: a\rTraceback (most recent call last):\rFile \u0026quot;prac21_excepciones1_1.py\u0026quot;, line 22, in \u0026lt;module\u0026gt;\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rValueError: invalid literal for int() with base 10: 'a'\r Python arroja un error de tipo ValueError que también habríamos de controlar a través de un bloque try - except.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/21/ del repositorio.\n","date":1557097261,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557097261,"objectID":"ee245878075faa7531ffc75162528e0a","permalink":"https://imalexissaez.github.io/courses/python-basic/pb21-excepciones-i/","publishdate":"2019-05-06T00:01:01+01:00","relpermalink":"/courses/python-basic/pb21-excepciones-i/","section":"courses","summary":"Vídeo   Notas personales Una excepción es un error que acontece durante la ejecución de un programa. La sintaxis del código es correcta, pero, en el momento de ejecutarse el algoritmo, sucede \u0026lsquo;\u0026lsquo;algo inesperado\u0026rsquo;'.\nPara ilustrar la aparición de excepciones, trabajemos con el siguiente código:\ndef suma(num1, num2):\rreturn num1 + num2\rdef resta(num1, num2):\rreturn num1 - num2\rdef multiplica(num1, num2):\rreturn num1 * num2\rdef divide(num1, num2):\rreturn num1 / num2\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rprint(\u0026quot;Operaciones disponibles: \u0026quot;)\rprint(\u0026quot;- Suma\u0026quot;)\rprint(\u0026quot;- Resta\u0026quot;)\rprint(\u0026quot;- Multiplica\u0026quot;)\rprint(\u0026quot;- Divide\u0026quot;)\roperacion = input(\u0026quot;Introduce la operación a realizar: \u0026quot;)\rif operacion == \u0026quot;Suma\u0026quot;:\rprint(suma(op1, op2))\relif operacion == \u0026quot;Resta\u0026quot;:\rprint(resta(op1, op2))\relif operacion == \u0026quot;Multiplica\u0026quot;:\rprint(multiplica(op1, op2))\relif operacion == \u0026quot;Divide\u0026quot;:\rprint(divide(op1, op2))\relse:\rprint(\u0026quot;Operación no contemplada.","tags":null,"title":"21. Excepciones I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Recordemos el código final de la lección anterior:\ndef suma(num1, num2):\rreturn num1 + num2\rdef resta(num1, num2):\rreturn num1 - num2\rdef multiplica(num1, num2):\rreturn num1 * num2\rdef divide(num1, num2):\rtry:\rreturn num1 / num2\rexcept ZeroDivisionError:\rprint(\u0026quot;No se puede dividir entre 0.\u0026quot;)\rreturn \u0026quot;Operación errónea.\u0026quot;\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rprint(\u0026quot;Operaciones disponibles: \u0026quot;)\rprint(\u0026quot;- Suma\u0026quot;)\rprint(\u0026quot;- Resta\u0026quot;)\rprint(\u0026quot;- Multiplica\u0026quot;)\rprint(\u0026quot;- Divide\u0026quot;)\roperacion = input(\u0026quot;Introduce la operación a realizar: \u0026quot;)\rif operacion == \u0026quot;Suma\u0026quot;:\rprint(suma(op1, op2))\relif operacion == \u0026quot;Resta\u0026quot;:\rprint(resta(op1, op2))\relif operacion == \u0026quot;Multiplica\u0026quot;:\rprint(multiplica(op1, op2))\relif operacion == \u0026quot;Divide\u0026quot;:\rprint(divide(op1, op2))\relse:\rprint(\u0026quot;Operación no contemplada.\u0026quot;)\rprint(\u0026quot;Operación ejecutada. Continuación de ejecución del programa.\u0026quot;)\r No obstante, este código es susceptible de presentar más errores. Por ejemplo, introduciendo una cadena de texto en lugar de un número cuando nos solicitan los datos.\nPara solucionar ese detalle, podemos reescribir el correspondiente bloque de código como sigue:\ntry:\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rexcept ValueError:\rprint(\u0026quot;Los valores introducidos no son correctos.\u0026quot;)\r El programa así modificado, presenta errores de lógica ahora, ya que si introducimos una cadena de texto como dato, Python no arroja error, pero continua la ejecución del programa y al intentar llevar a cabo cualquier operación de las disponibles, lanza un error de tipo NameError:\nIntroduce el primer número: 5\rIntroduce el segundo número: a\rLos valores introducidos no son correctos.\rOperaciones disponibles: - Suma\r- Resta\r- Multiplica\r- Divide\rIntroduce la operación a realizar: Suma\rTraceback (most recent call last):\rFile \u0026quot;prac22_excepciones2_1.py\u0026quot;, line 36, in \u0026lt;module\u0026gt;\rprint(suma(op1, op2))\rNameError: name 'op2' is not defined\r Una manera de abordar esta problemática es mediante un bucle infinito de tipo while, forzando que el usuario introduzca valores admisibles para continuar la ejecución del programa:\nwhile True:\rtry:\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rbreak\rexcept ValueError:\rprint(\u0026quot;Los valores introducidos no son correctos. Inténtalo de nuevo.\u0026quot;)\r Siendo una posible ejecución del programa la que se muestra acto seguido:\nIntroduce el primer número: 5\rIntroduce el segundo número: a\rLos valores introducidos no son correctos. Inténtalo de nuevo.\rIntroduce el primer número: ag\rLos valores introducidos no son correctos. Inténtalo de nuevo.\rIntroduce el primer número: 5\rIntroduce el segundo número: 0\rOperaciones disponibles: - Suma\r- Resta\r- Multiplica\r- Divide\rIntroduce la operación a realizar: Suma\r5\rOperación ejecutada. Continuación de ejecución del programa.\r Elaboremos ahora una función divide() diferente a la vista en el ejemplo anterior:\ndef divide():\rop1 = (float(input(\u0026quot;Dividendo: \u0026quot;)))\rop2 = (float(input(\u0026quot;Divisor: \u0026quot;)))\rprint(\u0026quot;La división resulta: \u0026quot; + str(op1 / op2))\rprint(\u0026quot;Cálculo finalizado.\u0026quot;)\rdivide()\r Como antes, el programa arroja excepciones si intentamos dividir por cero o introducimos cadenas de texto como datos. Capturémoslas de manera consecutiva:\ndef divide():\rtry:\rop1 = (float(input(\u0026quot;Dividendo: \u0026quot;)))\rop2 = (float(input(\u0026quot;Divisor: \u0026quot;)))\rprint(\u0026quot;La división resulta: \u0026quot; + str(op1 / op2))\rexcept ValueError:\rprint(\u0026quot;El valor introducido es erróneo.\u0026quot;)\rexcept ZeroDivisionError:\rprint(\u0026quot;No se puede dividir entre cero.\u0026quot;)\rprint(\u0026quot;Cálculo finalizado.\u0026quot;)\rdivide()\r Existe una alternativa genérica, aunque poco recomendable, que consiste en teclear except: sin más e imprimir un mensaje neutro de error. Captura una excepción de forma general, pero no informa sobre lo acontencido.\nPor otro lado, cuando queremos que un código se ejecute siempre, existe la posibilidad de ubicarlo en el interior de una claúsula finally:\ndef divide():\rtry:\rop1 = (float(input(\u0026quot;Dividendo: \u0026quot;)))\rop2 = (float(input(\u0026quot;Divisor: \u0026quot;)))\rprint(\u0026quot;La división resulta: \u0026quot; + str(op1 / op2))\rexcept ValueError:\rprint(\u0026quot;El valor introducido es erróneo.\u0026quot;)\rexcept ZeroDivisionError:\rprint(\u0026quot;No se puede dividir entre cero.\u0026quot;)\rfinally:\rprint(\u0026quot;Cálculo finalizado.\u0026quot;)\rdivide()\r Además, es posible también programar utilizando la combinación try - finally:\ndef divide():\rtry:\rop1 = (float(input(\u0026quot;Dividendo: \u0026quot;)))\rop2 = (float(input(\u0026quot;Divisor: \u0026quot;)))\rprint(\u0026quot;La división resulta: \u0026quot; + str(op1 / op2))\rfinally:\rprint(\u0026quot;Cálculo finalizado.\u0026quot;)\rdivide()\r Veamos algunas posibles ejecuciones de este último bloque de código:\nDividendo: 4\rDivisor: 2\rLa división resulta: 2.0\rCálculo finalizado.\r Dividendo: aaa\rCálculo finalizado.\rTraceback (most recent call last):\rFile \u0026quot;prac22_excepciones2_3.py\u0026quot;, line 10, in \u0026lt;module\u0026gt;\rdivide()\rFile \u0026quot;prac22_excepciones2_3.py\u0026quot;, line 3, in divide\rop1 = (float(input(\u0026quot;Dividendo: \u0026quot;)))\rValueError: could not convert string to float: 'aaa'\r Dividendo: 5\rDivisor: 0\rCálculo finalizado.\rTraceback (most recent call last):\rFile \u0026quot;prac22_excepciones2_3.py\u0026quot;, line 10, in \u0026lt;module\u0026gt;\rdivide()\rFile \u0026quot;prac22_excepciones2_3.py\u0026quot;, line 5, in divide\rprint(\u0026quot;La división resulta: \u0026quot; + str(op1 / op2))\rZeroDivisionError: float division by zero\r La cadena de texto \u0026quot;Cálculo finalizado\u0026quot; se muestra por pantalla, independientemente de la presencia o no de excepciones durante la ejecución del algoritmo.\nNota técnica: toda instrucción try ha de estar acompañada bien de su correspondiente except, bien de finally, bien de ambas; pero no puede aparecer en solitario.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/22/ del repositorio.\n","date":1557097321,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557097321,"objectID":"38dfc7f05c71f1d8289bbef9f87ff2f6","permalink":"https://imalexissaez.github.io/courses/python-basic/pb22-excepciones-ii/","publishdate":"2019-05-06T00:02:01+01:00","relpermalink":"/courses/python-basic/pb22-excepciones-ii/","section":"courses","summary":"Vídeo   Notas personales Recordemos el código final de la lección anterior:\ndef suma(num1, num2):\rreturn num1 + num2\rdef resta(num1, num2):\rreturn num1 - num2\rdef multiplica(num1, num2):\rreturn num1 * num2\rdef divide(num1, num2):\rtry:\rreturn num1 / num2\rexcept ZeroDivisionError:\rprint(\u0026quot;No se puede dividir entre 0.\u0026quot;)\rreturn \u0026quot;Operación errónea.\u0026quot;\rop1 = (int(input(\u0026quot;Introduce el primer número: \u0026quot;)))\rop2 = (int(input(\u0026quot;Introduce el segundo número: \u0026quot;)))\rprint(\u0026quot;Operaciones disponibles: \u0026quot;)\rprint(\u0026quot;- Suma\u0026quot;)\rprint(\u0026quot;- Resta\u0026quot;)\rprint(\u0026quot;- Multiplica\u0026quot;)\rprint(\u0026quot;- Divide\u0026quot;)\roperacion = input(\u0026quot;Introduce la operación a realizar: \u0026quot;)\rif operacion == \u0026quot;Suma\u0026quot;:\rprint(suma(op1, op2))\relif operacion == \u0026quot;Resta\u0026quot;:\rprint(resta(op1, op2))\relif operacion == \u0026quot;Multiplica\u0026quot;:\rprint(multiplica(op1, op2))\relif operacion == \u0026quot;Divide\u0026quot;:\rprint(divide(op1, op2))\relse:\rprint(\u0026quot;Operación no contemplada.","tags":null,"title":"22. Excepciones II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Estudiemos cómo lanzar excepciones, de forma intencionada, a través de la instrucción raise. Veremos su utilidad cuando trabajemos, más adelante, con clases.\nGeneremos un sencillo programa cuyo objetivo sea evaluar nuestra edad:\ndef evalua_edad(edad):\rif edad \u0026lt; 20:\rreturn \u0026quot;Eres muy joven.\u0026quot;\relif edad \u0026lt; 40:\rreturn \u0026quot;Eres joven.\u0026quot;\relif edad \u0026lt; 65:\rreturn \u0026quot;Eres maduro.\u0026quot;\relif edad \u0026lt; 100:\rreturn \u0026quot;Cuídate.\u0026quot;\rprint(evalua_edad(18)) # Eres muy joven.\rprint(evalua_edad(70)) # Cuídate.\r Sin embargo, la función así definida presenta este curioso comportamiento:\nprint(evalua_edad(-15)) # Eres muy joven.\r Evidentemente, podemos arreglar esta situación mediante estructuras condicionales, pero veremos a continuación cómo emplear la instrucción raise para abordar el presente caso.\ndef evalua_edad(edad):\rif edad \u0026lt; 0:\rraise TypeError(\u0026quot;No se permiten edades negativas.\u0026quot;)\rif edad \u0026lt; 20:\rreturn \u0026quot;Eres muy joven.\u0026quot;\relif edad \u0026lt; 40:\rreturn \u0026quot;Eres joven.\u0026quot;\relif edad \u0026lt; 65:\rreturn \u0026quot;Eres maduro.\u0026quot;\relif edad \u0026lt; 100:\rreturn \u0026quot;Cuídate.\u0026quot;\rprint(evalua_edad(18))\rprint(evalua_edad(70))\rprint(evalua_edad(-15))\r Al ejecutar el anterior programa, obtenemos:\nEres muy joven.\rCuídate.\rTraceback (most recent call last):\rFile \u0026quot;prac23_excepciones3_2.py\u0026quot;, line 16, in \u0026lt;module\u0026gt;\rprint(evalua_edad(-15))\rFile \u0026quot;prac23_excepciones3_2.py\u0026quot;, line 3, in evalua_edad\rraise TypeError(\u0026quot;No se permiten edades negativas.\u0026quot;)\rTypeError: No se permiten edades negativas.\r Nota: hemos de usar alguno de los tipos de error disponibles en Python, no pdemos cualquier cadena de texto sin más ahí. No obstante, dicho esto, cuando generemos clases podremos elaborar también errores personalizados.\nPasemos a programar un algoritmo que calcule la raíz cuadrada de un número mayor o igual que cero:\nimport math\rdef calcula_raiz(num):\rif num \u0026lt; 0:\rraise ValueError(\u0026quot;El número no puede ser negativo.\u0026quot;)\relse:\rreturn math.sqrt(num)\rop = (int(input(\u0026quot;Introduce un número mayor o igual que cero: \u0026quot;)))\rprint(calcula_raiz(op))\rprint(\u0026quot;Programa terminado.\u0026quot;)\r Controlemos la excepción que aparece si introducimos un número negativo:\nimport math\rdef calcula_raiz(num):\rif num \u0026lt; 0:\rraise ValueError(\u0026quot;El número no puede ser negativo.\u0026quot;)\relse:\rreturn math.sqrt(num)\rop = (int(input(\u0026quot;Introduce un número mayor o igual que cero: \u0026quot;)))\rtry:\rprint(calcula_raiz(op))\rexcept ValueError as ErrorDeNumeroNegativo:\rprint(ErrorDeNumeroNegativo)\rprint(\u0026quot;Programa terminado.\u0026quot;)\r Un par de ejecuciones del anterior programa, por ejemplo, podrían ser:\nIntroduce un número mayor o igual que cero: 144\r12.0\rPrograma terminado.\r Introduce un número mayor o igual que cero: -144\rEl número no puede ser negativo.\rPrograma terminado.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/23/ del repositorio.\n","date":1557183601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557183601,"objectID":"ffb7163685424c31f803f57562d045b6","permalink":"https://imalexissaez.github.io/courses/python-basic/pb23-excepciones-iii/","publishdate":"2019-05-07T00:00:01+01:00","relpermalink":"/courses/python-basic/pb23-excepciones-iii/","section":"courses","summary":"Vídeo   Notas personales Estudiemos cómo lanzar excepciones, de forma intencionada, a través de la instrucción raise. Veremos su utilidad cuando trabajemos, más adelante, con clases.\nGeneremos un sencillo programa cuyo objetivo sea evaluar nuestra edad:\ndef evalua_edad(edad):\rif edad \u0026lt; 20:\rreturn \u0026quot;Eres muy joven.\u0026quot;\relif edad \u0026lt; 40:\rreturn \u0026quot;Eres joven.\u0026quot;\relif edad \u0026lt; 65:\rreturn \u0026quot;Eres maduro.\u0026quot;\relif edad \u0026lt; 100:\rreturn \u0026quot;Cuídate.\u0026quot;\rprint(evalua_edad(18)) # Eres muy joven.","tags":null,"title":"23. Excepciones III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Python es un lenguaje de programación orientado a objetos (POO). Existen, principalemente, dos paradigmas de programación:\n Programación orientada a procedimientos. Programación orientada a objetos.  Programación orientada a procedimientos Algunos ejemplos de lenguajes de programación que siguen este paradigma son: Fortan, Cobol, Basic\u0026hellip;\nEntre sus principales desventajas encontramos:\n Las unidades de código son muy grandes en aplicaciones complejas (resultando en un número de líneas significativamente elevado). En aplicaciones complejas, el código resulta difícil de descifrar. Las aplicaciones generadas suelen ser poco reutilizables. Si existen fallos en alguna línea del código, es muy probable que el programa caiga en su totalidad. Aparición frecuente de código espaguetti (saltos en el flujo de ejecución del programa). Es difícil de depurar el código por otros programadores en caso de necesidad o error.  Programación orientada a objetos La programación orientada a objetos consiste en trasladar el comportamiento que tienen los objetos en la vida real al código de programación. Los objetos tienen un estado, un comportamiento (¿qué puede hacer?) y unas propiedades.\nPor ejemplo, pensemos en el objeto \u0026lsquo;\u0026lsquo;coche\u0026rsquo;':\n ¿Cuál es el estado de un coche? Puede estar parado, circulando, aparcado\u0026hellip; ¿Qué propiedades tiene un coche? Tiene un color, un peso, un tamaño\u0026hellip; ¿Qué comportamiento tiene un coche? Puede arrancar, frenar, acelerar, girar\u0026hellip;     Objeto Coche     Propiedades (atributos) Color, peso, alto, largo\u0026hellip;   Comportamiento Arrancar, frenar, girar, acelerar\u0026hellip;    Algunos ejemplos de lenguajes de programación que emplean este paradigma son: C++, Java, VisualNet\u0026hellip;\nEntre las principales ventajas encontramos:\n Los programas están divididos en \u0026lsquo;\u0026lsquo;trozos\u0026rsquo;', \u0026lsquo;\u0026lsquo;partes\u0026rsquo;', \u0026lsquo;\u0026lsquo;módulos\u0026rsquo;\u0026rsquo; o \u0026lsquo;\u0026lsquo;clases\u0026rsquo;', es decir, existe modularización. El código es muy reutilizable. Aparece en el concepto de herencia. Si existen fallos en alguna línea del código, el programa es posible que continue con su funcionamiento, debido al control de excepciones. Surge el concepto de encapsulamiento.  El vocabulario más frecuente de este paradigma de programación incluye palabras o expresiones como:\n Clase. Objeto. Ejemplar de clase. Instancia de clase. Ejemplarizar una clase. Instanciar una clase. Modularización. Encapsulamiento / encapsulación. Herencia. Polimorfismo.  ","date":1557270001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557270001,"objectID":"33d516426d8395d4d42f213f6fde720b","permalink":"https://imalexissaez.github.io/courses/python-basic/pb24-poo-i/","publishdate":"2019-05-08T00:00:01+01:00","relpermalink":"/courses/python-basic/pb24-poo-i/","section":"courses","summary":"Vídeo   Notas personales Python es un lenguaje de programación orientado a objetos (POO). Existen, principalemente, dos paradigmas de programación:\n Programación orientada a procedimientos. Programación orientada a objetos.  Programación orientada a procedimientos Algunos ejemplos de lenguajes de programación que siguen este paradigma son: Fortan, Cobol, Basic\u0026hellip;\nEntre sus principales desventajas encontramos:\n Las unidades de código son muy grandes en aplicaciones complejas (resultando en un número de líneas significativamente elevado).","tags":null,"title":"24. Programación orientada a objetos I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una clase es un modelo donde se redactan las características comunes de un grupo de objetos.\nUna instancia (o ejemplar u objeto) es un miembro concreto de una clase.\nLa modularización surge cuando un programa está compuesto de diversas clases. Cada una de ellas funciona de manera independiente (facilitando así enormemente su mantenimiento y control de excepciones) y es posible su reutilización en otros programas.\nLa encapsulación nos permite proteger el funcionamiento interno de cierto bloque de código, para que no pueda accederse o alterarse desde el exterior de manera inadecuada. No obstante, todas las clases de un programa estarán \u0026lsquo;\u0026lsquo;conectadas\u0026rsquo;\u0026rsquo; entre sí de cierta manera (mediante métodos de acceso a ciertas características de cada una de las clases).\nEl mencionado acceso se llevará a cabo empleando la nomenclatura del punto. Por ejemplo, supongamos que hemos creado un objeto, de la clase coche, llamado miCoche. Para acceder a sus propiedades, utilizaremos la sintaxis:\n miCoche.color = ''rojo'' miCoche.peso = 1500 miCoche.ancho = 2000 miCoche.alto = 900  De forma similar, el acceso al comportamiento de este objeto se realizará mediante la mencionada nomenclatura:\n miCoche.arranca() miCoche.frena() miCoche.gira() miCoche.acelera()  ","date":1557270002,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557270002,"objectID":"72a8c66937e9846ec189ce4e46103a59","permalink":"https://imalexissaez.github.io/courses/python-basic/pb25-poo-ii/","publishdate":"2019-05-08T00:00:02+01:00","relpermalink":"/courses/python-basic/pb25-poo-ii/","section":"courses","summary":"Vídeo   Notas personales Una clase es un modelo donde se redactan las características comunes de un grupo de objetos.\nUna instancia (o ejemplar u objeto) es un miembro concreto de una clase.\nLa modularización surge cuando un programa está compuesto de diversas clases. Cada una de ellas funciona de manera independiente (facilitando así enormemente su mantenimiento y control de excepciones) y es posible su reutilización en otros programas.","tags":null,"title":"25. Programación orientada a objetos II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Traslademos a código fuente algunos de los conceptos examinados en las dos lecciones anteriores. La sintaxis para crear la clase Coche sería:\nclass Coche():\rinstrucciones\r Empecemos declarando las propiedades de la clase Coche:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\r Definamos comportamientos para los futuros objetos que pertenezcan a esta clase, que vienen determinados por distintos métodos:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef function(self):\rpass\r En Sublime Text 3 cuando empezamos a escribir def nos ofrece dos opciones, crear una función o un método. La principal diferencia radica en que la primera no pertenece a ninguna clase, al contrario que la segunda. Podemos, a través de los cursores, escoger en el editor la opción que apunta a un método y se nos proporciona la sintaxis de uno por defecto, como el que se muestra arriba.\nUna vez editado, el código queda:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self):\rpass\r Nota: self hace referencia al propio objeto perteneciente a la clase, es decir, a la instancia perteneciente a la clase.\nConstruyamos un objeto de la clase Coche y veamos cómo acceder a sus propiedades:\nmi_coche = Coche() # Instanciación de una clase\rprint(\u0026quot;Largo del coche: \u0026quot;, mi_coche.largo_chasis) # Largo del coche: 250\rprint(\u0026quot;Número de ruedas: \u0026quot;, mi_coche.ruedas) # Número de ruedas: 4\r Trabajemos en el método declarado, para ello, escribimos:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self):\rself.en_marcha = True\r Así, ahora:\nprint(\u0026quot;En marcha: \u0026quot;, mi_coche.en_marcha) # En marcha: False\rmi_coche.arrancar()\rprint(\u0026quot;En marcha: \u0026quot;, mi_coche.en_marcha) # En marcha: True\r Esta última acción la podríamos haber llevado a cabo a través de otro comportamiento, estado:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self):\rself.en_marcha = True\rdef estado(self):\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rprint(mi_coche.estado()) # El coche está parado.\rmi_coche.arrancar()\rprint(mi_coche.estado()) # El coche está en marcha.\r En resumen, hemos creado la clase Coche, que se caracteriza por poseer cuatro propiedades y dos comportamientos.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/26/ del repositorio.\n","date":1557270003,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557270003,"objectID":"b0d7cf7c8e169275415eaffa6f4929bf","permalink":"https://imalexissaez.github.io/courses/python-basic/pb26-poo-iii/","publishdate":"2019-05-08T00:00:03+01:00","relpermalink":"/courses/python-basic/pb26-poo-iii/","section":"courses","summary":"Vídeo   Notas personales Traslademos a código fuente algunos de los conceptos examinados en las dos lecciones anteriores. La sintaxis para crear la clase Coche sería:\nclass Coche():\rinstrucciones\r Empecemos declarando las propiedades de la clase Coche:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\r Definamos comportamientos para los futuros objetos que pertenezcan a esta clase, que vienen determinados por distintos métodos:","tags":null,"title":"26. Programación orientada a objetos III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Partamos del código del último ejemplo de la lección anterior:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self):\rself.en_marcha = True\rdef estado(self):\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\r Generemos dos objetos y comparémoslos:\nmi_coche1 = Coche()\rmi_coche2 = Coche()\rprint(\u0026quot;Largo mi_coche1: \u0026quot;, mi_coche1.largo_chasis) # Largo mi_coche1: 250\rprint(\u0026quot;Largo mi_coche2: \u0026quot;, mi_coche2.largo_chasis) # Largo mi_coche2: 250\rmi_coche1.arrancar()\rprint(mi_coche1.estado()) # El coche está en marcha.\rprint(mi_coche2.estado()) # El coche está parado.\r Sería buena idea que el método arrancar(), además de arrancar el coche, nos informase de su estado (en marcha o parado). También, programaremos el método estado() para que nos ofrezca información del coche:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self, arrancamos):\rself.en_marcha = arrancamos\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.largo_chasis, \u0026quot;cm.\u0026quot;)\rmi_coche1 = Coche()\rmi_coche2 = Coche()\rprint(mi_coche1.arrancar(True)) # El coche está en marcha.\rprint(mi_coche2.arrancar(False)) # # El coche está parado.\rmi_coche1.estado()\r# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\rmi_coche2.estado()\r# El coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r En programación orientada a objetos, las características comunes suelen formar parte de lo que se conoce como estado inicial. Para especificar dicho estado utilizaremos un constructor, que es un método especial que le da estado a los objetos que pertenecen a una clase. Su sintaxis vendrá dada por\ndef __init__(self):\rpropiedades\r Así, el código de la clase quedaría:\nclass Coche():\rdef __init__(self):\rself.largo_chasis = 250\rself.ancho_chasis = 120\rself.ruedas = 4\rself.en_marcha = False\rdef arrancar(self, arrancamos):\rself.en_marcha = arrancamos\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.largo_chasis, \u0026quot;cm.\u0026quot;)\r ¿Qué sucede si intentamos ahora incrementar a cinco el número de ruedas del segundo coche?\nmi_coche2 = Coche()\rprint(mi_coche2.arrancar(False))\rmi_coche2.ruedas = 5\rmi_coche2.estado()\r El coche está parado.\rEl coche tiene 5 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r Esta acción, en ciertos casos, no debería estar permitida. Para ello, entra en juego el concepto de encapsulación, que nos permitirá proteger propiedades para que no se puedan modificar desde fuera de la propia clase. Su aplicación es tan sencilla como preceder con __ el nombre de la propiedad a proteger y en aquellos lugares donde luego aparezca:\nclass Coche():\rdef __init__(self):\rself.largo_chasis = 250\rself.ancho_chasis = 120\rself.__ruedas = 4\rself.en_marcha = False\rdef arrancar(self, arrancamos):\rself.en_marcha = arrancamos\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.largo_chasis, \u0026quot;cm.\u0026quot;)\r mi_coche2 = Coche()\rprint(mi_coche2.arrancar(False))\rmi_coche2.__ruedas = 5\rmi_coche2.estado()\r El coche está parado.\rEl coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r En esta ocasión, las cuatro propiedades deberían encapsularse. Incluso en_marcha, ya que queremos modificarla únicamente desde el interior de la clase.\nLa clase entonces quedaría:\nclass Coche():\rdef __init__(self):\rself.__largo_chasis = 250\rself.__ancho_chasis = 120\rself.__ruedas = 4\rself.__en_marcha = False\rdef arrancar(self, arrancamos):\rself.__en_marcha = arrancamos\rif self.__en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.__ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.__largo_chasis,\r\u0026quot;cm.\u0026quot;)\r De la misma manera, se pueden encapsular métodos, opción que estudiaremos en futuras lecciones.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/27/ del repositorio.\n","date":1557356401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557356401,"objectID":"38466438380b57cf2d7e47f82b9ac64c","permalink":"https://imalexissaez.github.io/courses/python-basic/pb27-poo-iv/","publishdate":"2019-05-09T00:00:01+01:00","relpermalink":"/courses/python-basic/pb27-poo-iv/","section":"courses","summary":"Vídeo   Notas personales Partamos del código del último ejemplo de la lección anterior:\nclass Coche():\rlargo_chasis = 250\rancho_chasis = 120\rruedas = 4\ren_marcha = False\rdef arrancar(self):\rself.en_marcha = True\rdef estado(self):\rif self.en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\r Generemos dos objetos y comparémoslos:\nmi_coche1 = Coche()\rmi_coche2 = Coche()\rprint(\u0026quot;Largo mi_coche1: \u0026quot;, mi_coche1.largo_chasis) # Largo mi_coche1: 250\rprint(\u0026quot;Largo mi_coche2: \u0026quot;, mi_coche2.","tags":null,"title":"27. Programación orientada a objetos IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales A continuación, abordaremos la encapsulación de métodos partiendo del último ejemplo de la lección anterior:\nclass Coche():\rdef __init__(self):\rself.__largo_chasis = 250\rself.__ancho_chasis = 120\rself.__ruedas = 4\rself.__en_marcha = False\rdef arrancar(self, arrancamos):\rself.__en_marcha = arrancamos\rif self.__en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.__ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.__largo_chasis,\r\u0026quot;cm.\u0026quot;)\r Encapsular un método es hacer que sea únicamente accesible desde la propia clase, no desde fuera.\nComo aplicación práctica de este procedimiento, generemos un método que compruebe que todo está en orden antes de arrancar, chequeo_interno(self), que llamaremos desde arrancar().\nclass Coche():\rdef __init__(self):\rself.__largo_chasis = 250\rself.__ancho_chasis = 120\rself.__ruedas = 4\rself.__en_marcha = False\rdef arrancar(self, arrancamos):\rself.__en_marcha = arrancamos\rif self.__en_marcha:\rchequeo = self.chequeo_interno()\rif self.__en_marcha and chequeo:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relif self.__en_marcha and not chequeo:\rreturn \u0026quot;Algo ha ido mal en el chequeo. No podemos arrancar.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.__ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.__largo_chasis,\r\u0026quot;cm.\u0026quot;)\rdef chequeo_interno(self):\rprint(\u0026quot;Realizando chequeo interno.\u0026quot;)\rself.gas = \u0026quot;Ok\u0026quot;\rself.aceite = \u0026quot;Ok\u0026quot;\rself.puertas = \u0026quot;Ok\u0026quot;\rif self.gas == \u0026quot;Ok\u0026quot; and self.aceite == \u0026quot;Ok\u0026quot; and self.puertas == \u0026quot;Ok\u0026quot;:\rreturn True\relse:\rreturn False\r Así, si ahora tecleamos:\nmi_coche1 = Coche()\rprint(mi_coche1.arrancar(True))\rmi_coche1.estado()\rprint(\u0026quot;---- Segundo vehículo ----\u0026quot;)\rmi_coche2 = Coche()\rprint(mi_coche2.arrancar(False))\rmi_coche2.estado()\r El resultado será:\nRealizando chequeo interno.\rEl coche está en marcha.\rEl coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r---- Segundo vehículo ----\rEl coche está parado.\rEl coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r El método chequeo_interno() es accesible desde fuera de la clase (no está encapsulado), pero, ¿es lógico que podamos acceder a él en cualquier momento? ¿Incluso si está parado? Si el método está diseñado para ejecutarse únicamente en el momento previo a arrancar, hemos de \u0026lsquo;\u0026lsquo;protegerlo\u0026rsquo;'.\nmi_coche2 = Coche()\rprint(mi_coche2.arrancar(False))\rprint(mi_coche2.chequeo_interno()) # Absurdo en este caso\rmi_coche2.estado()\r El coche está parado.\rRealizando chequeo interno.\rTrue\rEl coche tiene 4 ruedas. Un ancho de 120 cm y un largo de 250 cm.\r Para encapsular el mencionado método, utilizamos la estrategia de __:\nclass Coche():\rdef __init__(self):\rself.__largo_chasis = 250\rself.__ancho_chasis = 120\rself.__ruedas = 4\rself.__en_marcha = False\rdef arrancar(self, arrancamos):\rself.__en_marcha = arrancamos\rif self.__en_marcha:\rchequeo = self.__chequeo_interno()\rif self.__en_marcha and chequeo:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relif self.__en_marcha and not chequeo:\rreturn \u0026quot;Algo ha ido mal en el chequeo. No podemos arrancar.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.__ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.__largo_chasis,\r\u0026quot;cm.\u0026quot;)\rdef __chequeo_interno(self):\rprint(\u0026quot;Realizando chequeo interno.\u0026quot;)\rself.gas = \u0026quot;Ok\u0026quot;\rself.aceite = \u0026quot;Ok\u0026quot;\rself.puertas = \u0026quot;Ok\u0026quot;\rif self.gas == \u0026quot;Ok\u0026quot; and self.aceite == \u0026quot;Ok\u0026quot; and self.puertas == \u0026quot;Ok\u0026quot;:\rreturn True\relse:\rreturn False\r De forma que si ahora escribimos:\nmi_coche2 = Coche()\rprint(mi_coche2.arrancar(False))\rprint(mi_coche2.__chequeo_interno())\rmi_coche2.estado()\r El resultado es:\nEl coche está parado.\rTraceback (most recent call last):\rFile \u0026quot;prac28_poo5_1.py\u0026quot;, line 50, in \u0026lt;module\u0026gt;\rprint(mi_coche2.__chequeo_interno())\rAttributeError: 'Coche' object has no attribute '__chequeo_interno'\r Es decir, Python arroja un error. No nos deja llamar al método __chequeo_interno() desde fuera de la propia clase Coche porque está encapsulado.\n¿Cuándo encapsular una variable o un método? No existe una \u0026lsquo;\u0026lsquo;regla de oro\u0026rsquo;', esto es, habremos de hacerlo cuando la clase así lo precise, dependiendo del comportamiento que posea una clase y en función del criterio del propio programador.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/28/ del repositorio.\n","date":1557356402,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557356402,"objectID":"99541a28b94a7d582ccc5babf3cec8c3","permalink":"https://imalexissaez.github.io/courses/python-basic/pb28-poo-v/","publishdate":"2019-05-09T00:00:02+01:00","relpermalink":"/courses/python-basic/pb28-poo-v/","section":"courses","summary":"Vídeo   Notas personales A continuación, abordaremos la encapsulación de métodos partiendo del último ejemplo de la lección anterior:\nclass Coche():\rdef __init__(self):\rself.__largo_chasis = 250\rself.__ancho_chasis = 120\rself.__ruedas = 4\rself.__en_marcha = False\rdef arrancar(self, arrancamos):\rself.__en_marcha = arrancamos\rif self.__en_marcha:\rreturn \u0026quot;El coche está en marcha.\u0026quot;\relse:\rreturn \u0026quot;El coche está parado.\u0026quot;\rdef estado(self):\rprint(\u0026quot;El coche tiene\u0026quot;, self.__ruedas, \u0026quot;ruedas. Un ancho de\u0026quot;,\rself.__ancho_chasis, \u0026quot;cm y un largo de\u0026quot;, self.","tags":null,"title":"28. Programación orientada a objetos V","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En programación orientada a objetos, el concepto de herencia intenta dar una réplica aproximada de su contrapartida en la vida real. De una clase, denominada en ocasiones clase padre o superclase, heredarán otras clases atributos, métodos\u0026hellip; Se conocen estas últimas como subclases de la anterior (y también como superclases si de ellas también heredan otras).\nLa principal utilidad de la herencia es la reutilización de código cuando se generan clases \u0026lsquo;\u0026lsquo;similares\u0026rsquo;'. Hemos de estudiar las características y comportamientos que poseen en común todos los objetos con los que deseamos trabajar. Todo ello lo englobaremos en una superclase, de la cual luego heredarán otras clases, que aun teniendo características en común, también es cierto que existen otras peculiaridades que las diferencian.\nVeamos un ejemplo práctico:\n# Clase Padre\rclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\r# Clase hija\rclass Moto(Vehiculo):\rpass\rmi_moto = Moto(\u0026quot;Honda\u0026quot;, \u0026quot;CBR\u0026quot;)\rmi_moto.estado()\r Marca: Honda Modelo: CBR En marcha: False Acelerando: False Frenando: False\r Estamos utilizando métodos de la clase Vehiculo a través de la clase Moto gracias a la herencia.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/29/ del repositorio.\n","date":1557356403,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557356403,"objectID":"3e70cc610ee082df0ac0100c67bd1707","permalink":"https://imalexissaez.github.io/courses/python-basic/pb29-poo-vi/","publishdate":"2019-05-09T00:00:03+01:00","relpermalink":"/courses/python-basic/pb29-poo-vi/","section":"courses","summary":"Vídeo   Notas personales En programación orientada a objetos, el concepto de herencia intenta dar una réplica aproximada de su contrapartida en la vida real. De una clase, denominada en ocasiones clase padre o superclase, heredarán otras clases atributos, métodos\u0026hellip; Se conocen estas últimas como subclases de la anterior (y también como superclases si de ellas también heredan otras).\nLa principal utilidad de la herencia es la reutilización de código cuando se generan clases \u0026lsquo;\u0026lsquo;similares\u0026rsquo;'.","tags":null,"title":"29. Programación orientada a objetos VI","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Continuemos con el ejemplo de la lección anterior:\n# Clase Padre\rclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\r# Clase hija\rclass Moto(Vehiculo):\rpass\r Construyamos la clase Moto, añadiendo un comportamiento nuevo, caballito, que se va a sumar a los cuatro heredados de la clase Vehiculo:\nclass Moto(Vehiculo):\rhcaballito = \u0026quot;\u0026quot;\rdef caballito(self):\rhcaballito = \u0026quot;Voy haciendo el caballito.\u0026quot;\r Ahora podríamos teclear:\nmi_moto = Moto(\u0026quot;Honda\u0026quot;, \u0026quot;CBR\u0026quot;)\rmi_moto.caballito()\rmi_moto.estado()\r Marca: Honda Modelo: CBR En marcha: False Acelerando: False Frenando: False\r El programa \u0026lsquo;\u0026lsquo;funciona\u0026rsquo;\u0026rsquo; (al menos no arroja errores), pero no nos está informando si estamos haciendo el caballito o no.\nAbordemos esta situación sobreescribiendo el método estado heredado de la clase Vehiculo, para así incorporar la información sobre el nuevo comportamiento de la clase Moto.\nPara sobreescribir un método de la clase padre definimos uno en la clase hija que se caracterice por tener el mismo nombre y número de parámetros:\nclass Moto(Vehiculo):\rhcaballito = \u0026quot;\u0026quot;\rdef caballito(self):\rself.hcaballito = \u0026quot;Voy haciendo el caballito.\u0026quot;\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena, \u0026quot;\\n\u0026quot;, self.hcaballito)\r De esta manera, la ejecución del siguiente bloque de código:\nmi_moto = Moto(\u0026quot;Honda\u0026quot;, \u0026quot;CBR\u0026quot;)\rmi_moto.caballito()\rmi_moto.estado()\r Produce como resultado ahora:\nMarca: Honda Modelo: CBR En marcha: False Acelerando: False Frenando: False Voy haciendo el caballito.\r Modifiquemos el código para albergar la posibilidad de trabajar con furgonetas:\nclass Furgoneta(Vehiculo):\rdef carga(self, cargar):\rself.cargado = cargar\rif self.cargado:\rreturn \u0026quot;La furgoneta está cargada.\u0026quot;\relse:\rreturn \u0026quot;La furgoneta no está cargada.\u0026quot;\r Así,\nmi_furgo = Furgoneta(\u0026quot;Renault\u0026quot;, \u0026quot;Kangoo\u0026quot;)\rmi_furgo.arrancar()\rmi_furgo.estado()\rmi_furgo.carga(True)\r Marca: Renault Modelo: Kangoo En marcha: True Acelerando: False Frenando: False\r Todo funciona de manera adecuada, con la salvedad de que no estamos viendo que la furgoneta está cargada. Como el método carga() devuelve una cadena de texto, añadiendo una función print() solucionamos el entuerto:\nmi_furgo = Furgoneta(\u0026quot;Renault\u0026quot;, \u0026quot;Kangoo\u0026quot;)\rmi_furgo.arrancar()\rmi_furgo.estado()\rprint(mi_furgo.carga(True))\r Marca: Renault Modelo: Kangoo En marcha: True Acelerando: False Frenando: False\rLa furgoneta está cargada.\r Obviamente, una instrucción del tipo mi_moto.carga() arroja un error, ya que no hereda de Furgoneta la clase Moto, sino de Vehiculo.\nAñademos soporte para vehículos electrónicos:\nclass VehiculoElec():\rdef __init__(self):\rself.autonomia = 100\rdef cargar_energia(self):\rself.cargando = True\r Y, a continuación, generemos una clase para trabajar con biciletas eléctricas. Estas tienen marca, modelo, pueden arrancar, frenar\u0026hellip; y a la vez también poseen autonomia y la posibilidad de cargar energía. Python nos permite heredar de dos o más clases, que se conoce como herencia múltiple:\nclass BicicletaElec(VehiculoElec, Vehiculo):\rpass\r Hemos de tener en cuenta que cuando se da herencia múltiple, a la hora de tomar el constructor o los diferentes métodos, se da la preferencia según hayamos ordenado las clases padres de las que hereda. En este caso, no podemos iniciar una bicicleta eléctrica con marca y modelo, aprovechando así el constructor de la clase Vehiculo, ya que la clase VehiculoElec posee su propio constructor y este último tiene preferencia por haber colocado esta clase primero en la definición de BicicletaElec.\nmi_bici = BicicletaElec(\u0026quot;Orbea\u0026quot;, \u0026quot;HCI30\u0026quot;)\r Traceback (most recent call last):\rFile \u0026quot;prac30_poo7_3.py\u0026quot;, line 58, in \u0026lt;module\u0026gt;\rmi_bici = BicicletaElec(\u0026quot;Orbea\u0026quot;, \u0026quot;HCI30\u0026quot;)\rTypeError: __init__() takes 1 positional argument but 3 were given\r No obstante, si intercambiamos el orden de las clases padre en la definición de BicicletaElec:\nclass BicicletaElec(Vehiculo, VehiculoElec):\rpass\rmi_bici = BicicletaElec(\u0026quot;Orbea\u0026quot;, \u0026quot;HCI30\u0026quot;)\rmi_bici.estado()\r La ejecución ya no arroja errores, mostrando el siguiente resultado:\nMarca: Orbea Modelo: HCI30 En marcha: False Acelerando: False Frenando: False\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/30/ del repositorio.\n","date":1557356404,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557356404,"objectID":"27c0957374d5cd7930f8d2500540166c","permalink":"https://imalexissaez.github.io/courses/python-basic/pb30-poo-vii/","publishdate":"2019-05-09T00:00:04+01:00","relpermalink":"/courses/python-basic/pb30-poo-vii/","section":"courses","summary":"Vídeo   Notas personales Continuemos con el ejemplo de la lección anterior:\n# Clase Padre\rclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\r# Clase hija\rclass Moto(Vehiculo):\rpass\r Construyamos la clase Moto, añadiendo un comportamiento nuevo, caballito, que se va a sumar a los cuatro heredados de la clase Vehiculo:","tags":null,"title":"30. Programación orientada a objetos VII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección estudiaremos el uso de las funciones\n super() e isinstance().  Partimos del último ejemplo de la lección anterior:\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\rclass Furgoneta(Vehiculo):\rdef carga(self, cargar):\rself.cargado = cargar\rif self.cargado:\rreturn \u0026quot;La furgoneta está cargada.\u0026quot;\relse:\rreturn \u0026quot;La furgoneta no está cargada.\u0026quot;\rclass Moto(Vehiculo):\rhcaballito = \u0026quot;\u0026quot;\rdef caballito(self):\rself.hcaballito = \u0026quot;Voy haciendo el caballito.\u0026quot;\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena, \u0026quot;\\n\u0026quot;, self.hcaballito)\rclass VehiculoElec():\rdef __init__(self):\rself.autonomia = 100\rdef cargar_energia(self):\rself.cargando = True\rclass BicicletaElec(VehiculoElec, Vehiculo):\rpass\r Si queremos crear un objeto de la clase BicicletaElec que posea una marca y un modelo, tenemos dos opciones disponibles:\n Acudir al método __init__() de la clase VehiculoElec y copiar las líneas que nos interesen del método homónimo de la clase Vehiculo. No obstante, este enfoque es, cuanto menos, poco elegante. Utilizar la función super(), cuya utilidad reside en que procede a llamar al método de la clase padre.  Veamos esta segunda aproximación con un ejemplo un tanto más sencillo:\nclass Persona():\rdef __init__(self, nombre, edad, residencia):\rself.nombre = nombre\rself.edad = edad\rself.residencia = residencia\rdef describir(self):\rprint(\u0026quot;Nombre:\u0026quot;, self.nombre, \u0026quot;\\nEdad:\u0026quot;, self.edad, \u0026quot;\\nResidencia:\u0026quot;,\rself.residencia)\rclass Empleado(Persona):\rdef __init__(self, salario, antiguedad):\rself.salario = salario\rself.antiguedad = antiguedad\r Ahora podríamos comenzar a construir objetos de ambas clases:\nantonio = Persona(\u0026quot;Antonio\u0026quot;, 55, \u0026quot;España\u0026quot;)\rantonio.describir()\r Nombre: Antonio Edad: 55 Residencia: España\r Para constuir un objeto de la clase Empleado, hemos de tener en cuenta que tomará como argumentos los parámetros declarados en dicha clase, y no los de Persona. No obstante, a la hora de emplear el método describir() encontraremos problemas tal y como están programadas ambas clases:\njuan = Empleado(1500, 15)\rjuan.describir()\r Traceback (most recent call last):\rFile \u0026quot;prac31_poo8_2.py\u0026quot;, line 24, in \u0026lt;module\u0026gt;\rjuan.describir()\rFile \u0026quot;prac31_poo8_2.py\u0026quot;, line 8, in describir\rprint(\u0026quot;Nombre:\u0026quot;, self.nombre, \u0026quot;\\nEdad:\u0026quot;, self.edad, \u0026quot;\\nResidencia:\u0026quot;,\rAttributeError: 'Empleado' object has no attribute 'nombre'\r Podemos reescribir el constructor de la clase Empleado, haciendo uso de la función super(), como sigue:\nclass Empleado(Persona):\rdef __init__(self, salario, antiguedad):\rsuper().__init__(\u0026quot;Juan\u0026quot;, 33, \u0026quot;Italia\u0026quot;)\rself.salario = salario\rself.antiguedad = antiguedad\r De manera que ahora el código no arrojará error alguno:\njuan = Empleado(1500, 15)\rjuan.describir()\r Nombre: Juan Edad: 33 Residencia: Italia\r No obstante, programado así, todos nuestros empleados se llamarían Juan, tendrían 33 años y serían italianos. Veamos cómo generalizar el funcionamiento de la anterior clase:\nclass Empleado(Persona):\rdef __init__(self, salario, antiguedad, nombre_empleado, edad_empleado,\rresidencia_empleado):\rsuper().__init__(nombre_empleado, edad_empleado, residencia_empleado)\rself.salario = salario\rself.antiguedad = antiguedad\rdef describir(self):\rsuper().describir()\rprint(\u0026quot;Salario:\u0026quot;, self.salario, \u0026quot;\\nAntigüedad:\u0026quot;, self.antiguedad)\r De paso, hemos mejorado también el método describir(), que procede a llamar al de la clase padre y, además, añade la información correspondiente al salario y a la antigüedad. De este modo,\njuan = Empleado(1500, 15, \u0026quot;Juan\u0026quot;, 33, \u0026quot;Italia\u0026quot;)\rjuan.describir()\r Nombre: Juan Edad: 33 Residencia: Italia\rSalario: 1500 Antigüedad: 15\r La función isinstance() nos informa si un objeto es instancia de una clase determinada:\njuan = Empleado(1500, 15, \u0026quot;Juan\u0026quot;, 33, \u0026quot;Italia\u0026quot;)\rjuan.describir()\rprint(isinstance(juan, Persona)) # True\rprint(isinstance(juan, Empleado)) # True\rmarco = Persona(\u0026quot;Marco\u0026quot;, 51, \u0026quot;Francia\u0026quot;)\rprint(isinstance(marco, Persona)) # True\rprint(isinstance(marco, Empleado)) # False\r Con todo, modifiquemos el ejemplo inicial para permitir que una bicicleta eléctrica admita marca y modelo.\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\rclass Furgoneta(Vehiculo):\rdef carga(self, cargar):\rself.cargado = cargar\rif self.cargado:\rreturn \u0026quot;La furgoneta está cargada.\u0026quot;\relse:\rreturn \u0026quot;La furgoneta no está cargada.\u0026quot;\rclass Moto(Vehiculo):\rhcaballito = \u0026quot;\u0026quot;\rdef caballito(self):\rself.hcaballito = \u0026quot;Voy haciendo el caballito.\u0026quot;\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena, \u0026quot;\\n\u0026quot;, self.hcaballito)\rclass VehiculoElec(Vehiculo):\rdef __init__(self, marca, modelo):\rsuper().__init__(marca, modelo)\rself.autonomia = 100\rdef cargar_energia(self):\rself.cargando = True\rclass BicicletaElec(VehiculoElec, Vehiculo):\rpass\r Notemos que:\n Hemos utilizado la función super() en el método __init__() de VehiculoElec. Hemos declarado que la clase VehiculoElec hereda de Vehiculo.  Así,\nmi_bici = BicicletaElec(\u0026quot;Orbea\u0026quot;, \u0026quot;HCI30\u0026quot;)\rmi_bici.estado()\r Marca: Orbea Modelo: HCI30 En marcha: False Acelerando: False Frenando: False\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/31/ del repositorio.\n","date":1557442801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557442801,"objectID":"ea84ab66220d74381ff6383dbfd6bb5d","permalink":"https://imalexissaez.github.io/courses/python-basic/pb31-poo-viii/","publishdate":"2019-05-10T00:00:01+01:00","relpermalink":"/courses/python-basic/pb31-poo-viii/","section":"courses","summary":"Vídeo   Notas personales En esta lección estudiaremos el uso de las funciones\n super() e isinstance().  Partimos del último ejemplo de la lección anterior:\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.","tags":null,"title":"31. Programación orientada a objetos VIII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos el concepto de polimorfismo. Un objeto puede cambiar de forma dependiendo del contexto en el que se utilice y, por tanto, modificar tanto sus propiedades como sus comportamientos asociados.\nComo Python es un lenguaje de tipado dinámico, esta característica es sencilla de utilizar.\nVeamos un ejemplo:\nclass Coche():\rdef desplazamiento(self):\rprint(\u0026quot;Me desplazo utilizando cuatro ruedas.\u0026quot;)\rclass Moto():\rdef desplazamiento(self):\rprint(\u0026quot;Me desplazo utilizando dos ruedas.\u0026quot;)\rclass Camion():\rdef desplazamiento(self):\rprint(\u0026quot;Me desplazo utilizando seis ruedas.\u0026quot;)\r Así, si ahora tecleamos:\nmi_vehiculo = Moto()\rmi_vehiculo.desplazamiento()\rmi_vehiculo2 = Coche()\rmi_vehiculo2.desplazamiento()\rmi_vehiculo3 = Camion()\rmi_vehiculo3.desplazamiento()\r Me desplazo utilizando dos ruedas.\rMe desplazo utilizando cuatro ruedas.\rMe desplazo utilizando seis ruedas.\r Si tuviésemos cientos de vehículos y quisiéramos utilizar sus comportamientos, habríamos de seguir el patrón esbozado arriba.\nNo obstante, nos podemos aprovechar de la magia del polimorfismo creando una función como se muestra a continuación:\ndef desplazamiento_vehiculo(vehiculo):\rvehiculo.desplazamiento()\r Y como el objeto vehiculo posee la capacidad de adquirir el rol de cualquiera de los vehículos programados arriba (coche, moto o camión), Python en todo momento sabrá a qué método desplazamiento() acudir en cada instante.\nAsí, si escribimos:\nmi_vehiculo = Camion()\rdesplazamiento_vehiculo(mi_vehiculo)\rmi_vehiculo = Coche()\rdesplazamiento_vehiculo(mi_vehiculo)\rmi_vehiculo = Moto()\rdesplazamiento_vehiculo(mi_vehiculo)\r Me desplazo utilizando seis ruedas.\rMe desplazo utilizando cuatro ruedas.\rMe desplazo utilizando dos ruedas.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/32/ del repositorio.\n","date":1557442802,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557442802,"objectID":"7926074fcc55e72137d5d53d34f38189","permalink":"https://imalexissaez.github.io/courses/python-basic/pb32-poo-ix/","publishdate":"2019-05-10T00:00:02+01:00","relpermalink":"/courses/python-basic/pb32-poo-ix/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos el concepto de polimorfismo. Un objeto puede cambiar de forma dependiendo del contexto en el que se utilice y, por tanto, modificar tanto sus propiedades como sus comportamientos asociados.\nComo Python es un lenguaje de tipado dinámico, esta característica es sencilla de utilizar.\nVeamos un ejemplo:\nclass Coche():\rdef desplazamiento(self):\rprint(\u0026quot;Me desplazo utilizando cuatro ruedas.\u0026quot;)\rclass Moto():\rdef desplazamiento(self):\rprint(\u0026quot;Me desplazo utilizando dos ruedas.","tags":null,"title":"32. Programación orientada a objetos IX","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Examinemos algunos de los métodos disponibles en Python a la hora de trabajar con cadenas de texto, que son objetos de tipo String. Entre los más habituales encontramos:\n upper() lower() capitalize() count() find() isdigit() isalum() isalpha() split() strip() replace() rfind()  Para obtener más información sobre su utilización, conviene que visitemos esta página.\nVeamos algunos ejemplos sencillos que ilustren el uso de algunos de los anteriores métodos:\nnombre_usuario = input(\u0026quot;Introduce tu nombre de usuario: \u0026quot;)\rprint(\u0026quot;El nombre es:\u0026quot;, nombre_usuario)\rprint(\u0026quot;El nombre es:\u0026quot;, nombre_usuario.upper())\rprint(\u0026quot;El nombre es:\u0026quot;, nombre_usuario.lower())\rprint(\u0026quot;El nombre es:\u0026quot;, nombre_usuario.capitalize())\r Introduce tu nombre de usuario: Alexis Sáez\rEl nombre es: Alexis Sáez\rEl nombre es: ALEXIS SÁEZ\rEl nombre es: alexis sáez\rEl nombre es: Alexis sáez\r Algunas de estas funciones resultan útiles a la hora de validar los datos que un usuario proporciona a nuestros programas:\nedad = input(\u0026quot;Introduce la edad: \u0026quot;)\rwhile not edad.isdigit():\rprint(\u0026quot;Por favor, introduce un valor numérico.\u0026quot;)\redad = input(\u0026quot;Introduce la edad: \u0026quot;)\rif int(edad) \u0026lt; 18:\rprint(\u0026quot;No puede pasar.\u0026quot;)\relse:\rprint(\u0026quot;Puede pasar.\u0026quot;)\r Introduce la edad: 8iu9\rPor favor, introduce un valor numérico.\rIntroduce la edad: o9098\rPor favor, introduce un valor numérico.\rIntroduce la edad: 99\rPuede pasar.\r Ejercicio: crea un programa que pida introducir una dirección de email por teclado. El programa debe imprimir en consola si la dirección de email es correcta o no en función de si esta tiene el símbolo @. Si tiene una @ la dirección será correcta. Si tiene más de una o ninguna @ la dirección será errónea. Si la @ está al comienzo de la dirección de email o al final, la dirección también será errónea\nemail = input(\u0026quot;Introduce email: \u0026quot;)\rif email.count(\u0026quot;@\u0026quot;) == 1 and email.count(\u0026quot;@\u0026quot;, 1, len(email) - 1) == 1:\rprint(\u0026quot;La dirección de correo es correcta.\u0026quot;)\relse:\rprint(\u0026quot;La dirección de correo es incorrecta.\u0026quot;)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/33/ del repositorio.\n","date":1557529201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557529201,"objectID":"9f1b1068b376e0d6b49af43b775ba050","permalink":"https://imalexissaez.github.io/courses/python-basic/pb33-cadenas/","publishdate":"2019-05-11T00:00:01+01:00","relpermalink":"/courses/python-basic/pb33-cadenas/","section":"courses","summary":"Vídeo   Notas personales Examinemos algunos de los métodos disponibles en Python a la hora de trabajar con cadenas de texto, que son objetos de tipo String. Entre los más habituales encontramos:\n upper() lower() capitalize() count() find() isdigit() isalum() isalpha() split() strip() replace() rfind()  Para obtener más información sobre su utilización, conviene que visitemos esta página.\nVeamos algunos ejemplos sencillos que ilustren el uso de algunos de los anteriores métodos:","tags":null,"title":"33. Métodos de cadenas","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Un módulo es un archivo con extensión .py, .pyc (Python compilado) o fichero escrito en C para CPython, que posee su propio espacio de nombres y que puede contener variables, funciones, clases e incluso otros módulos.\nSirve para organizar y reutilizar el código (modularización y reutilización). Se genera uno creando un archivo con extensión .py (o .pyc o archivo en C) y guardándolo donde nos interese.\nVamos a crear un módulo que, siguiendo la organización del repositorio de código, se llamará modulo_matematicas.py. En su interior tecleamos las siguientes líneas:\ndef sumar(op1, op2):\rprint(\u0026quot;El resultado de la suma es:\u0026quot;, op1 + op2)\rdef restar(op1, op2):\rprint(\u0026quot;El resultado de la resta es:\u0026quot;, op1 - op2)\rdef multiplicar(op1, op2):\rprint(\u0026quot;El resultado de la multiplicación es:\u0026quot;, op1 * op2)\r Ahora, generamos otro archivo, script_1.py, e importamos el anterior módulo, utilizando para ello la instrucción import:\nimport modulo_matematicas as modulo\rmodulo.sumar(5, 7)\rmodulo.restar(9, 5)\rmodulo.multiplicar(4, 9)\r El resultado de la suma es: 12\rEl resultado de la resta es: 4\rEl resultado de la multiplicación es: 36\r Como el nombre del módulo generado es un tanto extenso, he utilizado la instrucción as, que permite reescribir dicho nombre y, en mi caso, abreviarlo para que su uso sea más cómodo.\nUna alternativa a esta estrategia la encontramos en el fichero script_2.py, donde se utiliza from ... import ...:\nfrom modulo_matematicas import sumar\rsumar(5, 7)\r El resultado de la suma es: 12\r En el bloque de código anterior, únicamente hemos importado la función sumar() de nuestro módulo. Podemos añadir más funciones separándolas mediante comas o importar todo el contenido del módulo utilizando el carácter *:\nfrom modulo_matematicas import sumar, restar\rsumar(5, 7)\rrestar(12, 6)\r El resultado de la suma es: 12\rEl resultado de la resta es: 6\r from modulo_matematicas import *\rsumar(5, 7)\rrestar(12, 6)\rmultiplicar(12, 12)\r El resultado de la suma es: 12\rEl resultado de la resta es: 6\rEl resultado de la multiplicación es: 144\r No obstante, es peligroso actuar así, pues, en ocasiones, podemos reescribir métodos de manera accidental y arribar a resultados no deseados. Además, en aplicaciones complejas, por motivos de optimización, utilizar el carácter * provoca que se reserve demasiado espacio en memoria al tener que almacenar todo el contenido del módulo importado.\nCreemos un módulo, modulo_vehiculos.py con las clases utilizadas en la lección de herencia asociada al apartado de programación orientada a objetos:\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\rclass Furgoneta(Vehiculo):\rdef carga(self, cargar):\rself.cargado = cargar\rif self.cargado:\rreturn \u0026quot;La furgoneta está cargada.\u0026quot;\relse:\rreturn \u0026quot;La furgoneta no está cargada.\u0026quot;\rclass Moto(Vehiculo):\rhcaballito = \u0026quot;\u0026quot;\rdef caballito(self):\rself.hcaballito = \u0026quot;Voy haciendo el caballito.\u0026quot;\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena, \u0026quot;\\n\u0026quot;, self.hcaballito)\rclass VehiculoElec(Vehiculo):\rdef __init__(self, marca, modelo):\rsuper().__init__(marca, modelo)\rself.autonomia = 100\rdef cargar_energia(self):\rself.cargando = True\r Y ahora, en el fichero script_5.py tecleamos:\nfrom modulo_vehiculos import *\rmi_coche = Vehiculo(\u0026quot;Mazda\u0026quot;, \u0026quot;MX5\u0026quot;)\rmi_coche.estado()\r Marca: Mazda Modelo: MX5 En marcha: False Acelerando: False Frenando: False\r Python busca los módulos en el mismo directorio donde está guardado el fichero desde el cual se realiza la llamada de importación. En caso de no hallarlo ahí, pasa a revisar el syspath (es un conjunto de directorios entre los que está, por ejemplo, el de instalación de Python).\nSi no tenemos los módulos en ninguna de ambas ubicaciones, Python arrojará un error al ejecutar el programa. Para solucionar esta situación estudiaremos el uso de paquetes en la próxima lección.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/34/ del repositorio.\n","date":1557615601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557615601,"objectID":"6899c5e75913293de06337ff2f751098","permalink":"https://imalexissaez.github.io/courses/python-basic/pb34-modulos/","publishdate":"2019-05-12T00:00:01+01:00","relpermalink":"/courses/python-basic/pb34-modulos/","section":"courses","summary":"Vídeo   Notas personales Un módulo es un archivo con extensión .py, .pyc (Python compilado) o fichero escrito en C para CPython, que posee su propio espacio de nombres y que puede contener variables, funciones, clases e incluso otros módulos.\nSirve para organizar y reutilizar el código (modularización y reutilización). Se genera uno creando un archivo con extensión .py (o .pyc o archivo en C) y guardándolo donde nos interese.","tags":null,"title":"34. Módulos","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Los paquetes son directorios donde se almacenarán módulos relacionados entre sí. Sirven para organizar el código de una aplicación y reutilizar los mencionados módulos.\nUn paquete se crea generando un directorio en cuyo interior haya presente un archivo denominado __init__.py.\nImaginemos que nuestro objetivo es elaborar un programa que realice diversos cálculos matemáticos y estadísticos. Vamos a empezar creando un directorio denominado calculos, en consonancia con la nomenclatura que estamos siguiendo para los ficheros del repositorio.\nEn su interior creamos el mencionado archivo __init__.py (sin contenido alguno), acción que le transmite a Python la información de que la carpeta calculos funcionará como un paquete.\nAñadimos ahora a la carpeta el módulo calculos_generales.py, cuyo contenido es el siguiente:\ndef sumar(op1, op2):\rprint(\u0026quot;El resultado de la suma es:\u0026quot;, op1 + op2)\rdef restar(op1, op2):\rprint(\u0026quot;El resultado de la resta es:\u0026quot;, op1 - op2)\rdef multiplicar(op1, op2):\rprint(\u0026quot;El resultado de la multiplicación es:\u0026quot;, op1 * op2)\rdef dividir(dividendo, divisor):\rprint(\u0026quot;El resultado de la división es:\u0026quot;, dividendo / divisor)\rdef potenciar(base, exponente):\rprint(\u0026quot;El resultado de la potenciación es:\u0026quot;, base**exponente)\rdef redondear(numero):\rprint(\u0026quot;El resultado del redondeo es:\u0026quot;, round(numero))\r Ahora, desde la raíz del directorio, veamos cómo podemos utilizar nuestro paquete recién creado:\nfrom calculos.calculos_generales import dividir\rdividir(10, 3)\r El resultado de la división es: 3.3333333333333335\r Recordemos que podemos importar todo el contenido del módulo utilizando el carácter *:\nfrom calculos.calculos_generales import *\rdividir(10, 3)\rredondear(4.6)\rpotenciar(2, 10)\r El resultado de la división es: 3.3333333333333335\rEl resultado del redondeo es: 5\rEl resultado de la potenciación es: 1024\r Podemos crear subpaquetes, esto es, un paquete dentro de otro, siguiendo de manera recursiva el procedimiento explicado.\nPor ejemplo, para afinar un poco más, creemos dos directorios dentro de la carpeta del paquete, denominados basicos (para suma, resta, multiplicación y división) y redondeo-potencia (para redondear y calcular potencias). Cada una de ellas ha de llevar en su interior su correspondiente fichero __init__.py.\nEn la carpeta basicos incluimos el módulo operaciones_basicas.py, cuyo contenido será:\ndef sumar(op1, op2):\rprint(\u0026quot;El resultado de la suma es:\u0026quot;, op1 + op2)\rdef restar(op1, op2):\rprint(\u0026quot;El resultado de la resta es:\u0026quot;, op1 - op2)\rdef multiplicar(op1, op2):\rprint(\u0026quot;El resultado de la multiplicación es:\u0026quot;, op1 * op2)\rdef dividir(dividendo, divisor):\rprint(\u0026quot;El resultado de la división es:\u0026quot;, dividendo / divisor)\r Mientras que en la carpeta redondeo_potencia generamos el módulo redondea_y_potencia, compuesto por el siguiente bloque de código:\ndef potenciar(base, exponente):\rprint(\u0026quot;El resultado de la potenciación es:\u0026quot;, base**exponente)\rdef redondear(numero):\rprint(\u0026quot;El resultado del redondeo es:\u0026quot;, round(numero))\r Para utilizar estos últimos módulos creados, tecleamos:\nfrom calculos.basicos.operaciones_basicas import sumar\rfrom calculos.redondeo_potencia.redondea_y_potencia import potenciar\rsumar(5, 7)\rpotenciar(2, 10)\r El resultado de la suma es: 12\rEl resultado de la potenciación es: 1024\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/35/ del repositorio.\n","date":1557615602,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557615602,"objectID":"6f78d16d074e0201c44dbe3d450925b4","permalink":"https://imalexissaez.github.io/courses/python-basic/pb35-paquetes-i/","publishdate":"2019-05-12T00:00:02+01:00","relpermalink":"/courses/python-basic/pb35-paquetes-i/","section":"courses","summary":"Vídeo   Notas personales Los paquetes son directorios donde se almacenarán módulos relacionados entre sí. Sirven para organizar el código de una aplicación y reutilizar los mencionados módulos.\nUn paquete se crea generando un directorio en cuyo interior haya presente un archivo denominado __init__.py.\nImaginemos que nuestro objetivo es elaborar un programa que realice diversos cálculos matemáticos y estadísticos. Vamos a empezar creando un directorio denominado calculos, en consonancia con la nomenclatura que estamos siguiendo para los ficheros del repositorio.","tags":null,"title":"35. Paquetes I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Veamos cómo crear paquetes distribuibles para que otras personas puedan utilizar nuestro código fuente. El proceso a seguir se reduce a dos sencillos pasos:\n Crear el paquete. Instalar el paquete.  En la lección anterior generamos el paquete calculos como una carpeta en el interior del directorio del repositorio donde estamos almacenando todos los archivos de este curso. Desde la raíz del mencionado directorio, utilizamos los módulos contenidos en dicho paquete en, por ejemplo, paquetes_1.py.\nAhora bien, si movemos este último archivo a otro directorio, Python seguramente no será capaz de encontrar el paquete calculos. Para solventar esta situación, hemos de proceder a su instalación.\nEn primer lugar, creamos un archivo denominado setup.py en la raíz del directorio, que contendrá una descripción del paquete que vamos a distribuir (nombre, versión, autor\u0026hellip;). En su interior, tecleamos:\nfrom setuptools import setup\rsetup(name=\u0026quot;prac35_calculos\u0026quot;,\rversion=\u0026quot;1.0\u0026quot;,\rdescription=\u0026quot;Paquete de cálculos matemáticos\u0026quot;,\rauthor=\u0026quot;Alexis Sáez\u0026quot;,\rauthor_email=\u0026quot;cucoalexis@hotmail.com\u0026quot;,\rurl=\u0026quot;https://imalexissaez.github.io/\u0026quot;,\rpackages=[\u0026quot;prac35_calculos\u0026quot;])\r A continuación, abrimos la terminal de Windows y nos dirigimos a la carpeta donde hemos almacenado el fichero setup.py (la instrucción cd es clave en este proceso). Escribimos ahora\npython setup.py sdist\r Si todo ha ido bien, habrán aparecido dos nuevas carpetas:\n calculos.egg-info dist  En esta última hallamos el archivo comprimido denominado calculos-1.0.tar.gz. Este es el fichero que podemos enviar por correo electrónico o subir a alguna plataforma online para distribuirlo a otras personas.\nActo seguido, imaginemos que lo hemos recibido y queremos instalarlo. Para ello, desde la terminal de Windows acudimos al directorio donde resida el fichero comprimido y tecleamos:\npip3 install calculos-1.0.tar.gz\r Recibiremos rápidamente en la consola el mensaje \u0026lsquo;\u0026lsquo;Successfully installed calculos-1.0\u0026rsquo;'.\nAhora, desde cualquier carpeta de nuestro ordenador, podemos emplear el paquete recién instalado escribiendo, por ejemplo:\nfrom calculos.calculos_generales import sumar\rsumar(6, 7)\r El resultado de la suma es: 13\r Nota: para comprobar que efectivamente el procedimiento se ha llevado a cabo con éxito, he creado una nueva carpeta, test_paquete, y allí he ubicado el archivo paquetes.py. De no haber instalado correctamente el paquete, Python habría sido incapaz de encontrar la función sumar() utilizando la instrucción dada arriba.\nFinalmente, para desinstalar el paquete, desde la terminal de Windows tecleamos:\npip3 uninstall calculos\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/36/ del repositorio.\n","date":1557702001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557702001,"objectID":"df2de98e989605d1305be2524a5f9ad1","permalink":"https://imalexissaez.github.io/courses/python-basic/pb36-paquetes-ii/","publishdate":"2019-05-13T00:00:01+01:00","relpermalink":"/courses/python-basic/pb36-paquetes-ii/","section":"courses","summary":"Vídeo   Notas personales Veamos cómo crear paquetes distribuibles para que otras personas puedan utilizar nuestro código fuente. El proceso a seguir se reduce a dos sencillos pasos:\n Crear el paquete. Instalar el paquete.  En la lección anterior generamos el paquete calculos como una carpeta en el interior del directorio del repositorio donde estamos almacenando todos los archivos de este curso. Desde la raíz del mencionado directorio, utilizamos los módulos contenidos en dicho paquete en, por ejemplo, paquetes_1.","tags":null,"title":"36. Paquetes distribuibles","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección abordaremos cómo trabajar con ficheros externos de texto, utilizando para tal empresa el módulo io. Nuestro objetivo será conseguir la persistencia de datos, es decir, salvaguardar los datos que estamos manipulando para que no se pierdan al finalizar una sesión de Python.\nExisten dos alternativas para conseguir el mencionado objetivo:\n Manejar archivos externos. Trabajar con bases de datos (BBDD).  Las fases necesarias para guardar cierta información en archivos externos son:\n Creación del archivo externo. Apertura del archivo externo. Manipulación del archivo externo. Cierre del archivo externo.  La documentación del módulo io la podemos encontrar en este enlace.\nVeamos un ejemplo sencillo en el que crearemos un archivo donde almacenar una frase. Empecemos tecleando:\nfrom io import open\rarchivo_texto = open(\u0026quot;archivo.txt\u0026quot;, \u0026quot;w\u0026quot;)\r Nota: un archivo lo podemos abrir en modo lectura (r), escritura (w), agregar (a)\u0026hellip;\nSi ahora acudimos al interior de la carpeta, encontraremos un archivo de texto vacío denominado archivo.txt. En absoluto es necesario que almacenemos el fichero en una carpeta, pero únicamente procedo así para que el repositorio mantenga una estructura coherente.\nA continuación, veamos cómo incluir información (texto) en dicho archivo:\nfrom io import open\r# Creación + Apertura\rarchivo_texto = open(\u0026quot;archivo.txt\u0026quot;, \u0026quot;w\u0026quot;)\rfrase = \u0026quot;Es un estupendo día para estudiar Python\\nen Youtube.\u0026quot;\r# Manipulación\rarchivo_texto.write(frase)\r# Cierre\rarchivo_texto.close()\r De esta manera, hemos incluido el texto declarado en la variable frase en el fichero archivo.txt.\nActo seguido, estudiemos cómo abrir un archivo en modo lectura y acceder a su contenido:\nfrom io import open\rarchivo_texto = open(\u0026quot;archivo.txt\u0026quot;, \u0026quot;r\u0026quot;)\rtexto = archivo_texto.read()\rarchivo_texto.close()\rprint(texto)\r Es un estupendo día para estudiar Python\ren Youtube.\r Otro método que nos puede resultar de utilidad a la hora de leer un archivo es readlines(), que accede a la información almacenada línea a línea y la guarda en una lista:\nfrom io import open\rarchivo_texto = open(\u0026quot;archivo.txt\u0026quot;, \u0026quot;r\u0026quot;)\rlineas_texto = archivo_texto.readlines()\rarchivo_texto.close()\rprint(lineas_texto)\r ['Es un estupendo día para estudiar Python\\n', 'en Youtube.']\r Al ser una lista, podemos utilizar ahora todo lo que hemos aprendido sobre ellas:\nprint(lineas_texto[0])\r Es un estupendo día para estudiar Python\r Finalmente, veamos cómo abrir un archivo para agregar información. Para no alterar el contenido de archivo.txt, almacenaremos sus frases en una variable, las escribiremos en un nuevo fichero, archivo2.txt, y sobre este último será donde agreguemos contenido adicional:\nfrom io import open\rarchivo1 = open(\u0026quot;archivo.txt\u0026quot;, \u0026quot;r\u0026quot;)\rtexto = archivo1.read()\rarchivo1.close()\rarchivo2 = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;w\u0026quot;)\rarchivo2.write(texto)\rarchivo2.close()\rarchivo2 = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;a\u0026quot;)\rarchivo2.write(\u0026quot;\\n¡Mañana más!\u0026quot;)\rarchivo2.close()\r Si acudimos a la carpeta, comprobaremos la existencia de un fichero denominado archivo2.txt, que contiene tres líneas.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/37/ del repositorio.\n","date":1557788401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557788401,"objectID":"1bbe4fba2b0b9797e1a080eacb4770b7","permalink":"https://imalexissaez.github.io/courses/python-basic/pb37-archivos-i/","publishdate":"2019-05-14T00:00:01+01:00","relpermalink":"/courses/python-basic/pb37-archivos-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección abordaremos cómo trabajar con ficheros externos de texto, utilizando para tal empresa el módulo io. Nuestro objetivo será conseguir la persistencia de datos, es decir, salvaguardar los datos que estamos manipulando para que no se pierdan al finalizar una sesión de Python.\nExisten dos alternativas para conseguir el mencionado objetivo:\n Manejar archivos externos. Trabajar con bases de datos (BBDD).  Las fases necesarias para guardar cierta información en archivos externos son:","tags":null,"title":"37. Archivos I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Continuemos el estudio de la manipulación de ficheros externos de texto, con el módulo io, analizando en esta ocasión cómo manejar punteros en texto.\nPara ello, movamos el último archivo de texto generado en la lección anterior (archivo2.txt) a la carpeta, para así mantener la coherencia de la estructura de ficheros del repositorio. Tras ello, tecleemos:\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rprint(archivo.read())\rarchivo.close()\r Es un estupendo día para estudiar Python\ren Youtube.\r¡Mañana más!\r Si no indicamos lo contrario, la función .read() sitúa el puntero al inicio del archivo y comienza entonces su lectura. Cuando finaliza esta, la posición del puntero se ubica tras el último carácter. Esto implica que si ahora escribimos de nuevo la instrucción print(archivo.read()), nada se mostraría en la consola, puesto que tras la posición que ha quedado el puntero no existe información alguna.\nSe puede inicializar la posición del puntero utilizando la función .seek(), que como argumento recibe el carácter desde el que deseamos comenzar la lectura del archivo.\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rprint(archivo.read())\rarchivo.seek(0) # Reinicio posición puntero\rprint(archivo.read())\rarchivo.seek(10) # Establezco posición puntero en carácter 10\rprint(archivo.read())\rarchivo.close()\r Es un estupendo día para estudiar Python\ren Youtube.\r¡Mañana más!\rEs un estupendo día para estudiar Python\ren Youtube.\r¡Mañana más!\rpendo día para estudiar Python\ren Youtube.\r¡Mañana más!\r Con el método .read() también podemos modificar la función del puntero, aunque de manera algo diferente a cómo se lleva a cabo el proceso con .seek(). La primera lee hasta la posición del puntero que le indiquemos como argumento, mientras que la segunda posiciona el puntero en una posición y la lectura se efectúa a partir de dicha posición.\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rprint(archivo.read(11))\rprint(archivo.read())\rarchivo.close()\r Es un estup\rendo día para estudiar Python\ren Youtube.\r¡Mañana más!\r Para situar el puntero justo en medio de un archivo de texto podemos emplear la siguiente estrategia:\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rarchivo.seek(len(archivo.read()) / 2)\rprint(archivo.read())\rarchivo.close()\r r Python\ren Youtube.\r¡Mañana más!\r ¿Y si queremos situar el puntero al final de la primera línea?\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rarchivo.seek(len(archivo.readline()))\rprint(archivo.read())\rarchivo.close()\r en Youtube.\r¡Mañana más!\r Un archivo lo podemos abrir, simultáneamente, en modo lectura y escritura (\u0026quot;r+\u0026quot;), para realizar ambas acciones a la vez si nos es preciso. Generemos un fichero denominado archivo3.txt, con el mismo contenido que aquel con el que llevamos trabajando a lo largo de toda esta lección. Después, tecleamos:\nfrom io import open\rarchivo = open(\u0026quot;archivo3.txt\u0026quot;, \u0026quot;r+\u0026quot;) # lectura y escritura\rarchivo.write(\u0026quot;Comienzo del texto: \u0026quot;)\rarchivo.seek(0)\rprint(archivo.read())\rarchivo.close()\r Comienzo del texto: para estudiar Python\ren Youtube.\r¡Mañana más!\r Al abrir el archivo, el puntero se posiciona al principio del mismo. Así, cuando usamos el método .write(), efectivamente sobreescribimos el contenido que originalmente hubiera (en tantas posiciones como longitud posea la nueva cadena de texto).\nAsí, para incluir una línea en mitad del documento (la segunda en este caso particular), un posible enfoque sería:\nfrom io import open\rarchivo = open(\u0026quot;archivo3.txt\u0026quot;, \u0026quot;r+\u0026quot;) # lectura y escritura\rlineas = archivo.readlines()\rlineas[1] = \u0026quot;Esta línea ha sido incluida desde el exterior.\\n\u0026quot;\rarchivo.seek(0)\rarchivo.writelines(lineas)\rarchivo.seek(0)\rprint(archivo.read())\rarchivo.close()\r Comienzo del texto: para estudiar Python\rEsta línea ha sido incluida desde el exterior.\r¡Mañana más!\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/38/ del repositorio.\n","date":1557788402,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557788402,"objectID":"2f463b5a40cebc8d79e9cbdc40ecd21d","permalink":"https://imalexissaez.github.io/courses/python-basic/pb38-archivos-ii/","publishdate":"2019-05-14T00:00:02+01:00","relpermalink":"/courses/python-basic/pb38-archivos-ii/","section":"courses","summary":"Vídeo   Notas personales Continuemos el estudio de la manipulación de ficheros externos de texto, con el módulo io, analizando en esta ocasión cómo manejar punteros en texto.\nPara ello, movamos el último archivo de texto generado en la lección anterior (archivo2.txt) a la carpeta, para así mantener la coherencia de la estructura de ficheros del repositorio. Tras ello, tecleemos:\nfrom io import open\rarchivo = open(\u0026quot;archivo2.txt\u0026quot;, \u0026quot;r\u0026quot;)\rprint(archivo.read())\rarchivo.","tags":null,"title":"38. Archivos II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección estudiaremos cómo serializar colecciones de ciertos objetos. La serialización consiste en guardar en un fichero externo una lista, un diccionario o, incluso, un objeto; con la particularidad de que la codificación de dicho fichero es binaria.\nEsta estrategia resulta de utilidad a la hora de compartir archivos por Internet, ya que su distribución es más sencilla, o bien si deseamos guardarlo en un dispositivo de almacenamiento externo o en una base de datos.\nPara tal empresa utilizaremos la biblioteca de Python pickle, para aprovechar los métodos:\n dump(): vuelca datos en un fichero binario externo, y load(): carga datos de un fichero binario externo.  Veamos un ejemplo sencillo de aplicación de ambas funciones. Almacenaremos en un archivo binario externo una lista de nombres y, posteriormente, la rescataremos:\nimport pickle\rnombres = [\u0026quot;Pedro\u0026quot;, \u0026quot;Ana\u0026quot;, \u0026quot;María\u0026quot;, \u0026quot;Isabel\u0026quot;]\rfichero = open(\u0026quot;lista_nombres\u0026quot;, \u0026quot;wb\u0026quot;)\rpickle.dump(nombres, fichero)\rfichero.close()\rdel fichero\r Notas:\n A la hora de crear el fichero externo en modo escritura, con el método open(), hemos de indicarle que esta será binaria, para lo cual el correspondiente parámetro toma como valor de argumento \u0026quot;wb\u0026quot;. La instrucción del borra el puntero de la memoria hacia la variable fichero, dejando de estar disponible su acceso a partir de ese momento. Al ejecutar el anterior bloque de código, en la carpeta correspondiente del repositorio), aparecerá un archivo externo de tipo binario denominado lista_nombres.  A continuamos, veamos cómo rescatar la información que reside en el interior del mencionado fichero.\nimport pickle\rfichero = open(\u0026quot;lista_nombres\u0026quot;, \u0026quot;rb\u0026quot;)\rlista = pickle.load(fichero)\rfichero.close()\rprint(lista)\r ['Pedro', 'Ana', 'María', 'Isabel']\r Nota: para activar el modo de lectura de archivos binarios, el parámetro correspondiente de la función open() ha de tomar el valor de argumento \u0026quot;rb\u0026quot;.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/39/ del repositorio.\n","date":1557874801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557874801,"objectID":"a5bb5dd108f991aebdb1bcce37702953","permalink":"https://imalexissaez.github.io/courses/python-basic/pb39-serializacion-i/","publishdate":"2019-05-15T00:00:01+01:00","relpermalink":"/courses/python-basic/pb39-serializacion-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección estudiaremos cómo serializar colecciones de ciertos objetos. La serialización consiste en guardar en un fichero externo una lista, un diccionario o, incluso, un objeto; con la particularidad de que la codificación de dicho fichero es binaria.\nEsta estrategia resulta de utilidad a la hora de compartir archivos por Internet, ya que su distribución es más sencilla, o bien si deseamos guardarlo en un dispositivo de almacenamiento externo o en una base de datos.","tags":null,"title":"39. Serialización I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, continuaremos estudiando el tema de la serialización, analizando ahora cómo llevar a cabo el proceso cuando hay objetos implicados.\nAprovechemos la clase Vehiculo que generamos anteriormente y cuyo código fuente recordemos era:\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\r A continuación, importemos la librería pickle y creemos una lista con algunas instancias de la clase Vehiculo:\nimport pickle\rcoche1 = Vehiculo(\u0026quot;Mazda\u0026quot;, \u0026quot;MX5\u0026quot;)\rcoche2 = Vehiculo(\u0026quot;Seat\u0026quot;, \u0026quot;León\u0026quot;)\rcoche3 = Vehiculo(\u0026quot;Renault\u0026quot;, \u0026quot;Megane\u0026quot;)\rcoches = [coche1, coche2, coche3]\rfichero = open(\u0026quot;coches\u0026quot;, \u0026quot;wb\u0026quot;)\rpickle.dump(coches, fichero)\rfichero.close()\rdel fichero\r Notas:\n Recordemos que estamos creando ficheros externos cuya codificación es binaria, es por ello que el valor del parámetro correspondiente de la función open() es \u0026quot;wb\u0026quot;. Al ejecutar el anterior bloque de código, aparecerá en la carpeta asociada del repositorio) el fichero coches.  Para rescatar la información de este archivo que acabamos de generar, tecleamos:\nimport pickle\rclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.frena = True\rdef estado(self):\rprint(\u0026quot;Marca:\u0026quot;, self.marca, \u0026quot;\\nModelo:\u0026quot;, self.modelo, \u0026quot;\\nEn marcha:\u0026quot;,\rself.enmarcha, \u0026quot;\\nAcelerando:\u0026quot;, self.acelera, \u0026quot;\\nFrenando:\u0026quot;,\rself.frena)\rfichero = open(\u0026quot;coches\u0026quot;, \u0026quot;rb\u0026quot;)\rcoches = pickle.load(fichero)\rprint(coches)\r [\u0026lt;__main__.Vehiculo object at 0x00000259428D65C0\u0026gt;, \u0026lt;__main__.Vehiculo object at 0x00000259428F7F28\u0026gt;, \u0026lt;__main__.Vehiculo object at 0x00000259428F7F98\u0026gt;]\r Efectivamente, disponemos ahora de una lista con tres objetos. No obstante, recordemos que tenemos el método estado para acceder a información de interés sobre dichos objetos. Así, si escribimos:\nfor coche in coches:\rprint(coche.estado())\r Marca: Mazda Modelo: MX5 En marcha: False Acelerando: False Frenando: False\rNone\rMarca: Seat Modelo: León En marcha: False Acelerando: False Frenando: False\rNone\rMarca: Renault Modelo: Megane En marcha: False Acelerando: False Frenando: False\rNone\r Nota: como podemos comprobar arriba, si hacemos la recuperación de la serialización en un fichero distinto, la definición de la clase Vehiculo es necesario que figure asimismo (en caso contrario arroja Python un error). El problema radica en que el nuevo archivo no tiene información sobre la clase Vehiculo ni, por supuesto, del método estado().\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/40/ del repositorio.\n","date":1557961201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557961201,"objectID":"59d27b434f5c5a74cda99e5376e1d52c","permalink":"https://imalexissaez.github.io/courses/python-basic/pb40-serializacion-ii/","publishdate":"2019-05-16T00:00:01+01:00","relpermalink":"/courses/python-basic/pb40-serializacion-ii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, continuaremos estudiando el tema de la serialización, analizando ahora cómo llevar a cabo el proceso cuando hay objetos implicados.\nAprovechemos la clase Vehiculo que generamos anteriormente y cuyo código fuente recordemos era:\nclass Vehiculo():\rdef __init__(self, marca, modelo):\rself.marca = marca\rself.modelo = modelo\rself.enmarcha = False\rself.acelera = False\rself.frena = False\rdef arrancar(self):\rself.enmarcha = True\rdef acelerar(self):\rself.acelera = True\rdef frenar(self):\rself.","tags":null,"title":"40. Serialización II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, continuaremos estudiando cómo guardar datos de forma permanente en ficheros externos, reforzando así los contenidos aprendidos hasta el momento.\nEmpecemos importando la librería pickle y creando una clase sencilla: Persona.\nimport pickle\rclass Persona:\rdef __init__(self, nombre, genero, edad):\rself.nombre = nombre\rself.genero = genero\rself.edad = edad\rprint(\u0026quot;Se ha creado una persona nueva con el nombre de\u0026quot;, self.nombre)\rdef __str__(self):\rreturn \u0026quot;{} {} {}\u0026quot;.format(self.nombre, self.genero, self.edad)\r Nota: el método __str__() convierte en cadena de texto la información de un objeto.\nAsí, si ahora tecleamos:\nsandra = Persona(\u0026quot;Sandra\u0026quot;, \u0026quot;Femenino\u0026quot;, \u0026quot;29\u0026quot;)\r Se ha creado una persona nueva con el nombre de Sandra\r El objetivo será crear algunos objetos de dicha clase, almacenarlos en una lista (empresa que realizaremos a través de otra clase, ListaPersonas) y después volcar la información en un fichero externo, al cual podamos acceder en cualquier instante.\nimport pickle\rclass Persona:\rdef __init__(self, nombre, genero, edad):\rself.nombre = nombre\rself.genero = genero\rself.edad = edad\rprint(\u0026quot;Se ha creado una persona nueva con el nombre de\u0026quot;, self.nombre)\rdef __str__(self):\rreturn \u0026quot;{} {} {}\u0026quot;.format(self.nombre, self.genero, self.edad)\rclass ListaPersonas:\rpersonas = []\rdef agregar_personas(self, persona):\rself.personas.append(persona)\rdef mostrar_personas(self):\rfor persona in self.personas:\rprint(persona.__str__())\rlista_personas = ListaPersonas()\rsandra = Persona(\u0026quot;Sandra\u0026quot;, \u0026quot;Femenino\u0026quot;, \u0026quot;29\u0026quot;)\rlista_personas.agregar_personas(sandra)\rantonio = Persona(\u0026quot;Antonio\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;39\u0026quot;)\rlista_personas.agregar_personas(antonio)\rana = Persona(\u0026quot;Ana\u0026quot;, \u0026quot;Femenino\u0026quot;, \u0026quot;20\u0026quot;)\rlista_personas.agregar_personas(ana)\rlista_personas.mostrar_personas()\r Se ha creado una persona nueva con el nombre de Sandra\rSe ha creado una persona nueva con el nombre de Antonio\rSe ha creado una persona nueva con el nombre de Ana\rSandra Femenino 29\rAntonio Masculino 39\rAna Femenino 20\r Almacenemos ahora la lista de personas que hemos generado en un fichero externo. Para ello, incluiremos los pasos necesarios del mencionado proceso en el constructor de la clase ListaPersonas:\nclass ListaPersonas:\rpersonas = []\rdef __init__(self):\rfichero = open(\u0026quot;lista_de_personas\u0026quot;, \u0026quot;ab+\u0026quot;)\rfichero.seek(0) # Desplazamos cursor al principio\rtry:\rself.personas = pickle.load(fichero) # Cargamos información\rprint(\u0026quot;Se cargaron {} personas.\u0026quot;.format(len(self.personas)))\rexcept EOFError:\rprint(\u0026quot;El fichero está vacío.\u0026quot;) # Para la primera vez que abrimos\rfinally:\rfichero.close()\rdel fichero\rdef agregar_personas(self, persona):\rself.personas.append(persona)\rdef mostrar_personas(self):\rfor persona in self.personas:\rprint(persona.__str__())\rlista_personas = ListaPersonas()\r El fichero está vacío.\r Nota: en la función open(), el valor del argumento \u0026quot;ab+\u0026quot; nos permite agregar información a un fichero de codificación binaria.\nA continuación, modifiquemos el método agregar_personas() para que una vez añadida a la lista la nueva información, la almacene en el fichero externo.\nclass ListaPersonas:\rpersonas = []\rdef __init__(self):\rfichero = open(\u0026quot;lista_de_personas\u0026quot;, \u0026quot;ab+\u0026quot;)\rfichero.seek(0) # Desplazamos cursor al principio\rtry:\rself.personas = pickle.load(fichero) # Cargamos información\rprint(\u0026quot;Se cargaron {} personas.\u0026quot;.format(len(self.personas)))\rexcept EOFError:\rprint(\u0026quot;El fichero está vacío.\u0026quot;) # Para la primera vez que abrimos\rfinally:\rfichero.close()\rdel fichero\rdef agregar_personas(self, persona):\rself.personas.append(persona)\rself.guardar_personas()\rdef mostrar_personas(self):\rfor persona in self.personas:\rprint(persona.__str__())\rdef guardar_personas(self):\rfichero = open(\u0026quot;lista_de_personas\u0026quot;, \u0026quot;wb\u0026quot;)\rpickle.dump(self.personas, fichero)\rfichero.close()\rdel fichero\r Así, si ejecutamos ahora el siguiente bloque de código:\nlista_personas = ListaPersonas()\rsandra = Persona(\u0026quot;Sandra\u0026quot;, \u0026quot;Femenino\u0026quot;, \u0026quot;29\u0026quot;)\rlista_personas.agregar_personas(sandra)\rantonio = Persona(\u0026quot;Antonio\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;39\u0026quot;)\rlista_personas.agregar_personas(antonio)\rana = Persona(\u0026quot;Ana\u0026quot;, \u0026quot;Femenino\u0026quot;, \u0026quot;20\u0026quot;)\rlista_personas.agregar_personas(ana)\r El fichero está vacío.\rSe ha creado una persona nueva con el nombre de Sandra\rSe ha creado una persona nueva con el nombre de Antonio\rSe ha creado una persona nueva con el nombre de Ana\r Recuperemos la información guardada en el fichero externo, utilizando para ello un método que añadiremos a la clase ListaPersonas, mostrar_informacion:\nclass ListaPersonas:\rpersonas = []\rdef __init__(self):\rfichero = open(\u0026quot;lista_de_personas\u0026quot;, \u0026quot;ab+\u0026quot;)\rfichero.seek(0) # Desplazamos cursor al principio\rtry:\rself.personas = pickle.load(fichero) # Cargamos información\rprint(\u0026quot;Se cargaron {} personas.\u0026quot;.format(len(self.personas)))\rexcept EOFError:\rprint(\u0026quot;El fichero está vacío.\u0026quot;) # Para la primera vez que abrimos\rfinally:\rfichero.close()\rdel fichero\rdef agregar_personas(self, persona):\rself.personas.append(persona)\rself.guardar_personas()\rdef mostrar_personas(self):\rfor persona in self.personas:\rprint(persona.__str__())\rdef guardar_personas(self):\rfichero = open(\u0026quot;lista_de_personas\u0026quot;, \u0026quot;wb\u0026quot;)\rpickle.dump(self.personas, fichero)\rfichero.close()\rdel fichero\rdef mostrar_informacion(self):\rprint(\u0026quot;La información del fichero externo es la siguiente:\u0026quot;)\rfor persona in self.personas:\rprint(persona.__str__())\r Así,\nlista_personas.mostrar_informacion()\r La información del fichero externo es la siguiente:\rSandra Femenino 29\rAntonio Masculino 39\rAna Femenino 20\r Agreguemos una nueva persona. Para ello, tecleamos por ejemplo:\njuan = Persona(\u0026quot;Juan\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;47\u0026quot;)\rlista_personas.agregar_personas(juan)\rlista_personas.mostrar_informacion()\r Se ha creado una persona nueva con el nombre de Juan\rLa información del fichero externo es la siguiente:\rSandra Femenino 29\rAntonio Masculino 39\rAna Femenino 20\rJuan Masculino 47\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/41/ del repositorio.\n","date":1558306801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558306801,"objectID":"f4d41ea20398b65ff0188bc70b9e58e9","permalink":"https://imalexissaez.github.io/courses/python-basic/pb41-guardado-permanente/","publishdate":"2019-05-20T00:00:01+01:00","relpermalink":"/courses/python-basic/pb41-guardado-permanente/","section":"courses","summary":"Vídeo   Notas personales En esta lección, continuaremos estudiando cómo guardar datos de forma permanente en ficheros externos, reforzando así los contenidos aprendidos hasta el momento.\nEmpecemos importando la librería pickle y creando una clase sencilla: Persona.\nimport pickle\rclass Persona:\rdef __init__(self, nombre, genero, edad):\rself.nombre = nombre\rself.genero = genero\rself.edad = edad\rprint(\u0026quot;Se ha creado una persona nueva con el nombre de\u0026quot;, self.nombre)\rdef __str__(self):\rreturn \u0026quot;{} {} {}\u0026quot;.","tags":null,"title":"41. Guardado permanente","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, comenzamos el estudio de las interfaces gráficas en Python, analizando para ello la librería Tkinter. Las interfaces gráficas, también denominadas GUI, son intermediarios entre el programa y el usuario. Están formadas por un conjunto de gráficos como ventanas, botones, menús, casillas de verificación, etc.\nAdemás de la mencionada, existen otras librerías alternativas para trabajar con interfaces gráficas:\n WxPython PyQT PyGTK  Tkinter es un \u0026lsquo;\u0026lsquo;puente\u0026rsquo;\u0026rsquo; entre Python y la librería TCL / TK.\nLa estructura de una interfaz gráfica en Python es:\n Raíz: la ventana de la aplicación propiamente dicha. Frame: estructura que agrupa diversos elementos. Widgets: elementos de la aplicación. En ocasiones, al frame también se le considera un widget más.  A continuación, veamos cómo construir la raíz:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.mainloop()\r Al ejecutar el anterior bloque de código aparece una ventana en blanco en nuestro escritorio, con algunos botones que permiten interactuar con ella a la manera que estamos habituados.\n\r\rPrimera ventana.\r\r\rPara que una ventana pueda mantenerse en ejecución, debe estar en una especie de \u0026lsquo;\u0026lsquo;bucle infinito\u0026rsquo;\u0026rsquo; (a la espera o escucha de eventos), estado que conseguimos a través de la función mainloop(), que, por el momento, habrá de estar siempre al final de nuestros programas.\nLa documentación para la librería Tkinter la podemos encontrar siguiendo este enlace.\nModifiquemos algunas de las características que esta ventana posee por defecto:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=False, height=False) # raiz.resizable(0, 0)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.geometry(\u0026quot;450x300\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rraiz.mainloop()\r Notas:\n title() nos permite cambiar el título de la ventana generada. resizable() acepta dos valores booleanos para indicar si permitimos que se modifique la anchura o la altura de la ventana. Según los argumentos escogidos, incluso queda deshabilitado el botón de maximizar ventana. iconbitmap() nos da la posibilidad de cambiar el icono de la ventana generada, que, por defecto, es una especie de pluma. Para ello, hemos de almacenar en el directorio de la aplicación (o tener bien localizada su ruta) un archivo de extensión .ico (buscar en Google \u0026lsquo;\u0026lsquo;conversor .ico\u0026rsquo;\u0026rsquo; para acceder a aplicaciones online que nos generen este tipo de ficheros). geometry() configura el ancho y el alto de la ventana. config(), entre otras acciones, nos permite cambiar el color del fondo.  \r\rModificando propiedades de la ventana.\r\r\rHasta el momento, las ventanas requieren de la consola de Python para su funcionamiento. Si queremos que este sea independiente de ella, hemos de modificar la extensión de la aplicación de .py a .pyw.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/42/ del repositorio.\n","date":1558306802,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558306802,"objectID":"2a85c98f038e24aadedb8b7f92a5d53d","permalink":"https://imalexissaez.github.io/courses/python-basic/pb42-interfaces-graficas-i/","publishdate":"2019-05-20T00:00:02+01:00","relpermalink":"/courses/python-basic/pb42-interfaces-graficas-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, comenzamos el estudio de las interfaces gráficas en Python, analizando para ello la librería Tkinter. Las interfaces gráficas, también denominadas GUI, son intermediarios entre el programa y el usuario. Están formadas por un conjunto de gráficos como ventanas, botones, menús, casillas de verificación, etc.\nAdemás de la mencionada, existen otras librerías alternativas para trabajar con interfaces gráficas:\n WxPython PyQT PyGTK  Tkinter es un \u0026lsquo;\u0026lsquo;puente\u0026rsquo;\u0026rsquo; entre Python y la librería TCL / TK.","tags":null,"title":"42. Interfaces gráficas I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Después de introducir, en la lección anterior, la raíz de una interfaz gráfica, en esta abordaremos la construcción y uso de frames. Comencemos recuperando el código fuente de la \u0026lsquo;\u0026lsquo;aplicación\u0026rsquo;\u0026rsquo; que generamos con anterioridad:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=False, height=False) # raiz.resizable(0, 0)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.geometry(\u0026quot;450x300\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rraiz.mainloop()\r A continuación, crearemos un frame y lo empaquetaremos (ubicaremos) dentro de la raíz disponible a través del método pack(). Además, prescindiremos de la instrucción raiz.geometry(), para así estar en condiciones de configurar el tamaño del frame (la raíz se adaptará automáticamente al tamaño de sus elementos internos):\nfrom tkinter import Tk, Frame\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=True, height=True)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame()\rframe.pack()\rframe.config(bg=\u0026quot;tomato\u0026quot;, width=\u0026quot;450\u0026quot;, height=\u0026quot;300\u0026quot;)\rraiz.mainloop()\r A primera vista, al ejecutar el aterior bloque de código, da la sensación de que hemos perdido el color de fondo declarado para la aplicación (lightblue). No obstante, como ahora permitimos manipular el tamaño de la ventana (mediante la instrucción raiz.resizable(width=True, height=True)), al agrandarla comprobamos que todo funciona correctamente.\n\r\rLos dos colores de fondo siguen disponibles.\r\r\rNota: en esta página podemos encontrar un buen recurso para acceder a una paleta de colores declarados por nombres y disponibles para la librería tkinter.\nPor otro lado, observamos que el frame tiene un tamaño fijo, por mucho que manipulemos el tamaño de la ventana, las dimensiones del frame no se alteran, así como su posición, que permanece centrada en la parte superior de la ventana de la aplicación. Este comportamiento es el dado por defecto, que podemos configurar de manera diferente, si así lo deseamos, a través del método pack().\nfrom tkinter import Tk, Frame\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=True, height=True)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame()\rframe.pack(side=\u0026quot;left\u0026quot;, anchor=\u0026quot;s\u0026quot;, fill=\u0026quot;x\u0026quot;, expand=\u0026quot;True\u0026quot;)\rframe.config(bg=\u0026quot;tomato\u0026quot;, width=\u0026quot;450\u0026quot;, height=\u0026quot;300\u0026quot;)\rraiz.mainloop()\r \r\rModificando propiedades del frame.\r\r\rLas opciones de configuración de los frames son ciertamente numerosas. Por ejemplo, podemos añadirle un borde (parámetros bd y relief) o cambiar el icono del ratón cuando se adentra en el interior del frame (parámetro cursor):\nfrom tkinter import Tk, Frame\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=True, height=True)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame()\rframe.pack(side=\u0026quot;left\u0026quot;, anchor=\u0026quot;s\u0026quot;)\rframe.config(bg=\u0026quot;tomato\u0026quot;,\rwidth=\u0026quot;450\u0026quot;,\rheight=\u0026quot;300\u0026quot;,\rbd=35,\rrelief=\u0026quot;groove\u0026quot;,\rcursor=\u0026quot;pirate\u0026quot;)\rraiz.mainloop()\r \r\rAñadiendo un marco al frame.\r\r\rObviamente, todo aquello que hemos visto de cara a configurar un frame es aplicable a la propia raíz y dependerá de cómo deseemos diseñar nuestra aplicación.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/43/ del repositorio.\n","date":1558393201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558393201,"objectID":"eb83538f8fa76dff8fa8f684d04437e4","permalink":"https://imalexissaez.github.io/courses/python-basic/pb43-interfaces-graficas-ii/","publishdate":"2019-05-21T00:00:01+01:00","relpermalink":"/courses/python-basic/pb43-interfaces-graficas-ii/","section":"courses","summary":"Vídeo   Notas personales Después de introducir, en la lección anterior, la raíz de una interfaz gráfica, en esta abordaremos la construcción y uso de frames. Comencemos recuperando el código fuente de la \u0026lsquo;\u0026lsquo;aplicación\u0026rsquo;\u0026rsquo; que generamos con anterioridad:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.title(\u0026quot;Ventana de pruebas\u0026quot;)\rraiz.resizable(width=False, height=False) # raiz.resizable(0, 0)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.geometry(\u0026quot;450x300\u0026quot;)\rraiz.config(bg=\u0026quot;lightblue\u0026quot;)\rraiz.mainloop()\r A continuación, crearemos un frame y lo empaquetaremos (ubicaremos) dentro de la raíz disponible a través del método pack().","tags":null,"title":"43. Interfaces gráficas II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, analizaremos cómo trabajar con el widget Label, perteneciente a la librería tkinter, que nos permite mostrar texto o imágenes en nuestras interfaces gráficas. No es un elemento con el que podamos interactuar, es decir, no podremos borrarlo, arrastrarlo, etc.\nSu sintaxis es:\nvariable = Label(contenedor, opciones)\r En esta página podemos consultar qué opciones disponibles ofrece el widget Label.\nPara ver en acción este widget, reutilicemos como base parte del código generado en lecciones anteriores:\nfrom tkinter import Tk, Frame\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Label\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=500, height=400)\rframe.pack()\rroot.mainloop()\r Añadimos ahora, antes de la instrucción root.mainloop(), las líneas de código:\nlabel = Label(frame, text=\u0026quot;Mi primera etiqueta.\u0026quot;)\rlabel.pack()\r \r\rPrimer contacto con la clase Label.\r\r\rQuedando el resultado de la ejecución como una ventana bastante reducida porque, recordemos, la raíz se adapta al tamaño de sus elementos integrados (aunque le hayamos indicado ciertas dimensiones previamente). Ello se debe al uso del método pack(). Veamos el efecto que produce utilizar la función place() en su lugar, pasándole las coordenadas donde deseamos situar el widget:\nfrom tkinter import Tk, Frame, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Label\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=500, height=400)\rframe.pack()\rlabel = Label(frame, text=\u0026quot;Mi primera etiqueta.\u0026quot;)\rlabel.place(x=100, y=200)\rroot.mainloop()\r \r\rUtilizando la función place().\r\r\rNota: Python utiliza un curioso sistema de coordenadas. La coordenada x indica la distancia horizontal al comienzo del widget tal como estamos acostumbrados en matemáticas. Sin embargo, la coordenada y indica la distancia vertical al comienzo del widget tomando como referencia la parte superior de la ventana y siendo los valores positivos desplazamientos hacia abajo.\nSi no vamos a utilizar en ningún momento la variable label, podemos aligerar un tanto el código escribiendo:\nfrom tkinter import Tk, Frame, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Label\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=500, height=400)\rframe.pack()\rLabel(frame, text=\u0026quot;Mi primera etiqueta.\u0026quot;).place(x=100, y=200)\rroot.mainloop()\r A partir de aquí, ya únicamente nos queda experimentar con las diferentes opciones asociadas al widget Label:\nfrom tkinter import Tk, Frame, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Label\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=500, height=400)\rframe.pack()\rLabel(frame, text=\u0026quot;Mi primera etiqueta.\u0026quot;, fg=\u0026quot;tomato\u0026quot;,\rfont=(\u0026quot;Arial\u0026quot;, 18)).place(x=100, y=200)\rroot.mainloop()\r \r\rProbando opciones adicionales para Label.\r\r\rAdicionalmente, el widget Label nos permite incluir (de forma nativa en la librería tkinter) imágenes de tipo gif o png. Por ejemplo, insertemos en nuestra aplicación esta imagen, que, en un alarde de originalidad, llamaremos avengers.png:\nfrom tkinter import Tk, Frame, Label, PhotoImage\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Label\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=500, height=400)\rframe.pack()\rimagen = PhotoImage(file=\u0026quot;avengers.png\u0026quot;)\rLabel(frame, image=imagen).pack() # .place() es otra posibilidad\rroot.mainloop()\r \r\rUna imagen como Label.\r\r\rNota: para que la ventana se adaptase automáticamente al tamaño de la imagen descargada, he utilizado el método pack() en lugar de la función place(). No obstante, con ambas opciones se puede conseguir el mismo resultado si ajustamos de manera fina sus correspondientes opciones.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/44/ del repositorio.\n","date":1558393202,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558393202,"objectID":"8bf9b300f5aa6788c0f9b2d1b9e1b7de","permalink":"https://imalexissaez.github.io/courses/python-basic/pb44-interfaces-graficas-iii/","publishdate":"2019-05-21T00:00:02+01:00","relpermalink":"/courses/python-basic/pb44-interfaces-graficas-iii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, analizaremos cómo trabajar con el widget Label, perteneciente a la librería tkinter, que nos permite mostrar texto o imágenes en nuestras interfaces gráficas. No es un elemento con el que podamos interactuar, es decir, no podremos borrarlo, arrastrarlo, etc.\nSu sintaxis es:\nvariable = Label(contenedor, opciones)\r En esta página podemos consultar qué opciones disponibles ofrece el widget Label.\nPara ver en acción este widget, reutilicemos como base parte del código generado en lecciones anteriores:","tags":null,"title":"44. Interfaces gráficas III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, tras haber estudiado en la anterior el widget Label, abordaremos el uso del widget Entry, cuyo funcionamento es realmente similar a nivel de sintaxis. Este último habilita, en nuestras ventanas, la posibilidad de introducir un cuadro de texto, desde el cual el usuario puede suministrar cierta información.\nfrom tkinter import Tk, Entry\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rcuadro_texto = Entry(root)\rcuadro_texto.pack()\rroot.mainloop()\r \r\rPrimer contacto con la clase Entry.\r\r\rA partir de ahora, podemos reutilizar los conceptos y propiedades aprendidas hasta el momento:\nfrom tkinter import Tk, Frame, Entry\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rcuadro_texto = Entry(frame)\rcuadro_texto.place(x=100, y=100)\rroot.mainloop()\r \r\rInsertando el widget en un frame.\r\r\rEmpecemos a combinar widgets añadiendo al lado del cuadro de texto una etiqueta que rece \u0026lsquo;\u0026lsquo;Nombre:'', como si quisiéramos elaborar un formulario de registro de datos personales. Utilizando la función place() es posible, pero resulta muy complicado cuadrar adecuadamente todos los espacios de la ventana de la aplicación.\nExisten dos alternativas a la hora de abordar esta situación:\n pack(), aunque ya sabemos que después se ajustará la ventana al tamaño de sus elementos internos, ignorando pues las dimensiones que establecimos en su declaración. grid(), construye una tabla dentro de la interfaz gráfica con tantas filas y columnas como nosotros queramos. Tras ello, podemos ubicar en la casilla que deseemos el elemento que nos interese.  Estudiemos el uso de esta última función mencionada:\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0)\rcuadro_nombre = Entry(frame)\rcuadro_nombre.grid(row=0, column=1)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1)\rroot.mainloop()\r \r\rProbando el método grid().\r\r\rPor defecto, los elementos se alinean centrados dentro de su correspondiente casilla de la rejilla. Con el parámetro sticky y los cuatro puntos cardinales (n, e, s, w y sus combinaciones por parejas) podemos modificar dicho comportamiento.\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;)\rcuadro_nombre = Entry(frame)\rcuadro_nombre.grid(row=0, column=1)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1)\rtfno_label = Label(frame, text=\u0026quot;Teléfono (fijo):\u0026quot;)\rtfno_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;)\rtfno_texto = Entry(frame)\rtfno_texto.grid(row=3, column=1)\rmovil_label = Label(frame, text=\u0026quot;Teléfono (móvil):\u0026quot;)\rmovil_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;)\rmovil_texto = Entry(frame)\rmovil_texto.grid(row=4, column=1)\rroot.mainloop()\r \r\rEl parámetro sticky en acción.\r\r\rPara evitar que los elementos aparezcan tan juntos, los parámetros padx y pady pueden resultarnos de utilidad, ya que nos permiten configurar la distancia del elemento al límite del contenedor donde se haya ubicado.\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcuadro_nombre = Entry(frame)\rcuadro_nombre.grid(row=0, column=1, padx=2, pady=2)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1, padx=2, pady=2)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1, padx=2, pady=2)\rtfno_label = Label(frame, text=\u0026quot;Teléfono (fijo):\u0026quot;)\rtfno_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rtfno_texto = Entry(frame)\rtfno_texto.grid(row=3, column=1, padx=2, pady=2)\rmovil_label = Label(frame, text=\u0026quot;Teléfono (móvil):\u0026quot;)\rmovil_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;)\rmovil_texto = Entry(frame)\rmovil_texto.grid(row=4, column=1)\rroot.mainloop()\r \r\rSeparando elementos con padx y pady.\r\r\rAhora, ya únicamente nos resta experimentar con la configuración de los distintos widgets estudiados, empleando para ello principalmente la función config() asociada a cada widget.\nFinalmente, veamos cómo añadir un cuadro de texto que nos permita introducir contraseñas. Buscamos que al suministrar la información, esta aparezca \u0026lsquo;\u0026lsquo;oculta\u0026rsquo;\u0026rsquo; tras asteriscos. El parámetro show de la función config() cumple dicho cometido:\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcuadro_nombre = Entry(frame)\rcuadro_nombre.grid(row=0, column=1, padx=2, pady=2)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1, padx=2, pady=2)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1, padx=2, pady=2)\rtfno_label = Label(frame, text=\u0026quot;Teléfono (fijo):\u0026quot;)\rtfno_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rtfno_texto = Entry(frame)\rtfno_texto.grid(row=3, column=1, padx=2, pady=2)\rmovil_label = Label(frame, text=\u0026quot;Teléfono (móvil):\u0026quot;)\rmovil_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;)\rmovil_texto = Entry(frame)\rmovil_texto.grid(row=4, column=1)\rpass_label = Label(frame, text=\u0026quot;Constraseña:\u0026quot;)\rpass_label.grid(row=5, column=0, sticky=\u0026quot;e\u0026quot;)\rpass_texto = Entry(frame)\rpass_texto.grid(row=5, column=1)\rpass_texto.config(show=\u0026quot;*\u0026quot;)\rroot.mainloop()\r \r\rUna contraseña más segura con show.\r\r\rCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/45/ del repositorio.\n","date":1558479601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558479601,"objectID":"fd4f8e7ef0597d014796315af50e05bf","permalink":"https://imalexissaez.github.io/courses/python-basic/pb45-interfaces-graficas-iv/","publishdate":"2019-05-22T00:00:01+01:00","relpermalink":"/courses/python-basic/pb45-interfaces-graficas-iv/","section":"courses","summary":"Vídeo   Notas personales En esta lección, tras haber estudiado en la anterior el widget Label, abordaremos el uso del widget Entry, cuyo funcionamento es realmente similar a nivel de sintaxis. Este último habilita, en nuestras ventanas, la posibilidad de introducir un cuadro de texto, desde el cual el usuario puede suministrar cierta información.\nfrom tkinter import Tk, Entry\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.","tags":null,"title":"45. Interfaces gráficas IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, presentaremos dos widgets nuevos: Text y Button. El primero de ellos nos permite introducir un texto de extensión considerable en un cuadro, mientras que el segundo simplemente se trata de la clase asociada a los botones que habitualmente pulsamos en cualquier aplicación.\nRetomemos el último ejemplo de la lección anterior:\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcuadro_nombre = Entry(frame)\rcuadro_nombre.grid(row=0, column=1, padx=2, pady=2)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1, padx=2, pady=2)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1, padx=2, pady=2)\rtfno_label = Label(frame, text=\u0026quot;Teléfono (fijo):\u0026quot;)\rtfno_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rtfno_texto = Entry(frame)\rtfno_texto.grid(row=3, column=1, padx=2, pady=2)\rmovil_label = Label(frame, text=\u0026quot;Teléfono (móvil):\u0026quot;)\rmovil_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;)\rmovil_texto = Entry(frame)\rmovil_texto.grid(row=4, column=1)\rpass_label = Label(frame, text=\u0026quot;Constraseña:\u0026quot;)\rpass_label.grid(row=5, column=0, sticky=\u0026quot;e\u0026quot;)\rpass_texto = Entry(frame)\rpass_texto.grid(row=5, column=1)\rpass_texto.config(show=\u0026quot;*\u0026quot;)\rroot.mainloop()\r Añadamos, a continuación del campo declarado para la introducción de la contraseña, uno dedicado a la biografía de la persona que está rellenando el formulario. Ello nos permitirá hacer uso de la clase Text, que habremos de importar al inicio del código. Así, si escribimos:\nbio_label = Label(frame, text=\u0026quot;Biografía:\u0026quot;)\rbio_label.grid(row=6, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rbio_texto = Text(frame, width=15, height=5)\rbio_texto.grid(row=6, column=1, padx=2, pady=2)\rscroll_vert = Scrollbar(frame, command=bio_texto.yview)\rscroll_vert.grid(row=6, column=2, sticky=\u0026quot;nsew\u0026quot;)\rbio_texto.config(yscrollcommand=scroll_vert.set)\r \r\rPrimer contacto con la clase Text.\r\r\rNotas:\n Conviene que declaremos unas longitudes adecuadas mediante los parámetros width y height, ya que las asignadas por defecto son ciertamente elevadas. El widget Text automáticamente permite la posibilidad de scroll, aunque si deseamos que aparezca una barra de desplazamiento lateral, hemos de indicarlo. Para ello, se requiere la construcción de un objeto de la clase Scrollbar (que hemos de importar de la librería tkinter) y asociarlo al cuadro de texto generado. La correspondiente instrucción que se ocupa de tal tarea en el bloque de código anterior es:  scroll_vert = Scrollbar(frame, command=bio_texto.yview)\r  Acto seguido, mediante el método grid(), y teniendo cuidado con el valor correspondiente para el parámetro column, terminamos haciendo que aparezca en la ventana de la aplicación. Para que se adapte al tamaño del cuadro de texto asociado, una posible estrategia es incluir sticky=\u0026quot;nsew\u0026quot; en la declaración del scroll. Por otro lado, si queremos que se posicione la barra de desplazamiento al nivel del texto que estamos introduciendo, incluiremos la instrucción bio_texto.config(yscrollcommand=scroll_vert.set) tras la declaración de la variable scroll_vert.  Pasemos ahora a añadir un botón a nuestra interfaz gráfica, para lo cual haremos uso de la clase Button. Posicionemos uno en la raíz (root) de la ventana de la aplicación:\nboton_envio = Button(root, text=\u0026quot;Enviar\u0026quot;)\rboton_envio.pack()\r \r\rPrimer contacto con la clase Button.\r\r\rA continuación, veamos cómo añadir cierta funcionalidad al botón generado. Para ello, incluimos en su declaración el parámetro command=codigo_boton,\nboton_envio = Button(root, text=\u0026quot;Enviar\u0026quot;, command=codigo_boton)\r donde codigo_boton será una función que contendrá el código con las acciones que deseemos se lleven a cabo cuando el usuario pulse sobre el botón.\nPor ejemplo, aunque no sea la característica habitual de este tipo de botones, hagamos que cuando el usuario pulse sobre el mencionado botón, se escriba nuestro nombre automáticamente en el cuadro de texto correspondiente. Así, tecleamos:\ndef codigo_boton():\rmi_nombre.set(\u0026quot;Alexis\u0026quot;)\rroot = Tk()\rmi_nombre = StringVar()\r La instrucción mi_nombre = StringVar() únicamente le indica a Python que la variable mi_nombre es una cadena de caracteres. Como viene siendo habitual, habremos de importar la correspondiente clase al comienzo del código (o, directamente, utilizar el esquema from ... import *). Ahora, modificamos la declaración del cuadro de texto asociado al nombre del usuario introduciendo el parámetro textvariable:\ncuadro_nombre = Entry(frame, textvariable=mi_nombre)\r Nota técnica: no podemos utilizar StringVar() antes de definir la raíz (root) de la aplicación.\n\r\r¡El botón está vivo!¡Vivo!\r\r\rSi la función set() nos permite declarar el valor de un cuadro de texto, para obtener la información que el usuario introduzca en uno, utilizaremos, en próximas lecciones, el método get().\nFinalmente, comparto el código completo de esta última aplicación generada, para tener acceso así a una visión global de la misma:\nfrom tkinter import Tk, Frame, Button, Entry, Label, Scrollbar, StringVar, Text\rdef codigo_boton():\rmi_nombre.set(\u0026quot;Alexis\u0026quot;)\rroot = Tk()\rmi_nombre = StringVar()\rroot.title(\u0026quot;Probando los widgets Text y Button\u0026quot;)\rroot.resizable(width=True, height=True)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rroot.config(bg=\u0026quot;lightblue\u0026quot;)\rframe = Frame(root, width=450, height=300)\rframe.pack()\rnombre_label = Label(frame, text=\u0026quot;Nombre:\u0026quot;)\rnombre_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcuadro_nombre = Entry(frame, textvariable=mi_nombre)\rcuadro_nombre.grid(row=0, column=1, padx=2, pady=2)\rapellido_label = Label(frame, text=\u0026quot;Apellido:\u0026quot;)\rapellido_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rapellido_texto = Entry(frame)\rapellido_texto.grid(row=1, column=1, padx=2, pady=2)\rdireccion_label = Label(frame, text=\u0026quot;Dirección:\u0026quot;)\rdireccion_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rdireccion_texto = Entry(frame)\rdireccion_texto.grid(row=2, column=1, padx=2, pady=2)\rtfno_label = Label(frame, text=\u0026quot;Teléfono (fijo):\u0026quot;)\rtfno_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rtfno_texto = Entry(frame)\rtfno_texto.grid(row=3, column=1, padx=2, pady=2)\rmovil_label = Label(frame, text=\u0026quot;Teléfono (móvil):\u0026quot;)\rmovil_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rmovil_texto = Entry(frame)\rmovil_texto.grid(row=4, column=1, padx=2, pady=2)\rpass_label = Label(frame, text=\u0026quot;Constraseña:\u0026quot;)\rpass_label.grid(row=5, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rpass_texto = Entry(frame)\rpass_texto.grid(row=5, column=1, padx=2, pady=2)\rpass_texto.config(show=\u0026quot;*\u0026quot;)\rbio_label = Label(frame, text=\u0026quot;Biografía:\u0026quot;)\rbio_label.grid(row=6, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rbio_texto = Text(frame, width=15, height=5)\rbio_texto.grid(row=6, column=1, padx=2, pady=2)\rscroll_vert = Scrollbar(frame, command=bio_texto.yview)\rscroll_vert.grid(row=6, column=2, sticky=\u0026quot;nsew\u0026quot;)\rbio_texto.config(yscrollcommand=scroll_vert.set)\rboton_envio = Button(root, text=\u0026quot;Enviar\u0026quot;, command=codigo_boton)\rboton_envio.pack()\rroot.mainloop()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/46/ del repositorio.\n","date":1558566001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558566001,"objectID":"596f6e291500341922f6a3c6bb0627be","permalink":"https://imalexissaez.github.io/courses/python-basic/pb46-interfaces-graficas-v/","publishdate":"2019-05-23T00:00:01+01:00","relpermalink":"/courses/python-basic/pb46-interfaces-graficas-v/","section":"courses","summary":"Vídeo   Notas personales En esta lección, presentaremos dos widgets nuevos: Text y Button. El primero de ellos nos permite introducir un texto de extensión considerable en un cuadro, mientras que el segundo simplemente se trata de la clase asociada a los botones que habitualmente pulsamos en cualquier aplicación.\nRetomemos el último ejemplo de la lección anterior:\nfrom tkinter import Tk, Frame, Entry, Label\rroot = Tk()\rroot.title(\u0026quot;Probando el widget Entry\u0026quot;)\rroot.","tags":null,"title":"46. Interfaces gráficas V","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales A partir de esta lección, utilizando los conocimientos adquiridos a lo largo de todo el curso, empezaremos un nuevo proyecto: la creación de una calculadora. Comencemos elaborando su interfaz gráfica:\nfrom tkinter import Button, Entry, Frame, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Pantalla\rpantalla = Entry(frame)\rpantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)\rpantalla.config(background=\u0026quot;black\u0026quot;, fg=\u0026quot;#03f943\u0026quot;, justify=\u0026quot;right\u0026quot;)\r# Fila 1 de botones\rboton7 = Button(frame, text=\u0026quot;7\u0026quot;, width=3)\rboton7.grid(row=2, column=1)\rboton8 = Button(frame, text=\u0026quot;8\u0026quot;, width=3)\rboton8.grid(row=2, column=2)\rboton9 = Button(frame, text=\u0026quot;9\u0026quot;, width=3)\rboton9.grid(row=2, column=3)\rboton_div = Button(frame, text=\u0026quot;/\u0026quot;, width=3)\rboton_div.grid(row=2, column=4)\r# Fila 2 de botones\rboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3)\rboton4.grid(row=3, column=1)\rboton5 = Button(frame, text=\u0026quot;5\u0026quot;, width=3)\rboton5.grid(row=3, column=2)\rboton6 = Button(frame, text=\u0026quot;6\u0026quot;, width=3)\rboton6.grid(row=3, column=3)\rboton_mult = Button(frame, text=\u0026quot;*\u0026quot;, width=3)\rboton_mult.grid(row=3, column=4)\r# Fila 3 de botones\rboton1 = Button(frame, text=\u0026quot;1\u0026quot;, width=3)\rboton1.grid(row=4, column=1)\rboton2 = Button(frame, text=\u0026quot;2\u0026quot;, width=3)\rboton2.grid(row=4, column=2)\rboton3 = Button(frame, text=\u0026quot;3\u0026quot;, width=3)\rboton3.grid(row=4, column=3)\rboton_rest = Button(frame, text=\u0026quot;-\u0026quot;, width=3)\rboton_rest.grid(row=4, column=4)\r# Fila 4 de botones\rboton0 = Button(frame, text=\u0026quot;0\u0026quot;, width=3)\rboton0.grid(row=5, column=1)\rboton_coma = Button(frame, text=\u0026quot;.\u0026quot;, width=3)\rboton_coma.grid(row=5, column=2)\rboton_igual = Button(frame, text=\u0026quot;=\u0026quot;, width=3)\rboton_igual.grid(row=5, column=3)\rboton_suma = Button(frame, text=\u0026quot;+\u0026quot;, width=3)\rboton_suma.grid(row=5, column=4)\rraiz.mainloop()\r Nota: la pantalla ha de ocupar no una columna, sino cuatro, ya que hemos generado después filas de cuatro botones. Para ello, utilizamos el parámetro columnspan en la función grid() correspondiente a la pantalla y le asignamos el valor 4.\n\r\rInterfaz gráfica de la calculadora.\r\r\rCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/47/ del repositorio.\n","date":1558566002,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558566002,"objectID":"b35a9fd4981f0a772f59cea330ab52e8","permalink":"https://imalexissaez.github.io/courses/python-basic/pb47-interfaces-graficas-vi/","publishdate":"2019-05-23T00:00:02+01:00","relpermalink":"/courses/python-basic/pb47-interfaces-graficas-vi/","section":"courses","summary":"Vídeo   Notas personales A partir de esta lección, utilizando los conocimientos adquiridos a lo largo de todo el curso, empezaremos un nuevo proyecto: la creación de una calculadora. Comencemos elaborando su interfaz gráfica:\nfrom tkinter import Button, Entry, Frame, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Pantalla\rpantalla = Entry(frame)\rpantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)\rpantalla.config(background=\u0026quot;black\u0026quot;, fg=\u0026quot;#03f943\u0026quot;, justify=\u0026quot;right\u0026quot;)\r# Fila 1 de botones\rboton7 = Button(frame, text=\u0026quot;7\u0026quot;, width=3)\rboton7.","tags":null,"title":"47. Interfaces gráficas VI","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Una vez elaborada la interfaz gráfica de la calculadora, en esta lección abordaremos cómo programar parte de la funcionalidad de la misma. Para empezar, nuestro objetivo será conseguir que al pulsar los diferentes botones numéricos aparezcan sus valores asociados en la pantalla.\nEmpecemos creando una variable para almacenar una cadena de texto y asociémosla a la pantalla:\nnumero_pantalla = StringVar()\rpantalla = Entry(frame, textvariable=numero_pantalla)\r A continuación, creemos una función que, por ejemplo, escriba el número 4 en pantalla:\n# Pulsaciones teclado\rdef numero_pulsado():\rnumero_pantalla.set(\u0026quot;4\u0026quot;)\r Ahora, asociémosla al botón correspondiente:\nboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3, command=numero_pulsado)\r Ahora, al pulsar en el botón del número cuatro, aparece un 4 en la pantalla. Vemos que si pulsamos en varias ocasiones, no se añaden más cuatros, que sería el comportamiento deseable. Modifiquemos la función numero_pulsado() para conseguir tal efecto. Para ello, obtendremos la información actual de la pantalla y le agregaremos el número 4 después:\n# Pulsaciones teclado\rdef numero_pulsado():\rnumero_pantalla.set(numero_pantalla.get() + \u0026quot;4\u0026quot;)\r Para generalizar, necesitaremos el uso de funciones lambda o anónimas en la declaración de los botones. De no utilizarlas, tal y como transcurre el flujo del programa, al llegar a la línea de la declaración de boton4, se produciría directamente la llamada de la función numero_pulsado(\u0026quot;4\u0026quot;), mostrando (sin que el usuario pulse sobre nada) un 4 en la pantalla al abrir la calculadura y, además, deshabilitando la funcionalidad del botón, puesto que al seguir pulsando sobre él no añade más cuatros.\ndef numero_pulsado(num):\rnumero_pantalla.set(numero_pantalla.get() + num)\rboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;4\u0026quot;))\r Para finalizar, incluyo el código completo de la aplicación elaborada hasta este instante, para obtener así una visión global de la calculadora:\nfrom tkinter import Button, Entry, Frame, StringVar, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Variables\rnumero_pantalla = StringVar()\r# Pantalla\rpantalla = Entry(frame, textvariable=numero_pantalla)\rpantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)\rpantalla.config(background=\u0026quot;black\u0026quot;, fg=\u0026quot;#03f943\u0026quot;, justify=\u0026quot;right\u0026quot;)\r# Pulsaciones teclado\rdef numero_pulsado(num):\rnumero_pantalla.set(numero_pantalla.get() + num)\r# Fila 1 de botones\rboton7 = Button(frame, text=\u0026quot;7\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;7\u0026quot;))\rboton7.grid(row=2, column=1)\rboton8 = Button(frame, text=\u0026quot;8\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;8\u0026quot;))\rboton8.grid(row=2, column=2)\rboton9 = Button(frame, text=\u0026quot;9\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;9\u0026quot;))\rboton9.grid(row=2, column=3)\rboton_div = Button(frame, text=\u0026quot;/\u0026quot;, width=3)\rboton_div.grid(row=2, column=4)\r# Fila 2 de botones\rboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;4\u0026quot;))\rboton4.grid(row=3, column=1)\rboton5 = Button(frame, text=\u0026quot;5\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;5\u0026quot;))\rboton5.grid(row=3, column=2)\rboton6 = Button(frame, text=\u0026quot;6\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;6\u0026quot;))\rboton6.grid(row=3, column=3)\rboton_mult = Button(frame, text=\u0026quot;*\u0026quot;, width=3)\rboton_mult.grid(row=3, column=4)\r# Fila 3 de botones\rboton1 = Button(frame, text=\u0026quot;1\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;1\u0026quot;))\rboton1.grid(row=4, column=1)\rboton2 = Button(frame, text=\u0026quot;2\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;2\u0026quot;))\rboton2.grid(row=4, column=2)\rboton3 = Button(frame, text=\u0026quot;3\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;3\u0026quot;))\rboton3.grid(row=4, column=3)\rboton_rest = Button(frame, text=\u0026quot;-\u0026quot;, width=3)\rboton_rest.grid(row=4, column=4)\r# Fila 4 de botones\rboton0 = Button(frame, text=\u0026quot;0\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;0\u0026quot;))\rboton0.grid(row=5, column=1)\rboton_coma = Button(frame,\rtext=\u0026quot;.\u0026quot;,\rwidth=3,\rcommand=lambda: numero_pulsado(\u0026quot;.\u0026quot;))\rboton_coma.grid(row=5, column=2)\rboton_igual = Button(frame, text=\u0026quot;=\u0026quot;, width=3)\rboton_igual.grid(row=5, column=3)\rboton_suma = Button(frame, text=\u0026quot;+\u0026quot;, width=3)\rboton_suma.grid(row=5, column=4)\rraiz.mainloop()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/48/ del repositorio.\n","date":1558652401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558652401,"objectID":"6dcd9dc0fde637b0d012325c55a6bd54","permalink":"https://imalexissaez.github.io/courses/python-basic/pb48-interfaces-graficas-vii/","publishdate":"2019-05-24T00:00:01+01:00","relpermalink":"/courses/python-basic/pb48-interfaces-graficas-vii/","section":"courses","summary":"Vídeo   Notas personales Una vez elaborada la interfaz gráfica de la calculadora, en esta lección abordaremos cómo programar parte de la funcionalidad de la misma. Para empezar, nuestro objetivo será conseguir que al pulsar los diferentes botones numéricos aparezcan sus valores asociados en la pantalla.\nEmpecemos creando una variable para almacenar una cadena de texto y asociémosla a la pantalla:\nnumero_pantalla = StringVar()\rpantalla = Entry(frame, textvariable=numero_pantalla)\r A continuación, creemos una función que, por ejemplo, escriba el número 4 en pantalla:","tags":null,"title":"48. Interfaces gráficas VII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, nuestro objetivo será conseguir que la calculadora que estamos generando sea capaz de sumar valores numéricos enteros.\nEmpecemos declarando una variable global, que será accesible desde todos las funciones del programa, denominada operacion y que almacenará la operación aritmética que desea el usuario llevar a cabo. Además, la utilizaremos para conseguir que la pantalla vuelva a su estado inicial a través del uso de bloques condicionales.\noperación = \u0026quot;\u0026quot;\r Esta variable cambiará de valor a medida que pulsemos los botones de operaciones aritméticas. Por ejemplo, para la suma, definimos la función:\n# Función suma\rdef suma():\rglobal operacion\roperacion = \u0026quot;suma\u0026quot;\r A continuación, modificamos el código de boton_suma como sigue:\nboton_suma = Button(frame, text=\u0026quot;+\u0026quot;, width=3, command=lambda: suma())\r Acto seguido, hemos de conseguir que, cuando se pulse dicho botón, la pantalla se borre y permita el almacenamiento de un nuevo número. Modifiquemos la función numero_pulsado():\ndef numero_pulsado(num):\rglobal operacion\rif operacion != \u0026quot;\u0026quot;:\rnumero_pantalla.set(num)\roperacion = \u0026quot;\u0026quot;\relse:\rnumero_pantalla.set(numero_pantalla.get() + num)\r Si pulsamos sobre el botón de sumar, la condición operacion != \u0026quot;\u0026quot; sería cierta, por lo que entraríamos en esa parte de la estructura condicional. En su interior, apreciamos que no concatenamos el número con nada más y volvemos a declarar el valor de la variable operacion como una cadena vacía, para permitir así la correcta introducción de un nuevo número.\nAhora necesitamos una variable global, que denominaremos resultado, que vaya almacenando los valores introducidos:\nresultado = 0\r La siguiente tarea consiste en actualizar la función suma():\n# Función suma\rdef suma(num):\rglobal operacion, resultado\roperacion = \u0026quot;suma\u0026quot;\rresultado += int(num)\rnumero_pantalla.set(resultado)\r donde num representa el número que aparece en la pantalla de la calculadora al pulsar el botón de sumar. Como estamos trabajando con cuadros de texto, Python almacena los textos, lógicamente como su nombre indica, como cadenas de caracteres, de ahí la necesidad de utilizar la función int(). Una vez realizada la operación aritmética, mostramos su resultado en la pantalla con numero_pantalla.set(resultado).\nEl nuevo parámetro de la función suma() nos obliga a modificar el código de boton_suma:\nboton_suma = Button(frame,\rtext=\u0026quot;+\u0026quot;,\rwidth=3,\rcommand=lambda: suma(numero_pantalla.get()))\r A continuación, programemos el comportamiento del botón del símbolo igual.\n# Función el_resultado (para el botón igual)\rdef el_resultado():\rglobal resultado\rnumero_pantalla.set(resultado + int(numero_pantalla.get()))\rresultado = 0\r Es decir, al resultado acumulado hemos de sumarle el número que figure en pantalla antes de pulsar el botón del símbolo igual. Tras ello, reseteamos la variable resultado.\nProcedamos ahora a modificar el código el mencionado botón:\nboton_igual = Button(frame, text=\u0026quot;=\u0026quot;, width=3, command=lambda: el_resultado())\r Finalmente, como viene siendo habitual, comparto el código completo de la aplicación para que podamos tener una visión global de la calculadora:\nfrom tkinter import Button, Entry, Frame, StringVar, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Variables\rnumero_pantalla = StringVar()\roperacion = \u0026quot;\u0026quot;\rresultado = 0\r# Pantalla\rpantalla = Entry(frame, textvariable=numero_pantalla)\rpantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)\rpantalla.config(background=\u0026quot;black\u0026quot;, fg=\u0026quot;#03f943\u0026quot;, justify=\u0026quot;right\u0026quot;)\r# Pulsaciones teclado\rdef numero_pulsado(num):\rglobal operacion\rif operacion != \u0026quot;\u0026quot;:\rnumero_pantalla.set(num)\roperacion = \u0026quot;\u0026quot;\relse:\rnumero_pantalla.set(numero_pantalla.get() + num)\r# Función suma\rdef suma(num):\rglobal operacion, resultado\roperacion = \u0026quot;suma\u0026quot;\rresultado += int(num)\rnumero_pantalla.set(resultado)\r# Función el_resultado (para el botón igual)\rdef el_resultado():\rglobal resultado\rnumero_pantalla.set(resultado + int(numero_pantalla.get()))\rresultado = 0\r# Fila 1 de botones\rboton7 = Button(frame, text=\u0026quot;7\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;7\u0026quot;))\rboton7.grid(row=2, column=1)\rboton8 = Button(frame, text=\u0026quot;8\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;8\u0026quot;))\rboton8.grid(row=2, column=2)\rboton9 = Button(frame, text=\u0026quot;9\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;9\u0026quot;))\rboton9.grid(row=2, column=3)\rboton_div = Button(frame, text=\u0026quot;/\u0026quot;, width=3)\rboton_div.grid(row=2, column=4)\r# Fila 2 de botones\rboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;4\u0026quot;))\rboton4.grid(row=3, column=1)\rboton5 = Button(frame, text=\u0026quot;5\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;5\u0026quot;))\rboton5.grid(row=3, column=2)\rboton6 = Button(frame, text=\u0026quot;6\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;6\u0026quot;))\rboton6.grid(row=3, column=3)\rboton_mult = Button(frame, text=\u0026quot;*\u0026quot;, width=3)\rboton_mult.grid(row=3, column=4)\r# Fila 3 de botones\rboton1 = Button(frame, text=\u0026quot;1\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;1\u0026quot;))\rboton1.grid(row=4, column=1)\rboton2 = Button(frame, text=\u0026quot;2\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;2\u0026quot;))\rboton2.grid(row=4, column=2)\rboton3 = Button(frame, text=\u0026quot;3\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;3\u0026quot;))\rboton3.grid(row=4, column=3)\rboton_rest = Button(frame, text=\u0026quot;-\u0026quot;, width=3)\rboton_rest.grid(row=4, column=4)\r# Fila 4 de botones\rboton0 = Button(frame, text=\u0026quot;0\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;0\u0026quot;))\rboton0.grid(row=5, column=1)\rboton_coma = Button(frame,\rtext=\u0026quot;.\u0026quot;,\rwidth=3,\rcommand=lambda: numero_pulsado(\u0026quot;.\u0026quot;))\rboton_coma.grid(row=5, column=2)\rboton_igual = Button(frame, text=\u0026quot;=\u0026quot;, width=3, command=lambda: el_resultado())\rboton_igual.grid(row=5, column=3)\rboton_suma = Button(frame,\rtext=\u0026quot;+\u0026quot;,\rwidth=3,\rcommand=lambda: suma(numero_pantalla.get()))\rboton_suma.grid(row=5, column=4)\rraiz.mainloop()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/49/ del repositorio.\n","date":1558738801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558738801,"objectID":"3396fa611584f22c2853bf5ab81b3fb8","permalink":"https://imalexissaez.github.io/courses/python-basic/pb49-interfaces-graficas-viii/","publishdate":"2019-05-25T00:00:01+01:00","relpermalink":"/courses/python-basic/pb49-interfaces-graficas-viii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, nuestro objetivo será conseguir que la calculadora que estamos generando sea capaz de sumar valores numéricos enteros.\nEmpecemos declarando una variable global, que será accesible desde todos las funciones del programa, denominada operacion y que almacenará la operación aritmética que desea el usuario llevar a cabo. Además, la utilizaremos para conseguir que la pantalla vuelva a su estado inicial a través del uso de bloques condicionales.","tags":null,"title":"49. Interfaces gráficas VIII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales Partamos, en esta lección, del siguiente código fuente, que incluye, además de la función para sumar, las correspondientes a las operaciones resta, multiplicación y división:\nfrom tkinter import Button, Entry, Frame, StringVar, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Variables\rnumero_pantalla = StringVar()\roperacion = \u0026quot;\u0026quot;\rresultado = 0\rreset_pantalla = False\r# Pantalla\rpantalla = Entry(frame, textvariable=numero_pantalla)\rpantalla.grid(row=1, column=1, padx=10, pady=10, columnspan=4)\rpantalla.config(background=\u0026quot;black\u0026quot;, fg=\u0026quot;#03f943\u0026quot;, justify=\u0026quot;right\u0026quot;)\r# Pulsaciones teclado\rdef numero_pulsado(num):\rglobal operacion, reset_pantalla\rif reset_pantalla:\rnumero_pantalla.set(num)\rreset_pantalla = False\relse:\rnumero_pantalla.set(numero_pantalla.get() + num)\r# Función suma\rdef suma(num):\rglobal operacion, reset_pantalla, resultado\roperacion = \u0026quot;suma\u0026quot;\rresultado += int(num)\rreset_pantalla = True\rnumero_pantalla.set(resultado)\r# Función resta\rnum1 = 0\rcontador_resta = 0\rdef resta(num):\rglobal contador_resta, num1, operacion, reset_pantalla, resultado\rif contador_resta == 0:\rnum1 = int(num)\rresultado = num1\relse:\rif contador_resta == 1:\rresultado = num1 - int(num)\relse:\rresultado = int(resultado) - int(num)\rnumero_pantalla.set(resultado)\rresultado = numero_pantalla.get()\rcontador_resta = contador_resta + 1\roperacion = \u0026quot;resta\u0026quot;\rreset_pantalla = True\r# Función multiplicación\rcontador_multi = 0\rdef multiplica(num):\rglobal contador_multi, num1, operacion, reset_pantalla, resultado\rif contador_multi == 0:\rnum1 = int(num)\rresultado = num1\relse:\rif contador_multi == 1:\rresultado = num1 * int(num)\relse:\rresultado = int(resultado) * int(num)\rnumero_pantalla.set(resultado)\rresultado = numero_pantalla.get()\rcontador_multi = contador_multi + 1\roperacion = \u0026quot;multiplicacion\u0026quot;\rreset_pantalla = True\r# Función división\rcontador_divi = 0\rdef divide(num):\rglobal contador_divi, num1, operacion, reset_pantalla, resultado\rif contador_divi == 0:\rnum1 = float(num)\rresultado = num1\relse:\rif contador_resta == 1:\rresultado = num1 / float(num)\relse:\rresultado = float(resultado) / float(num)\rnumero_pantalla.set(resultado)\rresultado = numero_pantalla.get()\rcontador_divi = contador_divi + 1\roperacion = \u0026quot;division\u0026quot;\rreset_pantalla = True\r# Función el_resultado (para el botón igual)\rdef el_resultado():\rglobal contador_divi, contador_multi, contador_resta, operacion, resultado\rif operacion == \u0026quot;suma\u0026quot;:\rnumero_pantalla.set(resultado + int(numero_pantalla.get()))\rresultado = 0\relif operacion == \u0026quot;resta\u0026quot;:\rnumero_pantalla.set(int(resultado) - int(numero_pantalla.get()))\rresultado = 0\rcontador_resta = 0\relif operacion == \u0026quot;multiplicacion\u0026quot;:\rnumero_pantalla.set(int(resultado) * int(numero_pantalla.get()))\rresultado = 0\rcontador_multi = 0\relif operacion == \u0026quot;division\u0026quot;:\rnumero_pantalla.set(int(resultado) / int(numero_pantalla.get()))\rresultado = 0\rcontador_divi = 0\r# Fila 1 de botones\rboton7 = Button(frame, text=\u0026quot;7\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;7\u0026quot;))\rboton7.grid(row=2, column=1)\rboton8 = Button(frame, text=\u0026quot;8\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;8\u0026quot;))\rboton8.grid(row=2, column=2)\rboton9 = Button(frame, text=\u0026quot;9\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;9\u0026quot;))\rboton9.grid(row=2, column=3)\rboton_div = Button(frame,\rtext=\u0026quot;/\u0026quot;,\rwidth=3,\rcommand=lambda: divide(numero_pantalla.get()))\rboton_div.grid(row=2, column=4)\r# Fila 2 de botones\rboton4 = Button(frame, text=\u0026quot;4\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;4\u0026quot;))\rboton4.grid(row=3, column=1)\rboton5 = Button(frame, text=\u0026quot;5\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;5\u0026quot;))\rboton5.grid(row=3, column=2)\rboton6 = Button(frame, text=\u0026quot;6\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;6\u0026quot;))\rboton6.grid(row=3, column=3)\rboton_mult = Button(frame,\rtext=\u0026quot;*\u0026quot;,\rwidth=3,\rcommand=lambda: multiplica(numero_pantalla.get()))\rboton_mult.grid(row=3, column=4)\r# Fila 3 de botones\rboton1 = Button(frame, text=\u0026quot;1\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;1\u0026quot;))\rboton1.grid(row=4, column=1)\rboton2 = Button(frame, text=\u0026quot;2\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;2\u0026quot;))\rboton2.grid(row=4, column=2)\rboton3 = Button(frame, text=\u0026quot;3\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;3\u0026quot;))\rboton3.grid(row=4, column=3)\rboton_rest = Button(frame,\rtext=\u0026quot;-\u0026quot;,\rwidth=3,\rcommand=lambda: resta(numero_pantalla.get()))\rboton_rest.grid(row=4, column=4)\r# Fila 4 de botones\rboton0 = Button(frame, text=\u0026quot;0\u0026quot;, width=3, command=lambda: numero_pulsado(\u0026quot;0\u0026quot;))\rboton0.grid(row=5, column=1)\rboton_coma = Button(frame,\rtext=\u0026quot;.\u0026quot;,\rwidth=3,\rcommand=lambda: numero_pulsado(\u0026quot;.\u0026quot;))\rboton_coma.grid(row=5, column=2)\rboton_igual = Button(frame, text=\u0026quot;=\u0026quot;, width=3, command=lambda: el_resultado())\rboton_igual.grid(row=5, column=3)\rboton_suma = Button(frame,\rtext=\u0026quot;+\u0026quot;,\rwidth=3,\rcommand=lambda: suma(numero_pantalla.get()))\rboton_suma.grid(row=5, column=4)\rraiz.mainloop()\r A continuación, veremos cómo trabajar con botones de radio, es decir, con la clase Radiobutton.\nfrom tkinter import Radiobutton, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Botones de radio\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rRadiobutton(raiz, text=\u0026quot;Femenino\u0026quot;).pack()\rRadiobutton(raiz, text=\u0026quot;Masculino\u0026quot;).pack()\rraiz.mainloop()\r \r\rPrimer contacto con la clase Radiobutton.\r\r\rA primera vista, observamos dos inconvenientes:\n aparecen ambas opciones seleccionadas al abrir la aplicación y por mucho que pulse sobre ellas, la selección no se modifica.  Para abordar esta situación, comenzamos creando una variable global, opcion, perteneciente a la clase IntVar y se la asignamos a ambos botones a través del parámetro variable; junto con un valor para cada uno de ellos, utilizando el parámetro value.\nfrom tkinter import IntVar, Radiobutton, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Botones de radio\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\ropcion = IntVar()\rRadiobutton(raiz, text=\u0026quot;Femenino\u0026quot;, variable=opcion, value=1).pack()\rRadiobutton(raiz, text=\u0026quot;Masculino\u0026quot;, variable=opcion, value=2).pack()\rraiz.mainloop()\r \r\rPermitiendo la posibilidad de seleccionar una de las opciones.\r\r\rNota técnica: si asignamos value=0 a alguno de los botones, aparecerá seleccionado por defecto cuando abramos la aplicación. Esta característica puede resultar de cierta utilidad en algunos contextos.\nAhora bien, ¿cómo rescatamos el valor que ha seleccionado el usuario? Al igual que sucedía en el caso de la calculadora, recurriremos al uso de funciones en esta ocasión.\nAsí, generemos una, denominada imprimir, que imprima en la consola de Python el valor del botón seleccionado:\nfrom tkinter import IntVar, Label, Radiobutton, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Botones de radio\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\ropcion = IntVar()\rdef imprimir():\rprint(opcion.get())\rLabel(raiz, text=\u0026quot;Género:\u0026quot;).pack()\rRadiobutton(raiz, text=\u0026quot;Femenino\u0026quot;, variable=opcion, value=1,\rcommand=imprimir).pack()\rRadiobutton(raiz, text=\u0026quot;Masculino\u0026quot;, variable=opcion, value=2,\rcommand=imprimir).pack()\rraiz.mainloop()\r Modifiquemos el código para ver dichos valores en la propia interfaz:\nfrom tkinter import IntVar, Label, Radiobutton, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Botones de radio\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\ropcion = IntVar()\rdef imprimir():\rif opcion.get() == 1:\retiqueta.config(text=\u0026quot;Has elegido género femenino.\u0026quot;)\relse:\retiqueta.config(text=\u0026quot;Has elegido género masculino.\u0026quot;)\rLabel(raiz, text=\u0026quot;Género:\u0026quot;).pack()\rRadiobutton(raiz, text=\u0026quot;Femenino\u0026quot;, variable=opcion, value=1,\rcommand=imprimir).pack()\rRadiobutton(raiz, text=\u0026quot;Masculino\u0026quot;, variable=opcion, value=2,\rcommand=imprimir).pack()\retiqueta = Label(raiz)\retiqueta.pack()\rraiz.mainloop()\r \r\rMostrando la opción seleccionada en la ventana de la aplicación.\r\r\rIncorporar un botón adicional que contemple otros géneros es sencillo:\nfrom tkinter import IntVar, Label, Radiobutton, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Botones de radio\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\ropcion = IntVar()\rdef imprimir():\rif opcion.get() == 1:\retiqueta.config(text=\u0026quot;Has elegido género femenino.\u0026quot;)\relif opcion.get() == 2:\retiqueta.config(text=\u0026quot;Has elegido género masculino.\u0026quot;)\relse:\retiqueta.config(text=\u0026quot;Has elegido otras opciones para género.\u0026quot;)\rLabel(raiz, text=\u0026quot;Género:\u0026quot;).pack()\rRadiobutton(raiz, text=\u0026quot;Femenino\u0026quot;, variable=opcion, value=1,\rcommand=imprimir).pack()\rRadiobutton(raiz, text=\u0026quot;Masculino\u0026quot;, variable=opcion, value=2,\rcommand=imprimir).pack()\rRadiobutton(raiz, text=\u0026quot;Otras opciones\u0026quot;, variable=opcion, value=3,\rcommand=imprimir).pack()\retiqueta = Label(raiz)\retiqueta.pack()\rraiz.mainloop()\r \r\rAñadiendo una nueva opción a las disponibles.\r\r\rCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/50/ del repositorio.\n","date":1558738802,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558738802,"objectID":"6477493c77690cc4b6a3e355782d38f6","permalink":"https://imalexissaez.github.io/courses/python-basic/pb50-interfaces-graficas-ix/","publishdate":"2019-05-25T00:00:02+01:00","relpermalink":"/courses/python-basic/pb50-interfaces-graficas-ix/","section":"courses","summary":"Vídeo   Notas personales Partamos, en esta lección, del siguiente código fuente, que incluye, además de la función para sumar, las correspondientes a las operaciones resta, multiplicación y división:\nfrom tkinter import Button, Entry, Frame, StringVar, Tk\r# Raíz\rraiz = Tk()\rraiz.title(\u0026quot;Calculadora\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Frame\rframe = Frame(raiz)\rframe.pack()\r# Variables\rnumero_pantalla = StringVar()\roperacion = \u0026quot;\u0026quot;\rresultado = 0\rreset_pantalla = False\r# Pantalla\rpantalla = Entry(frame, textvariable=numero_pantalla)\rpantalla.","tags":null,"title":"50. Interfaces gráficas IX","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, introduciremos el funcionamiento de la clase Checkbutton, que se encarga de gestionar los clásicos botones de selección (también denominados casillas de verificación). Estos nos permiten la posibilidad de realizar una selección múltiple sobre distintas opciones ofrecidas.\nActo seguido, veamos un sencillo ejemplo de aplicación de la mencionada clase, donde el usuario ha de escoger qué tipo de destinos prefiere para sus vacaciones.\nfrom tkinter import Checkbutton, Frame, IntVar, Label, PhotoImage, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Casillas de verificación\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rplaya = IntVar()\rmontana = IntVar()\rturismo_rural = IntVar()\rdef opciones_viaje():\ropcion_escogida = \u0026quot;\u0026quot;\rif playa.get() == 1:\ropcion_escogida += \u0026quot; playa\u0026quot;\rif montana.get() == 1:\ropcion_escogida += \u0026quot; montaña\u0026quot;\rif turismo_rural.get() == 1:\ropcion_escogida += \u0026quot; turismo rural\u0026quot;\rtexto_final.config(text=opcion_escogida)\rfoto = PhotoImage(file=\u0026quot;helicoptero.png\u0026quot;)\rLabel(raiz, image=foto).pack()\rframe = Frame(raiz)\rframe.pack()\rLabel(frame, text=\u0026quot;Escoge destinos:\u0026quot;, width=50).pack()\rCheckbutton(frame,\rtext=\u0026quot;Playa\u0026quot;,\rvariable=playa,\ronvalue=1,\roffvalue=0,\rcommand=opciones_viaje).pack()\rCheckbutton(frame,\rtext=\u0026quot;Montaña\u0026quot;,\rvariable=montana,\ronvalue=1,\roffvalue=0,\rcommand=opciones_viaje).pack()\rCheckbutton(frame,\rtext=\u0026quot;Turismo rural\u0026quot;,\rvariable=turismo_rural,\ronvalue=1,\roffvalue=0,\rcommand=opciones_viaje).pack()\rtexto_final = Label(frame)\rtexto_final.pack()\rraiz.mainloop()\r Para empezar, el siguiente bloque de código\nfoto = PhotoImage(file=\u0026quot;helicoptero.png\u0026quot;)\rLabel(raiz, image=foto).pack()\r nos permite introducir, como cabecera de nuestra aplicación, la imagen de un helicóptero (disponible en este enlace).\nA continuación, las líneas de código asociadas a la primera casilla de verificación son\nCheckbutton(frame,\rtext=\u0026quot;Playa\u0026quot;,\rvariable=playa,\ronvalue=1,\roffvalue=0,\rcommand=opciones_viaje).pack()\r Observamos que dicha casilla está ubicada en el frame frame y muestra como texto, en la ventana de la aplicación, la palabra Playa. Para posibilitar la interacción con ella, almacenamos su valor en la variable playa, siendo este 1 cuando esté seleccionada y 0 en otro caso. Finalmente, su comportamiento se gestiona a través de la función opciones_viaje(), tal y como figura en el valor del parámetro command.\nPor lo que respecta a la variable playa, así como al resto, las declaramos utilizando la clase IntVar, puesto que nuestra intención es almacenar en ellas valores enteros:\nplaya = IntVar()\rmontana = IntVar()\rturismo_rural = IntVar()\r Por otro lado, mostraremos las opciones seleccionadas por el usuario empleando una etiqueta para ello, de ahí que figure el siguiente bloque de código al final del programa:\ntexto_final = Label(frame)\rtexto_final.pack()\r Finalmente, la función que gestiona el comportamiento de las casillas de verificación simplemente se ocupa de establecer el texto de la variable texto_final según una serie de bloques condicionales:\ndef opciones_viaje():\ropcion_escogida = \u0026quot;\u0026quot;\rif playa.get() == 1:\ropcion_escogida += \u0026quot; playa\u0026quot;\rif montana.get() == 1:\ropcion_escogida += \u0026quot; montaña\u0026quot;\rif turismo_rural.get() == 1:\ropcion_escogida += \u0026quot; turismo rural\u0026quot;\rtexto_final.config(text=opcion_escogida)\r \r\rPrimer contacto con la clase Checkbutton.\r\r\rCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/51/ del repositorio.\n","date":1558825201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558825201,"objectID":"b600783ea10049cc6042dd03456bf3d2","permalink":"https://imalexissaez.github.io/courses/python-basic/pb51-interfaces-graficas-x/","publishdate":"2019-05-26T00:00:01+01:00","relpermalink":"/courses/python-basic/pb51-interfaces-graficas-x/","section":"courses","summary":"Vídeo   Notas personales En esta lección, introduciremos el funcionamiento de la clase Checkbutton, que se encarga de gestionar los clásicos botones de selección (también denominados casillas de verificación). Estos nos permiten la posibilidad de realizar una selección múltiple sobre distintas opciones ofrecidas.\nActo seguido, veamos un sencillo ejemplo de aplicación de la mencionada clase, donde el usuario ha de escoger qué tipo de destinos prefiere para sus vacaciones.","tags":null,"title":"51. Interfaces gráficas X","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos el estudio del widget Menu, que nos permitirá la posibilidad de crear barras de menús.\nComencemos utilizando el siguiente esqueleto de aplicación:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.mainloop()\r A continuación, generamos una variable, barra_menu, que será la encargada de almacenar el menú:\nbarra_menu = Menu(raiz)\r y configuramos el valor del parámetro menu de la raíz para que figure en nuestra aplicación:\nraiz.config(menu=barra_menu)\r Acto seguido, establecemos los elementos que conformarán nuestro menú. Por ejemplo, para crear uno denominado Archivo, generamos la variable archivo_menu, indicándole que pertenece a la barra de menús barra_menu.\narchivo_menu = Menu(barra_menu)\r No obstante, si ejecutamos el código, todavía no aparece barra de menús alguna. Añadamos el texto correspondiente a cada elemento. Así,\nbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\r Ahora, ya únicamente nos resta la tarea de añadir elementos de submenú. Para ello, tras la línea de declaración del elemento archivo_menu, tecleamos:\narchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;)\r Aparece una barra separadora, que identificamos por los símbolos - - - -, al pulsar sobre cualquier elemento de la barra de menús. Para suprimirla, modificamos como sigue la línea de declaración de la variable archivo_menu:\narchivo_menu = Menu(barra_menu, tearoff=0)\r No obstante, aunque la mencionada barra separada no nos interesaba, sí que podemos desear diferenciar, de alguna manera, los diversos elementos de un submenú, para que así queden agrupados por cierto criterio. Con tal objetivo, donde nos convenga, introducimos la instrucción\narchivo_menu.add_separator()\r Para acabar, comparto el código completo de la aplicación, para obtener así una visión global del funcionamiento de la clase Menu.\nfrom tkinter import Menu, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.add_command(label=\u0026quot;Copiar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Cortar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Pegar\u0026quot;)\rherramientas_menu = Menu(barra_menu, tearoff=0)\rayuda_menu = Menu(barra_menu, tearoff=0)\rayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;)\rayuda_menu.add_separator()\rayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;)\rbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\rbarra_menu.add_cascade(label=\u0026quot;Edición\u0026quot;, menu=edicion_menu)\rbarra_menu.add_cascade(label=\u0026quot;Herramientas\u0026quot;, menu=herramientas_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=ayuda_menu)\rraiz.mainloop()\r \r\rPrimer contacto con la clase Menu.\r\r\rCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/52/ del repositorio.\n","date":1558911601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558911601,"objectID":"16bfca6479baf4721d4e7206a1a22b17","permalink":"https://imalexissaez.github.io/courses/python-basic/pb52-interfaces-graficas-xi/","publishdate":"2019-05-27T00:00:01+01:00","relpermalink":"/courses/python-basic/pb52-interfaces-graficas-xi/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos el estudio del widget Menu, que nos permitirá la posibilidad de crear barras de menús.\nComencemos utilizando el siguiente esqueleto de aplicación:\nfrom tkinter import Tk\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rraiz.mainloop()\r A continuación, generamos una variable, barra_menu, que será la encargada de almacenar el menú:\nbarra_menu = Menu(raiz)\r y configuramos el valor del parámetro menu de la raíz para que figure en nuestra aplicación:","tags":null,"title":"52. Interfaces gráficas XI","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos cómo construir ventanas emergentes, que son ventanas modales para informar, avisar o permitir realizar ciertas tareas al usuario.\nPara comenzar, recuperemos el código fuente generado en la lección anterior:\nfrom tkinter import Menu, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.add_command(label=\u0026quot;Copiar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Cortar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Pegar\u0026quot;)\rherramientas_menu = Menu(barra_menu, tearoff=0)\rayuda_menu = Menu(barra_menu, tearoff=0)\rayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;)\rayuda_menu.add_separator()\rayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;)\rbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\rbarra_menu.add_cascade(label=\u0026quot;Edición\u0026quot;, menu=edicion_menu)\rbarra_menu.add_cascade(label=\u0026quot;Herramientas\u0026quot;, menu=herramientas_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=ayuda_menu)\rraiz.mainloop()\r A continuación, nuestro objetivo será construir una ventana emergente que aparezca cuando el usuario pulse sobre la opción Acerca de\u0026hellip;, ubicada en el menú Ayuda. Para ello, empecemos creando una función que será la responsable de generar la mencionada ventana emergente:\ndef info_adicional():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\r Notas:\n Hemos de importar el módulo messagebox al principio de nuestro código. El parámetro title gestiona el texto que aparecerá en la barra que figura en la parte superior de la ventana emergente. El parámetro text declara el texto que se ubicará en el cuerpo de la ventana emergente.  Acto seguido, modificamos la declaración del submenú Acerca de\u0026hellip; como sigue:\nayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;, command=info_adicional)\r \r\rPrimera ventana emergente.\r\r\rEstas ventanas emergentes admiten enormes posibilidades de configuración y podemos adaptarlas según nuestra intención sea informar al usuario de algún detalle concreto (como el ejemplo que se muestra en la imagen que figura arriba), avisarle de algún error, etc. Los símbolos y la disposición de los diferentes botones asociados variarían en función de nuestro objetivo.\nPor ejemplo, generemos una ventana emergente que nos avise del estado de la licencia de nuestra aplicación. Para ello, creamos la siguiente función:\ndef aviso_licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\r y modificamos la correspondiente opción del menú Ayuda:\nayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;, command=aviso_licencia)\r \r\rVentana emergente de aviso.\r\r\rActo seguido, veamos un nuevo tipo de ventana emergente, que asociaremos al submenú Salir y que nos pedirá confirmación antes de proceder a cerrar la aplicación. Con tal objetivo en mente, empecemos construyendo la función:\ndef salir_aplicacion():\rmessagebox.askquestion(title=\u0026quot;Salir\u0026quot;,\rmessage=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\r para luego modificar la opción del menú Archivo asociada:\narchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;, command=salir_aplicacion)\r \r\rVentana emergente con pregunta.\r\r\rAhora, si pulsamos sobre el botón No, volvemos a la aplicación, como cabría esperar. No obstante, al pulsar sobre el botón Sí debería salir de la aplicación y no sucede tal acción, puesto que hemos de programar todavía dicho comportamiento.\nLa función askquestion() devuelve una cadena de texto en función del botón pulsado, \u0026quot;yes\u0026quot; o \u0026quot;no\u0026quot;, por lo que basta modificar la función salir_aplicacion() como sigue:\ndef salir_aplicacion():\rrespuesta = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;, message=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\rif respuesta == \u0026quot;yes\u0026quot;:\rraiz.destroy()\r La función destroy() posee un nombre lo suficientemente explicativo para que intuyamos cómo afecta a la raíz de la aplicación.\nNota: con la función askokcancel() tenemos una variante de la anterior ventana emergente, cuyos botones son del tipo Aceptar y Cancelar.\nA continuación, veamos una ventana emergente de tipo \u0026lsquo;\u0026lsquo;reintentar\u0026rsquo;', asociada a la opción Cerrar del menú Archivo. Para ello, construimos la siguiente función:\ndef cerrar_documento():\rmessagebox.askretrycancel(\rtitle=\u0026quot;Reintentar\u0026quot;,\rmessage=\u0026quot;No es posible cerrar. Documento bloqueado.\u0026quot;)\r y modificamos el correspondiente elemento del menú Archivo:\narchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;, command=cerrar_documento)\r \r\rVentana emergente para reintentar una acción.\r\r\rFinalmente, como viene siendo habitual en este subapartado del curso dedicado a las interfaces gráficas, comparto el código completo de la aplicación generada para así ofrecer una visión global de la misma.\nfrom tkinter import Menu, messagebox, Tk\rdef info_adicional():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\rdef aviso_licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\rdef salir_aplicacion():\rrespuesta = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;, message=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\rif respuesta == \u0026quot;yes\u0026quot;:\rraiz.destroy()\rdef cerrar_documento():\rmessagebox.askretrycancel(\rtitle=\u0026quot;Reintentar\u0026quot;,\rmessage=\u0026quot;No es posible cerrar. Documento bloqueado.\u0026quot;)\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;, command=cerrar_documento)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;, command=salir_aplicacion)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.add_command(label=\u0026quot;Copiar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Cortar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Pegar\u0026quot;)\rherramientas_menu = Menu(barra_menu, tearoff=0)\rayuda_menu = Menu(barra_menu, tearoff=0)\rayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;, command=aviso_licencia)\rayuda_menu.add_separator()\rayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;, command=info_adicional)\rbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\rbarra_menu.add_cascade(label=\u0026quot;Edición\u0026quot;, menu=edicion_menu)\rbarra_menu.add_cascade(label=\u0026quot;Herramientas\u0026quot;, menu=herramientas_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=ayuda_menu)\rraiz.mainloop()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/53/ del repositorio.\n","date":1558998001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558998001,"objectID":"3c2126d1f9244137b83047c2bf74b7ad","permalink":"https://imalexissaez.github.io/courses/python-basic/pb53-interfaces-graficas-xii/","publishdate":"2019-05-28T00:00:01+01:00","relpermalink":"/courses/python-basic/pb53-interfaces-graficas-xii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos cómo construir ventanas emergentes, que son ventanas modales para informar, avisar o permitir realizar ciertas tareas al usuario.\nPara comenzar, recuperemos el código fuente generado en la lección anterior:\nfrom tkinter import Menu, Tk\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.","tags":null,"title":"53. Interfaces gráficas XII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, construiremos la típica ventana emergente que nos permite abrir un archivo en una aplicación. Para empezar, recuperemos el código fuente generado en las últimas lecciones:\nfrom tkinter import Menu, messagebox, Tk\rdef info_adicional():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\rdef aviso_licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\rdef salir_aplicacion():\rrespuesta = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;, message=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\rif respuesta == \u0026quot;yes\u0026quot;:\rraiz.destroy()\rdef cerrar_documento():\rmessagebox.askretrycancel(\rtitle=\u0026quot;Reintentar\u0026quot;,\rmessage=\u0026quot;No es posible cerrar. Documento bloqueado.\u0026quot;)\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;, command=cerrar_documento)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;, command=salir_aplicacion)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.add_command(label=\u0026quot;Copiar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Cortar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Pegar\u0026quot;)\rherramientas_menu = Menu(barra_menu, tearoff=0)\rayuda_menu = Menu(barra_menu, tearoff=0)\rayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;, command=aviso_licencia)\rayuda_menu.add_separator()\rayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;, command=info_adicional)\rbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\rbarra_menu.add_cascade(label=\u0026quot;Edición\u0026quot;, menu=edicion_menu)\rbarra_menu.add_cascade(label=\u0026quot;Herramientas\u0026quot;, menu=herramientas_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=ayuda_menu)\rraiz.mainloop()\r A continuación, importamos el módulo filedialog, de la librería tkinter, y construimos la siguiente función:\ndef abrir_archivo():\rfichero = filedialog.askopenfilename(title=\u0026quot;Abrir archivo\u0026quot;)\rprint(fichero)\r En la variable fichero, almacenamos la ruta al archivo que seleccionemos a través de la ventana emergente, como bien podremos comprobar en la consola de Python gracias a la función print() que hemos incorporado en el interior de abrir_archivo(). Después, acudimos al elemento del menú Archivo correspondiente y modificamos la línea como sigue:\narchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;, command=abrir_archivo)\r A la vista del resultado, es posible que nos interese modificar la ubicación de la ruta desde la que un usuario ha de comenzar la búsqueda de un archivo. Para ello, modificamos la función abrir_archivo() como sigue:\ndef abrir_archivo():\rfichero = filedialog.askopenfilename(title=\u0026quot;Abrir archivo\u0026quot;,\rinitialdir=\u0026quot;/\u0026quot;)\rprint(fichero)\r y, de esta manera, ahora la ventana emergente nos muestra los directorios ubicados en la raíz de nuestro disco duro.\nAdemás, podemos restringir el tipo de archivo que deseamos un usuario examine (por ejemplo, restringir la búsqueda a imágenes o documentos) mediante el parámetro filetypes. Así, si modificamos la función abrir_archivo() como sigue:\ndef abrir_archivo():\rfichero = filedialog.askopenfilename(title=\u0026quot;Abrir archivo\u0026quot;,\rinitialdir=\u0026quot;/\u0026quot;,\rfiletypes=((\u0026quot;Ficheros de Excel\u0026quot;,\r\u0026quot;*.xlsx\u0026quot;),\r(\u0026quot;Ficheros de texto\u0026quot;,\r\u0026quot;*.txt\u0026quot;)))\rprint(fichero)\r ahora la ventana emergente nos restringe el tipo de fichero que podemos seleccionar y, además, nos permite filtrar por dos opciones diferentes (de Excel o de texto), según sus correspondientes extensiones.\nPara comodidad del usuario, conviene siempre incluir una opción para abrir cualquier tipo de archivo, independientemente de su extensión:\ndef abrir_archivo():\rfichero = filedialog.askopenfilename(\rtitle=\u0026quot;Abrir archivo\u0026quot;,\rinitialdir=\u0026quot;/\u0026quot;,\rfiletypes=((\u0026quot;Ficheros de Excel\u0026quot;, \u0026quot;*.xlsx\u0026quot;),\r(\u0026quot;Ficheros de texto\u0026quot;, \u0026quot;*.txt\u0026quot;),\r(\u0026quot;Todos los archivos\u0026quot;, \u0026quot;*.*\u0026quot;)))\rprint(fichero)\r Finalmente, como ya viene siendo habitual en esta serie de lecciones dedicadas a las interfaces gráficas, comparto el código fuente completo de la aplicación generada, para tener así una visión global de la misma:\nfrom tkinter import filedialog, Menu, messagebox, Tk\rdef info_adicional():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\rdef aviso_licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\rdef salir_aplicacion():\rrespuesta = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;, message=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\rif respuesta == \u0026quot;yes\u0026quot;:\rraiz.destroy()\rdef cerrar_documento():\rmessagebox.askretrycancel(\rtitle=\u0026quot;Reintentar\u0026quot;,\rmessage=\u0026quot;No es posible cerrar. Documento bloqueado.\u0026quot;)\rdef abrir_archivo():\rfichero = filedialog.askopenfilename(\rtitle=\u0026quot;Abrir archivo\u0026quot;,\rinitialdir=\u0026quot;/\u0026quot;,\rfiletypes=((\u0026quot;Ficheros de Excel\u0026quot;, \u0026quot;*.xlsx\u0026quot;),\r(\u0026quot;Ficheros de texto\u0026quot;, \u0026quot;*.txt\u0026quot;),\r(\u0026quot;Todos los archivos\u0026quot;, \u0026quot;*.*\u0026quot;)))\rprint(fichero)\rraiz = Tk()\rraiz.title(\u0026quot;Menús\u0026quot;)\rraiz.iconbitmap(\u0026quot;icon.ico\u0026quot;)\rbarra_menu = Menu(raiz)\rraiz.config(menu=barra_menu, width=300, height=300)\rarchivo_menu = Menu(barra_menu, tearoff=0)\rarchivo_menu.add_command(label=\u0026quot;Nuevo\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Abrir\u0026quot;, command=abrir_archivo)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Guardar\u0026quot;)\rarchivo_menu.add_command(label=\u0026quot;Guardar como...\u0026quot;)\rarchivo_menu.add_separator()\rarchivo_menu.add_command(label=\u0026quot;Cerrar\u0026quot;, command=cerrar_documento)\rarchivo_menu.add_command(label=\u0026quot;Salir\u0026quot;, command=salir_aplicacion)\redicion_menu = Menu(barra_menu, tearoff=0)\redicion_menu.add_command(label=\u0026quot;Copiar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Cortar\u0026quot;)\redicion_menu.add_command(label=\u0026quot;Pegar\u0026quot;)\rherramientas_menu = Menu(barra_menu, tearoff=0)\rayuda_menu = Menu(barra_menu, tearoff=0)\rayuda_menu.add_command(label=\u0026quot;Licencia\u0026quot;, command=aviso_licencia)\rayuda_menu.add_separator()\rayuda_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;, command=info_adicional)\rbarra_menu.add_cascade(label=\u0026quot;Archivo\u0026quot;, menu=archivo_menu)\rbarra_menu.add_cascade(label=\u0026quot;Edición\u0026quot;, menu=edicion_menu)\rbarra_menu.add_cascade(label=\u0026quot;Herramientas\u0026quot;, menu=herramientas_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=ayuda_menu)\rraiz.mainloop()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/54/ del repositorio.\n","date":1558998002,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558998002,"objectID":"1b5812a1f793de20b7d67eb691aff4b3","permalink":"https://imalexissaez.github.io/courses/python-basic/pb54-interfaces-graficas-xiii/","publishdate":"2019-05-28T00:00:02+01:00","relpermalink":"/courses/python-basic/pb54-interfaces-graficas-xiii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, construiremos la típica ventana emergente que nos permite abrir un archivo en una aplicación. Para empezar, recuperemos el código fuente generado en las últimas lecciones:\nfrom tkinter import Menu, messagebox, Tk\rdef info_adicional():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\rdef aviso_licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\rdef salir_aplicacion():\rrespuesta = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;, message=\u0026quot;¿Desear salir de la aplicación?\u0026quot;)\rif respuesta == \u0026quot;yes\u0026quot;:\rraiz.","tags":null,"title":"54. Interfaces gráficas XIII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, cambiamos de tercio y abordamos el tratamiento de las bases de datos (BBDD) en Python. Estudiaremos cómo crearlas, conectar con ellas e insertar registros en su interior.\nPython es capaz de gestionar la información que se encuentra almacenada en diferentes gestores de bases de datos, como, por ejemplo:\n SQL Server Oracle MySQL SQLite PostgreSQL  En este curso trabajaremos, principalmente, con MySQL y SQLite debido a su popularidad. No obstante, ello requiere que tengamos unos mínimos conocimientos del lenguaje utilizado para realizar consultas en bases de datos: SQL (Structured Query Language).\nPor lo que respecta a SQLite:\n Es un sistema de gestión de BBDD relacional. Está escrito en C, siendo de código abierto. La BBDD forma parte integral del programa y se guarda como un único fichero en host.  Así, entre sus ventajas, encontramos que ocupa muy poco espacio en disco y memoria, es muy eficiente y rápido, es multiplataforma, no requiere configuración o administración y es de dominio público, esto es, sin costo alguno añadido. Sin embargo, también posee asociadas una serie de desventajas, como que no admite cláusulas anidadas (de tipo where), no existen usuarios (no permite acceso simultáneo por parte de varios usuarios) y carece de clave foránea cuando se crea en modo consola.\nA continuación, los pasos a seguir para conectar con una BBDD son:\n Abrir (o crear) una conexión. Crear un puntero (o cursor). Ejecutar una consulta (query) SQL. Manejar los resultados de la consulta.  Insertar, leer, actualizar, borrar (Create, Read, Update, Delete).   Cerrar puntero. Cerrar conexión.  En Python, comenzamos importando la librería sqlite3 para luego crear la conexión con la BBDD. La primera vez que realizamos este proceso, al no haber disponible ninguna, procederemos a su creación.\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_conexion.close()\r Al ejecutar el anterior bloque de código, aparece en el correspondiente directorio una BBDD de datos vacía, de nombre base-de-datos. Veamos, acto seguido, cómo crear nuestra primera tabla:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;CREATE TABLE PRODUCTOS (NOMBRE_ARTICULO VARCHAR(50), PRECIO INTEGER, SECCION VARCHAR(20))\u0026quot;)\rmi_conexion.close()\r Tras crear el puntero o cursor, mi_cursor, lanzamos, a través de la función execute(), el comando SQL correspondiente a la creación de una tabla que poseerá tres columnas. Si ejecutamos el anterior bloque de código, observaremos que el tamaño del fichero base-de-datos se incrementa y deja de estar vacío.\nNota: podemos investigar qué contiene el archivo base-de-datos, de manera visual, mediante la herramienta DB Browser for SQLite.\nA continuación, analicemos cómo insertar información en la tabla que acabamos de crear. Para ello, comentamos la anterior línea de código, que precisamente generaba la tabla (porque ya existe y entonces Python arrojaría un error llegado a ese momento), y ejecutamos, a través del cursor, la instrucción de SQL apropiada. Tras ello, verificamos que deseamos realizar el cambio en la tabla, utiliando el método commit() asociado a la conexión:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES('BALÓN', 15, 'DEPORTES')\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Nota técnica: cuando trabajamos con cadenas de caracteres que poseen comillas anidadas, hemos de alternar los simbolos ' y \u0026quot;.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/55/ del repositorio.\n","date":1559084401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559084401,"objectID":"2cbf342dd327ff62568a3246fd27fc12","permalink":"https://imalexissaez.github.io/courses/python-basic/pb55-bases-de-datos-i/","publishdate":"2019-05-29T00:00:01+01:00","relpermalink":"/courses/python-basic/pb55-bases-de-datos-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, cambiamos de tercio y abordamos el tratamiento de las bases de datos (BBDD) en Python. Estudiaremos cómo crearlas, conectar con ellas e insertar registros en su interior.\nPython es capaz de gestionar la información que se encuentra almacenada en diferentes gestores de bases de datos, como, por ejemplo:\n SQL Server Oracle MySQL SQLite PostgreSQL  En este curso trabajaremos, principalmente, con MySQL y SQLite debido a su popularidad.","tags":null,"title":"55. Bases de datos I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, aprenderemos cómo insertar varios registros simultáneamente en nuestra base de datos (BBDD), así como después estudiaremos cómo recuperar información de la BBDD.\nEn primer lugar, importemos la librería sqlite3 y construyamos, tanto la conexión a la BBDD, como un cursor. Con tal objetivo en mente, tecleamos:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\r A continuación, mediante una lista de tuplas, establecemos los productos que nos interese insertar en la BBDD:\nproductos = [(\u0026quot;Camiseta\u0026quot;, 10, \u0026quot;Deportes\u0026quot;), (\u0026quot;Jarrón\u0026quot;, 90, \u0026quot;Cerámica\u0026quot;),\r(\u0026quot;Camión\u0026quot;, 20, \u0026quot;Juguetería\u0026quot;)]\r y con el método executemany() ejecutamos la instrucción SQL adecuada:\nmi_cursor.executemany(\u0026quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?)\u0026quot;, productos)\r Nota técnica: en las instrucciones de SQL parametrizadas, hemos de insertar tantos interrogantes, ?, como campos posee cada registro.\nFinalmente, confirmamos los cambios y cerramos la conexión abierta:\nmi_conexion.commit()\rmi_conexion.close()\r Acto seguido, veamos cómo accedemos a la información registrada en la BBDD. Para ello, simplemente hemos de ejecutar, desde el cursor, una instrucción de SQL de tipo SELECT, para luego almacenar en una variable la información utilizando el método fetchall():\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;SELECT * FROM PRODUCTOS\u0026quot;)\rproductos = mi_cursor.fetchall()\rprint(productos)\rmi_conexion.close()\r [('BALÓN', 15, 'DEPORTES'), ('Camiseta', 10, 'Deportes'), ('Jarrón', 90, 'Cerámica'), ('Camión', 20, 'Juguetería')]\r Ahora, aplicando aquello que conocemos sobre listas, podemos mostrar la información de manera más cómoda para el usuario:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;SELECT * FROM PRODUCTOS\u0026quot;)\rproductos = mi_cursor.fetchall()\rfor producto in productos:\rprint(producto)\rmi_conexion.close()\r ('BALÓN', 15, 'DEPORTES')\r('Camiseta', 10, 'Deportes')\r('Jarrón', 90, 'Cerámica')\r('Camión', 20, 'Juguetería')\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/56/ del repositorio.\n","date":1559084402,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559084402,"objectID":"8918328bcd7b30dfabffb997659615bc","permalink":"https://imalexissaez.github.io/courses/python-basic/pb56-bases-de-datos-ii/","publishdate":"2019-05-29T00:00:02+01:00","relpermalink":"/courses/python-basic/pb56-bases-de-datos-ii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, aprenderemos cómo insertar varios registros simultáneamente en nuestra base de datos (BBDD), así como después estudiaremos cómo recuperar información de la BBDD.\nEn primer lugar, importemos la librería sqlite3 y construyamos, tanto la conexión a la BBDD, como un cursor. Con tal objetivo en mente, tecleamos:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;base-de-datos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\r A continuación, mediante una lista de tuplas, establecemos los productos que nos interese insertar en la BBDD:","tags":null,"title":"56. Bases de datos II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos cómo gestionar las claves principales de nuestras bases de datos (BBDD). Los registros de una BBDD relacional han de estar identificados de manera única mediante un campo clave.\nHasta el momento, hemos creado una tabla en nuestra BBDD e insertado algunos registros, pero carece de dicho campo clave. Analicemos cómo añadir esta característica a las tablas de una BBDD. Para ello, partamos del siguiente bloque de código:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_conexion.commit()\rmi_conexion.close()\r En primer lugar, generemos una tabla, denominada PRODUCTOS, cuyos registros se van a caracterizar por poseer cuatro campos, uno de ellos clave. Así, tras la declaración del cursor, tecleamos:\nmi_cursor.execute('''\rCREATE TABLE PRODUCTOS (\rCODIGO_ARTICULO VARCHAR(4) PRIMARY KEY,\rNOMBRE_ARTICULO VARCHAR(50),\rPRECIO INTEGER,\rSECCION VARCHAR(20))\r''')\r Como apreciamos, la única novedad, con respecto a lecciones anteriores, es la aparición de la instrucción PRIMARY KEY, que convierte en clave el respectivo campo declarado, CODIGO_ARTICULO en este caso concreto. Por otro lado, el número que figura en el tipo de campo VARCHAR indica su longitud máxima.\nActo seguido, insertamos algunos registros en la tabla PRODUCTOS:\nproductos = [(\u0026quot;AR01\u0026quot;, \u0026quot;Pelota\u0026quot;, 20, \u0026quot;Juguetería\u0026quot;),\r(\u0026quot;AR02\u0026quot;, \u0026quot;Pantalón\u0026quot;, 15, \u0026quot;Confección\u0026quot;),\r(\u0026quot;AR03\u0026quot;, \u0026quot;Destornillador\u0026quot;, 25, \u0026quot;Ferretería\u0026quot;),\r(\u0026quot;AR04\u0026quot;, \u0026quot;Jarrón\u0026quot;, 45, \u0026quot;Cerámica\u0026quot;)]\rmi_cursor.executemany(\u0026quot;INSERT INTO PRODUCTOS VALUES (?, ?, ?, ?)\u0026quot;, productos)\r Al ejecutar el programa, observamos que en el directorio donde hemos almacenado el código aparece un archivo denominado gestion-productos, que contiene la BBDD recién generada.\nA continuación, insertemos un nuevo registro en la BBDD:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES ('AR05', 'Tren', 15, 'Juguetería')\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Si ahora intentamos añadir un nuevo artículo a la BBDD cuyo código coincida con uno de los asignados a los cuatro productos existentes, Python nos arrojará un error:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES ('AR03', 'Portátil', 750, 'Informática')\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Traceback (most recent call last):\rFile \u0026quot;bbdd_3.py\u0026quot;, line 7, in \u0026lt;module\u0026gt;\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES ('AR03', 'Portátil', 750, 'Informática')\u0026quot;)\rsqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.CODIGO_ARTICULO\r En la práctica, por comodidad, la construcción e inserción del campo clave se suele automatizar. Para ello, la estrategia consiste en crear un campo clave de tipo entero que sea autoincrementable.\nRetomemos el primer ejemplo examinado en esta lección (modificando el fichero que contiene la BBDD) y estudiemos cómo implementar la funcionalidad comentada:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos-2\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute('''\rCREATE TABLE PRODUCTOS (\rID INTEGER PRIMARY KEY AUTOINCREMENT,\rNOMBRE_ARTICULO VARCHAR(50),\rPRECIO INTEGER,\rSECCION VARCHAR(20))\r''')\rproductos = [(\u0026quot;Pelota\u0026quot;, 20, \u0026quot;Juguetería\u0026quot;),\r(\u0026quot;Pantalón\u0026quot;, 15, \u0026quot;Confección\u0026quot;),\r(\u0026quot;Destornillador\u0026quot;, 25, \u0026quot;Ferretería\u0026quot;),\r(\u0026quot;Jarrón\u0026quot;, 45, \u0026quot;Cerámica\u0026quot;)]\rmi_cursor.executemany(\u0026quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)\u0026quot;, productos)\rmi_conexion.commit()\rmi_conexion.close()\r Notas:\n Por convención, los campos de una tabla que van a ser automatizados reciben el nombre de ID. Con la instrucción AUTOINCREMENT conseguimos la mencionada gestión automática del campo entero que ahora hemos declarado como clave. La instrucción donde realizamos la llamada a la función executemany() hemos de modificarla, con respecto a lo programado anteriormente, ya que las tuplas de productos poseen tres elementos, mientras que figuran cuatro símbolos ? en el comando SQL INSERT INTO. Para solucionar este escollo, sustituimos el primer ? por la instrucción NULL, acción que permitirá a Python gestionar el campo clave de forma automática.  Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/57/ del repositorio.\n","date":1559170801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559170801,"objectID":"2aa11dae63d08f080d07089bd6b252a5","permalink":"https://imalexissaez.github.io/courses/python-basic/pb57-bases-de-datos-iii/","publishdate":"2019-05-30T00:00:01+01:00","relpermalink":"/courses/python-basic/pb57-bases-de-datos-iii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos cómo gestionar las claves principales de nuestras bases de datos (BBDD). Los registros de una BBDD relacional han de estar identificados de manera única mediante un campo clave.\nHasta el momento, hemos creado una tabla en nuestra BBDD e insertado algunos registros, pero carece de dicho campo clave. Analicemos cómo añadir esta característica a las tablas de una BBDD. Para ello, partamos del siguiente bloque de código:","tags":null,"title":"57. Bases de datos III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos la cláusula UNIQUE y operaciones CRUD (Create, Read, Update, Delete). Para ello, partamos de un código ciertamente similar a los examinados en anteriores ocasiones:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute('''\rCREATE TABLE PRODUCTOS (\rID INTEGER PRIMARY KEY AUTOINCREMENT,\rNOMBRE_ARTICULO VARCHAR(50) UNIQUE,\rPRECIO INTEGER,\rSECCION VARCHAR(20))\r''')\rproductos = [(\u0026quot;Pelota\u0026quot;, 20, \u0026quot;Juguetería\u0026quot;),\r(\u0026quot;Pantalón\u0026quot;, 15, \u0026quot;Confección\u0026quot;),\r(\u0026quot;Destornillador\u0026quot;, 25, \u0026quot;Ferretería\u0026quot;),\r(\u0026quot;Jarrón\u0026quot;, 45, \u0026quot;Cerámica\u0026quot;)]\rmi_cursor.executemany(\u0026quot;INSERT INTO PRODUCTOS VALUES (NULL, ?, ?, ?)\u0026quot;,\rproductos)\rmi_conexion.commit()\rmi_conexion.close()\r Notas:\n Recordemos que al incorporar PRIMARY KEY en el campo ID (nuestro anterior campo CODIGO_ARTICULO) lo convertimos en clave y, de manera implícita, estamos forzando que la infomación registrada en él no pueda repetirse. Añadiendo UNIQUE al campo NOMBRE_ARTICULO impedimos la posibilidad de que dos artículos posean el mismo nombre. Esta cláusula la podemos ubicar en tantos campos como deseemos.  ¿Qué sucede ahora si intentamos insertar un registro cuyo para NOMBRE_ARTICULO ya figura en la base de datos (BBDD)?\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES (NULL, 'Pelota', 57, 'Deportes')\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Traceback (most recent call last):\rFile \u0026quot;bbdd_2.py\u0026quot;, line 7, in \u0026lt;module\u0026gt;\rmi_cursor.execute(\u0026quot;INSERT INTO PRODUCTOS VALUES (NULL, 'Pelota', 57, 'Deportes')\u0026quot;)\rsqlite3.IntegrityError: UNIQUE constraint failed: PRODUCTOS.NOMBRE_ARTICULO\r Esto es, Python arroja un error de integridad por violarse la restricción de unicidad para el campo NOMBRE_ARTICULO.\nA continuación, abordemos las operaciones de tipo operaciones CRUD (Create, Read, Update, Delete). Aunque las dos primeras ya las hemos analizado en lecciones anteriores, recordemos brevemente cómo realizar una de tipo Read:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;SELECT * FROM PRODUCTOS WHERE SECCION='Confección'\u0026quot;)\rproductos = mi_cursor.fetchall()\rfor producto in productos:\rprint(producto)\rmi_conexion.commit()\rmi_conexion.close()\r (2, 'Pantalón', 15, 'Confección')\r Nota: las instrucciones suministradas a la BBDD son case sensitive, es decir, hemos de proceder con cautela a la hora de introducir los datos y utilizar adecuadamente las mayúsculas y las minúsculas (además de los acentos y otros posibles caracteres conflictivos).\nPara realizar una actualización de registro (operación de tipo Update), simplemente hemos de modificar la instrucción SQL de manera acertada:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;UPDATE PRODUCTOS SET PRECIO=35 WHERE NOMBRE_ARTICULO='Pelota'\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Finalmente, para borrar registros (operación de tipo Delete), la manera de proceder es similar a la vista antes, ya que únicamente hemos de emplear la instrucción SQL adecuada (y borrar por un criterio que no ocasione conflictos con otros registros almacenados en la BBDD):\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute(\u0026quot;DELETE FROM PRODUCTOS WHERE ID=1\u0026quot;)\rmi_conexion.commit()\rmi_conexion.close()\r Nota: cuando utilicemos una cláusula DELETE, no hemos de olvidar jamás añadir otra de tipo WHERE o terminaremos suprimiendo la tabla completa en lugar de uno o varios registros.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/58/ del repositorio.\n","date":1559257201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559257201,"objectID":"ccd98eae1512e49f2c3ee3103adb3386","permalink":"https://imalexissaez.github.io/courses/python-basic/pb58-bases-de-datos-iv/","publishdate":"2019-05-31T00:00:01+01:00","relpermalink":"/courses/python-basic/pb58-bases-de-datos-iv/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos la cláusula UNIQUE y operaciones CRUD (Create, Read, Update, Delete). Para ello, partamos de un código ciertamente similar a los examinados en anteriores ocasiones:\nimport sqlite3\rmi_conexion = sqlite3.connect(\u0026quot;gestion-productos\u0026quot;)\rmi_cursor = mi_conexion.cursor()\rmi_cursor.execute('''\rCREATE TABLE PRODUCTOS (\rID INTEGER PRIMARY KEY AUTOINCREMENT,\rNOMBRE_ARTICULO VARCHAR(50) UNIQUE,\rPRECIO INTEGER,\rSECCION VARCHAR(20))\r''')\rproductos = [(\u0026quot;Pelota\u0026quot;, 20, \u0026quot;Juguetería\u0026quot;),\r(\u0026quot;Pantalón\u0026quot;, 15, \u0026quot;Confección\u0026quot;),\r(\u0026quot;Destornillador\u0026quot;, 25, \u0026quot;Ferretería\u0026quot;),\r(\u0026quot;Jarrón\u0026quot;, 45, \u0026quot;Cerámica\u0026quot;)]\rmi_cursor.","tags":null,"title":"58. Bases de datos IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, y con el objetivo de reforzar los contenidos vistos hasta la fecha, comenzaremos a esbozar una aplicación gráfica de tipo CRUD. Mediante ella, conectaremos con una base de datos (BBDD) y podremos realizar las operaciones básicas: Create, Read, Update y Delete.\nEn el vídeo se explican los diferentes elementos y funcionalidades que caracterizan a la aplicación propuesta, por si queremos lanzarnos a su elaboración de antemano. No obstante, se procederá a su implementación en posteriores lecciones.\n","date":1559343601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559343601,"objectID":"b66713e10e500b802ff45dc7439da8ea","permalink":"https://imalexissaez.github.io/courses/python-basic/pb59-practica-guiada-i/","publishdate":"2019-06-01T00:00:01+01:00","relpermalink":"/courses/python-basic/pb59-practica-guiada-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, y con el objetivo de reforzar los contenidos vistos hasta la fecha, comenzaremos a esbozar una aplicación gráfica de tipo CRUD. Mediante ella, conectaremos con una base de datos (BBDD) y podremos realizar las operaciones básicas: Create, Read, Update y Delete.\nEn el vídeo se explican los diferentes elementos y funcionalidades que caracterizan a la aplicación propuesta, por si queremos lanzarnos a su elaboración de antemano.","tags":null,"title":"59. Práctica guiada I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, comenzaremos a esbozar la interfaz gráfica de nuestra aplicación CRUD. Para ello, empezamos tecleando:\nfrom tkinter import Tk\r# Raíz de la aplicación\rroot = Tk()\rroot.title(\u0026quot;Aplicación CRUD\u0026quot;)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Ejecución de la aplicación\rroot.mainloop()\r A continuación, generamos la barra de menú superior:\n# Menú superior de la aplicación\rbarra_menu = Menu(root)\rroot.config(menu=barra_menu)\rbbdd_menu = Menu(barra_menu, tearoff=0)\rbbdd_menu.add_command(label=\u0026quot;Conectar\u0026quot;)\rbbdd_menu.add_separator()\rbbdd_menu.add_command(label=\u0026quot;Salir\u0026quot;)\rborrar_menu = Menu(barra_menu, tearoff=0)\rborrar_menu.add_command(label=\u0026quot;Borrar campos\u0026quot;)\rcrud_menu = Menu(barra_menu, tearoff=0)\rcrud_menu.add_command(label=\u0026quot;Crear\u0026quot;)\rcrud_menu.add_command(label=\u0026quot;Leer\u0026quot;)\rcrud_menu.add_command(label=\u0026quot;Actualizar\u0026quot;)\rcrud_menu.add_command(label=\u0026quot;Borrar\u0026quot;)\rhelp_menu = Menu(barra_menu, tearoff=0)\rhelp_menu.add_command(label=\u0026quot;Licencia\u0026quot;)\rhelp_menu.add_separator()\rhelp_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;)\rbarra_menu.add_cascade(label=\u0026quot;BBDD\u0026quot;, menu=bbdd_menu)\rbarra_menu.add_cascade(label=\u0026quot;Borrar\u0026quot;, menu=borrar_menu)\rbarra_menu.add_cascade(label=\u0026quot;CRUD\u0026quot;, menu=crud_menu)\rbarra_menu.add_cascade(label=\u0026quot;Ayuda\u0026quot;, menu=help_menu)\r Por lo que respecta al cuerpo de la aplicación, lo dividiremos en dos frames: uno superior para organizar los campos de introducción de datos y otro inferior para distribuir los cuatro botones que nos permitirán llevar a cabo acciones de tipo CRUD.\nAsí pues, si, por ejemplo, optamos por construir los diferentes campos de entrada que poseerá la aplicación, el bloque de código a escribir será:\n# Frame superior\rcampos_frame = Frame(root)\rcampos_frame.pack()\rid_entry = Entry(campos_frame)\rid_entry.grid(row=0, column=1, padx=2, pady=2)\rname_entry = Entry(campos_frame)\rname_entry.grid(row=1, column=1, padx=2, pady=2)\rlastname_entry = Entry(campos_frame)\rlastname_entry.grid(row=2, column=1, padx=2, pady=2)\raddress_entry = Entry(campos_frame)\raddress_entry.grid(row=3, column=1, padx=2, pady=2)\rpassword_entry = Entry(campos_frame)\rpassword_entry.grid(row=4, column=1, padx=2, pady=2)\rpassword_entry.config(show=\u0026quot;*\u0026quot;)\rcomment_text = Text(campos_frame, width=15, height=5)\rcomment_text.grid(row=5, column=1, padx=2, pady=2)\rcomment_text_scrollvert = Scrollbar(campos_frame, command=comment_text.yview)\rcomment_text_scrollvert.grid(row=5, column=2, sticky=\u0026quot;nsew\u0026quot;)\rcomment_text.config(yscrollcommand=comment_text_scrollvert)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/60/ del repositorio.\n","date":1559430001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559430001,"objectID":"e4a7c41fe278b1887219821c69725550","permalink":"https://imalexissaez.github.io/courses/python-basic/pb60-practica-guiada-ii/","publishdate":"2019-06-02T00:00:01+01:00","relpermalink":"/courses/python-basic/pb60-practica-guiada-ii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, comenzaremos a esbozar la interfaz gráfica de nuestra aplicación CRUD. Para ello, empezamos tecleando:\nfrom tkinter import Tk\r# Raíz de la aplicación\rroot = Tk()\rroot.title(\u0026quot;Aplicación CRUD\u0026quot;)\rroot.iconbitmap(\u0026quot;icon.ico\u0026quot;)\r# Ejecución de la aplicación\rroot.mainloop()\r A continuación, generamos la barra de menú superior:\n# Menú superior de la aplicación\rbarra_menu = Menu(root)\rroot.config(menu=barra_menu)\rbbdd_menu = Menu(barra_menu, tearoff=0)\rbbdd_menu.add_command(label=\u0026quot;Conectar\u0026quot;)\rbbdd_menu.add_separator()\rbbdd_menu.add_command(label=\u0026quot;Salir\u0026quot;)\rborrar_menu = Menu(barra_menu, tearoff=0)\rborrar_menu.","tags":null,"title":"60. Práctica guiada II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, una vez declarados los campos de introducción de datos en la anterior, nos centraremos en ubicar las etiquetas en la aplicación:\nid_label = Label(campos_frame, text=\u0026quot;ID:\u0026quot;)\rid_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rname_label = Label(campos_frame, text=\u0026quot;Nombre:\u0026quot;)\rname_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rlastname_label = Label(campos_frame, text=\u0026quot;Apellido:\u0026quot;)\rlastname_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\raddress_label = Label(campos_frame, text=\u0026quot;Dirección:\u0026quot;)\raddress_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rpassword_label = Label(campos_frame, text=\u0026quot;Contraseña:\u0026quot;)\rpassword_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcomment_label = Label(campos_frame, text=\u0026quot;Comentarios:\u0026quot;)\rcomment_label.grid(row=5, column=0, sticky=\u0026quot;ne\u0026quot;, padx=2, pady=2)\r A continuación, ocupémonos de construir un frame en la parte inferior del ya disponible y disponer cuatro botones:\n# Frame inferior\rbotones_frame = Frame(root)\rbotones_frame.pack(expand=True)\rcrear_button = Button(botones_frame, text=\u0026quot;Create\u0026quot;)\rcrear_button.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rread_button = Button(botones_frame, text=\u0026quot;Read\u0026quot;)\rread_button.grid(row=0, column=1, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rupdate_button = Button(botones_frame, text=\u0026quot;Update\u0026quot;)\rupdate_button.grid(row=0, column=2, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rdelete_button = Button(botones_frame, text=\u0026quot;Delete\u0026quot;)\rdelete_button.grid(row=0, column=3, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\r Así, ya únicamente nos resta programar la funcionalidad de la aplicación, tanto para el menú, como para los botones recién creados.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/61/ del repositorio.\n","date":1559430002,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559430002,"objectID":"99b9313ec238110ab1bf6c090120967b","permalink":"https://imalexissaez.github.io/courses/python-basic/pb61-practica-guiada-iii/","publishdate":"2019-06-02T00:00:02+01:00","relpermalink":"/courses/python-basic/pb61-practica-guiada-iii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, una vez declarados los campos de introducción de datos en la anterior, nos centraremos en ubicar las etiquetas en la aplicación:\nid_label = Label(campos_frame, text=\u0026quot;ID:\u0026quot;)\rid_label.grid(row=0, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rname_label = Label(campos_frame, text=\u0026quot;Nombre:\u0026quot;)\rname_label.grid(row=1, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rlastname_label = Label(campos_frame, text=\u0026quot;Apellido:\u0026quot;)\rlastname_label.grid(row=2, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\raddress_label = Label(campos_frame, text=\u0026quot;Dirección:\u0026quot;)\raddress_label.grid(row=3, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rpassword_label = Label(campos_frame, text=\u0026quot;Contraseña:\u0026quot;)\rpassword_label.grid(row=4, column=0, sticky=\u0026quot;e\u0026quot;, padx=2, pady=2)\rcomment_label = Label(campos_frame, text=\u0026quot;Comentarios:\u0026quot;)\rcomment_label.","tags":null,"title":"61. Práctica guiada III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, implementaremos cierta funcionalidad a nuestra aplicación, comenzando por el menú BBDD. Programaremos la función que realiza la conexión a la base de datos (BBDD) y la que posibilita la opción de salir de la aplicación.\nPor lo que respecta a la conexión de la BBDD, como la primera vez que pulsemos la función va a encargarse de crear la tabla, después hemos de controlar la excepción que aparece al volver a llamar la función con dicha tabla ya creada.\n# Función para conectar a la BBDD\rdef conecta_bbdd():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rtry:\rcursor.execute('''\rCREATE TABLE DATOS_USUARIOS (\rID INTEGER PRIMARY KEY AUTOINCREMENT,\rNOMBRE_USUARIO VARCHAR(50),\rAPELLIDO VARCHAR(50),\rDIRECCION VARCHAR(50),\rPASSWORD VARCHAR(50),\rCOMENTARIOS VARCHAR(250))\r''')\rexcept sqlite3.OperationalError:\rpass\rfinally:\rmessagebox.showinfo(\rtitle=\u0026quot;Conexión a la base de datos\u0026quot;,\rmessage=\u0026quot;La conexión a la base de datos se ha realizado con éxito.\u0026quot;\r)\r Acto seguido, acudimos a la instrucción que gestiona el elemento del menú BBDD correspondiente y la modificamos como sigue:\nbbdd_menu.add_command(label=\u0026quot;Conectar\u0026quot;, command=conecta_bbdd)\r Finalmente, implementemos la función que gestiona la salida de la aplicación. El código es idéntico al visto en lecciones anteriores:\n# Función para salir de la aplicación\rdef sale_aplicacion():\rvalor = messagebox.askquestion(\rtitle=\u0026quot;Salir\u0026quot;,\rmessage=\u0026quot;¿Deseas realmente salir de la aplicación?\u0026quot;)\rif valor == \u0026quot;yes\u0026quot;:\rroot.destroy()\r Y añadimos la funcionalidad al correspondiente elemento del menú BBDD:\nbbdd_menu.add_command(label=\u0026quot;Salir\u0026quot;, command=sale_aplicacion)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/62/ del repositorio.\n","date":1559516401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559516401,"objectID":"e128d5de081c7ca3a681d19cbe1fa747","permalink":"https://imalexissaez.github.io/courses/python-basic/pb62-practica-guiada-iv/","publishdate":"2019-06-03T00:00:01+01:00","relpermalink":"/courses/python-basic/pb62-practica-guiada-iv/","section":"courses","summary":"Vídeo   Notas personales En esta lección, implementaremos cierta funcionalidad a nuestra aplicación, comenzando por el menú BBDD. Programaremos la función que realiza la conexión a la base de datos (BBDD) y la que posibilita la opción de salir de la aplicación.\nPor lo que respecta a la conexión de la BBDD, como la primera vez que pulsemos la función va a encargarse de crear la tabla, después hemos de controlar la excepción que aparece al volver a llamar la función con dicha tabla ya creada.","tags":null,"title":"62. Práctica guiada IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, analizaremos cómo limpiar los campos de registros (por si el usuario comete algún error al transcribir los datos) e insertar datos en la base de datos (BBDD), es decir, ejecutar la operación de tipo Create.\nPara empezar, de cara a poder realizar manipulaciones sobre el texto que un usuario escriba en los campos de registros, hemos de emplear variables de tipo StringVar:\nid_data = StringVar()\rname_data = StringVar()\rlastname_data = StringVar()\raddress_data = StringVar()\rpassword_data = StringVar()\r A continuación, las asignamos a sus correspondientes Entry:\nid_entry = Entry(campos_frame, width=40, textvariable=id_data)\rname_entry = Entry(campos_frame, width=40, textvariable=name_data)\rlastname_entry = Entry(campos_frame, width=40, textvariable=lastname_data)\raddress_entry = Entry(campos_frame, width=40, textvariable=address_data)\rpassword_entry = Entry(campos_frame, width=40, textvariable=password_data)\r Después, construimos la función que limpia los campos de registros:\n# Función que limpia los registros de la aplicación\rdef limpia_registros():\rid_data.set(\u0026quot;\u0026quot;)\rname_data.set(\u0026quot;\u0026quot;)\rlastname_data.set(\u0026quot;\u0026quot;)\raddress_data.set(\u0026quot;\u0026quot;)\rpassword_data.set(\u0026quot;\u0026quot;)\rcomment_text.delete(1.0, END)\r Notas:\n Notemos cómo se limpia un cuadro de comentario, ya que el procedimiento a seguir es un tanto diferente. Hemos de utilizar la función delete(), indicándole el punto de partida (1.0) y el de finalización (END). Al hilo de lo anterior, END es asimismo una instrucción de la librería tkinter, de manera que hemos de importarla si estamos siguiendo la estrategia de from tkinter import .... De hecho, en mi código dicha instrucción comienza a adquirir una longitud considerable, siendo en la actualidad:  from tkinter import Button, END, Entry, Frame, Label, Menu, messagebox, Scrollbar, StringVar, Text, Tk\r Ahora, asignamos esta funcionalidad al elemento correspondiente el menú:\nborrar_menu.add_command(label=\u0026quot;Borrar campos\u0026quot;, command=limpia_registros)\r Acto seguido, abordemos la primera operación CRUD, Create, que nos permitirá añadir registros a la BBDD.\n# Función que inserta registros en la BBDD\rdef crud_create():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rcursor.execute(\u0026quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, '\u0026quot; +\rname_data.get() + \u0026quot;', '\u0026quot; + lastname_data.get() + \u0026quot;','\u0026quot; +\raddress_data.get() + \u0026quot;','\u0026quot; + password_data.get() + \u0026quot;','\u0026quot; +\rcomment_text.get(\u0026quot;1.0\u0026quot;, END) + \u0026quot;')\u0026quot;)\rconexion.commit()\rmessagebox.showinfo(\rtitle=\u0026quot;Crear registro\u0026quot;,\rmessage=\u0026quot;Registro insertado con éxito en la base de datos.\u0026quot;)\rconexion.close()\r Notas:\n No recogemos aquello que el usuario escribe en el campo ID, ya que lo hemos declarado en la tabla como clave primaria autoincrementable (de ahí el NULL en la instrucción SQL de arriba). Este proceder puede resultar un tanto confuso para el usuario y admite margen de mejora. Es muy sencillo equivocarse a la hora de escribir la anterior instrucción SQL por el elevado número de concatenaciones. Un enfoque alternativo consiste en escribir primero una serie de datos concretos de ejemplo y, después, poco a poco sustituir dichos datos por las correspondientes variables con sus métodos get() asociados.  Finalmente, añadimos la funcionalidad, tanto al elemento de menú correspondiente, como al botón que figura en la parte inferior de la aplicación:\ncrud_menu.add_command(label=\u0026quot;Crear\u0026quot;, command=crud_create)\rcrear_button = Button(botones_frame, text=\u0026quot;Create\u0026quot;, command=crud_create)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/63/ del repositorio.\n","date":1559602801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559602801,"objectID":"cb03bb3b98a81002959fc875617ae4be","permalink":"https://imalexissaez.github.io/courses/python-basic/pb63-practica-guiada-v/","publishdate":"2019-06-04T00:00:01+01:00","relpermalink":"/courses/python-basic/pb63-practica-guiada-v/","section":"courses","summary":"Vídeo   Notas personales En esta lección, analizaremos cómo limpiar los campos de registros (por si el usuario comete algún error al transcribir los datos) e insertar datos en la base de datos (BBDD), es decir, ejecutar la operación de tipo Create.\nPara empezar, de cara a poder realizar manipulaciones sobre el texto que un usuario escriba en los campos de registros, hemos de emplear variables de tipo StringVar:","tags":null,"title":"63. Práctica guiada V","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos la implementación de las operaciones de tipo Read y Update. El criterio para posibilitar la lectura de registros será que el usuario introduzca en el formulario la ID de la cual desea consultar la información pertinente.\nEn primer lugar, implementemos la función de lectura, apoyándonos en cómo procedimos en anteriores lecciones:\n# Función que lee registros de la BBDD\rdef crud_read():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rcursor.execute(\u0026quot;SELECT * FROM DATOS_USUARIOS WHERE ID=\u0026quot; + id_data.get())\rusuario = cursor.fetchall()\rfor u in usuario:\rid_data.set(u[0])\rname_data.set(u[1])\rlastname_data.set(u[2])\raddress_data.set(u[3])\rpassword_data.set(u[4])\rcomment_text.insert(1.0, u[5])\rconexion.commit()\rconexion.close()\r Luego, añadimos la funcionalidad, tanto al elemento del menú correspondiente, como al botón asociado:\ncrud_menu.add_command(label=\u0026quot;Leer\u0026quot;, command=crud_read)\rread_button = Button(botones_frame, text=\u0026quot;Read\u0026quot;, command=crud_read)\r Nota: así programa la funcionalidad, la aplicación no responde cuando se inserta un ID que no figura en la base de datos. Habría de mostrar un mensaje de advertencia mediante la clase messagebox.\nActo seguido, ocupémonos de la función de tipo Update, que será muy similar a la programada para Create:\n# Función que actualiza registros de la BBDD\rdef crud_update():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rcursor.execute(\u0026quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO='\u0026quot; +\rname_data.get() + \u0026quot;', APELLIDO='\u0026quot; + lastname_data.get() +\r\u0026quot;', DIRECCION='\u0026quot; + address_data.get() + \u0026quot;', PASSWORD='\u0026quot; +\rpassword_data.get() + \u0026quot;', COMENTARIOS='\u0026quot; +\rcomment_text.get(\u0026quot;1.0\u0026quot;, END) + \u0026quot;'\u0026quot;)\rconexion.commit()\rmessagebox.showinfo(\rtitle=\u0026quot;Actualizar registro\u0026quot;,\rmessage=\u0026quot;Registro actualizado con éxito en la base de datos.\u0026quot;)\rconexion.close()\r Después, añadimos el comportamiento, tanto al elemento del menú asociado, como al botón correspondiente:\ncrud_menu.add_command(label=\u0026quot;Actualizar\u0026quot;, command=crud_update)\rupdate_button = Button(botones_frame, text=\u0026quot;Update\u0026quot;, command=crud_update)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/64/ del repositorio.\n","date":1559689201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559689201,"objectID":"07d125a71f6b02f7ae6355e6234d03e5","permalink":"https://imalexissaez.github.io/courses/python-basic/pb64-practica-guiada-vi/","publishdate":"2019-06-05T00:00:01+01:00","relpermalink":"/courses/python-basic/pb64-practica-guiada-vi/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos la implementación de las operaciones de tipo Read y Update. El criterio para posibilitar la lectura de registros será que el usuario introduzca en el formulario la ID de la cual desea consultar la información pertinente.\nEn primer lugar, implementemos la función de lectura, apoyándonos en cómo procedimos en anteriores lecciones:\n# Función que lee registros de la BBDD\rdef crud_read():\rconexion = sqlite3.","tags":null,"title":"64. Práctica guiada VI","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, abordaremos cómo borrar registros (operación de tipo Delete) y la creación de consultas parametrizadas.\nEn cuanto a la primera tarea, empecemos construyendo la correspondiente función:\n# Función que borra registros de la BBDD\rdef crud_delete():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rcursor.execute(\u0026quot;DELETE FROM DATOS_USUARIOS WHERE ID=\u0026quot; + id_data.get())\rconexion.commit()\rconexion.close()\rmessagebox.showinfo(\rtitle=\u0026quot;Borrar registro\u0026quot;,\rmessage=\u0026quot;Registro borrado con éxito en la base de datos.\u0026quot;)\r Acto seguido, añadimos la funcionalidad, tanto al elemento del menú asociado, como al botón correspondiente:\ncrud_menu.add_command(label=\u0026quot;Borrar\u0026quot;, command=crud_delete)\rdelete_button = Button(botones_frame, text=\u0026quot;Delete\u0026quot;, command=crud_delete)\r A continuación, analicemos cómo modificar algunas de las consultas SQL para hacerlas parametrizadas y que su escritura sea mucho más sencilla:\n# Función que inserta registros en la BBDD\rdef crud_create():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rdatos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(\u0026quot;1.0\u0026quot;, END)\rcursor.execute(\u0026quot;INSERT INTO DATOS_USUARIOS VALUES (NULL, ?, ?, ?, ?, ?)\u0026quot;, (datos))\rconexion.commit()\rmessagebox.showinfo(\rtitle=\u0026quot;Crear registro\u0026quot;,\rmessage=\u0026quot;Registro insertado con éxito en la base de datos.\u0026quot;)\rconexion.close()\r # Función que actualiza registros de la BBDD\rdef crud_update():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rdatos = name_data.get(), lastname_data.get(), address_data.get(), password_data.get(), comment_text.get(\u0026quot;1.0\u0026quot;, END)\rcursor.execute(\u0026quot;UPDATE DATOS_USUARIOS SET NOMBRE_USUARIO=?, APELLIDO=?, DIRECCION=?, PASSWORD=?, COMENTARIOS=? WHERE ID=\u0026quot; + id_data.get(), (datos))\rconexion.commit()\rmessagebox.showinfo(\rtitle=\u0026quot;Actualizar registro\u0026quot;,\rmessage=\u0026quot;Registro actualizado con éxito en la base de datos.\u0026quot;)\rconexion.close()\r Finalmente, como extra, incluyamos funcionalidad para los dos elementos del menú Ayuda:\n# Función licencia\rdef licencia():\rmessagebox.showwarning(title=\u0026quot;Licencia\u0026quot;,\rmessage=\u0026quot;Producto bajo licencia GNU.\u0026quot;)\r# Función acerca de...\rdef acerca_de():\rmessagebox.showinfo(title=\u0026quot;Acerca de...\u0026quot;,\rmessage=\u0026quot;Aplicación creada por Alexis Sáez.\u0026quot;)\r Ahora, incorporemos dicha funcionalidad en los elementos del menú:\nhelp_menu.add_command(label=\u0026quot;Licencia\u0026quot;, command=licencia)\rhelp_menu.add_command(label=\u0026quot;Acerca de...\u0026quot;, command=acerca_de)\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/65/ del repositorio.\n","date":1559775601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559775601,"objectID":"8d9e8e7d32aefd18ae86b9a339cbe173","permalink":"https://imalexissaez.github.io/courses/python-basic/pb65-practica-guiada-vii/","publishdate":"2019-06-06T00:00:01+01:00","relpermalink":"/courses/python-basic/pb65-practica-guiada-vii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, abordaremos cómo borrar registros (operación de tipo Delete) y la creación de consultas parametrizadas.\nEn cuanto a la primera tarea, empecemos construyendo la correspondiente función:\n# Función que borra registros de la BBDD\rdef crud_delete():\rconexion = sqlite3.connect(\u0026quot;usuarios\u0026quot;)\rcursor = conexion.cursor()\rcursor.execute(\u0026quot;DELETE FROM DATOS_USUARIOS WHERE ID=\u0026quot; + id_data.get())\rconexion.commit()\rconexion.close()\rmessagebox.showinfo(\rtitle=\u0026quot;Borrar registro\u0026quot;,\rmessage=\u0026quot;Registro borrado con éxito en la base de datos.\u0026quot;)\r Acto seguido, añadimos la funcionalidad, tanto al elemento del menú asociado, como al botón correspondiente:","tags":null,"title":"65. Práctica guiada VII","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos las funciones lambda. Una función lambda es una función anónima, y se utilizan en Python a la hora de programar para abreviar, ya que aligera la sintaxis del código. Además, no ocupan lugar en el espacio de nombres asociado a las funciones de una aplicación.\nCualquier tarea que llevemos a cabo con una función lambda se puede desarrollar mediante una función normal, pero no así a la inversa (sobre todo cuando su lógica es compleja).\nPor ejemplo, para calcular el área de un triángulo, podemos construir la función:\ndef area_triangulo(b, h):\rreturn b * h / 2\r for b in range(1, 10, 5):\rfor h in range(1, 10, 5):\rprint(\rf\u0026quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.\u0026quot;\r)\r El área del triángulo de base 1 y altura 1 es 0.5.\rEl área del triángulo de base 1 y altura 6 es 3.0.\rEl área del triángulo de base 6 y altura 1 es 3.0.\rEl área del triángulo de base 6 y altura 6 es 18.0.\r No obstante, una función tan sencilla puede ser abreviada como una función lambda.\narea_triangulo = lambda b, h: b * h / 2\rfor b in range(1, 10, 5):\rfor h in range(1, 10, 5):\rprint(\rf\u0026quot;El área del triángulo de base {b} y altura {h} es {area_triangulo(b, h)}.\u0026quot;\r)\r El área del triángulo de base 1 y altura 1 es 0.5.\rEl área del triángulo de base 1 y altura 6 es 3.0.\rEl área del triángulo de base 6 y altura 1 es 3.0.\rEl área del triángulo de base 6 y altura 6 es 18.0.\r Nota: las funciones lambda, generalmente, no se asignan a variables. En tales casos, conviene hacer uso de la instrucción def y definir una función tal y como estamos habituados.\nUsadas \u0026lsquo;\u0026lsquo;al vuelo\u0026rsquo;', su sintaxis queda como sigue:\nprint(\u0026quot;El cubo de 3 es \u0026quot; + str((lambda x:x**3) (3)))\r El cubo de 3 es 27\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/66/ del repositorio.\n","date":1559862001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559862001,"objectID":"0789927ef6d00eca848988f6a32144d3","permalink":"https://imalexissaez.github.io/courses/python-basic/pb66-funciones-lambda/","publishdate":"2019-06-07T00:00:01+01:00","relpermalink":"/courses/python-basic/pb66-funciones-lambda/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos las funciones lambda. Una función lambda es una función anónima, y se utilizan en Python a la hora de programar para abreviar, ya que aligera la sintaxis del código. Además, no ocupan lugar en el espacio de nombres asociado a las funciones de una aplicación.\nCualquier tarea que llevemos a cabo con una función lambda se puede desarrollar mediante una función normal, pero no así a la inversa (sobre todo cuando su lógica es compleja).","tags":null,"title":"66. Funciones lambda","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos la función filter(), que forma parte de un conjunto de funciones conocidas como \u0026lsquo;\u0026lsquo;de orden superior\u0026rsquo;\u0026rsquo; y nos permiten utilizar en Python el paradigma de programación funcional. La mencionada función verifica que los elementos de una secuencia cumplen una condición, devolviendo un iterador compuesto por aquellos que la satisfacen.\nPor ejemplo, podemos construir un programa que detecte qué números son pares y cuáles no lo son, devolviéndonos una lista compuesta por los que verifiquen dicha condición:\ndef numero_par(num):\rif num % 2 == 0:\rreturn True\rnumeros = [17, 24, 7, 39, 8, 51, 92]\rprint(filter(numero_par, numeros)) # objeto iterable\rprint(list(filter(numero_par, numeros)))\r \u0026lt;filter object at 0x0000029E5BA262B0\u0026gt;\r[24, 8, 92]\r La función numero_par() la podemos abreviar un tanto como sigue:\ndef numero_par(num):\rreturn num % 2 == 0\r Es más, como es tan sencilla, incluso podemos prescindir de ella utilizando una función lambda:\nnumeros = [17, 24, 7, 39, 8, 51, 92]\rprint(list(filter(lambda x: x % 2 == 0, numeros)))\r [24, 8, 92]\r Habitualmente, utilizaremos la función filter() para filtrar objetos. Por ejemplo, supongamos que tenemos varias instancias de la clase Empleado y deseamos filtrarlas por el valor de uno de sus atributos:\nclass Empleado:\rdef __init__(self, nombre, cargo, salario):\rself.nombre = nombre\rself.cargo = cargo\rself.salario = salario\rdef __str__(self):\rreturn f\u0026quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.\u0026quot;\rlista_empleados = [\rEmpleado(\u0026quot;Juan\u0026quot;, \u0026quot;Director\u0026quot;, 75000),\rEmpleado(\u0026quot;Ana\u0026quot;, \u0026quot;Presidenta\u0026quot;, 85000),\rEmpleado(\u0026quot;Antonio\u0026quot;, \u0026quot;Administrativo\u0026quot;, 25000),\rEmpleado(\u0026quot;Sara\u0026quot;, \u0026quot;Secretaria\u0026quot;, 27000),\rEmpleado(\u0026quot;Mario\u0026quot;, \u0026quot;Botones\u0026quot;, 21000)\r]\rsalarios_altos = filter(lambda e: e.salario \u0026gt; 50000, lista_empleados)\r[print(s.__str__()) for s in salarios_altos]\r Juan trabaja como Director y cobra 75000 €.\rAna trabaja como Presidenta y cobra 85000 €.\r A modo de curiosidad, ya que me he avanzado y he utilizado comprensiones de listas (ver la última línea del bloque de código anterior), resulta que mediante ellas, en este ejemplo concreto, no es necesario recurrir al uso de la función filter():\nclass Empleado:\rdef __init__(self, nombre, cargo, salario):\rself.nombre = nombre\rself.cargo = cargo\rself.salario = salario\rdef __str__(self):\rreturn f\u0026quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.\u0026quot;\rlista_empleados = [\rEmpleado(\u0026quot;Juan\u0026quot;, \u0026quot;Director\u0026quot;, 75000),\rEmpleado(\u0026quot;Ana\u0026quot;, \u0026quot;Presidenta\u0026quot;, 85000),\rEmpleado(\u0026quot;Antonio\u0026quot;, \u0026quot;Administrativo\u0026quot;, 25000),\rEmpleado(\u0026quot;Sara\u0026quot;, \u0026quot;Secretaria\u0026quot;, 27000),\rEmpleado(\u0026quot;Mario\u0026quot;, \u0026quot;Botones\u0026quot;, 21000)\r]\r[print(e.__str__()) for e in lista_empleados if e.salario \u0026gt; 50000]\r Juan trabaja como Director y cobra 75000 €.\rAna trabaja como Presidenta y cobra 85000 €.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/67/ del repositorio.\n","date":1559948401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559948401,"objectID":"b9ca987c085508d9428e95388aa476e1","permalink":"https://imalexissaez.github.io/courses/python-basic/pb67-filter/","publishdate":"2019-06-08T00:00:01+01:00","relpermalink":"/courses/python-basic/pb67-filter/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos la función filter(), que forma parte de un conjunto de funciones conocidas como \u0026lsquo;\u0026lsquo;de orden superior\u0026rsquo;\u0026rsquo; y nos permiten utilizar en Python el paradigma de programación funcional. La mencionada función verifica que los elementos de una secuencia cumplen una condición, devolviendo un iterador compuesto por aquellos que la satisfacen.\nPor ejemplo, podemos construir un programa que detecte qué números son pares y cuáles no lo son, devolviéndonos una lista compuesta por los que verifiquen dicha condición:","tags":null,"title":"67. La función filter","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos la función map(), que, como filter(), también forma parte de un conjunto de funciones conocidas como \u0026lsquo;\u0026lsquo;de orden superior\u0026rsquo;\u0026rsquo; y nos permiten utilizar en Python el paradigma de programación funcional.\nLa filosofía de ambas funciones es ciertamente similar ya que, por ejemplo, map() aplica una función a cada elemento de un objeto de tipo iterable (listas, tuplas\u0026hellip;) devolviendo a su vez un objeto de tipo iterable que contiene los resultados de dicha aplicación.\nRetomemos la clase definida en la lección anterior, junto con la lista de empleados generada:\nclass Empleado:\rdef __init__(self, nombre, cargo, salario):\rself.nombre = nombre\rself.cargo = cargo\rself.salario = salario\rdef __str__(self):\rreturn f\u0026quot;{self.nombre} trabaja como {self.cargo} y cobra {self.salario} €.\u0026quot;\rlista_empleados = [\rEmpleado(\u0026quot;Juan\u0026quot;, \u0026quot;Director\u0026quot;, 6700),\rEmpleado(\u0026quot;Ana\u0026quot;, \u0026quot;Presidenta\u0026quot;, 7500),\rEmpleado(\u0026quot;Antonio\u0026quot;, \u0026quot;Administrativo\u0026quot;, 1200),\rEmpleado(\u0026quot;Sara\u0026quot;, \u0026quot;Secretaria\u0026quot;, 1250),\rEmpleado(\u0026quot;Mario\u0026quot;, \u0026quot;Botones\u0026quot;, 1000)\r]\r Nota: hemos modificado los salarios para que sus cantidades sean mensuales, en lugar de las anuales declaradas en la lección anterior.\nImaginemos ahora que todos los empleados recibien un extra monetario en forma de comisión, que hemos de agregar a su salario mensual.\ndef calcula_comision(empleado):\rempleado.salario *= 1.03\rreturn empleado\rlista_empleados_comision = map(calcula_comision, lista_empleados)\r[print(e) for e in lista_empleados_comision]\r Juan trabaja como Director y cobra 6901.0 €.\rAna trabaja como Presidenta y cobra 7725.0 €.\rAntonio trabaja como Administrativo y cobra 1236.0 €.\rSara trabaja como Secretaria y cobra 1287.5 €.\rMario trabaja como Botones y cobra 1030.0 €.\r ¿Y si queremos aplicar la comisión solamente a aquellos trabajadores que tengan un salario inferior a 3000 euros?\ndef calcula_comision(empleado):\rif empleado.salario \u0026lt;= 3000:\rempleado.salario *= 1.03\rreturn empleado\rlista_empleados_comision = map(calcula_comision, lista_empleados)\r[print(e) for e in lista_empleados_comision]\r Juan trabaja como Director y cobra 6700 €.\rAna trabaja como Presidenta y cobra 7500 €.\rAntonio trabaja como Administrativo y cobra 1236.0 €.\rSara trabaja como Secretaria y cobra 1287.5 €.\rMario trabaja como Botones y cobra 1030.0 €.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/68/ del repositorio.\n","date":1560034801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560034801,"objectID":"a5bd4e2212838d2ff10e36a80b608768","permalink":"https://imalexissaez.github.io/courses/python-basic/pb68-map/","publishdate":"2019-06-09T00:00:01+01:00","relpermalink":"/courses/python-basic/pb68-map/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos la función map(), que, como filter(), también forma parte de un conjunto de funciones conocidas como \u0026lsquo;\u0026lsquo;de orden superior\u0026rsquo;\u0026rsquo; y nos permiten utilizar en Python el paradigma de programación funcional.\nLa filosofía de ambas funciones es ciertamente similar ya que, por ejemplo, map() aplica una función a cada elemento de un objeto de tipo iterable (listas, tuplas\u0026hellip;) devolviendo a su vez un objeto de tipo iterable que contiene los resultados de dicha aplicación.","tags":null,"title":"68. La función map","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, comenzaremos el estudio de las expresiones regulares en Python, que son una secuencia de caracteres que forman un patrón de búsqueda y sirven para el trabajo y procesamiento de texto. Por ejemplo, podemos estar interesados, entre otras tareas, en:\n Buscar un texto que se ajuste a un formato determinado (correo electrónico). Buscar si existe o no una cadena de caracteres dentro de un texto. Contar el número de coincidencias dentro de un texto.  Conviene que consultemos la documentación oficial del módulo asociado a las expresiones regulares, re, en Python.\nA continuación, veamos algunos ejemplos sencillos. Empecemos ilustrando el uso del método search(), que nos permite buscar una cadena de texto concreta y nos ofrece su localización:\nimport re\rcadena = \u0026quot;Vamos a aprender expresiones regulares.\u0026quot;\rprint(re.search(\u0026quot;aprender\u0026quot;, cadena))\r \u0026lt;re.Match object; span=(8, 16), match='aprender'\u0026gt;\r Apreciamos que la ejecución nos devuelve un objeto, de tipo Match, que en el intervalo de caracteres (8, 16) ha encontrado la cadena de texto de interés, aprender.\nAhora bien, si insertamos una cadena de texto que no figure en la variable cadena, el resultado que arroja la ejecución del programa es None:\nimport re\rcadena = \u0026quot;Vamos a aprender expresiones regulares.\u0026quot;\rprint(re.search(\u0026quot;Python\u0026quot;, cadena))\r None\r Obviamente, podemos pasar variables a la función search():\nimport re\rcadena = \u0026quot;Vamos a aprender expresiones regulares.\u0026quot;\rtexto_buscar = \u0026quot;aprender\u0026quot;\rif re.search(texto_buscar, cadena) is not None:\rprint(\u0026quot;Texto encontrado.\u0026quot;)\relse:\rprint(\u0026quot;Texto no encontrado.\u0026quot;)\r Texto encontrado.\r Hemos encontrado el texto, efectivamente, pero, ¿en qué carácter comienza? Utilizando el método start() hallamos la respuesta:\nimport re\rcadena = \u0026quot;Vamos a aprender expresiones regulares.\u0026quot;\rtexto_buscar = \u0026quot;aprender\u0026quot;\rtexto_encontrado = re.search(texto_buscar, cadena)\rprint(texto_encontrado.start())\r 8\r Análogamente,\nprint(texto_encontrado.end())\r 16\r Al hilo de las acciones anteriores, el método span() nos devuelve una tupla con los valores mostrados arriba:\nprint(texto_encontrado.span())\r (8, 16)\r Finalmente, examinemos la utilidad del método findall(), para lo cual hemos de ampliar un poco la cadena de texto original suministrada:\nimport re\rcadena = '''\rVamos a aprender expresiones regulares en Python.\rPython es un lenguaje de sintaxis sencilla.'''\rtexto_buscar = \u0026quot;Python\u0026quot;\rprint(re.findall(texto_buscar, cadena))\r ['Python', 'Python']\r Accedemos a una lista que contiene el texto de interés, tantas veces como repeticiones figuren en él. Empleando ahora la función len():\nimport re\rcadena = '''\rVamos a aprender expresiones regulares en Python.\rPython es un lenguaje de sintaxis sencilla.'''\rtexto_buscar = \u0026quot;Python\u0026quot;\rprint(len(re.findall(texto_buscar, cadena)))\r 2\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/69/ del repositorio.\n","date":1560121201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560121201,"objectID":"af692c8631ddc64aa05b3e45c88c959b","permalink":"https://imalexissaez.github.io/courses/python-basic/pb69-expresiones-regulares-i/","publishdate":"2019-06-10T00:00:01+01:00","relpermalink":"/courses/python-basic/pb69-expresiones-regulares-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, comenzaremos el estudio de las expresiones regulares en Python, que son una secuencia de caracteres que forman un patrón de búsqueda y sirven para el trabajo y procesamiento de texto. Por ejemplo, podemos estar interesados, entre otras tareas, en:\n Buscar un texto que se ajuste a un formato determinado (correo electrónico). Buscar si existe o no una cadena de caracteres dentro de un texto.","tags":null,"title":"69. Expresiones regulares I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las expresiones regulares abordando los denominados metacaracteres (o caracteres comodín).\nEmpecemos con las anclas, que dentro de una lista nos van a permitir encontrar coincidencias al principio y al final de cada elemento de esta. Por ejemplo, mediante el ancla ^, las buscamos al inicio de la cadena de texto:\nimport re\rlista_nombres = [\u0026quot;Ana Gómez\u0026quot;,\r\u0026quot;María Martín\u0026quot;,\r\u0026quot;Sandra López\u0026quot;,\r\u0026quot;Santiago Martín\u0026quot;]\rfor nombre in lista_nombres:\rif re.findall(\u0026quot;^Sandra\u0026quot;, nombre):\rprint(nombre)\r Sandra López\r El último bucle lo podemos compactar utilizando comprensiones de listas de la siguiente forma:\n[print(nombre) for nombre in lista_nombres if re.findall(\u0026quot;^Sandra\u0026quot;, nombre)]\r Así, podemos extraer de lista_nombres, si nos interesa, todos los nombres que comiencen por S:\nimport re\rlista_nombres = [\u0026quot;Ana Gómez\u0026quot;,\r\u0026quot;María Martín\u0026quot;,\r\u0026quot;Sandra López\u0026quot;,\r\u0026quot;Santiago Martín\u0026quot;]\r[print(nombre) for nombre in lista_nombres if re.findall(\u0026quot;^S\u0026quot;, nombre)]\r Sandra López\rSantiago Martín\r ¿Y si queremos todos los nombres cuyo apellido sea Martín? El ancla $ es el metacarácter que hemos de emplear:\nimport re\rlista_nombres = [\u0026quot;Ana Gómez\u0026quot;,\r\u0026quot;María Martín\u0026quot;,\r\u0026quot;Sandra López\u0026quot;,\r\u0026quot;Santiago Martín\u0026quot;]\r[print(nombre) for nombre in lista_nombres if re.findall(\u0026quot;Martín$\u0026quot;, nombre)]\r María Martín\rSantiago Martín\r Veamos otro ejemplo de su uso, trabajando ahora con una lista de dominios, estamos interesados en encontrar aquellos que acaben en .es:\nimport re\rurls = [\u0026quot;https://pildorasinformaticas.es\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.es\u0026quot;,\r\u0026quot;https://pildorasinformaticas.com\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.com\u0026quot;]\r[print(url) for url in urls if re.findall(\u0026quot;.es$\u0026quot;, url)]\r https://pildorasinformaticas.es\rftp://pildorasinformaticas.es\r Quizá nos interese hallar qué dominios son de tipo ftp:\nimport re\rurls = [\u0026quot;https://pildorasinformaticas.es\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.es\u0026quot;,\r\u0026quot;https://pildorasinformaticas.com\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.com\u0026quot;]\r[print(url) for url in urls if re.findall(\u0026quot;^ftp\u0026quot;, url)]\r ftp://pildorasinformaticas.es\rftp://pildorasinformaticas.com\r Por otro lado, tenemos las clases de caracteres, que nos permiten introducir patrones de búsqueda utilizando el operador []. Cambiemos ligeramente los dominios para ver su utilidad (buscando aquellos dominios que contengan el carácter ñ):\nimport re\rurls = [\u0026quot;https://pildorasinformaticas.es\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.es\u0026quot;,\r\u0026quot;https://pildorasinformaticas.com\u0026quot;,\r\u0026quot;ftp://pildorasinformaticas.com\u0026quot;,\r\u0026quot;https://informaticaenespaña.es\u0026quot;]\r[print(url) for url in urls if re.findall(\u0026quot;[ñ]\u0026quot;, url)]\r https://informaticaenespaña.es\r Un ejemplo un tanto más complejo: en una lista de palabras, queremos encontrar si se hallan las palabras niños y niñas. Como solo se diferencias ambas cadenas en un carácter, podemos escribir:\nimport re\rurls = [\u0026quot;hombres\u0026quot;, \u0026quot;mujeres\u0026quot;, \u0026quot;mascotas\u0026quot;, \u0026quot;niños\u0026quot;, \u0026quot;niñas\u0026quot;]\r[print(url) for url in urls if re.findall(\u0026quot;niñ[oa]s\u0026quot;, url)]\r niños\rniñas\r Nota: al escribir [oa] no exigimos que deban estar presentes los dos caracteres y en ese preciso orden. La función findall() nos arrojará una coincidencia cuando alguno de los dos esté presente (o ambos, siendo indiferente el orden en el que se encuentren en este último caso).\nEsta estrategia es también útil cuando lidiamos con tildes:\nimport re\rurls = [\u0026quot;hombres\u0026quot;, \u0026quot;mujeres\u0026quot;, \u0026quot;mascotas\u0026quot;, \u0026quot;camión\u0026quot;, \u0026quot;camion\u0026quot;]\r[print(url) for url in urls if re.findall(\u0026quot;cami[oó]n\u0026quot;, url)]\r camión\rcamion\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/70/ del repositorio.\n","date":1560207601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560207601,"objectID":"b179f8726cb98dbd9a9d2f5d717b9172","permalink":"https://imalexissaez.github.io/courses/python-basic/pb70-expresiones-regulares-ii/","publishdate":"2019-06-11T00:00:01+01:00","relpermalink":"/courses/python-basic/pb70-expresiones-regulares-ii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las expresiones regulares abordando los denominados metacaracteres (o caracteres comodín).\nEmpecemos con las anclas, que dentro de una lista nos van a permitir encontrar coincidencias al principio y al final de cada elemento de esta. Por ejemplo, mediante el ancla ^, las buscamos al inicio de la cadena de texto:\nimport re\rlista_nombres = [\u0026quot;Ana Gómez\u0026quot;,\r\u0026quot;María Martín\u0026quot;,\r\u0026quot;Sandra López\u0026quot;,\r\u0026quot;Santiago Martín\u0026quot;]\rfor nombre in lista_nombres:\rif re.","tags":null,"title":"70. Expresiones regulares II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las expresiones regulares analizando cómo trabajar con rangos. Estos nos permiten buscar patrones indicando un rango de números, de caracteres, etc.\nPor ejemplo, a partir de una lista de nombres, supongamos que estamos interesados en hallar todos aquellos que tengan letras comprendidas entre la o y la t:\nimport re\rnombres = [\u0026quot;Ana\u0026quot;, \u0026quot;Pedro\u0026quot;, \u0026quot;María\u0026quot;, \u0026quot;Rosa\u0026quot;, \u0026quot;Sandra\u0026quot;, \u0026quot;Celia\u0026quot;]\r[print(nombre) for nombre in nombres if re.findall(\u0026quot;[o-t]\u0026quot;, nombre)]\r Pedro\rMaría\rRosa\rSandra\r Nota: los rangos son case sensitive, esto es, distinguen entre minúsculas y mayúsculas. Por ejemplo, si combinamos el rango anterior con el ancla ^, la ejecución no arrojará resultado alguno, porque todos los nombres están declarados con su inicial en mayúscula.\nimport re\rnombres = [\u0026quot;Ana\u0026quot;, \u0026quot;Pedro\u0026quot;, \u0026quot;María\u0026quot;, \u0026quot;Rosa\u0026quot;, \u0026quot;Sandra\u0026quot;, \u0026quot;Celia\u0026quot;]\r[print(nombre) for nombre in nombres if re.findall(\u0026quot;^[o-t]\u0026quot;, nombre)]\r No obstante, completando el rango solucionamos esta situación:\nimport re\rnombres = [\u0026quot;Ana\u0026quot;, \u0026quot;Pedro\u0026quot;, \u0026quot;María\u0026quot;, \u0026quot;Rosa\u0026quot;, \u0026quot;Sandra\u0026quot;, \u0026quot;Celia\u0026quot;]\r[print(nombre) for nombre in nombres if re.findall(\u0026quot;^[o-tO-T]\u0026quot;, nombre)]\r Pedro\rRosa\rSandra\r A continuación, estudiemos el uso de rangos cuando se nos presenta una lista de códigos:\nimport re\rcodigos = [\u0026quot;Ma1\u0026quot;, \u0026quot;Se1\u0026quot;, \u0026quot;Ma2\u0026quot;, \u0026quot;Ba1\u0026quot;, \u0026quot;Ma3\u0026quot;, \u0026quot;Va1\u0026quot;, \u0026quot;Va2\u0026quot;, \u0026quot;Ma4\u0026quot;]\r[print(codigo) for codigo in codigos if re.findall(\u0026quot;Ma[0-3]\u0026quot;, codigo)]\r Ma1\rMa2\rMa3\r Por otro lado, Python nos permite la posibilidad de negar rangos, es decir, de obtener aquellos resultados que no se ajustan al patrón de búsqueda especificado. Para ello, antecediendo el rango, utilizamos el carácter ^:\nimport re\rcodigos = [\u0026quot;Ma1\u0026quot;, \u0026quot;Se1\u0026quot;, \u0026quot;Ma2\u0026quot;, \u0026quot;Ba1\u0026quot;, \u0026quot;Ma3\u0026quot;, \u0026quot;Va1\u0026quot;, \u0026quot;Va2\u0026quot;, \u0026quot;Ma4\u0026quot;]\r[print(codigo) for codigo in codigos if re.findall(\u0026quot;Ma[^0-3]\u0026quot;, codigo)]\r Ma4\r Acto seguido, agreguemos algunos códigos nuevos y sigamos experimentando el uso de rangos:\nimport re\rcodigos = [\u0026quot;Ma1\u0026quot;, \u0026quot;Se1\u0026quot;, \u0026quot;Ma2\u0026quot;, \u0026quot;Ba1\u0026quot;, \u0026quot;Ma3\u0026quot;, \u0026quot;Va1\u0026quot;, \u0026quot;Va2\u0026quot;, \u0026quot;Ma4\u0026quot;,\r\u0026quot;MaA\u0026quot;, \u0026quot;Ma5\u0026quot;, \u0026quot;MaB\u0026quot;, \u0026quot;MaC\u0026quot;]\r[print(codigo) for codigo in codigos if re.findall(\u0026quot;Ma[0-3A-B]\u0026quot;, codigo)]\r Ma1\rMa2\rMa3\rMaA\rMaB\r Ahora, insertemos algunos caracteres especiales en mitad de ciertos códigos y veamos entonces cómo lidiar con ellos. Imaginemos que buscamos todos aquellos cuyo tercer carácter sea bien un punto, bien dos puntos:\nimport re\rcodigos = [\u0026quot;Ma.1\u0026quot;, \u0026quot;Se1\u0026quot;, \u0026quot;Ma2\u0026quot;, \u0026quot;Ba1\u0026quot;, \u0026quot;Ma:3\u0026quot;, \u0026quot;Va1\u0026quot;, \u0026quot;Va2\u0026quot;, \u0026quot;Ma4\u0026quot;,\r\u0026quot;MaA\u0026quot;, \u0026quot;Ma.5\u0026quot;, \u0026quot;MaB\u0026quot;, \u0026quot;Ma:C\u0026quot;]\r[print(codigo) for codigo in codigos if re.findall(\u0026quot;Ma[.:]\u0026quot;, codigo)]\r Ma.1\rMa:3\rMa.5\rMa:C\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/71/ del repositorio.\n","date":1560294001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560294001,"objectID":"65b4768f78415b8fed4dfeea80f4e032","permalink":"https://imalexissaez.github.io/courses/python-basic/pb71-expresiones-regulares-iii/","publishdate":"2019-06-12T00:00:01+01:00","relpermalink":"/courses/python-basic/pb71-expresiones-regulares-iii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las expresiones regulares analizando cómo trabajar con rangos. Estos nos permiten buscar patrones indicando un rango de números, de caracteres, etc.\nPor ejemplo, a partir de una lista de nombres, supongamos que estamos interesados en hallar todos aquellos que tengan letras comprendidas entre la o y la t:\nimport re\rnombres = [\u0026quot;Ana\u0026quot;, \u0026quot;Pedro\u0026quot;, \u0026quot;María\u0026quot;, \u0026quot;Rosa\u0026quot;, \u0026quot;Sandra\u0026quot;, \u0026quot;Celia\u0026quot;]\r[print(nombre) for nombre in nombres if re.","tags":null,"title":"71. Expresiones regulares III","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, finaliremos la serie dedicada a expresiones regulares profundizando en el uso de las funciones match() y search() del módulo re. La función match() busca coincidencias, con respecto a un patrón determinado, siempre al comienzo del texto.\nimport re\rnombre1 = \u0026quot;Sandra López\u0026quot;\rnombre2 = \u0026quot;Antonio Gómez\u0026quot;\rnombre3 = \u0026quot;María López\u0026quot;\rif re.match(\u0026quot;Sandra\u0026quot;, nombre1):\rprint(\u0026quot;Hemos encontrado el nombre.\u0026quot;)\relse:\rprint(\u0026quot;No hemos encontrado el nombre.\u0026quot;)\r Hemos encontrado el nombre.\r Por otro lado, podemos evitar el comportamiento case sensitive de esta función mediante el parámetro re.IGNORECASE. Cambiemos Sandra por sandra y comprobémoslo:\nimport re\rnombre1 = \u0026quot;Sandra López\u0026quot;\rnombre2 = \u0026quot;Antonio Gómez\u0026quot;\rnombre3 = \u0026quot;María López\u0026quot;\rif re.match(\u0026quot;sandra\u0026quot;, nombre1, re.IGNORECASE):\rprint(\u0026quot;Hemos encontrado el nombre.\u0026quot;)\relse:\rprint(\u0026quot;No hemos encontrado el nombre.\u0026quot;)\r Hemos encontrado el nombre.\r Además, tenemos a nuestra disposición el uso de comodines en los patrones de búsqueda. Así, si añadimos dos nuevos nombres \u0026lsquo;\u0026lsquo;parecidos\u0026rsquo;', Lara y Jara, mediante el carácter . (que representa un carácter qualquiera sin determinar) podemos comprobar si ambos pertenecen o no a un listado de nombres:\nimport re\rnombres = [\u0026quot;Sandra López\u0026quot;, \u0026quot;Antonio Gómez\u0026quot;, \u0026quot;María López\u0026quot;,\r\u0026quot;Jara Martín\u0026quot;, \u0026quot;Lara Pérez\u0026quot;]\r[print(nombre, end=\u0026quot;\\n\u0026quot;) for nombre in nombres if re.match(\u0026quot;.ara\u0026quot;, nombre)]\r Jara Martín\rLara Pérez\r A continuación, veamos cómo emplear el patrón \\d para averiguar si una cadena comienza o no por un número:\nimport re\rdatos = [\u0026quot;Alexis Sáez\u0026quot;, \u0026quot;123456789\u0026quot;, \u0026quot;Number1\u0026quot;]\r[print(d) for d in datos if re.match(\u0026quot;\\d\u0026quot;, d)]\r 123456789\r Ahora, cambiemos de tercio y estudiemos la función search() que, a diferencia de match() (que se limita a buscar al comienzo de un texto), examina la cadena de texto completa. Retomemos el ejemplo de los nombres y busquemos la aparición de ciertos apellidos concretos:\nimport re\rnombres = [\u0026quot;Sandra López\u0026quot;, \u0026quot;Antonio Gómez\u0026quot;, \u0026quot;María López\u0026quot;,\r\u0026quot;Jara Martín\u0026quot;, \u0026quot;Lara Pérez\u0026quot;]\r[print(nombre, end=\u0026quot;\\n\u0026quot;) for nombre in nombres if re.search(\u0026quot;López\u0026quot;, nombre)]\r Sandra López\rMaría López\r No obstante, la principal utilidad de search() reside en la búsqueda de determinados patrones dentro de una cadena de caracteres de extensión considerable:\nimport re\rcodigos = [\r'''\rLorem ipsum dolor sit amet, 42consectetur adipiscing elit.\rMaecenas leo erat, varius non laoreet sed, cursus ut tortor.\rMorbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.\rMaecenas venenatis, sapien vitae sodales viverra, ante urna\rtincidunt tellus, a faucibus elit dui congue dui. Quisque congue\rsed ex in sollicitudin. Pellentesque luctus justo quis felis\rfeugiat, et semper erat laoreet. Curabitur id dui arcu. Curabitur\rpurus massa, placerat id pretium ac, ornare eleifend ante.\r''',\r'''\rLorem ipsum dolor sit amet, consectetur adipiscing elit.\rMaecenas 42leo erat, varius non laoreet sed, cursus ut tortor.\rMorbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.\rMaecenas venenatis, sapien vitae sodales viverra, ante urna\rtincidunt tellus, a faucibus elit dui congue dui. Quisque congue sed\rex in sollicitudin. Pellentesque luctus justo quis felis feugiat, et\rsemper erat laoreet. Curabitur id dui arcu. Curabitur purus massa,\rplacerat id pretium ac, ornare eleifend ante.\r''',\r'''\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas\rleo erat, varius non laoreet sed, cursus ut tortor. Morbi maximus\rpulvinar ante, ut pulvinar ex malesuada blandit. Maecenas venenatis,\rsapien vitae sodales viverra, ante urna tincidunt tellus, a faucibus\relit dui congue dui. Quisque congue sed ex in sollicitudin.\rPellentesque luctus justo quis felis feugiat, et semper erat laoreet.\rCurabitur id dui arcu. Curabitur purus massa, placerat id pretium ac,\rornare eleifend ante.\r''']\r[print(c, end=\u0026quot;\\n\u0026quot;) for c in codigos if re.search(\u0026quot;42\u0026quot;, c)]\r Lorem ipsum dolor sit amet, 42consectetur adipiscing elit.\rMaecenas leo erat, varius non laoreet sed, cursus ut tortor.\rMorbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.\rMaecenas venenatis, sapien vitae sodales viverra, ante urna\rtincidunt tellus, a faucibus elit dui congue dui. Quisque congue\rsed ex in sollicitudin. Pellentesque luctus justo quis felis\rfeugiat, et semper erat laoreet. Curabitur id dui arcu. Curabitur\rpurus massa, placerat id pretium ac, ornare eleifend ante.\rLorem ipsum dolor sit amet, consectetur adipiscing elit.\rMaecenas 42leo erat, varius non laoreet sed, cursus ut tortor.\rMorbi maximus pulvinar ante, ut pulvinar ex malesuada blandit.\rMaecenas venenatis, sapien vitae sodales viverra, ante urna\rtincidunt tellus, a faucibus elit dui congue dui. Quisque congue sed\rex in sollicitudin. Pellentesque luctus justo quis felis feugiat, et\rsemper erat laoreet. Curabitur id dui arcu. Curabitur purus massa,\rplacerat id pretium ac, ornare eleifend ante.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/72/ del repositorio.\n","date":1560380401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560380401,"objectID":"b11d84904ab31fa228455387b9fc22a6","permalink":"https://imalexissaez.github.io/courses/python-basic/pb72-expresiones-regulares-iv/","publishdate":"2019-06-13T00:00:01+01:00","relpermalink":"/courses/python-basic/pb72-expresiones-regulares-iv/","section":"courses","summary":"Vídeo   Notas personales En esta lección, finaliremos la serie dedicada a expresiones regulares profundizando en el uso de las funciones match() y search() del módulo re. La función match() busca coincidencias, con respecto a un patrón determinado, siempre al comienzo del texto.\nimport re\rnombre1 = \u0026quot;Sandra López\u0026quot;\rnombre2 = \u0026quot;Antonio Gómez\u0026quot;\rnombre3 = \u0026quot;María López\u0026quot;\rif re.match(\u0026quot;Sandra\u0026quot;, nombre1):\rprint(\u0026quot;Hemos encontrado el nombre.\u0026quot;)\relse:\rprint(\u0026quot;No hemos encontrado el nombre.","tags":null,"title":"72. Expresiones regulares IV","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, introduciremos el uso de las decoradoras (o funciones decoradoras), que son funciones que añaden ciertos comportamientos a otras (de ahí el nombre, puesto que las \u0026lsquo;\u0026lsquo;decoran\u0026rsquo;\u0026rsquo; incorporando funcionalidades adicionales).\nLa estructura de una decoradora, de forma abstracta, es la siguiente:\n Son tres funciones (A, B y C), donde A recibe como parámetro a B para devolver C. Esto es, una decoradora devuelve siempre una función.  Su sintaxis queda como sigue:\ndef funcion_decoradora(funcion): # funcion_A(funcion_B)\rdef funcion_interna(): # funcion_C\r# codigo funcion interna\rreturn funcion_interna\r Veamos su aplicación práctica mediante un ejemplo muy sencillo, en el que la utilidad de la decoradora será casi nula y nos servirá únicamente para comprender su funcionamiento, sin añadir excesiva complejidad al código fuente.\nEn primer lugar, tecleamos:\ndef suma():\rprint(15 + 20)\rdef resta():\rprint(30 - 10)\rsuma()\rresta()\r 35\r20\r Acto seguido, supongamos que deseamos añadir a todas las funciones cierto comportamiento adicional. Para ello, podemos acudir a su código y modificarlas una por una (en este ejemplo son dos, pero imaginemos un caso donde hubiera cientos de funciones) o utilizar una decoradora:\ndef funcion_decoradora(funcion_parametro):\rdef funcion_interior():\r# Acciones adicionales que decoran\rprint(\u0026quot;Vamos a realizar un cálculo: \u0026quot;)\rfuncion_parametro()\r# Acciones adicionales que decoran\rprint(\u0026quot;Hemos terminado el cálculo.\u0026quot;)\rreturn funcion_interior\r A continuación, para añadir el decorador a cualquiera de las funciones ya previamente existentes, escribimos:\n@funcion_decoradora\rdef suma():\rprint(15 + 20)\rdef resta():\rprint(30 - 10)\rsuma()\rresta()\r Vamos a realizar un cálculo: 35\rHemos terminado el cálculo.\r20\r Notemos cómo el decorador solo afecta a la función suma(), pues así lo hemos declarado arriba. Bastaría replicar la estrategia para decorar asimismo la función resta().\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/73/ del repositorio.\n","date":1560380402,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560380402,"objectID":"43bc7222da063a991d6d7d93adb7e97a","permalink":"https://imalexissaez.github.io/courses/python-basic/pb73-decoradoras-i/","publishdate":"2019-06-13T00:00:02+01:00","relpermalink":"/courses/python-basic/pb73-decoradoras-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, introduciremos el uso de las decoradoras (o funciones decoradoras), que son funciones que añaden ciertos comportamientos a otras (de ahí el nombre, puesto que las \u0026lsquo;\u0026lsquo;decoran\u0026rsquo;\u0026rsquo; incorporando funcionalidades adicionales).\nLa estructura de una decoradora, de forma abstracta, es la siguiente:\n Son tres funciones (A, B y C), donde A recibe como parámetro a B para devolver C. Esto es, una decoradora devuelve siempre una función.","tags":null,"title":"73. Decoradoras I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo     Notas personales En esta lección, continuamos el estudio de las funciones generadoras, analizando cómo utilizar parámetros con ellas. Para ello, retomemos el código del ejemplo de la lección anterior:\ndef funcion_decoradora(funcion_parametro):\rdef funcion_interior():\r# Acciones adicionales que decoran\rprint(\u0026quot;Vamos a realizar un cálculo: \u0026quot;)\rfuncion_parametro()\r# Acciones adicionales que decoran\rprint(\u0026quot;Hemos terminado el cálculo.\u0026quot;)\rreturn funcion_interior\r@funcion_decoradora\rdef suma():\rprint(15 + 20)\r@funcion_decoradora\rdef resta():\rprint(30 - 10)\rsuma()\rresta()\r Modifiquemos las funciones suma() y resta() para que admitan la posibilidad de recibir parámetros:\n@funcion_decoradora\rdef suma(n1, n2):\rprint(n1 + n2)\r@funcion_decoradora\rdef resta(n1, n2):\rprint(n1 - n2)\r A continuación, en la funcion_interior() y en funcion_parametros(), que figuran dentro de la funcion_decoradora(), gestionamos esos parámetros utilizando *args, que posibilita que una función reciba un número indeterminado de parámetros. Así,\ndef funcion_decoradora(funcion_parametro):\rdef funcion_interior(*args):\r# Acciones adicionales que decoran\rprint(\u0026quot;Vamos a realizar un cálculo: \u0026quot;)\rfuncion_parametro(*args)\r# Acciones adicionales que decoran\rprint(\u0026quot;Hemos terminado el cálculo.\u0026quot;)\rreturn funcion_interior\r De esta manera, si ejecutamos ahora el código para las siguientes llamadas de las funciones suma() y resta():\nsuma(10, 5)\rresta(25, 20)\r Vamos a realizar un cálculo: 15\rHemos terminado el cálculo.\rVamos a realizar un cálculo: 5\rHemos terminado el cálculo.\r Por otro lado, incluso podemos ampliar la funcionalidad de nuestra decoradora, permitiendo la posibilidad de admitir parámetros que sigan el patrón key = value. Para ello, utilizamos en la definición de funcion_interior() y funcion_parametro() la convención **kwargs como sigue:\ndef funcion_decoradora(funcion_parametro):\rdef funcion_interior(*args, **kwargs):\r# Acciones adicionales que decoran\rprint(\u0026quot;Vamos a realizar un cálculo: \u0026quot;)\rfuncion_parametro(*args, **kwargs)\r# Acciones adicionales que decoran\rprint(\u0026quot;Hemos terminado el cálculo.\u0026quot;)\rreturn funcion_interior\r A continuación, construimos una función que realice la potenciación de un número y procedemos a su llamada, utilizando ahora el esquema key = value:\n@funcion_decoradora\rdef potencia(base, exponente):\rprint(pow(base, exponente))\rpotencia(base=5, exponente=2)\r Vamos a realizar un cálculo: 25\rHemos terminado el cálculo.\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/74/ del repositorio.\n","date":1560466801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560466801,"objectID":"f776ff014bfaec9ee8f064d5a16815e4","permalink":"https://imalexissaez.github.io/courses/python-basic/pb74-decoradoras-ii/","publishdate":"2019-06-14T00:00:01+01:00","relpermalink":"/courses/python-basic/pb74-decoradoras-ii/","section":"courses","summary":"Vídeo     Notas personales En esta lección, continuamos el estudio de las funciones generadoras, analizando cómo utilizar parámetros con ellas. Para ello, retomemos el código del ejemplo de la lección anterior:\ndef funcion_decoradora(funcion_parametro):\rdef funcion_interior():\r# Acciones adicionales que decoran\rprint(\u0026quot;Vamos a realizar un cálculo: \u0026quot;)\rfuncion_parametro()\r# Acciones adicionales que decoran\rprint(\u0026quot;Hemos terminado el cálculo.\u0026quot;)\rreturn funcion_interior\r@funcion_decoradora\rdef suma():\rprint(15 + 20)\r@funcion_decoradora\rdef resta():\rprint(30 - 10)\rsuma()\rresta()\r Modifiquemos las funciones suma() y resta() para que admitan la posibilidad de recibir parámetros:","tags":null,"title":"74. Decoradoras II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos cómo documentar nuestros programas, esto es, incluir comentarios en clases, métodos, módulos, etc., con el objetivo de facilitar el trabajo en equipo sobre todo; resultando especialmente útil cuando las aplicaciones son complejas.\nPara empezar, tomemos como referencia este sencillo código, que contiene la definición de dos funciones y llamadas a estas:\ndef area_cuadrado(lado):\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.)\rprint(area_cuadrado(5))\rprint(area_triangulo(3, 6))\r El área del cuadrado es: 25\rEl área del triángulo es: 9.0\r A continuación, para documentarlas, tras su definición insertamos el comentario oportuno encerrado por una triple comilla. De esta manera, mediante el atributo __doc__, incluso podemos acceder a la documentación de una función en tiempo de ejecución:\ndef area_cuadrado(lado):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un cuadrado dado su lado.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un triángulo dada su base y su altura.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.)\r# print(area_cuadrado(5))\r# print(area_triangulo(3, 6))\rprint(area_cuadrado.__doc__)\rprint(area_triangulo.__doc__)\r Calcula el área de un cuadrado dado su lado.\rCalcula el área de un triángulo dada su base y su altura.\r Por otro lado, obtenemos el mismo resultado empleando la función help() que, además, nos ofrece acceso a la cabecera de la definición de la función y al módulo donde se encuentra:\ndef area_cuadrado(lado):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un cuadrado dado su lado.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un triángulo dada su base y su altura.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.)\r# print(area_cuadrado(5))\r# print(area_triangulo(3, 6))\r# print(area_cuadrado.__doc__)\r# print(area_triangulo.__doc__)\rhelp(area_cuadrado)\rhelp(area_triangulo)\r Help on function area_cuadrado in module __main__:\rarea_cuadrado(lado)\rCalcula el área de un cuadrado dado su lado.\rHelp on function area_triangulo in module __main__:\rarea_triangulo(base, altura)\rCalcula el área de un triángulo dada su base y su altura.\r Ahora, modifiquemos ligeramente el código para generar una clase Areas, en cuyo interior se encuentren las dos anteriores funciones, y veamos cómo acceder a la documentación generada antes:\nclass Areas:\rdef area_cuadrado(lado):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un cuadrado dado su lado.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un triángulo dada su base y su altura.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.)\rhelp(Areas.area_cuadrado)\rhelp(Areas.area_triangulo)\r Help on function area_cuadrado in module __main__:\rarea_cuadrado(lado)\rCalcula el área de un cuadrado dado su lado.\rHelp on function area_triangulo in module __main__:\rarea_triangulo(base, altura)\rCalcula el área de un triángulo dada su base y su altura.\r Además, para obtener una documentación general de la clase basta teclear:\nhelp(Areas)\r Help on class Areas in module __main__:\rclass Areas(builtins.object)\r| Methods defined here:\r| | area_cuadrado(lado)\r| Calcula el área de un cuadrado dado su lado.\r| | area_triangulo(base, altura)\r| Calcula el área de un triángulo dada su base y su altura.\r| | ----------------------------------------------------------------------\r| Data descriptors defined here:\r| | __dict__\r| dictionary for instance variables (if defined)\r| | __weakref__\r| list of weak references to the object (if defined)\r Finalmente, también podemos documentar la propia clase:\nclass Areas:\r\u0026quot;\u0026quot;\u0026quot;Esta clase calcula las áreas de diferentes figuras geométricas.\u0026quot;\u0026quot;\u0026quot;\rdef area_cuadrado(lado):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un cuadrado dado su lado.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;Calcula el área de un triángulo dada su base y su altura.\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.)\rhelp(Areas)\r Help on class Areas in module __main__:\rclass Areas(builtins.object)\r| Esta clase calcula las áreas de diferentes figuras geométricas.\r| | Methods defined here:\r| | area_cuadrado(lado)\r| Calcula el área de un cuadrado dado su lado.\r| | area_triangulo(base, altura)\r| Calcula el área de un triángulo dada su base y su altura.\r| | ----------------------------------------------------------------------\r| Data descriptors defined here:\r| | __dict__\r| dictionary for instance variables (if defined)\r| | __weakref__\r| list of weak references to the object (if defined)\r Nota: utilizando esta misma estrategia, podemos documentar asimismo módulos.\nCódigo fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/75/ del repositorio.\n","date":1560553201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560553201,"objectID":"28babbbfbf4a6b2a79854ad8b2eefab4","permalink":"https://imalexissaez.github.io/courses/python-basic/pb75-documentacion/","publishdate":"2019-06-15T00:00:01+01:00","relpermalink":"/courses/python-basic/pb75-documentacion/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos cómo documentar nuestros programas, esto es, incluir comentarios en clases, métodos, módulos, etc., con el objetivo de facilitar el trabajo en equipo sobre todo; resultando especialmente útil cuando las aplicaciones son complejas.\nPara empezar, tomemos como referencia este sencillo código, que contiene la definición de dos funciones y llamadas a estas:\ndef area_cuadrado(lado):\rreturn \u0026quot;El área del cuadrado es: \u0026quot; + str(lado * lado)\rdef area_triangulo(base, altura):\rreturn \u0026quot;El área del triángulo es: \u0026quot; + str(base * altura / 2.","tags":null,"title":"75. Documentación","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, analizaremos cómo realizar pruebas, utilizando la documentación para ello. Esta forma de proceder la podemos llevar a cabo con el módulo doctest de Python.\nPara empezar, partamos de este sencillo código, que contiene una función que calcula el área del triángulo dada su base y su altura:\ndef area_triangulo(base, altura):\rreturn base * altura / 2.\rprint(area_triangulo(2, 4))\r 4.0\r A continuación, documentemos la función area_triangulo() siguiendo el procedimiento visto en la lección anterior e incluyamos ahí nuestra primera prueba (antecediéndola mediante \u0026gt;\u0026gt;\u0026gt;). Luego, una vez importado el módulo doctest, incluimos la instrucción doctest.testmod():\nimport doctest\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;\rCalcula el área de un triángulo dada su base y altura.\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(3, 6)\r9.0\r\u0026quot;\u0026quot;\u0026quot;\rreturn base * altura / 2.\rdoctest.testmod()\r Al ejecutar el anterior bloque de código, no observamos respuesta alguna en la consola de Python, lo cual es una buena señal, pues significa que se han superado los tests planteados sin encontrar ningún problema.\nAhora, imaginemos que nos hemos equivocado escribiendo el test (también valdría modificando la expresión que devuelve la instrucción return) y decimos que ha de resultar 8.0 el área de un triángulo de base 3 y altura 6:\nimport doctest\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;\rCalcula el área de un triángulo dada su base y altura.\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(3, 6)\r8.0\r\u0026quot;\u0026quot;\u0026quot;\rreturn base * altura / 2.\rdoctest.testmod()\r **********************************************************************\rFile \u0026quot;pruebas_2.py\u0026quot;, line 8, in __main__.area_triangulo\rFailed example:\rarea_triangulo(3, 6)\rExpected:\r8.0\rGot:\r9.0\r**********************************************************************\r1 items had failures:\r1 of 1 in __main__.area_triangulo\r***Test Failed*** 1 failures.\r Acto seguido, compliquemos ligeramente el ejemplo y hagamos que la función area_triangulo() devuelva una cadena de caracteres en lugar de un valor numérico. Ello implica redactar con cuidado la prueba:\nimport doctest\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;\rCalcula el área de un triángulo dada su base y altura.\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(3, 6)\r'El área del triángulo es 9.0'\r\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es \u0026quot; + str(base * altura / 2.)\rdoctest.testmod()\r Nota: hemos de proceder con cautela porque, en esta ocasión, las comillas ' y \u0026quot; no son intercambiables.\nObviamente, tenemos la posibilidad de realizar varias pruebas:\nimport doctest\rdef area_triangulo(base, altura):\r\u0026quot;\u0026quot;\u0026quot;\rCalcula el área de un triángulo dada su base y altura.\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(3, 6)\r'El área del triángulo es 9.0'\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(2, 4)\r'El área del triángulo es 4.0'\r\u0026gt;\u0026gt;\u0026gt; area_triangulo(4, 5)\r'El área del triángulo es 10.0'\r\u0026quot;\u0026quot;\u0026quot;\rreturn \u0026quot;El área del triángulo es \u0026quot; + str(base * altura / 2.)\rdoctest.testmod()\r No obstante, llevar a cabo múltiples pruebas tiene sentido cuando la complejidad del código se incrementa. Recordemos el código que generamos para comprobar si una dirección de correo electrónico era correcta en función de si presentaba o no el carácter @:\nimport doctest\rdef check_mail(mail_user):\r\u0026quot;\u0026quot;\u0026quot;\rEvalúa un mail recibido en busca de @.\rSi tiene una @ es correcto.\rSi tiene más de una @ es incorrecto.\rSi la @ está al final es incorrecto.\r\u0026gt;\u0026gt;\u0026gt; check_mail(\u0026quot;alexis@cursos.es\u0026quot;)\rTrue\r\u0026gt;\u0026gt;\u0026gt; check_mail(\u0026quot;alexiscursos.es@\u0026quot;)\rFalse\r\u0026gt;\u0026gt;\u0026gt; check_mail(\u0026quot;alexis.cursos.es\u0026quot;)\rFalse\r\u0026gt;\u0026gt;\u0026gt; check_mail(\u0026quot;alexis@cursos@es\u0026quot;)\rFalse\r\u0026quot;\u0026quot;\u0026quot;\rarroba = mail_user.count(\u0026quot;@\u0026quot;)\rreturn not (arroba != 1 or mail_user.rfind('@') == len(mail_user) - 1)\rdoctest.testmod()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/76/ del repositorio.\n","date":1560639601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560639601,"objectID":"cada8e5c93cc5ddbe6b898e38e1bed5e","permalink":"https://imalexissaez.github.io/courses/python-basic/pb76-pruebas-i/","publishdate":"2019-06-16T00:00:01+01:00","relpermalink":"/courses/python-basic/pb76-pruebas-i/","section":"courses","summary":"Vídeo   Notas personales En esta lección, analizaremos cómo realizar pruebas, utilizando la documentación para ello. Esta forma de proceder la podemos llevar a cabo con el módulo doctest de Python.\nPara empezar, partamos de este sencillo código, que contiene una función que calcula el área del triángulo dada su base y su altura:\ndef area_triangulo(base, altura):\rreturn base * altura / 2.\rprint(area_triangulo(2, 4))\r 4.0\r A continuación, documentemos la función area_triangulo() siguiendo el procedimiento visto en la lección anterior e incluyamos ahí nuestra primera prueba (antecediéndola mediante \u0026gt;\u0026gt;\u0026gt;).","tags":null,"title":"76. Pruebas I","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las pruebas que realizamos utilizando la documentación, pero incrementando un tanto su complejidad (con expresiones anidadas), para así ver las opciones que nos plantea el módulo doctest.\nPara empezar, partamos del siguiente código fuente, que no es todo lo eficiente que debería, pero que cumple su propósito a efectos metodológicos para ilustrar pruebas con expresiones anidadas:\nimport math\rdef raiz_cuadrada(lista_numeros):\r\u0026quot;\u0026quot;\u0026quot;\rLa función devuelve una lista con la raíz cuadrada de\rlos elementos numéricos pasados por parámetros en otra\rlista.\r\u0026quot;\u0026quot;\u0026quot;\rreturn [math.sqrt(n) for n in lista_numeros]\rprint(raiz_cuadrada([1, 4, 9, 16]))\r [1.0, 2.0, 3.0, 4.0]\r A continuación, para diseñar una prueba que contenta estructuras complejas como condicionales o bucles, simplemente hemos de utilizar ... apropiadamente para anidar instrucciones:\nimport doctest\rimport math\rdef raiz_cuadrada(lista_numeros):\r\u0026quot;\u0026quot;\u0026quot;\rLa función devuelve una lista con la raíz cuadrada de\rlos elementos numéricos pasados por parámetros en otra\rlista.\r\u0026gt;\u0026gt;\u0026gt; lista = []\r\u0026gt;\u0026gt;\u0026gt; for i in [4, 9, 16]:\r... lista.append(i)\r\u0026gt;\u0026gt;\u0026gt; raiz_cuadrada(lista)\r[2.0, 3.0, 4.0]\r\u0026quot;\u0026quot;\u0026quot;\rreturn [math.sqrt(n) for n in lista_numeros]\rdoctest.testmod()\r Acto seguido, analicemos cómo implementar pruebas que arrojen excepciones. Por ejemplo, incluyamos un elemento negativo en la lista que pasamos como argumento a la función raiz_cuadrada():\nprint(raiz_cuadrada([4, -9, 16]))\r Traceback (most recent call last):\rFile \u0026quot;pruebas_2.py\u0026quot;, line 27, in \u0026lt;module\u0026gt;\rprint(raiz_cuadrada([4, -9, 16]))\rFile \u0026quot;pruebas_2.py\u0026quot;, line 22, in raiz_cuadrada\rreturn [math.sqrt(n) for n in lista_numeros]\rFile \u0026quot;pruebas_2.py\u0026quot;, line 22, in \u0026lt;listcomp\u0026gt;\rreturn [math.sqrt(n) for n in lista_numeros]\rValueError: math domain error\r No obstante, para diseñar una prueba que contemple el uso de número negativos en general (y no el de esta lista en concreto), utilizaremos ... y nos quedaremos únicamente con la primera y última línea de la excepción arrojada arriba:\nimport doctest\rimport math\rdef raiz_cuadrada(lista_numeros):\r\u0026quot;\u0026quot;\u0026quot;\rLa función devuelve una lista con la raíz cuadrada de\rlos elementos numéricos pasados por parámetros en otra\rlista.\r\u0026gt;\u0026gt;\u0026gt; lista = []\r\u0026gt;\u0026gt;\u0026gt; for i in [4, 9, 16]:\r... lista.append(i)\r\u0026gt;\u0026gt;\u0026gt; raiz_cuadrada(lista)\r[2.0, 3.0, 4.0]\r\u0026gt;\u0026gt;\u0026gt; lista = []\r\u0026gt;\u0026gt;\u0026gt; for i in [4, -9, 16]:\r... lista.append(i)\r\u0026gt;\u0026gt;\u0026gt; raiz_cuadrada(lista)\rTraceback (most recent call last):\r...\rValueError: math domain error\r\u0026quot;\u0026quot;\u0026quot;\rreturn [math.sqrt(n) for n in lista_numeros]\rdoctest.testmod()\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/77/ del repositorio.\n","date":1560726001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560726001,"objectID":"52a5ebb221b62340c0cfecd98389b884","permalink":"https://imalexissaez.github.io/courses/python-basic/pb77-pruebas-ii/","publishdate":"2019-06-17T00:00:01+01:00","relpermalink":"/courses/python-basic/pb77-pruebas-ii/","section":"courses","summary":"Vídeo   Notas personales En esta lección, continuaremos el estudio de las pruebas que realizamos utilizando la documentación, pero incrementando un tanto su complejidad (con expresiones anidadas), para así ver las opciones que nos plantea el módulo doctest.\nPara empezar, partamos del siguiente código fuente, que no es todo lo eficiente que debería, pero que cumple su propósito a efectos metodológicos para ilustrar pruebas con expresiones anidadas:\nimport math\rdef raiz_cuadrada(lista_numeros):\r\u0026quot;\u0026quot;\u0026quot;\rLa función devuelve una lista con la raíz cuadrada de\rlos elementos numéricos pasados por parámetros en otra\rlista.","tags":null,"title":"77. Pruebas II","type":"docs"},{"authors":null,"categories":null,"content":"Vídeo   Notas personales En esta lección, estudiaremos cómo generar un ejecutable de una aplicación escrita en Python y que tomará el formato nativo del sistema operativo en el que estemos trabajando (.exe en Windows, por ejemplo).\nPara empezar, desde la terminal del sistema, instalamos pyinstaller, utilizando para ello la instrucción:\npip3 install pyinstaller\r A continuación, rescatemos los archivos de la aplicación que simulaba una calculadora, correspondiente a la lección 50. Generemos una copia de ellos, por coherencia con la estructura del repositorio, en el directorio /lecciones/78/.\nAhora, desde la terminal, nos desplazamos a dicho directorio y tecleamos:\npyinstaller calculadora.py\r Esto es, la instrucción pyinstaller seguida del nombre del archivo del cual deseamos generar un ejecutable.\nEl proceso da a luz a una cantidad considerable de ficheros y carpetas, siendo de nuestro interés la denominada /dist/, en cuyo interior encontraremos otra designada como /calculadora/, que contiene la aplicación lista para ser distribuida. Si hacemos doble clic sobre calculadora.exe, podemos corroborar que la aplicación funciona a la perfección.\nAhora bien, tras ella aparece la propia terminal de Python, característica que quizá no nos interese y posiblemente solo deseemos trabajar con la interfaz gráfica de la calculadora. Para conseguirlo, hemos de incluir el modificador --windowed, en la llamada a pyinstaller, a la hora de crear el ejecutable:\npyinstaller --windowed calculadora.py\r No obstante, la aplicación requiere de la presencia de todos los ficheros contenidos en el directorio /calculadora/ para su correcto funcionamiento. Sería deseable que todo ello se \u0026lsquo;\u0026lsquo;compilase\u0026rsquo;\u0026rsquo; en un único archivo y que se pudiera ejecutar en cualquier ordenador, independientemente de si tiene o no instalado Python. El mencionado comportamiento se obtiene agregando el modificador --onefile a la anterior instrucción, esto es,\npyinstaller --windowed --onefile calculadora.py\r Ahora, en la carpeta /dist/ hallamos únicamente el archivo.\nFinalmente, de cara a modificar el icono de la aplicación, simplemente hemos de añadir un nuevo modificador a la instrucción pyinstaller: --icon=./icon.ico, siendo icon.ico el nombre del archivo que contiene el icono y que se ubica en el mismo directorio donde se halla el fichero calculadora.py. Así pues, tecleamos:\npyinstaller --windowed --onefile --icon=./icon.ico calculadora.py\r Código fuente El código fuente y los posibles ficheros externos generados correspondientes a esta lección se encuentran disponibles para su consulta en la carpeta /lecciones/78/ del repositorio.\n","date":1560726002,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560726002,"objectID":"ea29a312340dfebd789de6c5a6ebe068","permalink":"https://imalexissaez.github.io/courses/python-basic/pb78-ejecutables/","publishdate":"2019-06-17T00:00:02+01:00","relpermalink":"/courses/python-basic/pb78-ejecutables/","section":"courses","summary":"Vídeo   Notas personales En esta lección, estudiaremos cómo generar un ejecutable de una aplicación escrita en Python y que tomará el formato nativo del sistema operativo en el que estemos trabajando (.exe en Windows, por ejemplo).\nPara empezar, desde la terminal del sistema, instalamos pyinstaller, utilizando para ello la instrucción:\npip3 install pyinstaller\r A continuación, rescatemos los archivos de la aplicación que simulaba una calculadora, correspondiente a la lección 50.","tags":null,"title":"78. Ejecutables","type":"docs"},{"authors":["Alexis Sáez"],"categories":["Reflexiones"],"content":"Por desgracia, en la última versión del tema Academic, los desarrolladores han decidido cambiar el tipo de Markdown que hasta la fecha venía incorporado en la plantilla.\nEl principal efecto de tal acción para esta página web reside en las expresiones matemáticas, que han dejado de mostrarse adecuadamente en los artículos.\nDado que su número es significativo, aprovecharé paulatinamente este período vacacional que se aproxima para ir revisando, uno por uno, la correcta visualización de los artículos afectados.\nActualización: revisados artículos afectados hasta el 31 de julio de 2018.\n","date":1576274401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576274401,"objectID":"b5511a2234c1289d9786e47552382806","permalink":"https://imalexissaez.github.io/2019/12/14/una-dolorosa-incidencia-con-el-tema/","publishdate":"2019-12-14T00:00:01+02:00","relpermalink":"/2019/12/14/una-dolorosa-incidencia-con-el-tema/","section":"post","summary":"La última actualización ha cambiado la versión de Markdown utilizada y ahora las expresiones matemáticas no se muestran adecuadamente.","tags":["Incidencia","Markdown"],"title":"Una dolorosa incidencia con el tema","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla un número de seis cifras que es igual a las seis últimas cifras de su cuadrado.\n Ejercicio 2: Halla dos números enteros tales que la suma de sus cuadrados es el doble de su suma.\n Ejercicio 3: Prueba que existen cuadrados de la forma $1 + 2 ^ {x^2} + 2 ^ {y^2}$.\n Ejercicio 4: Sean $a$, $b$ y $c$ números naturales distintos.\n (a) Halla un conjunto infinito de soluciones de la ecuación $a^2 + b^2 + c^2 = 2c(a + b)$. (b) Demuestra que, si $a\u0026lt;b\u0026lt;c$, la ecuación $a^3 - c^3 + b^3 = 3b(a - c)(a + c - b)$ no tiene solución.   Ejercicio 5: Halla las soluciones enteras de las ecuaciones diofánticas:\n (a) $2x^2 + x - 3y = 7$. (b) $x^2 + x + 2y = 3$. (c) $x^2 + x + 3y = 2$.   **Ejercicio 6:**Dada la matriz\n$$ \\begin{aligned} A = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\n2 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\n2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0\\\n2 \u0026amp; 2 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}. \\end{aligned} $$\n (a) Halla las sucesivas potencias de $A$. (b) Si $B = I + A$, expresa $B^n$ en función de $I$, $A$ y $A^2$. (c) Demuestra que la inversa de $B$ es $I - A + A^2$. (d) Expresa $B^{-n}$ en función de $I$, $A$ y $A^2$.   ","date":1575583201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575583201,"objectID":"f2f4fd2c22f4296f2a68a562e44bb0d9","permalink":"https://imalexissaez.github.io/2019/12/06/enunciados-propuestos-xxvi/","publishdate":"2019-12-06T00:00:01+02:00","relpermalink":"/2019/12/06/enunciados-propuestos-xxvi/","section":"post","summary":"Entrega XXVI de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Matrices","Problemas","Último teorema de Fermat"],"title":"Enunciados propuestos (XXVI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla la suma de todas las fracciones irreducibles de denominador $3$ comprendidas entre $3$ y $6$. Generaliza el resultado para la suma de todas las fracciones irreducibles de denominador $3$ comprendidas entre los enteros $m$ y $n$, con $m \u0026lt; n$.\n Ejercicio 2: Demuestra que $\\sqrt[3]{45 + 29\\sqrt{2}} + \\sqrt[3]{45 - 29\\sqrt{2}}$ es un número entero.\n Ejercicio 3: Los lados de un rectángulo vienen dados por números naturales. ¿Cuál será la longitud de dichos lados para que el perímetro y la superficie de dicha figura se expresen con el mismo número?\n Ejercicio 4: Determina las dimensiones de un rectángulo sabiendo que sus lados miden un número entero de centímetros, pero no un número entero de palmos; y que su área, expresada en palmos cuadrados, es igual a su perímetro, expresado en palmos lineales. Considera que un palmo equivale a $20$ centímetros.\n Ejercicio 5: (Extremadura (2018)) En su último viaje a Estados Unidos, el señor Martínez cambió un cheque de viaje. El cajero, al pagarle, confundió el número de dólares con el de centavos y viceversa. El señor Martínez gastó $68$ centavos en sellos y comprobó que el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado. ¿Qué valor mínimo tenía el cheque de viaje?\n Ejercicio 6: (Galicia (2018)) Una persona ha comprado entradas para el cine para personas adultas por un precio de $640$ u. m. cada una y para menores de edad a $330$ u. m. Sabiendo que invirtió $7140$ u. m. y que compró menos entradas de adultos que de menores, halla el número de entradas que adquirió.\n ","date":1574028001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574028001,"objectID":"333ba2a33db5fae211346233fe3b941e","permalink":"https://imalexissaez.github.io/2019/11/18/enunciados-propuestos-xxv/","publishdate":"2019-11-18T00:00:01+02:00","relpermalink":"/2019/11/18/enunciados-propuestos-xxv/","section":"post","summary":"Entrega XXV de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones","Ecuaciones diofánticas","Problemas","Sucesiones"],"title":"Enunciados propuestos (XXV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1:\n (a) Dados dos números $x$ e $y$, coprimos entre sí, prueba que $mcd(x+y, xy) = 1$. (b) Dados dos números enteros $a$ y $b$, prueba que $mcd(a,b) = mcd(a+b, mcm(a, b))$. (c) La suma de dos números naturales es $5264$ y su mínimo común múltiplo es $200340$, ¿cuáles son estos números?   Ejercicio 2:\n (a) Estudia, según los valores del número natural $n$, el resto de la división de $7^n$ entre $9$. (b) ¿Para qué valores de $n$ se cumple que $16^{3n} + 16^n - 2$ es múltiplo de $9$? (c) Permutando las cifras del número $1223334444555556666667777777$, ¿podrá obtenerse un cuadrado perfecto?   Ejercicio 3: Halla los números enteros positivos $n$ tal que $n^4+2$ es divisible por $n+2$.\n Ejercicio 4: Determina todos los valores de $k$ para los cuales el número $11\\cdots 11$, compuesto por $k$ unos, es un cuadrado perfecto.\n Ejercicio 5: Una mujer tiene un cesto de manzanas. Haciendo grupos de $3$ sobran $2$ y haciendo grupos de $4$ sobran $3$. Halla el número de manzanas que contiene el cesto sabiendo que están entre $100$ y $110$.\n Ejercicio 6: A una isla llegan $17$ piratas para repartirse un botín que consiste en un saco con más de $100$ monedas de oro. Efectuado el reparto equitativo, sobra una moneda. Con el objetivo de que no sobre ninguna, los piratas deciden matar a uno de ellos y efectuar nuevamente el reparto equitativo, pero vuelve a sobrar una moneda.\n (a) ¿Cuál es el número mínimo de monedas que contiene el saco? (b) Conocido dicho número mínimo, ¿cuántos piratas morirán hasta que, efectuado el reparto equitativo, no sobre ninguna moneda?   ","date":1573855201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573855201,"objectID":"38f334ad0e0c35a693be9cf31229d9c8","permalink":"https://imalexissaez.github.io/2019/11/16/enunciados-propuestos-xxiv/","publishdate":"2019-11-16T00:00:01+02:00","relpermalink":"/2019/11/16/enunciados-propuestos-xxiv/","section":"post","summary":"Entrega XXIV de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XXIV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: ¿Qué cuadrado de cinco cifras, al quitarle una unidad, se puede descomponer en suma de cinco cuadrados idénticos?\n Ejercicio 2: Halla los números naturales $n$ de manera que se cumpla que $1+2+\\cdots+n = k^2$, con $k$ número natural.\n Ejercicio 3: ¿Cuál es el menor triángulo cuyos lados son números enteros consecutivos y su área es múltiplo de $20$?\n Ejercicio 4: Halla todos los triángulos cuyos lados son tres números enteros consecutivos y su área es asimismo un número entero.\n Ejercicio 5: Encuentra todos los números naturales $n$ para los cuales se satisface que $1^n + 9^n + 10^n = 5^n + 6^n + 11^n$.\n Ejercicio 6: En una batalla, en la que participaron entre $10000$ y $11000$ soldados, resultaron muertos $23 / 165$ del total y heridos $35 / 143$ del total. Halla cuántos resultaron ilesos.\n ","date":1573596001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573596001,"objectID":"d3545c1446dc12ff4d965536060f802b","permalink":"https://imalexissaez.github.io/2019/11/13/enunciados-propuestos-xxiii/","publishdate":"2019-11-13T00:00:01+02:00","relpermalink":"/2019/11/13/enunciados-propuestos-xxiii/","section":"post","summary":"Entrega XXIII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas","Teoría de números"],"title":"Enunciados propuestos (XXIII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla las soluciones enteras de la ecuación $x^2 - y^2 = 24$.\n Ejercicio 2: Encuentra todas las soluciones naturales de la ecuación $x^2 - y^2 = 252$.\n Ejercicio 3: Halla soluciones enteras no triviales para la ecuación $x^2 - 7y^2 = 1$.\n Ejercicio 4: Halla soluciones enteras no triviales para la ecuación $x^2 - 3y^2 = 1$.\n Ejercicio 5: Halla las soluciones enteras no triviales para la ecuación $x^2 - 15y^2 = 1$.\n Ejercicio 6: Prueba que $3$, $4$ y $5$ es la única solución de $x^2 + y^2 = z^2$ en enteros positivos consecutivos.\n ","date":1573423201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573423201,"objectID":"dfb9530085074343979b99a640c1df6e","permalink":"https://imalexissaez.github.io/2019/11/11/enunciados-propuestos-xxii/","publishdate":"2019-11-11T00:00:01+02:00","relpermalink":"/2019/11/11/enunciados-propuestos-xxii/","section":"post","summary":"Entrega XXII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Enunciados propuestos (XXII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla las soluciones enteras de las ecuaciones diofánticas\n (a) $6x + 8y + 14z = 22$. (b) $6x + 10y + 15z = 31$.   Ejercicio 2: Encuentra todas las soluciones enteras positivas de la ecuación $43x + 7y + 17z = 400$.\n Ejercicio 3: Un granjero compró vacas, cerdos y pollos. En total, $100$ animales por $100$ euros. Hay al menos uno de cada. Si una vaca cuesta $10$ euros, un cerdo $3$ euros y un pollo $0.50$ euros, ¿cuántos animales de cada clase compró?\n Ejercicio 4: En una tienda de animales los loros cuestan $5$ euros, los periquitos $3$ euros cada uno y los canarios $10$ céntimos cada uno. Compramos $100$ animales y pagamos $100$ euros. ¿Cuántos compramos de cada clase?\n Ejercicio 5: Resuelve, en los números naturales, el siguiente sistema, demostrando que tiene una única solución:\n$$ \\begin{aligned} x + y + z + p + t \u0026amp;= 25,\\\ny - 2z - p \u0026amp;= 0,\\\nx - t \u0026amp;= 1,\\\n-x + y + z \u0026amp;= 0. \\end{aligned} $$\n Ejercicio 6: Halla las soluciones naturales de las ecuaciones\n (a) $x^2 - y^2 = 46$. (b) $x^2 - y^2 = 36$.   ","date":1573164001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573164001,"objectID":"aa9f59f4ad6695aa8505a2f022c27d0d","permalink":"https://imalexissaez.github.io/2019/11/08/enunciados-propuestos-xxi/","publishdate":"2019-11-08T00:00:01+02:00","relpermalink":"/2019/11/08/enunciados-propuestos-xxi/","section":"post","summary":"Entrega XXI de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Enunciados propuestos (XXI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla\n (a) el menor entero positivo $a$ tal que la ecuación $1001x + 770y = 10^6 + a$ admite soluciones naturales. (b) para dicho valor de $a$, determina las soluciones naturales de dicha ecuación.   Ejercicio 2: Se dispone de un gran suministro de agua, un gran cubo con desagüe y dos garrafas que contienen $7$ y $9$ litros. ¿Cómo podría ponerse un litro de agua en el cubo?\n Ejercicio 3: Un hombre compra caballos y vacas, pagando $1770$ euros. Una vaca cuesta $21$ euros y un caballo $31$ euros, ¿cuántos caballos y vacas ha comprado?\n Ejercicio 4: Para abonar una factura de $1840$ pesetas, se entregan libras esterlinas y dan la vuelta en marcos. Calcula las libras esterlinas entregadas y los marcos devueltos, suponiendo que se ha entregado la cantidad mínima de libras necesarias para pagar y que la devolución sea en marcos ($1$ marco $=70$ pesetas, $1$ libra esterlina $=180$ pesetas).\n Ejercicio 5: Se compran manzanas y naranjas. En total, $12$ piezas de fruta, que cuestan $1.32$ euros. Si una manzana vale $3$ céntimos más que una naranja y hay más manzanas que naranjas, ¿cuántas piezas de cada fruta se han comprado?\n Ejercicio 6: Una persona va a un supermercado y compra $12$ litros de leche, unos de leche entera y otros de desnatada, por $1200$ pesetas. Si la leche entera vale $30$ pesetas más por litro que la desnatada y ha comprado el mínimo posible de leche desnatada, ¿cuántos litros habrá comprado de cada una?\n ","date":1572991201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572991201,"objectID":"7f911705f3b6595083cea797e9e935d5","permalink":"https://imalexissaez.github.io/2019/11/06/enunciados-propuestos-xx/","publishdate":"2019-11-06T00:00:01+02:00","relpermalink":"/2019/11/06/enunciados-propuestos-xx/","section":"post","summary":"Entrega XX de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Enunciados propuestos (XX)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla las soluciones enteras de la ecuación $525x + 100y = 50$.\n Ejercicio 2: Halla las soluciones enteras de la ecuación $1027x + 712y = 1$.\n Ejercicio 3: Estudia cuál de estas ecuaciones diofánticas tiene solución y, en caso afirmativo, calcúlala:\n (a) $25x + 36y = 10$. (b) $200x + 1768y = 8$. (c) $40x + 50y = 3$. (d) $213x + 1123y = 18$. (e) $14x + 165y = 1$.   Ejercicio 4: Halla la expresión general de las raíces enteras de la ecuación $37x - 13y = 8$.\n Ejercicio 5: Sea $c$ un número entero positivo tal que $10\\leq c\\leq 100$. ¿Cuál es el valor mínimo de $c$ para el cual la ecuación $84x + 990y = c$ admite soluciones enteras?\n Ejercicio 6: Halla el menor número natural $m$ de manera que la ecuación $533x + 299y = 20000 + m$ tenga soluciones enteras y calcúlalas.\n ","date":1572818401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572818401,"objectID":"ce2c8ad20e15e1bec878bd6cd4eb2946","permalink":"https://imalexissaez.github.io/2019/11/04/enunciados-propuestos-xix/","publishdate":"2019-11-04T00:00:01+02:00","relpermalink":"/2019/11/04/enunciados-propuestos-xix/","section":"post","summary":"Entrega XIX de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Enunciados propuestos (XIX)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Demuestra que $2222^{5555} + 5555^{2222}$ es múltiplo de $7$.\n Ejercicio 2: Halla todos los números naturales $n$ tales que $2^n + 3^n$ es un múltiplo de $7$.\n Ejercicio 3:\n (a) ¿Se puede llenar un depósito de $25$ litros, de manera exacta, con garrafas de $6$ y $8$ litros? (b) Halla las soluciones enteras de la ecuación $14x + 21y = 777$.   Ejercicio 4: Halla las soluciones enteras de la ecuación $79x + 23y = 5$.\n Ejercicio 5: Halla las soluciones enteras de la ecuación $14x + 10y = 4$.\n Ejercicio 6: Halla las soluciones enteras de la ecuación $16x + 26y = 14$.\n ","date":1572559201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572559201,"objectID":"dcd7bb9c81d0b862e67a9cd243f59f44","permalink":"https://imalexissaez.github.io/2019/11/01/enunciados-propuestos-xviii/","publishdate":"2019-11-01T00:00:01+02:00","relpermalink":"/2019/11/01/enunciados-propuestos-xviii/","section":"post","summary":"Entrega XVIII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Ecuaciones diofánticas","Problemas","Teoría de números"],"title":"Enunciados propuestos (XVIII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Prueba que\n$$ A_k = 2^{2^{6k+2}}+3 $$\nes múltiplo de $19$, para todo número natural $k$.\n Ejercicio 2: Demuestra que el número $n(n^2 + 5)$ es divisible por $6$, para cada número natural $n$.\n Ejercicio 3: Encuentra, en el sistema decimal, todos los números que en base $7$ se escriben con tres cifras y en base $9$ con las mismas cifras en orden inverso.\n Ejercicio 4: ¿Qué enteros positivos, menores que $15$, tienen inverso módulo $15$? Encuentra los correspondientes inversos.\n Ejercicio 5: Demuestra que $n^5 - 5n^3 + 4n$ es múltiplo de $120$, para cada número natural $n$.\n Ejercicio 6: Si $a=11\\cdots 11$ es un número con $2n$ dígitos y $b=22\\cdots 22$ es uno que posee $n$ dígitos, prueba que $a-b$ es un cuadrado perfecto.\n ","date":1572386401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572386401,"objectID":"d9a501168447324daf65a7255a900f75","permalink":"https://imalexissaez.github.io/2019/10/30/enunciados-propuestos-xvii/","publishdate":"2019-10-30T00:00:01+02:00","relpermalink":"/2019/10/30/enunciados-propuestos-xvii/","section":"post","summary":"Entrega XVII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Inducción","Problemas","Sistemas de numeración","Teoría de números"],"title":"Enunciados propuestos (XVII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Sean $a$, $b$, $c$ y $d$ números enteros cualesquiera. Prueba que\n$$ abcd(a^2 - b^2)(a^2 - c^2)(a^2 - d^2)(b^2 - c^2)(b^2 - d^2)(c^2 - d^2) $$\nes divisible por $7$.\n Ejercicio 2: Encuentra los números de cuatro cifras, de la forma $abab$, que, disminuidos en una unidad, sean cuadrados perfectos.\n Ejercicio 3: Se tienen los números $49$, $4489$, $444889$, $\\ldots$ obtenido cada uno intercalando $48$ en el centro del anterior. Demuestra que todos estos números son cuadrados perfectos y halla la raíz cuadrada del que consta de $2n$ cifras.\n Ejercicio 4: Halla el resto de la división por $11$ de $37^{437}$.\n Ejercicio 5: Demuestra que si $p$ es un número primo impar, se cumple que $p$ divide a $2^{p-1}-2$.\n Ejercicio 6: Sea $p$ un número primo impar. Demuestra que\n (a) $(1^{p-1} + 2^{p-1} + \\cdots + (p-1)^{p-1})\\equiv (-1)\\pmod {p}$. (b) $(1^p + 2^p + \\cdots + (p-1)^p)\\equiv 0\\pmod{p}$.   ","date":1572213601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572213601,"objectID":"5485e6a4802e804949691a3ef64f430a","permalink":"https://imalexissaez.github.io/2019/10/28/enunciados-propuestos-xvi/","publishdate":"2019-10-28T00:00:01+02:00","relpermalink":"/2019/10/28/enunciados-propuestos-xvi/","section":"post","summary":"Entrega XVI de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XVI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1:\n (a) ¿En cuántos ceros acaba $438_{(40}!$? (b) ¿En cuántos ceros acaba $(55555_{(6}!)^3$?   Ejercicio 2: Calcula el número de ceros en que acaba $(15348_{(16}!)^5$, con la condición de que debe operarse en base $16$, sin pasar a base decimal, hasta el final.\n Ejercicio 3: Halla el criterio de divisibilidad por $5$ y por $10$ de un número en base $9$. ¿Es múltiplo de $5$ el número $213246_{(9}$?\n Ejercicio 4: Halla el conjunto de los divisores del número $1001$. Sean $N = a_0 + a_1t + \\cdots + a_nt^n$ y $S = a_0 - a_1 + a_2 - \\cdots + (-1)^na_n$, donde $t=1000$ y $a_n$ es un número entero, para cada $n\\in\\mathbb{N}\\cup{0}$. Demuestra que $N\\equiv S\\pmod{1001}$. Deduce de ello un criterio de divisibilidad por $7$, por $11$ o por $13$, y aplícalo al número $312879645$.\n Ejercicio 5: Demuestra que, siendo $n$ un número entero, la expresión\n$$ \\frac{n^5 - 5n^3 + 4n}{n+2} $$\nsiempre es divisible por $24$.\n Ejercicio 6: Demuestra que, si el número natural $p=abc_{(10}$ es divisible por $37$, los números $bca_{(10}$ y $cab_{(10}$ son divisibles por $37$.\n ","date":1571954401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571954401,"objectID":"29f44fccd14b19c83328821f09664903","permalink":"https://imalexissaez.github.io/2019/10/25/enunciados-propuestos-xv/","publishdate":"2019-10-25T00:00:01+02:00","relpermalink":"/2019/10/25/enunciados-propuestos-xv/","section":"post","summary":"Entrega XV de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Divide el número $101$ en dos partes tales que una sea múltiplo de $11$ y la otra sea múltiplo de $17$.\n Ejercicio 2: La suma de dos números vale $371$ y el cociente entre su mínimo común múltiplo y su máximo común divisor es $430$. Halla dichos números.\n Ejercicio 3:\n (a) Halla el exponente de $2$ en la factorización de $10!$. ¿Cuál sería en el caso de $11!$? (b) Halla el exponente de $3$ en la factorización de $212!$.   Ejercicio 4:\n (a) ¿En cuántos ceros acaba el número $1000!$? (b) Demuestra que $1000!$ no es divisible por $2^{995}$, pero sí por $2^{994}$.   Ejercicio 5: Convierte $100!$ a base octal. ¿En cuántos ceros termina $100!$ en base octal?\n Ejercicio 6: ¿En cuántos ceros acaba $438_{(15}!$?\n ","date":1571781601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571781601,"objectID":"8ac3f2d5aae57179ae42beb6b12c4134","permalink":"https://imalexissaez.github.io/2019/10/23/enunciados-propuestos-xiv/","publishdate":"2019-10-23T00:00:01+02:00","relpermalink":"/2019/10/23/enunciados-propuestos-xiv/","section":"post","summary":"Entrega XIV de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XIV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Determina el entero positivo más pequeño que deja de resto $1$, $2$, $3$ y $4$ cuando se divide, respectivamente, por $2$, $3$, $5$ y $11$.\n Ejercicio 2: El matemático y poeta chino Sun Tsu planteó, hace alrededor de $1800$ años, el siguiente problema: \u0026lsquo;\u0026lsquo;Tengo un conjunto de objetos. Cuando los cuanto de tres en tres, me sobran dos; cuando los cuento de cinco en cinco, me sobran tres; y cuando los cuento de siete en siete, me sobran dos. ¿Cuántos objetos poseo?''.\n Ejercicio 3: Resuelve la ecuación en congruencias $91x\\equiv 419\\pmod{440}$.\n Ejercicio 4: Resuelve la ecuación en congruencias $3x\\equiv 11\\pmod{2275}$.\n Ejercicio 5: Demuestra que $3\\cdot 5^{2n+1} + 2^{3n+1}$ es divisible por $17$, para cada número natural $n$.\n Ejercicio 6: Demuestra que $4^n \\equiv(1+3n)\\pmod{9}$, para cada número natural $n$.\n ","date":1571608801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571608801,"objectID":"2228f5b86f1485ff1446d1e70bce8c4b","permalink":"https://imalexissaez.github.io/2019/10/21/enunciados-propuestos-xiii/","publishdate":"2019-10-21T00:00:01+02:00","relpermalink":"/2019/10/21/enunciados-propuestos-xiii/","section":"post","summary":"Entrega XIII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Inducción","Problemas","Teoría de números"],"title":"Enunciados propuestos (XIII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla un número de cuatro cifras tal que sea igual al cubo de la suma de sus cifras.\n Ejercicio 2: Encuentra un número de cuatro cifras $abcd$ de manera que $abcd = 11(a+b+c+d)^2$.\n Ejercicio 3: Determina los números $n$ de tres cifras, divisibles por $11$, de manera que $n / 11$ es igual a la suma de los cuadrados de los dígitos de $n$.\n Ejercicio 4: Resuelve la ecuación en congruencias $7x\\equiv 6\\pmod{100}$.\n Ejercicio 5: ¿Existe algún entero positivo $x$ tal que cuando $x$ se divide entre 3, se obtiene un residuo igual a $2$; cuando $x$ se divide entre $5$, se obtiene de resto $4$; y cuando $x$ se divide entre $7$, el resto es igual a $6$?\n Ejercicio 6: Encuentra las soluciones del siguiente sistema de ecuaciones en congruencias lineales:\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{5},\\\nx\u0026amp;\\equiv 4\\pmod{7},\\\nx\u0026amp;\\equiv 6\\pmod{9}. \\end{aligned} $$\n ","date":1571349601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571349601,"objectID":"28fa5f6a0e2c90e770e61047a9319ca5","permalink":"https://imalexissaez.github.io/2019/10/18/enunciados-propuestos-xii/","publishdate":"2019-10-18T00:00:01+02:00","relpermalink":"/2019/10/18/enunciados-propuestos-xii/","section":"post","summary":"Entrega XII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: ¿Cuántas cifras tiene el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial?\n Ejercicio 2: Encuentra el número natural más pequeño, con $6$ como cifra de las unidades, de manera que, si el $6$ se mueve al principio, el número queda multiplicado por cuatro.\n Ejercicio 3: Halla un número de cinco cifras diferentes de manera que es igual a la suma de todos los de tres cifras que se pueden obtener con las variaciones ordinarias de dichas cifras tomadas de tres en tres.\n Ejercicio 4: Se consideran los números naturales escritos del modo usual en base $10$. Se pide:\n (a) Encuentra el menor número tal que, al suprimir la primera cifra de la izquierda, quede reducido a su quinta parte. (b) Demuestre que no existe ningún número que, al suprimirle su primera cifra de la izquierda, quede reducido a su doceava parte.   Ejercicio 5: Halla un número con $15$ divisores tal que la suma de todos estos divisores sea igual a $1767$.\n Ejercicio 6: Un número natural $A$, descompuesto en producto de factores primos, es de la forma $A = a^x b^y c^z$. El número de divisores de $A$, $A^2$ y $A^3$ es, respectivamente, $60$, $315$ y $910$. El máximo común divisor de todos los posibles valores de $A$ es $900$. Hállalos.\n ","date":1571176801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571176801,"objectID":"0de977d1fbab047759266de8e6088086","permalink":"https://imalexissaez.github.io/2019/10/16/enunciados-propuestos-xi/","publishdate":"2019-10-16T00:00:01+02:00","relpermalink":"/2019/10/16/enunciados-propuestos-xi/","section":"post","summary":"Entrega XI de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (XI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Para cada entero no negativo $n$, se considera\n$$ P(n) = \\frac{n^7}{7} + \\frac{n^3}{3} + \\frac{11n}{21}. $$\n (a) Demuestra que $3n^7 + 7n^3 + 11n = 0$ en $\\mathbb{Z}_3$ y en $\\mathbb{Z}_7$. (b) Demuestra que $P(n)$ es un número entero.   Ejercicio 2: Dado un número primo $p\\geq 7$, prueba que el número $111\\cdots111$ (formado por $p-1$ unos) es divisible por $p$.\n Ejercicio 3: Sea $n$ un número natural y el conjunto de fracciones\n$$ A_n = \\left{\\frac{1}{n},\\frac{2}{n},\\ldots,\\frac{n}{n}\\right}. $$\nCalcula el número de fracciones irreducibles y la suma de estas.\n Ejercicio 4: Calcula el menor número natural $n$ tal que se cumpla que\n$$ \\begin{aligned} n\u0026amp;\\equiv 4\\pmod{5},\\\nn\u0026amp;\\equiv 3\\pmod{7},\\\nn\u0026amp;\\equiv 1\\pmod{9}. \\end{aligned} $$\n Ejercicio 5: (Comunidad Valenciana (2016)) Con un solo corte recto puedes dividir un pastel circular en dos partes. Un segundo corte, que atraviese al primero, producirá probablemente cuatro partes, y un tercer corte puede llegar a producir siete partes. ¿Cuál es el mayor número de trozos que puedes lograr con seis cortes rectos? ¿Y, en general, cuántos pedazos de tarta se obtienen con $n$ cortes?\n Ejercicio 6: En una ciudad, el $55%$ de sus habitantes consume aceite del tipo $A$, el $30%$ del tipo $B$ y el $20%$ de ambos tipos de aceite. Se escoge una persona al azar.\n (a) Si esta consume aceite del tipo $A$, ¿cuál es la probabilidad de que consuma también del tipo $B$? (b) Si consume del tipo $B$, ¿cuál es la probabilidad de que no consuma del tipo $A$? (c) ¿Cuál es la probabilidad de que no consuma aceite del tipo $A$ ni del tipo $B$?   ","date":1571004001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571004001,"objectID":"25f1c235f54075bc3c16611bc47b0e2a","permalink":"https://imalexissaez.github.io/2019/10/14/enunciados-propuestos-x/","publishdate":"2019-10-14T00:00:01+02:00","relpermalink":"/2019/10/14/enunciados-propuestos-x/","section":"post","summary":"Entrega X de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Probabilidad condicionada","Problemas","Sucesiones","Teoría de números"],"title":"Enunciados propuestos (X)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Demuestra que $n^7 - n$ es múltiplo de $42$, para cada número natural $n$.\n Ejercicio 2: Halla el resto de dividir $13!$ entre $17$.\n Ejercicio 3: Halla el menor residuo positivo al dividir\n (a) $5^{500}$ entre $17$. (b) $12!$ entre $13$.   Ejercicio 4: Prueba que $437$ es divisor de\n (a) $16^{99} - 1$. (b) $18! + 1$.   Ejercicio 5: Calcula el resto cuando $90!$ se divide por $97$.\n Ejercicio 6: Calcula las dos últimas cifras de $31^{263}$.\n ","date":1570831201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570831201,"objectID":"db4b64000f8cbabf365ecbb4d2eb46e3","permalink":"https://imalexissaez.github.io/2019/10/12/enunciados-propuestos-ix/","publishdate":"2019-10-12T00:00:01+02:00","relpermalink":"/2019/10/12/enunciados-propuestos-ix/","section":"post","summary":"Entrega IX de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (IX)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Encuentra el menor número natural $n$ tal que $n / 2$ es cuadrado perfecto, $n / 3$ es cubo perfecto y $n / 7$ es potencia séptima perfecta.\n Ejercicio 2: Halla un número natural $n$ tal que su cuadrado tenga $202$ dígitos: los primeros $100$ (desde la izquierda) todos iguales a $1$, los siguientes $100$ todos iguales a $2$ y los dos últimos, desconocidos. Es decir, de la forma $111\\cdots111222\\cdots222xy$.\n Ejercicio 3: Encuentra diez números compuestos consecutivos.\n Ejercicio 4: Halla\n (a) el resto de dividir $4^{26} + 5^{28}$ entre $7$. (b) la última cifra de $8^{254}$. (c) el criterio de divisibilidad por $6$ en base $7$. ¿Es divisible $34500010_{(7}$ entre $6$?   Ejercicio 5: Halla el resto de dividir $2^{55}$ entre $7$.\n Ejercicio 6: Prueba que $(27 ^ 4) ^ 9 - (25 ^ 3) ^ 6$ es múltiplo de $37$.\n ","date":1570658401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570658401,"objectID":"f36244e55299393ef67761b5bcaa2605","permalink":"https://imalexissaez.github.io/2019/10/10/enunciados-propuestos-viii/","publishdate":"2019-10-10T00:00:01+02:00","relpermalink":"/2019/10/10/enunciados-propuestos-viii/","section":"post","summary":"Entrega VIII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (VIII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Halla el número $2^n 5^m$, con $n$ y $m$ números naturales, sabiendo que la suma de sus divisores es $961$.\n Ejercicio 2: Halla un número natural sabiendo que es múltiplo de $30$ y que la suma de sus $16$ divisores es $1440$.\n Ejercicio 3: Un número natural tiene dos factores primos y ocho divisores naturales, la suma de los cuales es $320$. Halla el número.\n Ejercicio 4: Halla el menor número entero $n$ que tiene $12$ divisores y solamente tres factores primos, cuya suma es $20$.\n Ejercicio 5: Demuestra que un número es un cuadrado perfecto si, y solo si, tiene un número impar de divisores.\n Ejercicio 6: Demuestra que no es posible expresar $2019$ como suma de dos cuadrados perfectos.\n ","date":1570485601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570485601,"objectID":"2417cb7bee7472d99e83e9fcc4baa117","permalink":"https://imalexissaez.github.io/2019/10/08/enunciados-propuestos-vii/","publishdate":"2019-10-08T00:00:01+02:00","relpermalink":"/2019/10/08/enunciados-propuestos-vii/","section":"post","summary":"Entrega VII de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (VII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Demuestra que\n (a) un número en base $7$ es par si, y solo si, la suma de sus cifras es par. (b) un número es divisible por $25$ si, y solo si, acaba en $00$, $25$, $50$ o $75$.   Ejercicio 2: Halla el criterio de divisibilidad por $5$ en base $12$ y aplícalo al número $12x75_{(12}$ para que sea divisible por $5$.\n Ejercicio 3: Prueba que, si $n$ es un número natural, $3^{2 ^ n}+1$ es divisible por $2$, pero no por $4$.\n Ejercicio 4: Dado el número $123456789101112\\cdots100$, donde los números escritos son los naturales sin espacios, estudia si es múltiplo de $9$.\n Ejercicio 5: Calcula el menor múltiplo de $23$ cuyas cifras son todas nueves.\n Ejercicio 6: (Murcia (2002)) Demuestra que $A_n = 2903^n - 803^n - 464^n + 261^n$ es divisible por $1897$, para cada número natural $n$.\n ","date":1570226401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570226401,"objectID":"8eb34a9924f42399e5b3424d575ce731","permalink":"https://imalexissaez.github.io/2019/10/05/enunciados-propuestos-vi/","publishdate":"2019-10-05T00:00:01+02:00","relpermalink":"/2019/10/05/enunciados-propuestos-vi/","section":"post","summary":"Entrega VI de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (VI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Demuestra que $mcd(14n+3, 21n+4)=1$, para cada número natural $n$.\n Ejercicio 2: Determina todos los posibles valores de $mcd(3n+1, n^2+1)$, donde $n$ es un número natural.\n Ejercicio 3: Si a un número de $3$ cifras le quitamos la cifra central, resulta la séptima parte del número inicial. ¿De qué número se trata?\n Ejercicio 4: ¿Cuál es el número de tres cifras que es igual a doce veces la suma de sus cifras?\n Ejercicio 5: Halla el dígito final de $9^{9 ^ 9}$.\n Ejercicio 6: Sabiendo que $7^4 = 2401$, halla los tres últimos dígitos de $7^{9999}$.\n ","date":1569967201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569967201,"objectID":"71317c69c04b68107fd4a16c44a253cb","permalink":"https://imalexissaez.github.io/2019/10/02/enunciados-propuestos-v/","publishdate":"2019-10-02T00:00:01+02:00","relpermalink":"/2019/10/02/enunciados-propuestos-v/","section":"post","summary":"Entrega V de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Teoría de números"],"title":"Enunciados propuestos (V)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: En un sistema de numeración, cuya base se desconoce, dos números se escriben $302$ y $402$. El producto de ambos números es $75583$ en el sistema de numeración en base $9$. Halla la base desconocida.\n Ejercicio 2: Determina todos los números naturales $m$ tales que $1066\\equiv 1776\\pmod{m}$.\n Ejercicio 3: Dado $(1! + 2! + \\cdots + 100!)\\pmod{45}$, encuentra el menor resto no negativo.\n Ejercicio 4: Sea $n$ un número natural y $A_n = 2^n + 2^{2n} + 2^{3n}$.\n (a) Demuestra que $A_{n+3}\\equiv A_n\\pmod{2}$. (b) ¿Para qué valores de $n$ es $A_n$ múltiplo de $7$? (c) Los números, en base $2$, $1110$, $1010100$ y $1001001000$, ¿son divisibles por $7$?   Ejercicio 5: Determina todos los pares de números naturales $(a,b)$ tales que $mcd(a,b) = 18$ y $mcm(a,b) = 540$.\n Ejercicio 6: Halla dos números naturales sabiendo que su máximo común divisor es $120$ y la diferencia de sus cuadrados asciende a $345600$.\n ","date":1569880801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569880801,"objectID":"db1af151b8f8043d9a32e958eee939bc","permalink":"https://imalexissaez.github.io/2019/10/01/enunciados-propuestos-iv/","publishdate":"2019-10-01T00:00:01+02:00","relpermalink":"/2019/10/01/enunciados-propuestos-iv/","section":"post","summary":"Entrega IV de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Sistemas de numeración","Teoría de números"],"title":"Enunciados propuestos (IV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1:\n (a) $125_{(3}$ a base $10$. (b) $231$ a base $5$. (c) $0.11_{(2}$ a base $10$. (d) $\\frac{3}{4}$ a base $2$. (e) $0.\\overline{1}_{(3}$ a base $10$. (f) $\\frac{1}{2}$ a base $3$. (g) $0.\\overline{12}_{(3}$ a base $10$.   Ejercicio 2: En la base $x$, $a=0.\\overline{37}$ y $b=0.\\overline{73}$, mientras que en la base $y$, $a=0.\\overline{25}$ y $b=0.\\overline{52}$. Halla $x+y$ en base $10$.\n Ejercicio 3: Demuestra que, en cualquier sistema de numeración, los números $10101$, $101010101$, $1010101010101,\\ldots$ no son primos.\n Ejercicio 4: (Galicia (2019)) Encuentra los criterios de divisibilidad por $4$ y por $13$. Aplica dichos criterios para determinar el mayor número de seis cifras divisible por $4$ y por $13$ simultáneamente.\n Ejercicio 5: Halla los dígitos $A$, $B$ y $C$, en base $10$, que satisfacen $AA = \\sqrt{BBCC}$.\n Ejercicio 6: Encuentra un número $abcd$, de $4$ cifras en base $12$, tal que es cuadrado perfecto y, además, los números $ab$ y $cd$ son consecutivos en base $12$.\n Ejercicio 7: Halla un número natural, cuadrado perfecto, tal que en base $7$ se escribe como $ab0cb$, siendo $a = c + 1$.\n ","date":1569362401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569362401,"objectID":"fbf46ce11f69a6a755b040388cb3a33a","permalink":"https://imalexissaez.github.io/2019/09/25/enunciados-propuestos-iii/","publishdate":"2019-09-25T00:00:01+02:00","relpermalink":"/2019/09/25/enunciados-propuestos-iii/","section":"post","summary":"Entrega III de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Problemas","Sistemas de numeración","Teoría de números"],"title":"Enunciados propuestos (III)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Nueva entrega de enunciados propuestos de cara a la preparación de oposiciones para la especialidad de matemáticas. La colección completa está disponible aquí.\n Ejercicio 1: Demuestra que $(6^n - 1)(7^n - 1)$ es múltiplo de $30$, para cada número natural $n$.\n Ejercicio 2: Demuestra que $3^{3n+3} - 26n - 27$ es múltiplo de $169$, para cada número natural $n$.\n Ejercicio 3: (Comunidad Valenciana (2006))\n (a) Halla la base en la que $3753_{(x} - 3586_{(x} = 189_{(x}$. (b) Una vez hallada, deduce el criterio de divisibilidad entre $x-1$ de dicha base. (c) Justifica si alguno de los números dados es divisible por $x-1$ en dicha base. (d) Convierte el primero de los números dados a base $9$.   ","date":1569276001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569276001,"objectID":"a52fdeb7ee5e89e21f3af879c70b66a0","permalink":"https://imalexissaez.github.io/2019/09/24/enunciados-propuestos-ii/","publishdate":"2019-09-24T00:00:01+02:00","relpermalink":"/2019/09/24/enunciados-propuestos-ii/","section":"post","summary":"Entrega II de enunciados propuestos de cara a la preparación de oposiciones en la especialidad de matemáticas.","tags":["Inducción","Problemas","Sistemas de numeración"],"title":"Enunciados propuestos (II)","type":"post"},{"authors":null,"categories":null,"content":"","date":1569193201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569193201,"objectID":"a16588ce31142e7e55f407ad7154b78d","permalink":"https://imalexissaez.github.io/proyecto/enunciados-de-oposicion/","publishdate":"2019-09-23T00:00:01+01:00","relpermalink":"/proyecto/enunciados-de-oposicion/","section":"project","summary":"Problemas matemáticos propuestos para la preparación de las Oposiciones de 2020.","tags":["Matemáticas"],"title":"Enunciados de Oposición","type":"project"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En este inicio de curso académico, y de cara a la preparación del supuesto práctico (de la especialidad de matemáticas) para las oposiciones de secundaria de 2020 en la Comunidad Valenciana, comienzo un nuevo proyecto que recopilará los enunciados de los problemas que aborde.\nA diferencia del anteriormente disponible, no publicaré las soluciones de inmediato, sino que habilitaré enlaces a los artículos del blog donde se compartan por primera vez los enunciados, posibilitando así su discusión.\nPara muestra un botón, a continuación listo los cinco primeros enunciados:\n Ejercicio 1: Demuestra que $(3^n - 2n^2 - 1)\\equiv 0\\pmod{8}$, para cada número natural $n$. ¿Es cierto que dicha expresión también es múltiplo de $24$ para todo número natural $n$?\n Ejercicio 2: Demuestra que $11^{n+1} + 12^{2n-1}$ es múltiplo de $133$, para cada número natural $n$.\n Ejercicio 3: Calcula las dos últimas cifras de $2^{390}$.\n Ejercicio 4: Calcula las dos últimas cifras de $3^{390}$.\n Ejercicio 5: Dado $x\u0026gt;0$, calcula\n$$ \\int{\\sqrt{\\frac{x^2+1}{x^2}}dx}. $$\n ","date":1569189601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569189601,"objectID":"7fab43bc6485e5650c5a08bed14ace92","permalink":"https://imalexissaez.github.io/2019/09/23/comenzamos-nuevo-proyecto-de-problemas-de-oposicion/","publishdate":"2019-09-23T00:00:01+02:00","relpermalink":"/2019/09/23/comenzamos-nuevo-proyecto-de-problemas-de-oposicion/","section":"post","summary":"Presentación del nuevo proyecto junto con los cinco primeros enunciados.","tags":["Inducción","Integración","Problemas","Teoría de números"],"title":"Comenzamos nuevo proyecto de problemas de oposición","type":"post"},{"authors":["Alexis Sáez"],"categories":["Reflexiones"],"content":"Aunque hace unos días publiqué un artículo que trataba sobre la configuración de ciertos aspectos de las hojas de estilos CSS del tema Beautiful Hugo, sí que es cierto que Infinitos Contrastes lleva ya unas cuantas semanas bajo los auspicios del tema Academic.\nDe vez en cuando, me gusta echar un vistazo a la lista oficial de temas de la web oficial de Hugo, sobre todo cuando siento que la organización de los contenidos no me termina de convencer. En uno de esos paseos, descubrí el tema Academic y tres de sus aspectos enseguida captaron poderosamente mi atención:\n En primer lugar, la construcción de la página inicial del sitio a través de diferentes widgets. En Infinitos Contrastes apenas uso unos pocos de ellos, pero en la página web de ejemplo del tema aparecen casi todos y nos permiten hacernos una idea de su enorme potencial. En segundo lugar, la sección dedicada a los proyectos personales, con la posibilidad incorporada de filtrar por etiquetas, es una funcionalidad maravillosa en mi opinión. Ahora mismo, estoy experimentando con ella para organizar los Problemas e información sobre la Capacitación en Valenciano, por ejemplo. Finalmente, aunque no por ello menos impactante, la plantilla docs, diseñada para elaborar documentación, pero cuya flexibilidad permite organizar fácilmente los apuntes de un curso o un proyecto de extensión considerable. Precisamente ha sido mi elección para recopilar una serie de notas personales de un curso de Python que recientemente he finalizado.  Además, una vez metido de lleno en los entresijos de este tema, no puedo más que destacar la excelente documentación del mismo. Con Beautiful Hugo me animé a escribir una serie de artículos donde explicaba cómo tratar ciertos aspectos (aquel primer proyecto, Metablog), pero con Academic es a todas luces innecesario, ya que han puesto a nuestra disposición toda una serie de detalladas explicaciones.\nPor otro lado, el nivel de actualizaciones sigue un elevado ritmo y la resolución de bugs (una vez notificados en GitHub abriendo issues) es casi instantánea. Cada pocos días aparece un nuevo commit que puede interesarnos y el proceso de actualización, localmente vía script o automáticamente mediante Netlify, es muy sencillo.\nSin embargo, evidentemente, no todo han sido luces durante la migración. Las peculiaridades de este tema han provocado que haya tenido que revisar, una por una, todas las páginas generadas hasta el momento. Si bien es cierto que principalmente el trabajo se ha reducido a la edición de las cabeceras de los documentos, todavía quedan ciertos detalles a ajustar que, poco a poco, iré abordando en los próximos meses. En esta línea, también me gustaría comentar que no es un tema que recomendaría a alguien que se iniciase en el desarrollo web con Hugo, puesto que la cantidad de opciones disponibles y decisiones a tomar puede resultar abrumadora.\nEn resumen, Academic es un tema excelente para aquellas personas que deseen ir \u0026lsquo;\u0026lsquo;un paso más allá\u0026rsquo;\u0026rsquo; en sus blogs y estén dispuestas a invertir unas cuantas horas entre la experimentación y la lectura de la extensa documentación.\n","date":1562022001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565128801,"objectID":"6e14e78de683eb1061aca39ba1156597","permalink":"https://imalexissaez.github.io/2019/07/02/migrando-al-tema-academic/","publishdate":"2019-07-02T00:00:01+01:00","relpermalink":"/2019/07/02/migrando-al-tema-academic/","section":"post","summary":"En este artículo, comento las razones que me han llevado a abandonar el tema Beautiful Hugo en favor de Academic.","tags":["Academic","Hugo"],"title":"Migrando al tema Academic","type":"post"},{"authors":["Alexis Sáez"],"categories":["Reseñas"],"content":"Durante los últimos meses he estado centrado, casi exclusivamente, en la obtención del requisito lingüístico de cara a opositar en la Comunidad Valenciana. En breve, ello se traduce en haber alcanzado un nivel C1 en una lengua que hacía unas dos décadas que no usaba en absoluto y, además, haber superado una prueba de capacitación para ejercer la docencia en dicha lengua.\nAsí pues, con un cierto grado de saturación del estudio de las letras, me apetecía iniciar un pequeño proyecto paralelo, que me permitiese desconectar y, a ser posible, relacionado con la Ciencia de Datos. No obstante, mis anteriores escarceos en esta disciplina han sido siempre utilizando el lenguaje de programación R, mientras que la tendencia actual sugiere el uso de Python en estos páramos. Aunque este último no es un gran desconocido para mí, sí que es cierto que necesitaba un refresco de su sintaxis, así como de sus muchas peculiaridades.\nCuriosamente, de entre los varios MOOC, libros y tutoriales disponibles en internet, fue esta lista de reproducción de YouTube, de la mano de Píldoras Informáticas, la que captó poderosamente mi atención. Su extensión, más que considerable, anticipaba que cumpliría con creces mis necesidades de cara a repasar Python. Además, en un rápido vistazo al índice, observé que la mencionada lista incluía aspectos que no había tratado con este lenguaje de programación (aunque algunos de ellos sí con otros), como la construcción de interfaces gráficas, el manejo de bases de datos o el uso de funciones decoradoras, por nombrar algunos.\nEl enfoque del \u0026lsquo;Curso Python desde 0\u0026rsquo; es realmente práctico. La teoría asociada a cada una de las secciones no es que brille por su ausencia, pero sí es cierto que se reduce a la mínima expresión necesaria para poder implementar los conceptos y sin que las diversas instrucciones parezcan extraídas de la chistera de un mago. Las explicaciones son fáciles de seguir y en aquellos puntos donde el instructor, por su experiencia, considera o anticipa la posible aparición de dificultades, el análisis del código incluye hasta repasos detallados simulando el flujo de ejecución del algoritmo.\nPor otro lado, es una bendición que no se detenga en los clásicos parajes de los cursos introductorios, en los que apenas se estudian variables, operadores, estructuras condicionales, bucles, funciones y, de manera muy superficial, el paradigma de programación orientada a objetos. En esta lista de reproducción, se tratan todos los anteriores conceptos, con una profundidad adecuada y, además, mediante prácticas guiadas, se construyen aplicaciones interesantes como excusa a introducir áreas como el diseño de interfaces, el manejo de bases de datos, el uso de expresiones regulares, las funciones anónimas o la realización de pruebas a través de la documentación.\nSin embargo, por añadir una insignificante tara a este maravilloso recurso, la cantidad de ejercicios propuestos es ciertamente reducida y solo aparecen en los primeros estadios del curso. En mi opinión, un lenguaje de programación se aprende de manera práctica, desafiando los conceptos estudiados mediante retos de dificultad adecuada. Sí que es verdad que cada uno, a través de los campos de su interés, puede plantearse sus propias actividades; pero considero que se ha perdido un tanto la oportunidad de hacer de este curso de Python una herramienta de aprendizaje más activa.\nPara finalizar, me gustaría comentar que he recogido mis notas personales, tomadas durante la visualización de la lista de reproducción, en uno de los proyectos de la web: Python (Básico), por si alguna persona las pudiera encontrar de utilidad en cualquier momento.\n","date":1560812401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565132401,"objectID":"a3b2d4cebe0b12a17e3eceb65500cad2","permalink":"https://imalexissaez.github.io/2019/06/18/resena-curso-python-desde-cero/","publishdate":"2019-06-18T00:00:01+01:00","relpermalink":"/2019/06/18/resena-curso-python-desde-cero/","section":"post","summary":"En este artículo, vamos a echar un vistazo a una interesante y más que recomendable lista de reproducción de YouTube, que contiene un curso de Python con secciones que van más allá de los páramos introductorios.","tags":["Python","YouTube"],"title":"Reseña: 'Curso Python desde 0'","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En la web oficial de la Conselleria de Educación, Investigación, Cultura y Deporte, dentro del apartado dedicado a la inclusión educativa, podemos encontrar interesantes publicaciones enfocadas hacia la atención al alumnado con necesidades específicas de apoyo educativo.\nLas diferentes guías están disponibles tanto en español como en valenciano y abarcan temas tan variados como:\n Altas capacidades intelectuales. Trastorno por déficit de atención e hiperactividad (TDAH). Trastorno de espectro del autismo. Dificultad específica de aprendizaje de la lectura. Dificultad específica en el lenguaje y la comunicación.  En los manuales encontramos detalladas descripciones y un sinfín de útiles orientaciones a considerar a la hora de llevar a cabo actuaciones en el aula. Se convierten así en un más que maravilloso recurso para el correspondiente apartado de nuestras programaciones didácticas.\n","date":1559707179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565128801,"objectID":"9d3b4b2647b176ec5a09319a9a6ec180","permalink":"https://imalexissaez.github.io/2019/06/05/recursos-para-la-atencion-a-la-diversidad/","publishdate":"2019-06-05T05:59:39+02:00","relpermalink":"/2019/06/05/recursos-para-la-atencion-a-la-diversidad/","section":"post","summary":"Listado de recursos disponibles, editados por Conselleria, enfocados hacia la atención al alumnado con necesidades específicas de apoyo educativo.","tags":["AANEAE","Programación didáctica"],"title":"Recursos para la atención a la diversidad","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"En esta entrada recojo el código necesario para localizar a español ciertas secciones de la página web, incluyendo un experimento que al final no terminó de convencerme, pero que comparto por si sirviera de inspiración a la creatividad ajena.\nAl final de cada una de las entradas del blog aparece un apartado de etiquetas, que permite agrupar fácilmente contenidos relacionados. Cambiemos la cabecera de esta sección de Tags: a Etiquetas:. Para ello, editamos con Sublime Text 3 el archivo main.css (ubicado en la ruta \\static\\css\\) y buscamos el siguiente bloque de código:\n.blog-tags:before {\rcontent: \u0026quot;Tags: \u0026quot;;\r}\r Acto seguido, modificamos el valor del atributo content:\n.blog-tags:before {\rcontent: \u0026quot;Etiquetas: \u0026quot;;\r}\r y guardamos los cambios realizados.\nSiguiendo con esta misma filosofía, traduzcamos ese View all que aparece en las páginas de índice que agrupan contenidos por taxonomías. Para ello, editamos el archivo terms.html (ubicado en la ruta \\layouts\\_default\\) y, utilizando el buscador de Sublime Text 3, nos situamos donde aparece la mencionada cadena de caracteres y la sustituimos, por ejemplo, por Ver todos.\nTodavía podemos mejorar un tanto la localización a español del tema a través de las taxonomías. Con tal objetivo en mente, modifiquemos el fichero config.toml (ubicado en el directorio raíz de la página web) como sigue, de\n#\r# Configuración de taxonomías\r#\r[taxonomies]\rcategory = \u0026quot;categories\u0026quot;\rtag = \u0026quot;tags\u0026quot;\rproject = \u0026quot;projects\u0026quot;\r a\n#\r# Configuración de taxonomías\r#\r[taxonomies]\rcategory = \u0026quot;categories\u0026quot;\rtag = \u0026quot;tags\u0026quot;\rapartado = \u0026quot;apartados\u0026quot;\rproyecto = \u0026quot;proyectos\u0026quot;\retiqueta = \u0026quot;etiquetas\u0026quot;\r Ahora, editamos la plantilla single.html (ubicada en la ruta \\layouts\\_default\\) y sustituimos el bloque de código:\n{{ if .Params.tags }}\r\u0026lt;div class=\u0026quot;blog-tags\u0026quot;\u0026gt;\r{{ range .Params.tags }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r por\n{{ if .Params.etiquetas }}\r\u0026lt;div class=\u0026quot;blog-tags\u0026quot;\u0026gt;\r{{ range .Params.etiquetas }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Si queremos que aparezca en las entradas del blog información sobre el apartado o proyecto al que pertenecen, no tendríamos más que incorporar dos nuevos bloques a continuación, utilizando el anterior como guía y llevando a cabo las adaptaciones pertinentes. Por otro lado, sería más que recomendable crear en el archivo de estilos css las clases blog-etiquetas, blog-apartados y blog-proyectos, para mejorar el mantenimiento de la localización del tema en un futuro.\nA continuación, hemos de editar las plantillas list.html e index.html (ubicadas ambas en la ruta \\layouts\\_default), substituyendo los bloques de código\n{{ if .Params.tags }}\r\u0026lt;div class=\u0026quot;blog-tags\u0026quot;\u0026gt;\r{{ range .Params.tags }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/tags/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r por\n{{ if .Params.etiquetas }}\r\u0026lt;div class=\u0026quot;blog-tags\u0026quot;\u0026gt;\r{{ range .Params.etiquetas }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Añadiendo, acto seguido, bloques análogos para apartados y proyectos si lo hemos considerado oportuno.\nEste cambio nos obliga a actualizar la ruta de acceso a la página de etiquetas, por lo que debemos editar el archivo config.toml (ubicado en el directorio raíz de la página web) de manera que el bloque de código\n[[menu.main]]\rname = \u0026quot;Etiquetas\u0026quot;\rurl = \u0026quot;tags\u0026quot;\rweight = 3\r pase a ser\n[[menu.main]]\rname = \u0026quot;Etiquetas\u0026quot;\rurl = \u0026quot;etiquetas\u0026quot;\rweight = 3\r Finalmente, nos queda modificar el estilo de la cabecera de la página de etiquetas. Para ello editamos el archivo main.css (ubicado en la ruta \\static\\css\\) buscando el término header y añadiendo la cadena correspondiente a etiquetas. Por ejemplo, para el bloque de código\n.intro-header .page-heading,\r.intro-header .tags-heading {\rtext-align: center;\r}\r la modificación quedaría como sigue\n.intro-header .page-heading,\r.intro-header .tags-heading,\r.intro-header .etiquetas-heading {\rtext-align: center;\r}\r En total, hemos de proceder de esta manera en tres ocasiones.\nY ya que estamos con las manos en la masa, creemos las clases de estilos para etiquetas, apartados y proyectos trabajando sobre los bloques de código originales que aparecen tras el comentario /* --- Tags --- */ (recordemos que cualquier modificación puede implicar después que hayamos de editar la cabeceras de las páginas tal y como hicimos hace un instante). Así pues, nos van a quedar bloques como el que aparece a continuación:\n.blog-tags,\r.blog-apartados,\r.blog-etiquetas,\r.blog-proyectos {\rfont-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\rcolor: #999;\rfont-size: 15px;\rmargin-bottom: 30px;\r}\r Aquellos en los que aparece el atributo before no los podemos agrupar tan fácilmente. No obstante, no deja de ser trabajo de copy\u0026amp;paste.\nComo he comentado arriba, no debemos olvidar añadir a las clases de las cabeceras las líneas correspondientes, de forma que nos aparezcan bloques como el que figura acto seguido:\n.intro-header .page-heading,\r.intro-header .tags-heading,\r.intro-header .apartados-heading,\r.intro-header .etiquetas-heading,\r.intro-header .proyectos-heading {\rtext-align: center;\r}\r A continuación, hacemos una nueva modificación sobre el fichero config.toml (ubicado en el directorio raíz de la página web) y cambiamos el nombre del menú principal Blog por Inicio. Así, el bloque de código\n[[menu.main]]\rname = \u0026quot;Blog\u0026quot;\rurl = \u0026quot;\u0026quot;\rweight = 1\r pasa a ser\n[[menu.main]]\rname = \u0026quot;Inicio\u0026quot;\rurl = \u0026quot;\u0026quot;\rweight = 1\r Acto seguido, en la plantilla single.html (ubicada en la ruta \\layouts\\_default) añado, en la ubicación donde aparecen las etiquetas, información sobre el apartado y el proyecto al que pertenece una entrada en particular. Por tanto, el bloque de código\n{{ if .Params.etiquetas }}\r\u0026lt;div class=\u0026quot;blog-etiquetas\u0026quot;\u0026gt;\r{{ range .Params.etiquetas }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r a\n{{ if .Params.apartados }}\r\u0026lt;div class=\u0026quot;blog-apartados\u0026quot;\u0026gt;\r{{ range .Params.apartados }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/apartados/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r{{ if .Params.etiquetas }}\r\u0026lt;div class=\u0026quot;blog-etiquetas\u0026quot;\u0026gt;\r{{ range .Params.etiquetas }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/etiquetas/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r{{ if .Params.proyectos }}\r\u0026lt;div class=\u0026quot;blog-proyectos\u0026quot;\u0026gt;\r{{ range .Params.proyectos }}\r\u0026lt;a href=\u0026quot;{{ $.Site.LanguagePrefix | absURL }}/proyectos/{{ . | urlize }}/\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\r{{ end }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Sin embargo, aunque es una opción razonable, no me convence cómo queda, por lo que, en mi caso, voy a dejarlo como estaba. No obstante, comparto el código fuente por si alguien tiene interés en realizar esta modificación.\nPor último, quizá quede todo un poco mejor si damos acceso a las diferentes secciones desde el menú superior derecho, con un desplegable. Para ello, modificamos el fichero config.toml (ubicado en el directorio raíz de la página web) y dejamos la sección dedicada al menú como figura a continuación:\n#\r# Configuración del menú superior derecho\r#\r[[menu.main]]\ridentifier = \u0026quot;menu\u0026quot;\rname = \u0026quot;Menú\u0026quot;\rweight = 1\r[[menu.main]]\rparent = \u0026quot;menu\u0026quot;\rname = \u0026quot;Apartados\u0026quot;\rurl = \u0026quot;apartados/\u0026quot;\rweight = 1\r[[menu.main]]\rparent = \u0026quot;menu\u0026quot;\rname = \u0026quot;Etiquetas\u0026quot;\rurl = \u0026quot;etiquetas/\u0026quot;\rweight = 2\r[[menu.main]]\rparent = \u0026quot;menu\u0026quot;\rname = \u0026quot;Proyectos\u0026quot;\rurl = \u0026quot;proyectos/\u0026quot;\rweight = 3\r[[menu.main]]\rname = \u0026quot;Acerca de\u0026quot;\rurl = \u0026quot;page/about/\u0026quot;\rweight = 2\r Concluyo aquí esta extensa entrada, dejando el Proyecto MetaBlog en espera, pues en estos momentos estoy más centrado en la generación de contenido para la página web, que en la edición de la misma.\n","date":1559361579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565128801,"objectID":"566ec5734f35e210ea8acbca24b70ed8","permalink":"https://imalexissaez.github.io/2019/06/01/unos-cambios-rapidos-a-las-plantillas/","publishdate":"2019-06-01T05:59:39+02:00","relpermalink":"/2019/06/01/unos-cambios-rapidos-a-las-plantillas/","section":"post","summary":"Lección 11: implementando la localización al español de ciertos elementos de la web.","tags":["css","Beautiful Hugo","Hugo"],"title":"Unos cambios rápidos a las plantillas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 81: Dos candidatos $A$ y $B$ se presentan a una elección. Si $A$ recibe $a$ votos y $B$ recibe $b$ votos, con $a\u0026gt;b$, ¿cuál es la probabilidad de que, en todo momento del escrutinio, $A$ vaya por delante de $B$?\n El presente ejercicio es ciertamente similar a uno de los apartados del anterior problema, por lo que seguiremos el procedimiento allí esbozado. Para empezar, como no tenemos mayores indicaciones sobre cómo transcurre el escrutinio, asumiremos que todos los sucesos posibles de este experimento aleatorio son equiprobables, hecho que nos permitirá calcular probabilidades haciendo uso de la Regla de Laplace.\nPor lo que respecta al total de casos posibles, este asciende al número de trayectorias que parten desde el origen de coordenadas y arriban hasta el punto $(a,b)$, que sabemos es\n$$ C_{a+b,a} = \\dbinom{a+b}{a}. $$\nA continuación, de cara a obtener el cardinal del conjunto de casos favorables, sabemos que, a la postre, $a\u0026gt;b$. Por otro lado, la condición de que, durante el escrutinio, el candidato $A$ se mantenga siempre por delante del $B$, se traduce en que las trayectorias que partan del origen de coordenadas y lleguen hasta el punto $(a,b)$, se mantengan siempre por debajo de la diagonal $y=x$, sin intersecarla en momento alguno.\nPara ello, las rutas favorables a la situación comentada han de comenzar, necesariamente, desde el punto $(1,0)$. Así pues, hallemos el total de trayectorias existentes entre el punto $(1,0)$ y el punto $(a,b)$ que, por traslación, sabemos es equivalente a la cantidad de rutas entre el origen de coordenadas y el punto $(a,b) - (1,0) = (a-1,b)$ y esta última cifra asciende a\n$$ C_{a+b-1,b} = \\dbinom{a+b-1}{b}. $$\nNo obstante, entre ellas habrá algunas que se caractericen por intersecar la recta diagonal $y=x$, que procederemos a sustraer utilizando el Principio de reflexión de André. Aplicado a este caso particular, dicho principio afirma que el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $(a,b)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $(a,b)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(a,b) - (0,1) = (a,b-1)$, esto es,\n$$ C_{a+b-1,a} = \\dbinom{a+b-1}{a}. $$\nPor consiguiente, el número de trayectorias desde el origen de coordenadas hasta el punto $(a,b)$, que se sitúan por debajo de la recta diagonal $y=x$, son\n$$ \\dbinom{a+b-1}{b} - \\dbinom{a+b-1}{a}. $$\nFinalmente,\n$$ P = \\dfrac{C_{a+b-1,b} - C_{a+b-1,a}}{C_{a+b,a}} = \\dfrac{\\dbinom{a+b-1}{b} - \\dbinom{a+b-1}{a}}{\\dbinom{a+b}{a}} $$\nes la probabilidad de que, en todo momento del escrutinio, $A$ vaya por delante de $B$. A modo anecdótico, podemos facilitar una expresión más compacta para $P$. Desarrollando,\n$$ \\begin{aligned} P \u0026amp;= \\dfrac{\\dfrac{(a+b-1)!}{b!(a-1)!} - \\dfrac{(a+b-1)!}{a!(b-1)!}}{\\dfrac{(a+b)!}{a!b!}}\\\n\u0026amp;= \\dfrac{\\dfrac{a(a+b-1)!}{a!b!} - \\dfrac{b(a+b-1)!}{a!b!}}{\\dfrac{(a+b)!}{a!b!}}\\\n\u0026amp;= \\dfrac{(a-b)(a+b-1)!}{(a+b)(a+b-1)!} = \\dfrac{a-b}{a+b}, \\end{aligned} $$\nllegamos a una sencilla expresión para rápidamente calcular la probabilidad de interés.\n","date":1559102379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"b6820c22eab9fb77e5c34ed81bb0be11","permalink":"https://imalexissaez.github.io/2019/05/29/politica-votos-y-un-poco-de-combinatoria/","publishdate":"2019-05-29T05:59:39+02:00","relpermalink":"/2019/05/29/politica-votos-y-un-poco-de-combinatoria/","section":"post","summary":"Problema 81: mezclando política y matemáticas, ¿qué podría salir mal?.","tags":["Combinatoria","Principio de reflexión de André","Problemas","Rutas equiprobables"],"title":"Política, votos y un poco de combinatoria","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 80: Sea el plano $E$ cuadriculado por las rectas $x=m$ e $y=n$, con $m$ y $n$ números enteros. El punto $P(m,n)$ es un nudo de la cuadrícula. Una sucesión de nudos se llama trayectoria. Se consideran las trayectorias ascendentes $T_a$ en las que se pasa de un nudo al siguiente por la traslación $u$ o por la traslación $v$, donde $(O,u,v)$ es un sistema ortogonal. La longitud de una trayectoria es el número de traslaciones $u$ o $v$ que tiene.\n (a) Determina el número $T_{a}(O,P)$ que va desde el origen $O$ hasta el punto $P(m,n)$ ($m\\geq0$, $n\\geq0$) y el número de trayectorias $T^{\\prime}_{a}( P^{\\prime}, P )$ que van del punto $P^{\\prime} ( m^{\\prime}, n^{\\prime} )$ al punto $P(m,n)$ con $m^{\\prime}\\leq m$ y $n^{\\prime}\\leq n$. (b) Calcula el número de trayectorias de longitud $h$, $T_a$, que parten del origen. (c) Sea $P(m,n)$, con $m\u0026gt;n$. Calcula el número $T_{a_1}(O,P)$ de trayectorias que van de $O$ a $P$ por debajo de la diagonal $y=x$. (d) Sea $P(n,n)$. Halla el número de trayectorias $T_{a_2}(O,P)$ que van de $O$ a $P$ por encima o por debajo de la diagonal principal sin tocarla nada más que en los puntos $O$ y $P$. (e) Se lanza una moneda $2n$ veces, ¿cuál es la probabilidad de obtener $n$ caras y $n$ cruces? Se supone que la igualdad no se alcanza antes del último lanzamiento.   El presente problema, en planteamiento, es similar (en parte) al que figura en el problema anterior, de manera que haremos uso aquí de algunos de los resultados alcanzados allí. Así, la situación que se plantea queda ilustrada en el siguiente diagrama.\n\r\rPlanteamiento gráfico del problema.\r\r\rEn el apartado (a) nos piden obtener el número de trayectorias (que en el ejercicio anterior designábamos por rutas) desde el origen de coordenadas hasta el punto $P(m,n)$. Sabemos que dicha cifra se corresponde con la elección de $m$ posibilidades tomadas de un total de $m+n$, esto es,\n$$ C_{m+n,m} = \\dbinom{m+n}{m}, $$\ncantidad que es equivalente, asimismo, a $C_{m+n,n}$ o a $PR_{m+n}^{m,n}$.\nA continuación, para la segunda parte de este apartado, hemos de encontrar el total de rutas existentes entre los puntos $P^{\\prime} ( m^{\\prime}, n^{\\prime} )$ y $P(m,n)$. Dicha cifra es equivalente, por traslación, al número de rutas entre el origen de coordenadas y el punto $(m,n) - ( m^{\\prime}, n^{\\prime} ) = ( m - m^{\\prime}, n - n^{\\prime} )$. Por tanto, hay\n$$ C_{m+n-m^{\\prime}-n^{\\prime}, m-m^{\\prime}} = \\dbinom{m+n-m^{\\prime}-n^{\\prime}}{m-m^{\\prime}} $$\nrutas existentes entre los puntos $P^{\\prime} ( m^{\\prime}, n^{\\prime} )$ y $P(m,n)$.\nPara el apartado (b), por el razonamiento que se encuentra en el ejercicio citado, concluimos que el número de trayectorias de longitud $h$ es\n$$ \\dbinom{h}{0} + \\dbinom{h}{1} + \\dbinom{h}{2} + \\cdots + \\dbinom{h}{h} = 2^h. $$\nActo seguido, para el apartado (c), nos apoyaremos en el diagrama que aparece en la siguiente figura, donde hemos añadido al anterior la recta diagonal de ecuación $y=x$.\n\r\rPlanteamiento gráfico del apartado (c).\r\r\rBuscamos todas las rutas existentes entre el origen de coordenadas y el punto $P(m,n)$ que se sitúen por debajo de la mencionada diagonal, esto es, que no posean intersección con ella. Obligatoriamente, todas ellas empezarán desde el punto $(1,0)$, ya que de hacerlo desde $(0,1)$, parte de la ruta se situaría por encima de la diagonal $y=x$.\nAsí pues, hallemos el total de rutas existentes entre el punto $(1,0)$ y el punto $P(m,n)$ que, por traslación, sabemos es equivalente a la cantidad de rutas entre el origen de coordenadas y el punto $(m,n) - (1,0) = (m-1,n)$ y esta última cifra asciende a\n$$ C_{m+n-1,n} = \\dbinom{m+n-1}{n}. $$\nNo obstante, entre ellas habrá algunas que se caractericen por intersecar la diagonal $y=x$, que procedemos a sustraer utilizando el Principio de reflexión de André. Aplicado a este caso particular, dicho principio afirma que el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $P(m,n)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $P(m,n)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (0,1) = (m,n-1)$, esto es,\n$$ C_{m+n-1,m} = \\dbinom{m+n-1}{m}. $$\nPor consiguiente, el número de trayectorias desde el origen de coordenadas hasta el punto $P(m,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son\n$$ \\dbinom{m+n-1}{n} - \\dbinom{m+n-1}{m}. $$\nSiendo estrictos, en realidad el primer punto de partida es $(2,0)$ y no $(1,0)$, puesto que si de este último efectuamos un \u0026lsquo;\u0026lsquo;paso hacia arriba\u0026rsquo;\u0026rsquo; se produciría una intersección con la recta diagonal $y=x$. No obstante, el Principio de reflexión de André nos permite empezar, sin problema alguno, desde $(1,0)$, ya que descontará las rutas que no satisfagan la condición impuesta en el enunciado para este apartado. No obstante, si optamos por empezar desde $(2,0)$, el procedimiento a seguir es análogo al mostrado en párrafos anteriores. El total de rutas de rutas desde el punto $(2,0)$ al punto $P(m,n)$, por traslación, equivale a la cantidad de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (2,0) = (m-2,n)$, esto es,\n$$ C_{m+n-2,n} = \\dbinom{m+n-2}{n}. $$\nAhora, por el Principio de reflexión de André, el número de trayectorias que van desde el punto $(2,0)$ hasta el punto $P(m,n)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,2)$ (simétrico de $(2,0)$ respecto de la recta $y=x$) hasta el punto $P(m,n)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(m,n) - (0,2) = (m,n-2)$, esto es,\n$$ C_{m+n-2,m} = \\dbinom{m+n-2}{m}. $$\nPor tanto, el número de trayectorias desde el origen de coordenadas hasta el punto $P(m,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son\n$$ \\dbinom{m+n-2}{n} - \\dbinom{m+n-2}{m}, $$\ny esta diferencia coincide con la calculada anteriormente.\nEn el apartado (d), la situación se ilustra en el diagrama que figura en la imagen siguiente. El modo de proceder es similar al seguido en el apartado previo, pues las rutas que se sitúan por debajo necesariamente han de comenzar por el punto $(1,0)$; pero con una salvedad: han de llegar al punto $P(n,n)$ a través del punto $(n,n-1)$, para así efectivamente situarse por debajo de la recta diagonal $y=x$. En el apartado anterior, como $m\u0026gt;n$, no era necesario exigir esta última condición, puesto que el punto $P(m,n)$ se situaba \u0026lsquo;\u0026lsquo;lejos\u0026rsquo;\u0026rsquo; de la condición que impone la diagonal $y=x$. Así pues, hallaremos el total de rutas comprendidas entre los puntos $(1,0)$ y $(n,n-1)$, para luego sustraer aquellas que intersecan la diagonal $y=x$, utilizando el Principio de reflexión de André.\n\r\rPlanteamiento gráfico del apartado (d).\r\r\rEl número de rutas existente entre los puntos $(1,0)$ y $(n,n-1)$ equivale, por traslación, al total de rutas entre el origen de coordenadas y el punto $(n,n-1) - (1,0) = (n-1,n-1)$, esto es,\n$$ C_{2n-2, n-1} = \\dbinom{2n-2}{n-1}. $$\nAhora, por el Principio de reflexión de André, el número de trayectorias que van desde el punto $(1,0)$ hasta el punto $(n,n-1)$ e intersecan la recta diagonal $y=x$, equivale a la cantidad de trayectorias que van desde el punto $(0,1)$ (simétrico de $(1,0)$ respecto de la recta $y=x$) hasta el punto $(n,n-1)$. Por traslación, estas equivalen al total de trayectorias desde el origen de coordenadas hasta el punto $(n,n-1) - (0,1) = (n,n-2)$, esto es,\n$$ C_{2n-2,n} = \\dbinom{2n-2}{n}. $$\nPor tanto, el número de trayectorias desde el origen de coordenadas hasta el punto $P(n,n)$, que se sitúan por debajo de la recta diagonal $y=x$, son\n$$ \\dbinom{2n-2}{n-1} - \\dbinom{2n-2}{n}. $$\nPor simetría, el argumento se desarrolla de forma análoga para las trayectorias que se sitúan por encima de la recta diagonal $y=x$, por lo que únicamente hemos de duplicar el anterior resultado alcanzado\n$$ 2\\left(\\dbinom{2n-2}{n-1} - \\dbinom{2n-2}{n}\\right) $$\npara hallar el total de rutas existentes entre el origen de coordenadas y el punto $P(n,n)$ que se sitúan por encima o por debajo de la recta diagonal $y=x$, tocándola únicamente en $O$ y $P(n,n)$.\nFinalmente, en el apartado (e), aplicaremos la Regla de Laplace por tratarse de sucesos equiprobables y calcularemos tanto el número de casos favorables, como la cantidad de casos totales, utilizando trayectorias. Para empezar, la cifra de casos totales equivale al número de trayectorias entre el origen de coordenadas y el punto $P(n,n)$, esto es,\n$$ C_{2n,n} = \\dbinom{2n}{n}. $$\nEn cuanto al número de casos favorables, precisamente, es el resultado que obtuvimos en el apartado previo. Así,\n$$ P = \\dfrac{2(C_{2n-2,n-1} - C_{2n-2,n})}{C_{2n,n}} = \\dfrac{2\\left(\\dbinom{2n-2}{n-1} - \\dbinom{2n-2}{n}\\right)}{\\dbinom{2n}{n}} $$\nes la probabilidad de obtener $n$ caras y $n$ cruces si la igualdad entre estas no se alcanza antes del último lanzamiento.\n","date":1558756779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"8a77dd2c47a6ef0c7f46de1bea49cb5b","permalink":"https://imalexissaez.github.io/2019/05/25/seguimos_de_rutas/","publishdate":"2019-05-25T05:59:39+02:00","relpermalink":"/2019/05/25/seguimos_de_rutas/","section":"post","summary":"Problema 80: presentando el Principio de reflexión de André.","tags":["Combinatoria","Principio de reflexión de André","Problemas","Rutas equiprobables"],"title":"Seguimos de rutas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 79: ¿Cuántas rutas existen, desde la esquina inferior izquierda de una cuadrícula $n\\times n$ a la esquina superior derecha, si los viajes se restringen solo a pasos de longitud unitaria a la derecha o hacia arriba?\n Antes de abordar el problema en su versión general, tal y como reza el enunciado, estudiemos un caso concreto, como el que se muestra en la siguiente figura. En ella, hemos tomado $n=5$ y sobre la cuadrícula aparecen delineadas dos de las posibles rutas (una en verde y otra en rojo) que parten del origen de coordenadas $(0,0)$ y llegan hasta el punto $(5,5)$. Esto es, ambas parten desde la esquina inferior izquierda de la mencionada cuadrícula y arriban a su esquina superior derecha.\n\r\rRepresentación simplificada del problema.\r\r\rSi denotamos por $D$ a los pasos de longitud unitaria que se recorren hacia la derecha y por $A$ a los correspondientes que se efectúan hacia arriba, rápidamente apreciamos que, en cada una de las rutas que podamos imaginar, habrá cinco $D$ y otras cinco $A$. Es decir, toda ruta es una reordenación de la cadena $DDDDDAAAAA$. El número de tales cadenas que podemos escribir asciende al total de permutaciones con repetición de diez elementos, donde uno de ellos se repite cinco veces, mientras que el otro lo hace en el mismo número de ocasiones. Así, hay\n$$ PR_{10}^{5,5} = \\dfrac{10!}{5!5!} = \\dfrac{10\\cdot9\\cdot8\\cdot7\\cdot6}{5!} = 252 $$\nrutas posibles cuando $n=5$.\nAlternativamente, podemos enfocar el problema como sigue: para llegar desde una esquina a la otra es necesario que efectuemos un total de diez de pasos, de los cuales cinco habrán de ser hacia la derecha (el mismo razonamiento es válido si consideramos dar los pasos hacia arriba). Como el orden en el que los demos no es importante, el número de maneras de dar cinco pasos a la derecha de un total de diez pasos equivale al total de combinaciones de diez elementos tomados de cinco es cinco, es decir,\n$$ C_{10,5} = \\dbinom{10}{5} = \\dfrac{10\\cdot9\\cdot8\\cdot7\\cdot6}{5!} = 252. $$\nSi ahora consideramos una cuadrícula rectangular, de manera que la esquina superior derecha de la misma la situamos en el punto $(5,7)$, razonaríamos de manera análoga a como hicimos en el párrafo anterior. ¿Cuántos pasos hemos de efectuar para llegar desde el origen de coordenadas hasta el punto $(5,7)$? En las condiciones que impone el enunciado del ejercicio, serían $5+7=12$ los pasos requeridos. El número de rutas, entonces, ascendería al total de combinaciones de doce elementos tomados de cinco en cinco, $C_{12,5}$ (o bien $C_{12,7}$ si hacemos el razonamiento fijándonos en los pasos que deben darse hacia arriba), esto es,\n$$ C_{12,5} = C_{12,7} = \\dbinom{12}{5} = \\dfrac{12\\cdot11\\cdot10\\cdot9\\cdot8}{5!} = 792 $$\nson las rutas posibles en este caso.\nEn general, dada una cuadrícula $m\\times n$ el número de rutas que existen, desde su esquina inferior izquierda hasta su esquina superior derecha, si los viajes se restringen a pasos de longitud unitaria a la derecha o hacia arriba asciende a\n$$ C_{m+n,n} = \\dbinom{m+n}{n}\\qquad\\text{o}\\qquad C_{m+n,m}=\\dbinom{m+n}{m}. $$\nEn nuestro caso concreto, como $m=n$, dicha cifra será\n$$ C_{2n,n} = \\dbinom{2n}{n}. $$\nImaginemos, a continuación, que nos indican que estamos situados en el punto $(1,2)$. ¿Cuántas rutas distintas existen desde dicho punto a la esquina superior derecha de la cuadrícula, $(n,n)$? Esta cuestión la resolveríamos aplicando una traslación, puesto que el número de rutas entre los puntos $(1,2)$ y $(n,n)$ equivale al total de rutas entre $(0,0)$ y $(n-1,n-2)$ (simplemente hemos efectuado una traslación de vector $(1,2)$, es decir, sustraemos el mencionado vector a ambos puntos para obtener los finalmente mostrados). Dicha cifra, aplicando lo visto en párrafos anteriores, será\n$$ \\dbinom{n-1+n-2}{n-1} = \\dbinom{2n-3}{n-1} = C_{2n-3,n-1} $$\no bien $C_{2n-3,n-2}$.\nConsideremos ahora que la longitud de una ruta equivale al número de pasos realizados. Así, podríamos preguntamos, ¿cuántas rutas de longitud seis existen? Una ruta de longitud seis, en las condiciones que impone en el enunciado de este ejercicio, puede llevarnos a cualquiera de los puntos que se indican en la siguiente figura, por lo que la tarea se reduce entonces a contar el número de rutas existente desde el origen de coordenadas a cada uno de ellos.\n\r\rPosibles longitudes de rutas.\r\r\rAsí, de $(0,0)$ a $(0,6)$ hay un total de $C_{6,0}$ rutas; de $(0,0)$ a $(1,5)$ encontramos $C_{6,1}$ rutas; de $(0,0)$ a $(2,4)$ hallamos $C_{6,2}$ rutas; y así sucesivamente. En total son\n$$ \\dbinom{6}{0} + \\dbinom{6}{1} + \\dbinom{6}{2} + \\dbinom{6}{3} + \\dbinom{6}{4} + \\dbinom{6}{5} + \\dbinom{6}{6} = 2^6 = 64, $$\nya que,\n$$ \\dbinom{n}{0} + \\dbinom{n}{1} + \\dbinom{n}{2} + \\cdots + \\dbinom{n}{n} = \\sum_{k=0}^{n}{\\dbinom{n}{k}} = (1+1)^n = 2^n. $$\nPor tanto, si ahora nos preguntasen por el total de rutas de longitud diez, directamente podríamos decir que son $2^{10} = 1024$.\nEste clásico problema, conocido como el de las rutas equiprobables, nos permite dar respuesta a preguntas como: ¿de cuántas maneras podemos obtener cinco caras y cinco cruces al lanzar una moneda diez veces? En ejercicios anteriores, utilizando técnicas de combinatoria, hallamos que dicha cantidad equivalía a $PR_{10}^{5,5}$ o bien $C_{10,5}$. Un enfoque alternativo sería por conteo de rutas desde el origen de coordenadas hasta el punto de interés, $(5,5)$ en esta ocasión. Por otro lado, el total de rutas de longitud seis es, en otros términos, la cantidad de secuencias que podemos obtener al lanzar una moneda seis veces, que, por combinatoria, sabemos asciende a $VR_{2,6} = 2^6 = 64$. Así, los ejercicios de rutas fácilmente se extrapolan a otros contextos (sobre todo de monedas) y podemos resolver con ellas interrogantes del estilo: dado que he obtenido una cada y dos cruces, ¿de cuántas formas posibles puedo llegar a conseguir diez caras y diez cruces? La respuesta, como vimos en párrafos anteriores, la encontraríamos rápidamente tras aplicar una traslación de vector $(1,2)$ y contar después del número de rutas entre el origen de coordenadas y el punto $(9,8)$.\n","date":1558497579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"5eeda4ae0c88eb57349368086e310a4a","permalink":"https://imalexissaez.github.io/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/","publishdate":"2019-05-22T05:59:39+02:00","relpermalink":"/2019/05/22/breve-introduccion-a-los-problemas-de-rutas/","section":"post","summary":"Problema 79: presentando las rutas equiprobables.","tags":["Combinatoria","Problemas","Rutas equiprobables"],"title":"Breve introducción a los problemas de rutas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 78: Demuestra que, para cada número natural $n$,\n$$ \\dbinom{-1 / 2}{n} = \\dbinom{2n}{n}\\left(-\\dfrac{1}{4}\\right)^n. $$\n Utilizando la definición,\n$$ \\begin{aligned} \\dbinom{-1 / 2}{n} \u0026amp;= \\dfrac{\\left(-\\dfrac{1}{2}\\right)\\left(-\\dfrac{1}{2}-1\\right)\\left(-\\dfrac{1}{2}-2\\right)\\cdots\\left(-\\dfrac{1}{2} - (n-1)\\right)}{n!}\\\n\u0026amp;= \\dfrac{\\left(-\\dfrac{1}{2}\\right)\\left(-\\dfrac{3}{2}\\right)\\left(-\\dfrac{5}{2}\\right)\\cdots\\left(\\dfrac{1-2n}{2}\\right)}{n!}. \\end{aligned} $$\nEn el numerador encontramos $n$ factores, por lo que podremos extraer esa misma cantidad de signos negativos, quedando entonces $(-1)^n$ (atención a cómo quedaría el último factor tras esta acción). Además, hay $n$ doses en los denominadores de las fracciones que aparecen en el numerador, quedando su producto entonces $2^n$, valor que podemos trasladar al denominador de la expresión. Por consiguiente,\n$$ \\dbinom{-1 / 2}{n} = (-1)^n \\cdot\\dfrac{1\\cdot3\\cdot5\\cdots (2n-1)}{2^n n!}. $$\nAhora, multipliquemos y dividamos por el producto de números pares $2\\cdot4\\cdot6\\cdots 2n$ (llegamos a $2n$ y no hasta $2n-2$ por la expresión a la que buscamos arribar), provocando así que en el numerador aparezca el factorial de $2n$,\n$$ \\dbinom{-1 / 2}{n} = (-1)^n\\dfrac{1\\cdot2\\cdot3\\cdot4\\cdot5\\cdots (2n-1)\\cdot 2n}{(2\\cdot4\\cdot6\\cdots 2n) 2^n n!} = (-1)^n\\dfrac{(2n)!}{(2\\cdot4\\cdot6\\cdots 2n) 2^n n!}. $$\nAdemás, sacando un dos de cada factor, y teniendo en cuenta que hay $n$ de ellos, es cierto que,\n$$ 2\\cdot4\\cdot6\\cdots 2n = 2^n(1\\cdot2\\cdot3\\cdots n) = 2^n n!, $$\ny sustituyendo el resultado alcanzado en la expresión anterior,\n$$ \\dbinom{-1 / 2}{n} = (-1)^n\\dfrac{(2n)!}{(2^n n!) (2^n n!)}. $$\nComo $2^n\\cdot 2^n = 2^{2n} = 4^n$,\n$$ \\dbinom{-1 / 2}{n} = (-1)^n\\dfrac{(2n)!}{4^n n! n!} = \\dfrac{(-1)^n}{4^n}\\dbinom{2n}{n} = \\dbinom{2n}{n}\\left(-\\dfrac{1}{4}\\right)^n , $$\ntal y como queríamos demostrar.\n","date":1558151979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"c1fa44d27c6e4f22bb9572adf23910be","permalink":"https://imalexissaez.github.io/2019/05/18/marchando-uno-de-numeros-combinatorios-generalizados/","publishdate":"2019-05-18T05:59:39+02:00","relpermalink":"/2019/05/18/marchando-uno-de-numeros-combinatorios-generalizados/","section":"post","summary":"Problema 78: números combinatorios... ¿con valores negativos?","tags":["Combinatoria","Problemas"],"title":"Marchando uno de números combinatorios generalizados","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 77:\n (a) Calcula el número de soluciones enteras no negativas de $$x_1+x_2+x_3+x_4+x_5+x_6=10.$$ (b) ¿Cuántas soluciones enteras no negativas posee la inecuación $$x_1+x_2+x_3+x_4+x_5+x_6 \u0026lt; 10 ?$$   Para el apartado (a), razonaremos, como viene siendo ya habitual, en términos de urnas indistinguibles y bolas idénticas. Consideraremos que tenemos en nuestro haber seis de dichas urnas, en las que deseamos colocar diez de las mencionadas bolas. Aplicando la técnica de barras y estrellas necesitamos cinco barras para representar sobre la recta real las seis urnas y buscamos ubicar luego diez estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de seis variables puede ascender a diez, equivale a la cantidad de permutaciones con repetición de $15$ elementos, donde uno de ellos se repite cinco veces, mientras que el otro lo hace en diez ocasiones. Así, hay\n$$ PR_{15}^{5,10} = CR_{6,10} = \\dbinom{15}{10} = \\dfrac{15\\cdot14\\cdot13\\cdot12\\cdot11}{5!} = 3003 $$\nsoluciones enteras no negativas para la ecuación propuesta.\nEn cuanto al apartado (b), nos encontramos en una situación parecida a la del ejercicio anterior aunque observamos una desigualdad estricta. En primer lugar, cambiaremos adecuadamente el signo $\u0026lt;$ por $\\leq$ y luego procederemos como en aquel problema. Así, como estamos interesados en soluciones enteras no negativas, es cierto que\n$$ x_1+x_2+x_3+x_4+x_5+x_6 \u0026lt; 10 \\Leftrightarrow x_1+x_2+x_3+x_4+x_5+x_6\\leq 9. $$\nA continuación, introducimos una urna adicional, en la forma de una nueva variable, $x_7$, para así transformar la inecuación en una ecuación. Por tanto, el problema se reduce a averiguar el número de soluciones enteras no negativas de la ecuación\n$$ x_1+x_2+x_3+x_4+x_5+x_6+x_7=9. $$\nAplicando la técnica de barras y estrellas necesitamos seis barras para representar sobre la recta real las siete urnas y buscamos ubicar luego nueve estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de siete variables puede ascender a nueve, equivale a la cantidad de permutaciones con repetición de $15$ elementos, donde uno de ellos se repite seis veces, mientras que el otro lo hace en nueve ocasiones. Así, hay\n$$ PR_{15}^{6,9} = CR_{7,9} = \\dbinom{15}{9} = \\dfrac{15\\cdot14\\cdot13\\cdot12\\cdot11\\cdot10}{6!} = 5005 $$\nsoluciones enteras no negativas para la ecuación propuesta y, por tanto, asimismo para la inecuación planteada en el segundo apartado del ejercicio.\n","date":1557892779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"482de3a88221b4cbe0e2e5c58c03f0b4","permalink":"https://imalexissaez.github.io/2019/05/15/refinando-el-ejercicio-del-ultimo-dia/","publishdate":"2019-05-15T05:59:39+02:00","relpermalink":"/2019/05/15/refinando-el-ejercicio-del-ultimo-dia/","section":"post","summary":"Problema 77: una vuelta de tuerca adicional.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Refinando el ejercicio del último día","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 76: Calcula el número de soluciones enteras no negativas de la inecuación\n$$ x+y+z+t \\leq 2001. $$\n A diferencia de ejercicios anteriores, en el presente encontramos una inecuación en lugar de una ecuación. Razonando en términos de urnas indistinguibles y bolas idénticas, esta situación se traduce en que, para ciertos repartos, algunas de las $2001$ bolas pueden quedar fuera de las cuatro urnas que emplearíamos para representar las variables $x$, $y$, $z$ y $t$. Así pues, procederemos generando una urna adicional, para una variable $u$, que será aquella donde depositemos el exceso de bolas del reparto. Por tanto, la inecuación planteada quedaría ahora como la ecuación\n$$ x+y+z+t+u=2001, $$\nde la cual deseamos encontrar el número de soluciones enteras no negativas.\nAhora ya estamos en condiciones de volver a utilizar las estrategias vistas en ejercicios previos. Aplicando la técnica de barras y estrellas, necesitamos cuatro barras para representar sobre la recta real las cinco urnas y buscamos ubicar luego $2001$ estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de cinco variables puede ascender a $2001$, equivale a la cantidad de permutaciones con repetición de $2005$ elementos, donde uno de ellos se repite cuatro veces, mientras que el otro lo hace en $2001$ ocasiones. Así, hay\n$$ \\begin{aligned} PR_{2005}^{4, 2001} \u0026amp;= CR_{5, 2001}\\\n\u0026amp;= \\dbinom{2005}{2001}\\\n\u0026amp;= \\dfrac{2005\\cdot2004\\cdot2003\\cdot2002}{4!}\\\n\u0026amp;= 671345179505 \\end{aligned} $$\nsoluciones enteras no negativas para la ecuación propuesta y, por tanto, asimismo para la inecuación planteada en el enunciado del ejercicio.\n","date":1557547179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"32d1e6d5383595b085cd0e66003d03e3","permalink":"https://imalexissaez.github.io/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/","publishdate":"2019-05-11T05:59:39+02:00","relpermalink":"/2019/05/11/buscando-el-total-de-soluciones-de-una-inecuacion/","section":"post","summary":"Problema 76: generalizando estrategias para inecuaciones.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Buscando el total de soluciones de una inecuación","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 75: Trazamos en un plano $n$ rectas secantes dos a dos, pero tres a tres no concurrentes, ¿en cuántas regiones queda dividido el plano?\n Claramente observamos, en la siguiente imagen, que dos rectas secantes dividen el plano en cuatro regiones. Al añadir una nueva recta, de manera que las tres no sean concurrentes en un punto, necesariamente aparecerán dos nuevos puntos de intersección con las rectas originales (puesto que la incorporada no puede ser paralela a las existentes, al existir la restricción de que las rectas sean secantes dos a dos), hecho que implica que la recta subdivide en dos tres de las cuatro regiones en las que se encontraba dividido el plano, produciendo entonces en total siete regiones ($4 + 3 = 7$).\n\r\rRepresentación gráfica.\r\r\rUna cuarta recta, que fuese secante dos a dos con las tres anteriores, daría lugar a tres nuevos puntos de intersección, situación que provocaría que cuatro de las anteriores regiones quedasen, cada una de ellas, subdividas en dos nuevas regiones. En total, contaríamos pues con once regiones ($7 + 4 = 11$).\nEn general, denotemos por $R_n$ al número de regiones en que el plano queda dividido por $n$ rectas que son secantes dos a dos, pero tres a tres no concurrentes. Al incorporar una nueva recta, que será secante dos a dos con todas las anteriores, esta dará lugar a $n$ nuevos puntos de intersección (ya que no será concurrente tres a tres con ninguno de los pares presentes), hecho que provoca que, de las $R_n$ regiones que se contaban antes de introducir la nueva recta, $n+1$ queden, cada una de ellas, subdividas en dos regiones. Así, es cierto que, para cada número natural $n$,\n$$ R_{n+1} = R_n + (n+1), $$\ndando lugar a una ecuación en diferencias lineal completa de orden uno. Su ecuación homogénea asociada es $R_{n+1} - R_n = 0$, con ecuación característica correspondiente $\\lambda - 1 = 0$, esto es, $\\lambda = 1$. Así, la solución para dicha ecuación homogénea es $R_h = c_1$, con $c_1\\in\\mathbb{R}$.\nAhora, como el término independiente, $n+1$, es un polinomio de grado uno en $n$ y $\\lambda = 1$ es una raíz simple de la ecuación característica, proponemos como solución particular $n^1(an+b) = an^2+bn$ y sustituyendo en la ecuación en diferencias inicial, queda\n$$ a(n+1)^2 + b(n+1) - an^2 - bn = n+1. $$\nOperando, llegamos a que $2an + (a+b) = n+1$ e igualando coeficientes $a = b = 1 / 2$, por lo que la solución particular a la ecuación en diferencias planteada es, para cada número natural $n$, $R_p = (n^2+n) / 2$.\nPor consiguiente, la solución general a la ecuación en diferencias propuestas, que es la suma de la solución para la ecuación homogénea y la solución particular, es\n$$ R_n = c_1 + \\dfrac{n^2+n}{2}, $$\ncon $c_1\\in\\mathbb{R}$. Dado que para $n = 2$ hemos establecido, al principio del ejercicio, que $R_2 = 4$, sustituyendo podemos averiguar el valor de $c_1$. Así,\n$$ 4 = c_1 + \\dfrac{2^2+2}{2}, $$\nesto es, $c_1 = 1$ y concluimos que, para cada número natural $n$,\n$$ R_n = \\dfrac{n^2+n+2}{2} $$\nes el número de regiones en que queda dividido un plano cuando trazamos $n$ rectas secantes dos a dos, pero tres a tres no concurrentes.\nAlternativamente, por tanteo de unos cuantos casos particulares para los primeros valores de $n$, obtenemos la siguiente tabla\n   $n$ $1$ $2$ $3$ $4$ $5$ $6$     $R_n$ $2$ $4$ $7$ $11$ $16$ $22$   $\\Delta R_n$ $2$ $3$ $4$ $5$ $6$ $7$   $\\Delta^2 R_n$ $1$ $1$ $1$ $1$ $1$ $1$    Por consiguiente, la sucesión $(R_n)$ es una progresión aritmética de orden dos, luego, por los resultados teóricos asociados a este tipo de sucesiones,\n$$ \\begin{aligned} R_n \u0026amp;= \\dbinom{n-1}{0}R_1 + \\dbinom{n-1}{1}\\Delta R_1 + \\dbinom{n-1}{2}\\Delta^2 R_1\\\n\u0026amp;= 1\\cdot2 + (n-1)\\cdot2 + \\dfrac{(n-1)(n-2)}{2}\\cdot1\\\n\u0026amp;= \\dfrac{4 + 4(n-1) + (n-1)(n-2)}{2}\\\n\u0026amp;= \\dfrac{n^2 +n+2}{2}, \\end{aligned} $$\narribando al mismo resultado que antes.\n","date":1557287979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"50c17e6795a01190f88c7fc1af6f474e","permalink":"https://imalexissaez.github.io/2019/05/08/secantes-dos-a-dos-pero-tres-a-tres-no-concurrentes/","publishdate":"2019-05-08T05:59:39+02:00","relpermalink":"/2019/05/08/secantes-dos-a-dos-pero-tres-a-tres-no-concurrentes/","section":"post","summary":"Problema 75: un esbozo gráfico enseguida nos pone en la pista del patrón que se sigue.","tags":["Combinatoria","Problemas"],"title":"Secantes dos a dos, pero tres a tres no concurrentes","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 74: En el lanzamiento simultáneo de tres dados distintos, ¿de cuántas maneras la suma de las puntuaciones puede ascender a diez?\n Si asumimos que trabajamos con tres dados estándar y representamos por $x_i$ la puntuación obtenida en el lanzamiento del $i$-ésimo dado, con $1\\leq i\\leq 3$, buscamos encontrar el número de soluciones enteras de la ecuación $x_1+x_2+x_3 = 10$, donde $1\\leq x_i\\leq 6$, para $1\\leq i\\leq 3$.\nSeguiremos, a continuación, el mismo esquema que figura en el ejercicio anterior, esto es, utilizaremos el Principio de complementación, de forma que calcularemos el número de soluciones enteras no negativas (que satisfagan las restricciones de mayor o igual para las variables involucradas) de la ecuación propuesta y, después, haciendo uso del Principio de inclusión-exclusión, descontaremos aquellas que no satisfagan las restricciones impuestas.\nAsí pues, empecemos planteando la ecuación $x_1+x_2+x_3=10$, con $x_i\\geq 1$ para todo $1\\leq i\\leq 3$. Pensando en términos de urnas y bolas, hemos de almacenar una bola en cada urna y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3=7$, ahora con $x_i\\geq 0$, para $1\\leq i\\leq 3$. Aplicando la técnica de barras y estrellas, como en ejercicios previos, sabemos que dicho número equivale al total de permutaciones con repetición de nueve elementos, donde uno de ellos se repite dos veces, mientras que el otro lo hace en siete ocasiones, esto es,\n$$ PR_{9}^{2,7} = CR_{3,7} = \\dbinom{9}{7} = \\dfrac{9\\cdot8}{2!} = 36. $$\nDefinamos, acto seguido, los conjuntos $A_i = \\{x_i\\geq 7\\}$, para $1\\leq i\\leq 3$, por lo que estamos interesados en hallar el valor de $card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3})$. Por el Principio de complementación,\n$$ card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3}) = card(E) - card(A_1\\cup A_2\\cup A_3), $$\ndonde por $E$ representamos al conjunto total, que en este contexto se refiere al total de soluciones enteras no negativas de la ecuación planteada y cuyo cardinal hemos obtenido en párrafos anteriores, $PR_{9}^{2,7} = 36$. Aplicando ahora el *Principio de inclusión-exclusión*,\n$$ card\\left( \\bigcup_{i = 1}^{3}{A_{i}} \\right) = \\sum_{i = 1}^{3}{card(A_{i})} - \\sum_{1 \\leq i \u0026lt; j \\leq 3}{card(A_{i} \\cap A_{j})} + card\\left( \\bigcap_{i = 1}^{3}{A_{i}} \\right). $$\nEstudiemos ahora el conjunto $A_1 = \\{x_1\\geq 7\\}$ y averigüemos $card(A_1)$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3=10$, con $x_1\\geq 7$, $x_i\\geq 1$ para $2\\leq i\\leq 3$. Pensando en términos de urnas y bolas, hemos de almacenar siete bolas en la primera urna, una en la segunda, una en la tercera y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3=1$, ahora con $x_i\\geq 0$, para $1\\leq i\\leq 3$. Aplicando, de manera análoga a como lo hicimos arriba, la técnica de barras y estrellas, sabemos que dicho número equivale al total de permutaciones con repetición de tres elementos, donde uno de ellos se repite dos veces, mientras que el otro lo hace en una ocasión, esto es,\n$$ PR_{3}^{1,2} = CR_{3,1} = \\dbinom{3}{1} = 3. $$\nPor simetría, $card(A_1)=card(A_2)=card(A_3)=3$, de manera que\n$$ \\sum_{i=1}^{3}{card(A_i)} = 9. $$\nPor lo que respecta al resto de casos, cuando intersecamos dos o más conjuntos las restricciones imponen una suma mayor o igual que $14$, por lo que es imposible que se satisfaga en enteros no negativos la ecuación $x_1+x_2+x_3=10$, esto es, los cardinales asociados a las correspondientes intersecciones serán nulos.\nPor tanto, recapitulando,\n$$ card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3}) = 36-9 = 27 $$\nson las maneras en las que, en el lanzamiento simultáneo de tres dados distintos, la suma de las puntuaciones asciende a diez.\n","date":1556942379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"748a548193bcb05086c7e3c5893dab97","permalink":"https://imalexissaez.github.io/2019/05/04/tres-dados-buscando-sumar-diez/","publishdate":"2019-05-04T05:59:39+02:00","relpermalink":"/2019/05/04/tres-dados-buscando-sumar-diez/","section":"post","summary":"Problema 74: reforzando el Principio de inclusión-exclusión.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Tres dados buscando sumar diez","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 73: ¿Cuántos números naturales menores que $10000$ cumplen que la suma de sus cifras es $25$?\n Los números $n$ que nos interesan satisfacen que $0\\leq n\\leq 9999$, esto es, pueden tener hasta cuatro cifras. Como la suma de estas debe ascender a $25$, planteamos la ecuación\n$$ x_1+x_2+x_3+x_4=25, $$\ndonde $0\\leq x_i\\leq 9$, con $1\\leq i\\leq 4$ y representando cada $x_i$ una de las cifras de los números buscados.\nEn ejercicios anteriores analizamos cómo encontrar todas las soluciones enteras no negativas de una ecuación como la planteada, e incluso vimos cuál era la forma de proceder cuando algunas de las variables quedaban afectadas por restricciones de mayor o igual. La forma de resolver este tipo de problemas, cuando surgen restricciones de menor o igual afectando a las variables, será la siguiente: utilizaremos el Principio de complementación, de forma que calcularemos el número de soluciones enteras no negativas de la ecuación propuesta y, después, haciendo uso del Principio de inclusión-exclusión, descontaremos aquellas que no satisfagan las restricciones impuestas.\nAsí pues, empecemos planteando la ecuación\n$$ x_1+x_2+x_3+x_4=25, $$\ncon $x_i\\geq 0$ para todo $1\\leq i\\leq 4$. Consideremos ahora las cuatro variables como cuatro urnas indistinguibles y el valor que aparece en el miembro derecho de la ecuación, $25$, como las $25$ bolas idénticas que vamos a introducir en las urnas. Utilizando la estrategia de barras y estrellas, necesitamos tres barras para representar sobre la recta real las cuatro urnas y buscamos ubicar luego $25$ estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que el valor de la suma de cuatro variables puede ascender a $25$, equivale a la cantidad de permutaciones con repetición de $28$ elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en $25$ ocasiones. Así, hay\n$$ PR_{28}^{3,25} = CR_{4,25} = \\dbinom{28}{25} = \\dfrac{28\\cdot27\\cdot26}{3!} = 3276 $$\nsoluciones enteras no negativas para la ecuación que acabamos de plantear. Entre ellas, será válida, por ejemplo, una solución como $x_1=25$ y $x_2=x_3=x_4=0$, que en el contexto que plantea el enunciado del presente ejercicio es absurda, pues recordemos habíamos dotado a cada una de las variables el significado de ser cifras y, por tanto, sus valores han de estar comprendidos entre cero y nueve. Veamos pues, a continuación, como descontar este tipo de soluciones incorrectas.\nDefinamos, acto seguido, los conjuntos $A_i=\\{x_i\\geq 10\\}$, por lo que estamos interesados en hallar el valor de $card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3} \\cap \\overline{A_4})$. Por el Principio de complementación,\n$$ card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3} \\cap \\overline{A_4}) = card(E) - card(A_1\\cup A_2\\cup A_3\\cup A_4), $$\ndonde por $E$ representamos al conjunto total, que en este contexto se refiere al total de soluciones enteras no negativas de la ecuación planteada y cuyo cardinal hemos obtenido en párrafos anteriores, $PR_{28}^{3,25} = 3276$. Aplicando ahora el *Principio de inclusión-exclusión*,\n$$ card\\left(\\bigcup_{i=1}^{4}{A_i}\\right) = \\sum_{i=1}^{4}{card(A_i)} - \\sum_{1\\leq i \u0026lt; j\\leq 4}{card( A_i\\cap A_j )} + \\cdots + (-1)^{n+1} card\\left(\\bigcap_{i=1}^{4}{A_i}\\right). $$\nEstudiemos ahora el conjunto $A_1 = \\{x_1\\geq 10\\}$ y averigüemos $card(A_1)$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3+x_4=25$, con $x_1\\geq 10$, $x_i\\geq 0$ para $2\\leq i\\leq 4$. Pensando en términos de urnas y bolas, hemos de almacenar diez bolas en la primera urna y pasar a encontrar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3+x_4=15$, ahora con $x_i\\geq 0$, para $1\\leq i\\leq 4$. Aplicando, de manera análoga a como lo hicimos arriba, la técnica de barras y estrellas, sabemos que dicho número equivale al total de permutaciones con repetición de $18$ elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en $15$ ocasiones, esto es,\n$$ PR_{18}^{3,15} = CR_{4,15} = \\dbinom{18}{15} = \\dfrac{18\\cdot17\\cdot16}{3!} = 816. $$\nPor simetría, $card(A_1)=card(A_2)=card(A_3)=card(A_4)=816$, de manera que\n$$ \\sum_{i=1}^{4}{card(A_i)} = 4\\cdot816 = 3264. $$\nAhora, hallemos $card(A_1\\cap A_2)$, donde $A_1\\cap A_2 = \\{x_1\\geq 10, x_2\\geq 10\\}$. La situación requiere calcular el número de soluciones enteras no negativas para la ecuación $x_1+x_2+x_3+x_4=25$, con $x_1\\geq 10$, $x_2\\geq 10$ y $x_i\\geq 0$ para $3\\leq i\\leq 4$. Razonando en términos de urnas y bolas, hemos de almacenar diez bolas en la primera urna, otras tantas en la segunda urna y pasar a buscar entonces el número de soluciones enteras no negativas de la ecuación $x_1+x_2+x_3+x_4=5$, ahora con $x_i\\geq 0$, para $1\\leq i\\leq 4$. Utilizando, como antes, la técnica de barras y estrellas, sabemos que el mencionado número equivale al total de permutaciones con repetición de ocho elementos, donde uno de ellos se repite tres veces, mientras que el otro lo hace en cinco ocasiones, es decir,\n$$ PR_{8}^{3,5} = CR_{4,5} = \\dbinom{8}{5} = \\dfrac{8\\cdot7\\cdot6}{3!} = 56. $$\nPor simetría, el resto de cardinales de los conjuntos $A_{i} \\cap A_{j}$, con $1\\leq i \u0026lt; j \\leq 4$ ascenderán al mismo valor. Como el orden en el que seleccionemos los conjuntos implicados no tiene relevancia y no existe posibilidad de repetir elemento alguno, en total su número será igual a la cantidad de combinaciones de cuatro elementos tomados de dos en dos, $C_{4,2}$, luego\n$$ \\sum_{1 \\leq i \u0026lt; j \\leq 4}{card(A_{i} \\cap A_{j})} = C_{4,2} \\cdot PR_{8}^{3,5} = \\dbinom{4}{2}\\cdot 56 = 336. $$\nActo seguido, el cardinal de los conjuntos $A_i\\cap A_j\\cap A_k$, con $1\\leq i\u0026lt;j\u0026lt;k\\leq 4$ y el del conjunto $A_1\\cap A_2\\cap A_3\\cap A_4$ será cero, pues si tres o más variables poseen un valor mayor o igual que diez, es imposible satisfacer la ecuación $x_1+x_2+x_3+x_4=25$ en los enteros no negativos. Por tanto, recapitulando,\n$$ card(\\overline{A_1} \\cap \\overline{A_2} \\cap \\overline{A_3} \\cap \\overline{A_4}) = 3276 - (3264 - 336) = 346 $$\nson los números naturales menores que $10000$ que cumplen que la suma de sus cifras es $25$.\n","date":1556683179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565042401,"objectID":"78c69b91ebd80d1b3045beccbcd8bbc1","permalink":"https://imalexissaez.github.io/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/","publishdate":"2019-05-01T05:59:39+02:00","relpermalink":"/2019/05/01/una-vuelta-de-tuerca-para-la-estrategia-de-barras-y-estrellas/","section":"post","summary":"Problema 73: retomamos la búsqueda de soluciones enteras.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Una vuelta de tuerca para la estrategia de barras y estrellas","type":"post"},{"authors":null,"categories":null,"content":"","date":1556406001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563750001,"objectID":"36583050d16870cfb9288217ccab2aa5","permalink":"https://imalexissaez.github.io/proyecto/python-basic/","publishdate":"2019-04-28T00:00:01+01:00","relpermalink":"/proyecto/python-basic/","section":"project","summary":"Notas personales del curso 'Python desde 0' ofrecido por 'Píldoras Informáticas'.","tags":["Python"],"title":"Curso Python (Nivel básico)","type":"project"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 72: En una fiesta, a la que acuden seis chicos y seis chicas, comienza a sonar la primera canción,\n (a) ¿de cuantas formas pueden organizarse para bailar todos ellos por parejas? (Asume que una pareja está conformada por un chico y una chica). (b) Como ninguna chica ha quedado contenta con el desempeño en el baile de su pareja, de cara a la segunda canción, ¿de cuántas maneras pueden organizarse para bailar por parejas de forma que no repitan con la anterior?   Para el apartado (a), consideremos, sin pérdida de generalidad, que las chicas escogen su pareja. La primera de ellas dispone, para su elección, de seis opciones, tantas como chicos han acudido a la fiesta. La segunda chica, una vez haya escogido la primera, puede seleccionar su pareja de entre los cinco chicos restantes, y así sucesivamente. Por tanto, utilizando la regla del producto, se pueden organizar de\n$$ 6\\cdot5\\cdot4\\cdot3\\cdot2\\cdot1 = 6! = 720 $$\nformas posibles para bailar por parejas la primera canción.\nAlternativamente, y pensando ya más bien en el próximo apartado, imaginemos que la situación a la hora de emparejarse se produce como sigue: situemos en una fila a los chicos y, en frente de ellos, en otra fila parelela a las chicas. Ellas poseen en sus manos un papel con un número del $1$ al $6$, al igual que ellos. Supongamos que los números de los chicos están ordenados de menor a mayor, situación que, abreviadamente, denotaremos por $123456$. Después, dejamos que las chicas intercambien sus posiciones entre ellas como deseen y saquen a bailar al chico que al final tengan en frente. Así, las chicas podrían ordenarse, en función de los números que llevan entre manos, como $654321$ y se formarían las parejas de baile $(1,6)$, $(2,5)$, $(3,4)$, $(4,3)$, $(5,2)$ y $(6,1)$, que podemos denotar de forma más abreviada como $123456\\rightarrow 654321$. La pregunta que surge ahora es, ¿de cuántas maneras pueden ordenarse las seis chicas? Efectivamente, como el orden es importante y no es posible repetir elemento alguno (una chica no puede bailar a la vez con dos chicos), el total de formas coincide con la cantidad de permutaciones de seis elementos, esto es, $P_6 = 6! = 720$ maneras posibles.\nEn cuanto al apartado (b), comencemos reduciendo un poco la magnitud del problema, para así visualizar cómo abordarlo. Consideremos únicamente tres chicos y tres chicas, y supongamos, por ejemplo, que para la primera canción las parejas se conformaron fueron $123\\rightarrow 123$. Como en la segunda canción ninguna de ellas quiere repetir con la pareja anterior, las dos únicas opciones disponibles serían $123\\rightarrow 231$ y $123\\rightarrow 312$, esto es, los dos desarreglos.\nPor el ejercicio anterior, y ya volviendo al problema que contempla seis chicos y seis chicas, sabemos que\n$$ D_6 = 6!\\left(\\dfrac{1}{2} - \\dfrac{1}{6} + \\dfrac{1}{24} - \\dfrac{1}{120} + \\dfrac{1}{720}\\right) = 265 $$\nson las maneras en que pueden organizarse, para bailar por parejas los seis chicos y las seis chicas, de forma que no repitan con la anterior.\n","date":1556337579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"714327b1e01bfe41afc80b24342f0add","permalink":"https://imalexissaez.github.io/2019/04/27/cuando-bailar-se-convierte-en-un-problema-matematico/","publishdate":"2019-04-27T05:59:39+02:00","relpermalink":"/2019/04/27/cuando-bailar-se-convierte-en-un-problema-matematico/","section":"post","summary":"Problema 72: arreglando parejas descontentas.","tags":["Combinatoria","Problemas"],"title":"Cuando bailar se convierte en un problema matemático","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 71: Un desarreglo es una permutación de objetos en la que ningún objeto está en su posición original. Por ejemplo, $234561$ es un desarreglo de $123456$, pero $213645$ no, ya que $3$ está en su posición original.\n (a) Escribe los desarreglos de $123$. (b) Demuestra que, dados $n$ objetos, el total de desarreglos asciende a  $$ D_n = n!\\left(1-\\dfrac{1}{1!} + \\dfrac{1}{2!} - \\dfrac{1}{3!}+\\cdots+(-1)^n \\dfrac{1}{n!}\\right). $$\n En cuanto al apartado (a), empecemos escribiendo todas las permutaciones de $123$,\n$$ 123,\\quad 132,\\quad 213,\\quad 231,\\quad 312,\\quad 321. $$\nDe entre ellas, descartamos $123$ y $132$, por mantener $1$ su posición original; asimismo hacemos lo propio con $321$, porque $2$ permanece invariante; y con $213$, ya que $3$ continúa en el mismo lugar. Por tanto, dos son los desarreglos de $123$, a saber, $231$ y $312$.\nPara abordar el apartado (b) haremos uso del Principio de complementación, y, en lugar de buscar la cantidad de desarreglos, hallaremos el número de permutaciones que al menos mantienen una cifra en su posición original (los \u0026lsquo;\u0026lsquo;arreglos\u0026rsquo;'), pues, aunque resulte sorprendente a primera vista, es más fácil contar estas últimas. Una vez encontrado dicho número, se lo sustraeremos al total de permutaciones, obteniendo así la cifra de desarreglos.\nPor consiguiente, para empezar, dados $n$ objetos, sabemos que el total de permutaciones posibles asciende a $P_n = n!$. Ahora, definamos $A_i$ como el total de conjuntos en el que $i$ objetos mantienen su posición original, con $1\\leq i\\leq n$. Por tanto, el número de desarreglos vendrá dado por\n$$ D_n = n! - card(A_1\\cup A_2\\cup\\cdots\\cup A_n). $$\nAhora bien, ¿cuántos conjuntos encontramos que se caractericen por mantener un objeto su posición original? De entre los $n$ objetos, seleccionamos uno, acción que podemos llevar a cabo de $C_{n,1}$ maneras posibles. Después, el resto de objetos, $n-1$, simplemente los permutamos, situación que podemos realizar de $P_{n-1} = (n-1)!$ formas posibles. Aplicando la *regla del producto* hay\n$$ C_{n,1}(n-1)! = \\dbinom{n}{1}(n-1)! $$\nconjuntos que mantienen un objeto en su posición original. Análogamente, ¿cuántos conjuntos encontramos que se caractericen por mantener dos objetos sus posiciones originales? De entre los $n$ objetos, seleccionamos dos, acción que podemos llevar a cabo de $C_{n,2}$ maneras posibles. Luego, el resto de objetos, $n-2$, simplemente los permutamos, situación que podemos realizar de $P_{n-2} = (n-2)!$ formas posibles. Aplicando la *regla del producto* hay\n$$ C_{n,2}(n-2)! = \\dbinom{n}{2}(n-2)! $$\nconjuntos que mantienen dos objetos en sus posiciones originales. El mismo razonamiento se puede aplicar para el caso de tres objetos, cuatro objetos, etc.\nPor consiguiente, aplicando el Principio de inclusión-exclusión,\n$$ \\begin{aligned} D_n \u0026amp;= n! - card(A_1\\cup A_2\\cup\\cdots\\cup A_n)\\\n\u0026amp;= n!-\\left(\\dbinom{n}{1}(n-1)! - \\dbinom{n}{2}(n-2)! + \\cdots + (-1)^{n+1} \\dbinom{n}{n}\\right)\\\n\u0026amp;= n! - \\left(\\dfrac{n}{1}\\cdot(n-1)! - \\dfrac{n(n-1)}{2}\\cdot(n-2)! + \\cdots + (-1)^{n+1} \\cdot 1\\right)\\\n\u0026amp;= n! - \\left(\\dfrac{n!}{1} - \\dfrac{n!}{2} + \\cdots + (-1)^{n+1} \\dfrac{n!}{n!}\\right)\\\n\u0026amp;= n!\\left(1 - \\dfrac{1}{1!} + \\dfrac{1}{2!} - \\cdots + (-1)^n \\dfrac{1}{n!}\\right), \\end{aligned} $$\ntal y como queríamos demostrar.\n","date":1556078379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"f64a9d0b7f1d26393d1a499eb12bbfd8","permalink":"https://imalexissaez.github.io/2019/04/24/presentando-desarreglos/","publishdate":"2019-04-24T05:59:39+02:00","relpermalink":"/2019/04/24/presentando-desarreglos/","section":"post","summary":"Problema 71: una aplicación clásica del Principio de inclusión-exclusión.","tags":["Combinatoria","Principio de inclusión-exclusión","Problemas"],"title":"Presentando desarreglos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 70: Suben dos mujeres y tres hombres a un ascensor en la planta baja de un edificio de seis pisos. Averigua de cuántas maneras se pueden bajar del ascensor, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.\n En adelante, vamos a considerar que un edificio de seis pisos posee cinco plantas a las que subir en ascensor, esto es, contaremos la planta baja como un piso más y, obviamente, para acceder a ella no necesitamos utilizar el ascensor.\nEn primer lugar, asumamos que las mujeres son indistinguibles, así como los hombres, pues parece la interpretación más natural tras una primera lectura del enunciado. Empezaremos organizando la bajada de ellas, pues son menos personas a considerar y únicamente encontramos dos opciones posibles: que bajen juntas o por separado.\nSi ambas bajan juntas en un mismo piso, son cinco las opciones que se les presentan disponibles, desde la planta primera hasta la quinta. A continuación, por lo que respecta a los hombres, cuatro son las plantas que les quedan para bajar los tres. Pueden hacerlo los tres juntos en una misma planta, cada uno por separado en plantas distintas, dos en una misma planta y el tercero en otra diferente, y así sucesivamente. Enseguida apreciamos que el problema es equivalente a uno de los tratados anteriormente: disponer sobre urnas indistinguibles cierto número de bolas idénticas.\nEn esta ocasión, las cuatro plantas restantes harían el papel de urnas, mientras que los tres hombres adoptarían el rol de bolas. Utilizando la estrategia de barras y estrellas, necesitamos tres barras para representar sobre la recta real las cuatro urnas y buscamos ubicar luego tres estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que pueden bajar los tres hombres del ascensor, en las cuatro plantas restantes, equivale a la cantidad de permutaciones con repetición de seis elementos, donde cada uno de ellos se repite en tres ocasiones, esto es,\n$$ PR_{6}^{3,3} = CR_{4,3} = \\dbinom{4+3-1}{3} = \\dbinom{6}{3} = 20. $$\nAsí, aplicando la regla del producto, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $5\\cdot20=100$ maneras posibles.\nA continuación, asumamos que las mujeres bajan cada una en una planta diferente. Como hemos supuesto que ambas son indistinguibles, esta acción la pueden realizar de tantas formas como número de combinaciones de cinco elementos tomados de dos en dos hay (puesto que el orden no importa, es indiferente que una baje en el primero y otra en el tercero o en el orden contrario), es decir,\n$$ C_{5,2} = \\dbinom{5}{2} = 10. $$\nAsí, ahora quedan tres pisos disponibles para que bajen los tres hombres. Por un razonamiento similar al llevado a cabo arriba, el problema sería equivalente al de almacenar tres bolas idénticas en tres urnas indistinguibles. Utilizando la estrategia de barras y estrellas, necesitamos dos barras para representar sobre la recta real las tres urnas y buscamos ubicar luego tres estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de formas en que pueden bajar del ascensor los tres hombres, en las tres plantas restantes, equivale a la cantidad de permutaciones con repetición de cinco elementos, donde uno de ellos se repite en tres ocasiones, mientras que el otro lo hace dos veces, esto es,\n$$ PR_{5}^{3,2} = CR_{3,3} = \\dbinom{3+3-1}{3} = \\dbinom{5}{3} = 10. $$\nAsí, aplicando la regla del producto, cuando las dos mujeres bajan por separado, las cinco personas pueden bajar del ascensor de $10\\cdot10=100$ maneras posibles.\nFinalmente, por el principio de adición, son $100+100=200$ las maneras en que dos mujeres y tres hombres pueden bajar del ascensor, en un edificio de seis pisos, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.\nEn segundo lugar, consideremos que las cinco personas son distinguibles (que sería el caso, por ejemplo, de que nos las hubiesen presentado cada una por su nombre). Actuaremos de forma similar a como hicimos en los párrafos anteriores, empezando por estudiar las formas en las que pueden bajar las mujeres: juntas o separadas.\nSi bajan juntas, como antes, son cinco las opciones que se les presentan disponibles, una por cada una de las cinco plantas. Ahora, por lo que respecta a los hombres, les quedan cuatro plantas donde poder bajar del ascensor. Como el orden en esta ocasión sí es importante y en una misma planta pueden bajar varios de ellos, el número de maneras en que pueden bajar equivale a la cantidad de variaciones con repetición de cuatro elementos tomados de tres en tres, esto es, $VR_{4,3} = 4^3 = 256$. Aplicando la *regla del producto*, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $5\\cdot256 = 1280$ maneras posibles.\nSi las mujeres bajan por separado, dado que importa el orden en el que lo hagan, la cantidad de formas en que pueden hacerlo asciende al total de variaciones de cinco elementos tomadas de dos en dos, es decir, $V_{5,2} = 5\\cdot4 = 20$. Ahora, por lo que respecta a los hombres, les quedan tres plantas donde poder bajar del ascensor. Como el orden en esta ocasión sí es importante y en una misma planta pueden bajar varios de ellos, el número de maneras en que pueden bajar equivale a la cantidad de variaciones con repetición de tres elementos tomados de tres en tres, esto es, $VR_{3,3} = 3^3 = 27$. Aplicando la *regla del producto*, cuando las dos mujeres bajan juntas, las cinco personas pueden bajar del ascensor de $20\\cdot27 = 540$ maneras posibles.\nFinalmente, por el principio de adición, son $1280+540=1820$ las maneras en que dos mujeres y tres hombres (todos ellos distinguibles) pueden bajar del ascensor, en un edificio de seis pisos, sabiendo que en un mismo piso no pueden bajar personas de distinto sexo.\nNota: si interpretamos el enunciado asignando seis plantas al edificio, habremos de llevar a cabo las oportunas correcciones en el argumento expuesto.\n","date":1555732779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"6ea1a7ddfb3d3035fb563e9450c16593","permalink":"https://imalexissaez.github.io/2019/04/20/organizando-las-bajadas-del-ascensor/","publishdate":"2019-04-20T05:59:39+02:00","relpermalink":"/2019/04/20/organizando-las-bajadas-del-ascensor/","section":"post","summary":"Problema 70: de barras, estrellas y... ¿ascensores?","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Organizando las bajadas del ascensor","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 69: Obtén el número de diagonales que se pueden trazar en un cuadrado, en un hexágono y en un polígono de $n$ lados. ¿Existe algún polígono tal que el número de lados coincide con el número de diagonales?\n A la vista de la figura siguiente, por recuento, concluimos que un cuadrado posee dos diagonales, mientras que en un hexágono el número de diagonales asciende a nueve.\n\r\rRepresentación gráfica de dos casos sencillos.\r\r\rEn general, para poder dibujar una diagonal necesitamos unir dos de los vértices del correspondiente polígono, por lo que hemos de ser capaces de averiguar el número de formas en que podemos seleccionar los mencionados dos vértices. Como no importa el orden en el que los escojamos, el total equivale a la cantidad de combinaciones de $n$ elementos tomados de dos en dos, esto es, a $C_{n,2}$. No obstante, hemos de actuar con cautela, puesto que, de la manera indicada, estaríamos considerando como diagonal también la unión de dos vértices contiguos, es decir, cada uno de los lados. Así pues, sustrayendo estos, la cantidad de diagonales de un polígono de $n$ lados asciende a\n$$ C_{n,2} - n = \\dbinom{n}{2} - n = \\dfrac{n(n-1)}{2} - n = \\dfrac{n^2-n-2n}{2} = \\dfrac{n^2-3n}{2}. $$\nAlternativamente, fijado un vértice del polígono de $n$ lados, generamos diagonales si lo unimos con los vértices que no le son contiguos, es decir, con los restantes $n-3$ vértices. Así, cada vértice posee asociadas $n-3$ diagonales. Como contamos con $n$ vértices, aplicando la regla del producto, hablaríamos de un total de $n(n-3)$ diagonales. Sin embargo, procediendo así, debemos pensar que cada diagonal se cuenta en dos ocasiones, de manera que, corrigiendo por dicho factor, el total de diagonales de un polígono de $n$ lados es\n$$ \\dfrac{n(n-3)}{2} = \\dfrac{n^2 -3n}{2} $$\ncomo antes.\nAhora, para dar respuesta a la pregunta planteada en el enunciado del ejercicio, igualando el total de diagonales de un polígono de $n$ lados con su número de lados, tenemos\n$$ \\dfrac{n^2 -3n}{2} = n. $$\nEs decir, se conforma la ecuación $n^2 -3n=2n$ o, equivalentemente, $n^2 -5n=0$. Esta posee dos soluciones, la trivial, $n=0$, que rechazamos por no conformar un polígono propiamente dicho; y $n=5$, esto es, el pentágono es el único polígono cuyo número de lados coincide con su cantidad de diagonales.\n","date":1555473579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"8e905067385ee3d7adf0e992ab5471d3","permalink":"https://imalexissaez.github.io/2019/04/17/contando-diagonales-en-un-poligono/","publishdate":"2019-04-17T05:59:39+02:00","relpermalink":"/2019/04/17/contando-diagonales-en-un-poligono/","section":"post","summary":"Problema 69: geometría y combinatoria de la mano.","tags":["Combinatoria","Problemas"],"title":"Contando diagonales en un polígono","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 68: En un puesto de mando, para transmitir señales, hay en línea recta cuatro astas. En cada asta solamente se puede colocar una bandera. Las señales consisten en colocar banderas de distintos colores en dichas astas. Según el número de banderas colocadas, colores de las mismas y lugar que ocupen, la señal será distinta. Halla el número de señales que se pueden transmitir si se posee un juego de siete banderas con los colores del arco iris.\n Una de las claves de este ejercicio pasa por darse cuenta de que en cada asta se \u0026lsquo;\u0026lsquo;puede\u0026rsquo;\u0026rsquo; colocar (o no) una bandera para transmitir una determinada señal. Así pues, hemos de discutir las opciones posibles, para las señales disponibles, en función del número de astas empleadas:\n Si emplean las cuatro astas, dado que el orden en el que coloquen las banderas importa y no es posible repetir bandera alguna, la cantidad de señales que pueden transmitir en este caso equivale al número de variaciones de siete elementos tomados de cuatro en cuatro, esto es,  $$ V_{7,4} = 7\\cdot6\\cdot5\\cdot4 = 840. $$\n Si utilizan tres astas, ello implica que de las cuatro disponibles han de escoger tres, acción que pueden llevar a cabo de $C_{4,3}$ maneras posibles. Una vez escogidas las astas, como el orden en el que coloquen las banderas importa y no pueden repetir bandera alguna, podrían transmitir, para una elección de astas particular, un total de señales que asciende al número de variaciones de siete elementos tomados de tres en tres, es decir, $V_{7,3}$. Ahora, aplicando la *regla del producto*, utilizando tres astas pueden transmitir un número de señales que asciende a  $$ C_{4,3}\\cdot V_{7,3} = \\dbinom{4}{3}\\cdot7\\cdot6\\cdot5 = 840. $$\n Si utilizan dos astas, ello implica que de las cuatro disponibles han de escoger dos, acción que pueden llevar a cabo de $C_{4,2}$ maneras posibles (aquí, como antes, no importa el orden, pues es igual escoger las astas primera y segunda, que las astas segunda y primera, lo importante ahora es seleccionar dos astas). Una vez escogidas las astas, como el orden en el que coloquen las banderas importa y no pueden repetir bandera alguna, podrían transmitir, para una elección de astas particular, un total de señales que asciende al número de variaciones de siete elementos tomados de dos en dos, es decir, $V_{7,2}$. Ahora, aplicando la *regla del producto*, utilizando dos astas pueden transmitir un número de señales que asciende a  $$ C_{4,2}\\cdot V_{7,2} = \\dbinom{4}{2}\\cdot7\\cdot6 = 252. $$\n Si utilizan una asta, ello implica que de las cuatro disponibles han de escoger una, acción que pueden llevar a cabo de cuatro maneras posibles. Una vez escogida, tienen siete opciones de cara a escoger la bandera que emplearán para transmitir la señal. Ahora, aplicando la regla del producto, utilizando una asta pueden transmitir un número de señales que asciende a  $$ C_{4,1}\\cdot V_{7,1} = 4\\cdot7 = 28. $$\n Finalmente, existe una posibilidad adicional que hemos de considerar y consiste en que no utilicen bandera alguna para transmitir una determinada señal (esto es, que no hagan uso de ninguna asta).  Recapitulando, si se posee un juego de siete banderas con los colores del arco iris y cuatro astas donde colocarlas, podrán transmitir un total de\n$$ 840+840+252+28+1 = 1961 $$\nseñales.\n","date":1555127979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"5213b50edb6c8bc2788275f062d20048","permalink":"https://imalexissaez.github.io/2019/04/13/de-astas-banderas-y-un-poco-de-combinatoria/","publishdate":"2019-04-13T05:59:39+02:00","relpermalink":"/2019/04/13/de-astas-banderas-y-un-poco-de-combinatoria/","section":"post","summary":"Problema 68: una curiosa manera de transmitir señales.","tags":["Combinatoria","Problemas"],"title":"De astas, banderas y un poco de combinatoria","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 67: Encuentra el número de maneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si\n (a) hombres y mujeres se alternan. (b) cada mujer está sentada al lado de su marido.   Para el apartado (a) empecemos sentando, por ejemplo, a los hombres (podríamos haber iniciado la resolución colocando a las mujeres asimismo, pues el número de personas coincide). Sabemos, por ejercicios anteriores, que el total de formas de sentar a $n$ personas alrededor de una mesa asciende al total de permutaciones circulares de $n$ elementos, esto es, hay\n$$ PC_n = (n-1)! $$\nmaneras. A continuación, comencemos a sentar mujeres. La primera de ellas puede hacerlo en cualesquiera de los $n$ huecos que la configuración de los hombres produce. Para la segunda, una vez sentada la primera, son $n-1$ las opciones que tiene a su disposición para ubicarse. En cuanto a la tercera, una vez sentadas las dos anteriores, tiene a su disposición $n-2$ asientos para escoger su sitio, y así sucesivamente. Aplicando la regla del producto, hay\n$$ (n-1)!\\cdot n\\cdot(n-1)\\cdot(n-2)\\cdot\\ldots\\cdot2\\cdot1 = (n-1)!n! $$\nmaneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si hombres y mujeres han de alternar sus sitios.\nPara el apartado (b), consideremos cada matrimonio como una unidad indivisible. Sabemos, por ejercicios anteriores, que el número de formas de disponer $n$ elementos alrededor de una mesa equivale al total de permutaciones circulares de $n$ elementos, es decir, $PC_n = (n-1)!$. Ahora bien, el primer matrimonio puede sentarse de dos maneras posibles (hombre - mujer o mujer - hombre), hecho que hemos de tener en cuenta. Lo mismo sucede para el segundo matrimonio, para el tercero, y así sucesivamente. Por consiguiente, aplicando la regla del producto, existen\n$$ (n-1)!\\cdot2\\cdot2\\cdot\\ldots\\cdot2 = (n-1)!\\cdot2^n $$\nmaneras en que pueden sentarse $n$ matrimonios alrededor de una mesa si cada mujer ha de estar sentada al lado de su marido. Alternativamente, podemos abordar este apartado sentando primero a los hombres, acción que sabemos podemos llevar a cabo de $PC_n=(n-1)!$ formas posibles y luego considerar que cada mujer tiene sus opciones bastante limitadas a la hora de sentarse, pues únicamente puede hacerlo de dos manera posibles (a la izquierda o a la derecha de su marido). Como hemos de colocar $n$ mujeres asumiendo la restricción anterior, son $2^n$ las formas posibles y aplicando la regla del producto se llega al resultado alcanzado arriba.\n","date":1554868779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"7d1ca48397bc6b29f2023449fe377e00","permalink":"https://imalexissaez.github.io/2019/04/10/uno-mas-alrededor-de-la-mesa/","publishdate":"2019-04-10T05:59:39+02:00","relpermalink":"/2019/04/10/uno-mas-alrededor-de-la-mesa/","section":"post","summary":"Problema 67: ¡otra ronda de permutaciones circulares!","tags":["Combinatoria","Permutaciones circulares","Problemas"],"title":"Uno más alrededor de la mesa","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 66: ¿De cuántas maneras pueden cinco chicos y tres chicas sentarse alrededor de una mesa si\n a) no hay restricción alguna? b) el chico $H_1$ y la chica $M_1$ no pueden estar juntos? c) ninguna chica ha de tener a otra a su lado?   Para el apartado a), al no imponer restricción alguna sobre la disposición de los ocho integrantes del grupo, el número de formas en las que pueden sentarse alrededor de una mesa equivale al total de permutaciones circulares de ocho elementos. Así, tienen\n$$ PC_8 = (8-1)! = 7! = 5040 $$\nmaneras de sentarse alrededor de la mesa.\nPor lo que respecta al apartado b), ya que acabamos de calcular en el párrafo anterior el total de maneras en que pueden sentarse, resulta más sencillo utilizar ahora el Principio de complementación, que recordemos dice si $A$ es un subconjunto de un conjunto finito universal $U$, entonces\n$$ card(U - A) = card(U) - card(A). $$\nDe esta forma, en lugar de contar el número de formas en que $H_1$ y $M_1$ pueden sentarse estando separados (es decir, con al menos un integrante del grupo entre ellos), averigüemos de cuántas maneras pueden sentarse todos alrededor de la mesa estando $H_1$ y $M_1$ juntos. Así, si consideramos la pareja como una unidad, el nuevo problema se reduce a encontrar el número de formas en que pueden disponerse siete elementos alrededor de una mesa, que sabemos equivale al total de permutaciones circulares de siete elementos, esto es,\n$$ PC_7 = (7-1)! = 6! = 720. $$\nAhora bien, como la pareja puede sentarse de maneras posibles, ($H_1M_1$ y $M_1H_1$), hemos de incorporar las permutaciones de dos elementos ($2! = 2$) al anterior resultado, aplicando la regla del producto. Por consiguiente, existen $720\\cdot2 = 1440$ formas de sentarse los ocho integrantes del grupo asumiendo que $H_1$ y $M_1$ se colocaron uno al lado del otro. Luego, por el Principio de complementación hay\n$$ 7! - 1440 = 3600 $$\nmaneras de disponer a los miembros del grupo donde $H_1$ y $M_1$ no están juntos.\nFinalmente, en el apartado c), comencemos sentando a los chicos en la tabla, ya que su número es más elevado que el de chicas. Por apartados anteriores, sabemos que el número de formas de sentar cinco personas alrededor de una tabla asciende al total de permutaciones circulares de cinco elementos, esto es,\n$$ PC_5 = (5-1)! = 4! = 24 $$\nmaneras posibles. A continuación, en los huecos que quedan entre ellos, empecemos a sentar chicas. Para la primera de ella encontramos cinco opciones disponibles, pues tal es el número de huecos que quedan entre los chicos. Para la segunda chica, una vez sentada la primera, dichas opciones se reducen a cuatro. Por último, la tercera chica, una vez sentadas las otras dos, puede escoger entre las tres posiciones disponibles que restan. Luego, aplicando la regla del producto hay\n$$ 4! \\cdot 5\\cdot 4\\cdot3 = 1440 $$\nmaneras de disponer a los ocho integrantes del grupo de forma que ninguna chica tenga a otra a su lado.\n","date":1554523179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"a8627ec08da002b9974ad6f823856201","permalink":"https://imalexissaez.github.io/2019/04/06/a-la-mesa-todos-a-la-mesa/","publishdate":"2019-04-06T05:59:39+02:00","relpermalink":"/2019/04/06/a-la-mesa-todos-a-la-mesa/","section":"post","summary":"Problema 66: introduciendo las permutaciones circulares.","tags":["Combinatoria","Permutaciones circulares","Problemas"],"title":"¡A la mesa! ¡Todos a la mesa!","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 65: ¿Cuántos términos tiene la expansión de $(x_1+x_2+\\cdots+x_s)^n$?\n Empecemos estudiando algunos casos sencillos para comprobar si podemos inferir algún patrón de comportamiento. Por ejemplo, sabemos que\n$$ (x+y)^2 = x^2 + y^2 + xy, $$\nes decir, la expansión de $(x+y)^2$ posee tres términos. Análogamente,\n$$ (x+y)^3 = x^3 + 3x^2 y + 3xy^2 + y^3, $$\nesto es, la expansión de $(x+y)^3$ posee cuatro términos. En general, por el Teorema del binomio,\n$$ (x+y)^n = \\dbinom{n}{0}x^n y^0 + \\dbinom{n}{1}x^{n-1} y^1+\\cdots+\\dbinom{n}{n}x^0 y^n. $$\nRápidamente observamos que cada uno de los sumandos del anterior desarrollo posee una peculiar característica: la suma de las potencias de $x$ e $y$ asciende a $n$, el grado del binomio. Esto es cierto asimismo para los dos primeros ejemplos que consideramos arriba, sin más que escribirlos de la siguiente manera para que quede patente,\n$$ \\begin{aligned} (x+y)^2 \u0026amp;= x^2 y^0 + y^2 x^0 + x^1 y^1,\\\n(x+y)^3 \u0026amp;= x^3 y^0 + 3x^2 y^1 + 3x^1 y^2 + y^3 x^0. \\end{aligned} $$\nAsí pues, estamos interesados en saber de cuántas maneras podemos repartir el grado entre las variables involucradas en el desarrollo. En los ejemplos anteriores, $x$ e $y$ jugarían el papel de dos urnas indistinguibles, mientras que el grado $n$ adoptaría el rol de las $n$ bolas idénticas. Utilizando la estrategia de barras y estrellas, necesitamos una barra para representar sobre la recta real las dos urnas y buscamos ubicar luego $n$ estrellas en los huecos que dicha configuración produce. Por consiguiente, el número de términos en la expansión de un binomio de grado $n$, equivale a la cantidad de permutaciones con repetición de $n+1$ elementos, donde uno de ellos se repite una vez, mientras que el otro lo hace en $n$ ocasiones. Así, hay\n$$ PR_{n+1}^{1,n} = \\dfrac{(n+1)!}{1!\\cdot n!} = n+1 $$\ntérminos en el desarrollo de un binomio de grado $n$.\nPor otro lado,\n$$ (x+y+z)^2 = x^2 +y^2 +z^2 +2xy+2xz+2yz, $$\nesto es, el desarrollo de $(x+y+z)^2$ posee seis términos. Si lo escribimos como\n$$ \\begin{aligned} (x+y+z)^2 \u0026amp;= x^2 y^0 z^0 + x^0 y^2 z^0 + x^0 y^0 z^2\\\n\u0026amp;\\quad + 2x^1 y^1 z^0 + 2x^1 y^0 z^1 + 2x^0 y^1 z^1, \\end{aligned} $$\nrápidamente apreciamos que estamos repartiendo el grado, $2$, en tres urnas indistinguibles, $x$, $y$ y $z$. Aplicando, como antes, la estrategia de barras y estrellas, dicha acción la podemos llevar a cabo de\n$$ PR_{2+2}^{2,2} = PR_{4}^{2,2} = \\dfrac{4!}{2!\\cdot 2!} = 6 $$\nformas posibles.\nEn general, para la expresión $(x_1+x_2+\\cdots+x_s)^n$ vamos a considerar que disponemos de $s$ urnas indistinguibles, las respectivas variables $x_1,x_2,\\ldots,x_s$. En ellas buscamos repartir $n$ bolas idénticas, el grado $n$. Utilizando la estrategia de barras y estrellas, necesitamos $s-1$ barras para representar sobre la recta real las $s$ urnas y buscamos ubicar luego $n$ estrellas en los huecos que dicha configuración produce. Por tanto, el número de términos del desarrollo de $(x_1+x_2+\\cdots+x_s)^n$, equivale a la cantidad de permutaciones con repetición de $s-1+n$ elementos, donde uno de ellos se repite $s-1$ veces, mientras que el otro hace en $n$ ocasiones. Así, hay\n$$ PR_{s-1+n}^{s-1,n} = \\dfrac{(n+s-1)!}{n!(s-1)!} $$\ntérminos en el desarrollo de $(x_1+x_2+\\cdots+x_s)^n$.\n","date":1554263979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564956001,"objectID":"cbdf0e6cac4c7d71d139429dd908e52a","permalink":"https://imalexissaez.github.io/2019/04/03/buscando-el-numero-de-terminos-ando/","publishdate":"2019-04-03T05:59:39+02:00","relpermalink":"/2019/04/03/buscando-el-numero-de-terminos-ando/","section":"post","summary":"Problema 65: trabajando con desarrollos de polinomios.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas","Teorema del binomio"],"title":"Buscando el número de términos ando","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 64:\n (a) Demuestra que escogidos siete números enteros al azar, la diferencia entre dos de ellos es múltiplo de seis. (b) Demuestra que todo número entero $n$ tiene un múltiplo cuya expresión decimal está compuesta por ceros y unos.   Para el apartado (a), empecemos considerando un ejemplo concreto: sean los números enteros, escogidos al azar, $53$, $75$, $32$, $7$, $83$, $1$ y $10$. Si obtenemos el valor de la congruencia de cada uno de ellos módulo seis, es cierto que\n$$ \\begin{aligned} 53\u0026amp;\\equiv 5\\pmod{6},\\\n75\u0026amp;\\equiv 3\\pmod{6},\\\n32\u0026amp;\\equiv 2\\pmod{6},\\\n7\u0026amp;\\equiv 1\\pmod{6},\\ 83\u0026amp;\\equiv 5\\pmod{6},\\\n1\u0026amp;\\equiv 1\\pmod{6},\\\n10\u0026amp;\\equiv 4\\pmod{6}. \\end{aligned} $$\nBasta ahora tomar dos cuyo valor de la congruencia módulo seis coincida para encontrar un múltiplo de seis. Efectivamente, por ejemplo,\n$$ 83-53=30 = 6\\cdot5. $$\nEn general, como el menor sistema completo de restos módulo $6$ está conformado por seis valores, $\\{0,1,2,3,4,5\\}$, dados siete números escogidos al azar sabemos, por el Principio del palomar, que al menos dos de ellos poseerán el mismo valor de la congruencia módulo seis. Esto es, existen al menos $x, y\\in\\mathbb{Z}$ tal que $x\\equiv a\\pmod{6}$ e $y\\equiv a\\pmod{6}$, con $a\\in\\{0,1,2,3,4,5\\}$. Por consiguiente,\n$$ (x-y)\\equiv (a-a)\\pmod{6}\\equiv 0\\pmod{6}, $$\nes decir, la diferencia es múltiplo de seis.\nPara el apartado (b) utilizaremos la misma estrategia, pero escogiendo los números con cautela, ya que buscamos que el múltiplo que nos interesa únicamente posea en su expresión decimal ceros y unos. Como antes, empecemos considerando un ejemplo concreto: sea $n=6$. Trabajemos pues con el conjunto de siete números\n$$ {1,11,111,1111,11111,111111,1111111}, $$\npara el que, por el Principio del palomar, sabemos que al menos dos de ellos poseerán el mismo valor de su congruencia módulo seis. Efectivamente,\n$$ 1\\equiv 1\\pmod{6}\\qquad\\text{y}\\qquad 1111\\equiv 1\\pmod{6}. $$\nAsí, $(1111 - 1)\\equiv 0\\pmod{6}$, esto es, $1110 = 6\\cdot185$ es múltiplo de $6$ y en su expresión decimal únicamente aparecen ceros y unos.\nEn general, dado un número natural $n$, consideramos el conjunto\n$$ {1,11,111,1111,\\ldots} $$\nde $n+1$ elementos. Por el Principio del palomar, al menos dos de dichos elementos poseerán el mismo valor de su congruencia módulo $n$. Designemos por $a$ y $b$ a tales elementos que verifican $a\\equiv x\\pmod{n}$ y $b\\equiv x\\pmod{n}$, entonces $(a-b)\\equiv 0\\pmod{n}$, esto es, la diferencia entre ellos es múltiplo de $n$, y, por tal y como hemos construido el anterior conjunto, su expresión únicamente poseerá ceros y unos.\nA modo anecdótico, si en el problema nos hubiesen solicitado demostrar que todo número entero $n$ tiene un múltiplo cuya expresión decimal está compuesta por ceros y doses, habría bastado considerar un conjunto del tipo\n$$ {2,22,222,2222,\\ldots}. $$\nVariantes similares del problema únicamente exigen encontrar un conjunto adecuado al que aplicar la estrategia esbozada en párrafos anteriores.\n","date":1553918379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564873201,"objectID":"40f30cdcaf4cecedccd115ab2dc5a8ac","permalink":"https://imalexissaez.github.io/2019/03/30/un-curioso-multiplo-que-todo-numero-posee/","publishdate":"2019-03-30T05:59:39+02:00","relpermalink":"/2019/03/30/un-curioso-multiplo-que-todo-numero-posee/","section":"post","summary":"Problema 64: una aplicación del principio del palomar.","tags":["Combinatoria","Principio del palomar","Problemas"],"title":"Un curioso múltiplo que todo número posee","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 63: ¿Cuántos números entre $1$ y $600$ no son divisibles por $3$, ni por $5$, ni por $7$?\n Emplearemos el Principio de inclusión-exclusión para resolver el presente problema. Así, definamos los conjuntos\n $3$ como \u0026lsquo;\u0026lsquo;conjunto de números menores o iguales que $600$ que son divisibles por $3$\u0026rsquo;', $5$ como \u0026lsquo;\u0026lsquo;conjunto de números menores o iguales que $600$ que son divisibles por $5$\u0026rsquo;', y $7$ como \u0026lsquo;\u0026lsquo;conjunto de números menores o iguales que $600$ que son divisibles por $7$\u0026rsquo;'.  Estamos interesados en el cardinal del conjunto de números que, precisamente, no son divisibles por $3$, ni por $5$, ni por $7$, esto es, $card(\\overline{3}\\cap\\overline{5}\\cap\\overline{7})$ . Ahora bien, por las Leyes de DeMorgan, trabajaremos con el suceso complementario, ya que es más fácil contar múltiplos que números que no son múltiplos,\n$$ card(\\overline{3}\\cap\\overline{5}\\cap\\overline{7}) = card(\\overline{3\\cup 5\\cup 7}) = card(E) - card(3\\cup 5\\cup 7), $$\ndonde por $E$ representamos el conjunto de los números enteros positivos menores o iguales que $600$, es decir, el conjunto total, cuyo cardinal asciende, en esta ocasión concreta, a $600$. Por tanto,\n$$ card(\\overline{3}\\cap\\overline{5}\\cap\\overline{7}) = 600 - card(3\\cup 5\\cup 7). $$\nA continuación, por el Principio de inclusión-exclusión,\n$$ \\begin{aligned} card(3\\cup 5\\cup 7) \u0026amp;= card(3) + card(5) + card(7)\\\n\u0026amp;\\quad -card(3\\cap 5) - card(3\\cap 7) - card(5\\cap 7)\\\n\u0026amp;\\quad +card(3\\cap 5\\cap 7), \\end{aligned} $$\ndonde\n $card(3)$ representa el total de múltiplos de $3$ menores o iguales que $600$, esto es,  $$ card(3) = \\left\\lfloor\\dfrac{600}{3}\\right\\rfloor=200. $$\n $card(5)$ representa el total de múltiplos de $5$ menores o iguales que $600$, esto es,  $$ card(5) = \\left\\lfloor\\dfrac{600}{5}\\right\\rfloor=120. $$\n $card(7)$ representa el total de múltiplos de $7$ menores o iguales que $600$, esto es,  $$ card(7) = \\left\\lfloor\\dfrac{600}{7}\\right\\rfloor=85. $$\n $card(3\\cap 5)$ representa el total de múltiplos de $3$ y de $5$ menores o iguales que $600$, esto es,  $$ card(3\\cap 5) = \\left\\lfloor\\dfrac{600}{3\\cdot 5}\\right\\rfloor=40. $$\n $card(3\\cap 7)$ representa el total de múltiplos de $3$ y de $7$ menores o iguales que $600$, esto es,  $$ card(3\\cap 7) = \\left\\lfloor\\dfrac{600}{3\\cdot 7}\\right\\rfloor=28. $$\n $card(5\\cap 7)$ representa el total de múltiplos de $5$ y de $7$ menores o iguales que $600$, esto es,  $$ card(5\\cap 7) = \\left\\lfloor\\dfrac{600}{5\\cdot 7}\\right\\rfloor=17. $$\n $card(3\\cap 5\\cap 7)$ representa el total de múltiplos de $3$, de $5$ y de $7$ menores o iguales que $600$, esto es,  $$ card(3\\cap 5\\cap 7) = \\left\\lfloor\\dfrac{600}{3\\cdot 5\\cdot 7}\\right\\rfloor=5. $$\nPor consiguiente,\n$$ card(\\overline{3}\\cap\\overline{5}\\cap\\overline{7}) = 600 - (200 + 120 + 85 - 40 - 28 - 17 + 5) = 275, $$\nes decir, hay $275$ números entre $1$ y $600$, ambos inclusive, que no son divisibles por $3$, ni por $5$, ni por $7$.\n","date":1553659179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"e5f290c54b247adb636e386010f1d648","permalink":"https://imalexissaez.github.io/2019/03/27/contando-multiplos-a-traves-del-pie/","publishdate":"2019-03-27T05:59:39+02:00","relpermalink":"/2019/03/27/contando-multiplos-a-traves-del-pie/","section":"post","summary":"Problema 63: un resultado útil donde los haya.","tags":["Combinatoria","Principio de inclusión-exclusión","Problemas"],"title":"Contando múltiplos a través del PIE","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 62: Calcula el número de soluciones enteras de la ecuación\n$$ x_1+x_2+\\cdots+x_8=24, $$\ndonde $x_i\\geq 2$, para $1\\leq i\\leq 8$.\n A diferencia del ejercicio anterior, aquí no buscamos hallar el total de soluciones enteras no negativas de la ecuación, pues nos indican que $x_i\\geq 2$, para todo $1\\leq i\\leq 8$. No obstante, podemos razonar de la siguiente forma: asumamos que disponemos de ocho urnas indistinguibles entre sí y almacenemos dos bolas en cada una de ellas para empezar. De esta manera, quedarán $24 - 2\\cdot8 = 8$ bolas idénticas por introducir en las urnas, acción que podemos llevar a cabo de\n$$ PR_{15}^{8,7} = \\dfrac{15!}{8!\\cdot 7!} = \\dfrac{15\\cdot14\\cdot13\\cdot12\\cdot11\\cdot10\\cdot9}{7!} = 6435 $$\nmaneras posibles. A este resultado hemos arribado, recordemos, dado que son necesarias siete barras, para representar las ocho urnas sobre la recta real, y hemos de almacenar ocho estrellas en los huecos que dicha configuración produce. Así pues, son $6435$ el número de soluciones enteras para la ecuación planteada, considerando que $x_i\\geq 2$, para todo $1\\leq i\\leq 8$.\nSi nos damos cuenta, simplemente hemos ignorado aquella parte del problema que sabemos está fija. Técnicamente, esta acción es equivalente a llevar a cabo un cambio de variable del tipo\n$$ x_i = x^{\\prime}_i + 2, $$\npara $1\\leq i\\leq 8$, que transforma la ecuación inicial planteada en\n$$ (x^{\\prime}_1 + 2) + (x^{\\prime}_2 + 2) + \\cdots + (x^{\\prime}_8+2) = 24, $$\nque es equivalente a $x^{\\prime}_1 +x^{\\prime}_2 +\\cdots+x^{\\prime}_8 =8$, con la salvedad de que ahora $x^{\\prime}_i\\geq 0$, para todo $1\\leq i\\leq 8$ y entonces ahora basta con aplicar los métodos que utilizamos en ejercicios anteriores.\n","date":1553313579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"dafd7e407fcfb21cc2464cb91dff05b8","permalink":"https://imalexissaez.github.io/2019/03/23/comenzando-con-la-combinatoria-iv/","publishdate":"2019-03-23T05:59:39+02:00","relpermalink":"/2019/03/23/comenzando-con-la-combinatoria-iv/","section":"post","summary":"Problema 62: presentando la estrategia de barras y estrellas.","tags":["Combinatoria","Estrategia de barras y estrellas","Problemas"],"title":"Comenzando con la combinatoria (IV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 61:\n (a) ¿Cuántas fichas tiene el dominó? (b) Tenemos siete urnas indistinguibles entre sí y dos bolas idénticas, ¿de cuántas formas se pueden meter las bolas en las urnas? (c) Calcula el número de soluciones enteras no negativas de la ecuación $x_1+x_2+\\cdots+x_7=2$.   Para el apartado (a), en las fichas del dominó encontramos representados los números desde el $0$ (blanca) al $6$, que aparecen de dos en dos. Por ejemplo, son fichas de este juego los pares $(1,2)$ o $(6,0)$. Por otro lado, el orden en que escojamos los números para conformar una ficha no importa, pues, por ejemplo, los pares $(1,2)$ y $(2,1)$ representan una única ficha del dominó. Finalmente, el juego incorpora fichas en la que se repiten los elementos, como $(0,0)$ o $(5,5)$, por nombrar algunas. Por tanto, estamos interesados en el total de combinaciones con repetición de siete elementos tomados de dos en eso y, entonces, hay\n$$ CR_{7,2} = \\dbinom{7+2-1}{2} = \\dbinom{8}{2} = \\dfrac{8\\cdot7}{2} = 28 $$\nfichas en el juego del dominó.\nA continuación, en el apartado (b), si representamos gráficamente nuestras siete urnas indistinguibles como sigue\n$$ (\\ \\ |\\ \\ |\\ \\ |\\ \\ |\\ \\ |\\ \\ |\\ \\ ), $$\nesto es, como si pusiéramos seis rayas sobre la recta real y representamos las bolas como $*$, una posible configuración sería\n$$ (\\ \\ ||\\ \\ ||\\ \\ |\\ \\ |\\ \\ ). $$\nNo obstante, si ahora movemos la última raya al principio, la anterior configuración se convierte en\n$$ (\\ \\ |\\ \\ ||\\ \\ ||\\ \\ |\\ \\ ). $$\nAsí pues, observamos que, de cara a contar posibilidades en este apartado, es como si tuviéramos ocho elementos (las dos bolas, $*$, y las seis rayas, $|$) de dos tipos. Uno de ellos se repite dos veces (las bolas), mientras que el otro se repite en seis ocasiones (las rayas). Por tanto, hay\n$$ PR_{8}^{2,6} = \\dfrac{8!}{2!\\cdot6!} = \\dfrac{8\\cdot7}{2}=28 $$\nformas de introducir dos bolas idénticas en siete urnas indistinguibles entre sí.\nFinalmente, para el apartado (c ), de cara a encontrar las soluciones enteras no negativas de la ecuación $x_1+x_2+\\cdots+x_7=2$, observamos rápidamente que cada variable puede tomar, como máximo, los valores $0$, $1$ o $2$. Así pues, podemos representar la situación como hicimos en el apartado anterior, donde ahora cada \u0026lsquo;\u0026lsquo;urna\u0026rsquo;\u0026rsquo; sería cierta variable $x_i$, con $i=1,2,\\ldots,7$, y el valor de dicha variable vendría dado por el número de \u0026lsquo;\u0026lsquo;bolas\u0026rsquo;\u0026rsquo; que tuviese en su interior (para un $i$ dado, con $0$ bolas, $x_i=0$; con $1$ bola, $x_i=1$; y con $2$ bolas, $x_i=2$). Por tanto, razonando como antes, la ecuación dada posee\n$$ PR_{8}^{2,6} = \\dfrac{8!}{2!\\cdot6!} = \\dfrac{8\\cdot7}{2}=28 $$\nsoluciones enteras no negativas.\nPor otro lado, si recordamos de ejercicios anteriores, podemos utilizar las combinaciones con repetición como herramienta para contar el número de bolas idénticas que introducimos en urnas indistinguibles entre sí. Considerando esto, el presente ejercicio se reduce a calcular $CR_{7,2}$. En resumen,\n hallar el número de soluciones de la ecuación $x_1+x_2+\\cdots+x_n=r$, con $x_i\\geq 0$ para $1\\leq i\\leq n$ y $r$ entero no negativo, encontrar el número de maneras de seleccionar una muestra de tamaño $r$, con elementos repetidos o no, de una colección de tamaño $n$, y calcular el número de formas de distribuir $r$ objetos idénticos entre $n$ destinatarios distintos  es lo mismo.\n","date":1553054379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"c07944867656498f82f1520c3d73aba8","permalink":"https://imalexissaez.github.io/2019/03/20/comenzando-con-la-combinatoria-iii/","publishdate":"2019-03-20T05:59:39+02:00","relpermalink":"/2019/03/20/comenzando-con-la-combinatoria-iii/","section":"post","summary":"Problema 61: dominó y soluciones enteras de una ecuación.","tags":["Combinatoria","Problemas"],"title":"Comenzando con la combinatoria (III)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 60: Considerando una baraja de póquer de $52$ cartas,\n (a) ¿cuántas manos de cinco cartas se pueden extraer? (b) De las manos anteriores, ¿cuántas tienen tres ases? (c) De estas últimas, ¿cuántas serán full? (d) En general, ¿cuántos full podemos extraer de la baraja? (e) ¿Y cuántas manos contienen una doble pareja?   De cara al apartado (a), como no importa el orden en el que recibamos las cartas en una mano cualquiera y no existe la posibilidad de recibir cartas recibidas, estamos interesados en calcular el número de combinaciones de $52$ elementos tomados de cinco en cinco. Así, hay\n$$ \\dbinom{52}{5} = \\dfrac{52!}{5!\\cdot47!} = \\dfrac{52\\cdot51\\cdot50\\cdot49\\cdot48}{5!} = 2598960 $$\nmanos posibles de cinco cartas que podemos extraer de una baraja de póquer de $52$ cartas.\nEn cuanto al apartado (b), razonaremos como sigue: de los cuatro ases que posee la baraja, tomamos tres de ellos. Como no importa el orden en el que los extraigamos y no habrá ninguno repetido, esta acción la podemos llevar a cabo de\n$$ \\dbinom{4}{3} = \\dfrac{4!}{3!\\cdot1!} = 4 $$\nformas posibles. Ahora, del resto de cartas de la baraja que no son ases, $52-4=48$, simplemente hemos de tomar dos cartas adicionales, situación que puede darse de\n$$ \\dbinom{48}{2} = \\dfrac{48!}{2!\\cdot46!} = \\dfrac{48\\cdot47}{2} = 1128 $$\nmaneras posibles. Aplicando la regla del producto, hay\n$$ \\dbinom{4}{3}\\cdot\\dbinom{48}{2} = 4\\cdot1128 = 4512 $$\nmanos que poseen tres ases.\nSiguiendo con el apartado (c), para conformar un full a partir de tres ases necesitamos que las otras dos cartas (distintas ambas del as) posean idéntico número. Así, empecemos tomando nuestros tres ases, que sabemos es una acción que podemos llevar a cabo de\n$$ \\dbinom{4}{3} = \\dfrac{4!}{3!\\cdot1!} = 4 $$\nformas posibles. Ahora, de los doce números distintos de cartas que restan, seleccionamos uno en particular ($C_{12,1}$) y, de las cuatro cartas posibles asociadas a dicho número, tomamos dos ($C_{4,2}$). Aplicando la regla del producto, existen\n$$ \\dbinom{12}{1}\\cdot\\dbinom{4}{2} = 12\\cdot\\dfrac{4!}{2!\\cdot2!} = 72 $$\nmaneras de realizar la anterior elección. Finalmente, utilizando de nuevo la regla del producto, hay\n$$ \\dbinom{4}{3}\\cdot\\dbinom{12}{1}\\cdot\\dbinom{4}{2} = 4\\cdot72 = 288 $$\nmanos con $3$ ases que son full.\nPara el apartado (d), la manera de razonar es muy similar a la mostrada en el párrafo anterior. De los $13$ números posibles, seleccionamos uno de ellos ($C_{13,1}$) y será de este del que tomaremos tres cartas iguales ($C_{4,3}$). Ahora de los $12$ números restantes, escogemos uno ($C_{12,1}$) y extraemos luego dos cartas idénticas ($C_{4,2}$). Aplicando la regla del producto, hay\n$$ \\dbinom{13}{1}\\cdot\\dbinom{4}{3}\\cdot\\dbinom{12}{1}\\cdot\\dbinom{4}{2} = 13\\cdot4\\cdot12\\cdot6 = 3744 $$\nmanos que son full.\nFinalmente, en el apartado (e), de los $13$ números disponibles en la baraja seleccionamos dos de ellos ($C_{13,2}$), de los cuales, de entre las cuatro cartas asociadas a cada uno de ellos, escogeremos dos idénticas ($C_{4,2}\\cdot C_{4,2}$). Por último, de las restantes cartas, $52-4-4=44$, tomaremos una de ellas cualquiera ($C_{44,1}$). Aplicando la regla del producto hay\n$$ \\dbinom{13}{2}\\cdot\\dbinom{4}{2}\\cdot\\dbinom{4}{2}\\cdot\\dbinom{44}{1} = 78\\cdot6\\cdot6\\cdot44 = 123552 $$\nmanos que son doble pareja.\n","date":1552708779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"7ad90942a7b5f5d9073b98bd46f9d1a5","permalink":"https://imalexissaez.github.io/2019/03/16/comenzando-con-la-combinatoria-ii/","publishdate":"2019-03-16T05:59:39+02:00","relpermalink":"/2019/03/16/comenzando-con-la-combinatoria-ii/","section":"post","summary":"Problema 60: obviamente, las barajas hacen su acto de presencia aquí.","tags":["Combinatoria","Problemas"],"title":"Comenzando con la combinatoria (II)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 59:\n (a) ¿De cuántas formas se pueden sentar ocho personas en una fila de ocho asientos? (b) ¿Cuántas palabras distintas de diez letras se pueden formar con las letras $A$, $B$, $C$ y $D$? (c) ¿De cuántas formas pueden huir diez niños de la policía en un cruce de calles? (d) ¿Cuántas distribuciones se pueden conseguir lanzando diez monedas? (e) ¿De cuántas formas se pueden obtener cinco caras y cinco cruces en el apartado anterior? (f) ¿Cuántos números de $4$ cifras se pueden formar con los dígitos $1,2,3,\\ldots, 9$? (g) ¿Cuántas distribuciones de cumpleaños pueden darse entre diez amigos?   Para el apartado (a), dado que el orden importa y utilizamos todos los elementos, sin que ninguno de ellos se repita, buscamos la cantidad de permutaciones de ocho elementos. Así, $P_8 = 8! = 40320$ es el número de formas en que se pueden sentar ocho personas en una fila de ocho asientos.\nEn el apartado (b), el orden vuelve a importar y, obviamente, hemos de permitir la repetición de las letras para conformar las palabras, por lo que ahora la herramienta adecuada para contar será el total de variaciones de cuatro elementos tomadas de diez en diez. Por tanto, hay $VR_{4,10} = 4^{10} = 1048576$ palabras distintas de diez letras conformadas a partir de las letras $A$, $B$, $C$ y $D$.\nEn cuanto al apartado (c), hemos de ser cautos a la hora de escoger quién juega el papel de los \u0026lsquo;\u0026lsquo;elementos\u0026rsquo;\u0026rsquo; para contabilizar el total de maneras en que realizar la acción. En esta ocasión, son las calles. Si consideramos un cruce estándar de cuatro de ellas (y las denotamos por $a$, $b$, $c$ y $d$), una posible forma de escapar de la policía consistiría en que todos los niños optasen por la calle $a$, generando así el valor $(a,a,\\ldots,a)$. Si el primer niño escogiese la calle $b$ y el resto la $a$, tendríamos el valor $(b,a,a,\\ldots,a)$, y así sucesivamente. Por tanto, como importa el orden y alguna de las calles estará repetida dentro de las opciones de la huida, buscamos el número de variaciones con repetición de cuatro elementos tomados de diez en diez. Como antes, $VR_{4,10} = 4^{10}$ es el número de formas en que pueden huir diez niños de la policía en un cruce de calles.\nPara el apartado (d), un tanto ambiguo, asumiremos que están interesados en conocer el número de secuencias de caras y cruces que se pueden encontrar lanzando diez monedas. Con esta reformulación, es claro que son dos los elementos protagonistas, cara y cruz, y consideraremos que el orden importa porque, suponemos, las monedas son distinguibles. Por tanto, buscamos el número de variaciones con repetición de dos elementos tomados de diez en diez, esto es, hay $VR_{2,10} = 2^{10} = 1024$ posibles secuencias de caras y cruces cuando se lanzan diez monedas.\nA continuación, en el apartado (e), como el orden continúa siendo importante y cada elemento se repite un número fijo de veces, estamos interesados en la cantidad de permutaciones con repetición de diez elementos, donde tanto un elemento, como el otro, se repite en cinco ocasiones. Es decir, hay\n$$ P(10;5,5) = PR_{10}^{5,5} = \\dfrac{10!}{5!\\cdot 5!} = \\dfrac{10\\cdot9\\cdot8\\cdot7\\cdot6}{5!} = 252 $$\nformas de obtener cinco caras y cinco cruces al lanzar diez monedas.\nEn el apartado (f) hemos de considerar dos opciones posibles, en función de si admitimos o no repetición de los números. En caso afirmativo, al importar el orden y permitir repetición de los números, estamos interesados en el número de variaciones con repetición de nueve elementos tomados de cuatro en cuatro, esto es, hay $VR_{9,4} = 9^4 = 6561$ números de cuatro cifras conformados a partir de los dígitos $1,2,3,\\ldots,9$ que pueden poseer, además, dígitos repetidos. En caso negativo, el orden continúa siendo importante, pero ahora no permitimos la repetición de cifras, por lo que estamos interesados en hallar el número de variaciones de nueve elementos tomados de cuatro en cuatro, es decir, $V_{9,4} = 9\\cdot8\\cdot7\\cdot6 = 3024$ posibilidades.\nFinalmente, en el apartado (g), si todos los amigos celebrasen su cumpleaños el primer día del año, se generaría el valor $(1,1,\\ldots,1)$. Si el primer amigo lo celebrase el quinto día del año y el resto el tercer día, se conformaría el valor $(5,3,3\\ldots,3)$. Así, vemos que los elementos son los días del año, $365$, que los vamos a tomar de diez en diez. Como admitimos la posibilidad de que dos amigos cumplan año el mismo día, esto es, de repetir elemento, e importa el orden, estamos interesados en hallar el número de variaciones con repetición de $365$ elementos tomados de diez en diez. Así, hay $VR_{365,10} = 365^{10}$ distribuciones de cumpleaños posibles entre los diez amigos.\n","date":1552449579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"91955b2763cb1f25bdd46086ef7887d1","permalink":"https://imalexissaez.github.io/2019/03/13/comenzando-con-la-combinatoria-i/","publishdate":"2019-03-13T05:59:39+02:00","relpermalink":"/2019/03/13/comenzando-con-la-combinatoria-i/","section":"post","summary":"Problema 59: primeros pasos.","tags":["Combinatoria","Problemas"],"title":"Comenzando con la combinatoria (I)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 58: Determina las dimensiones de un rectángulo sabiendo que sus lados miden un número entero de centímetros, pero no un número entero de palmos, y que su área expresada en palmos cuadrados es igual a su perímetro expresado en palmos lineales. Considera que un palmo equivale a $20$ centímetros.\n Sean $x$ e $y$ las medidas de los lados del rectángulo expresadas en centímetros, mientras que denotemos por $a$ y $b$ las correspondientes medidas obtenidas en palmos. El área del rectángulo, en palmos cuadrados, es $a\\cdot b$, cantidad que nos dicen ha de ser igual a su perímetro en palmos lineales, que viene dado por $2a+2b = 2(a+b)$. Por tanto, resulta que\n$$ a\\cdot b = 2(a + b). $$\nDado que un palmo equivale a $20$ centímetros, es cierto que $x = 20a$ e $y = 20b$, y despejando $a$ y $b$, hallamos que\n$$ \\begin{aligned} a \u0026amp;= \\dfrac{x}{20},\\\nb \u0026amp;= \\dfrac{y}{20}. \\end{aligned} $$\nSustituyendo los resultados alcanzados, tenemos que\n$$ \\dfrac{x}{20}\\cdot\\dfrac{y}{20} = 2\\left(\\dfrac{x}{20} + \\dfrac{y}{20}\\right), $$\nesto es, $xy = 40x+40y$, ecuación diofántica no lineal que abordaremos despejando una de las variables y forzando a que la restante tome valores enteros. Así, $xy-40x = 40y$, es decir, $x(y-40) = 40y$, de donde\n$$ x = \\dfrac{40y}{y-40}. $$\nComo $x$ ha de tomar valores enteros, estudiaremos, a continuación, las posibilidades para la fracción que acabamos de obtener. Si llevamos a cabo la división de polinomios, es cierto que\n$$ \\dfrac{40y}{y-40} = 40 + \\dfrac{1600}{y-40}, $$\ncon $y\\neq 40$ ($y=40$ no es una solución aceptable en este contexto, pues al ser múltiplo de $20$, uno de los lados del rectángulo poseería una longitud igual a un número entero de palmos). Hemos llegado entonces a que $y-40$ debe ser un divisor de $1600$.\nAhora bien, $1600 = 2^6 \\cdot 5^2$, situación que produce un total de\n$$ (6+1)\\cdot(2+1) = 21 $$\ndivisores, por lo que, acto seguido, analizaremos todos y cada uno de los casos. Para empezar, listemos el conjunto de divisores. Para llevar a cabo tal tarea de forma relativamente sencilla, recordemos que la expresión de la suma de los divisores era\n$$ (1+2+2^2 +\\cdots+2^6 )\\cdot(1+5+5^2 ), $$\nde manera que si prescindimos de la operación suma, cada uno de los productos resulta ser un divisor de $1600$. Por ejemplo, multiplicando $1$ por $1,2,2^2,\\ldots, 2^6$ aparecen los divisores $\\{1,2,4,8,16,32,64\\}$. Multiplicando ahora $5$ por $1,2,2^2,\\ldots, 2^6$, obtenemos los divisores $\\{5,10,20,40,80,160,320\\}$. Finalmente, multiplicando $5^2$ por $1,2,2^2 ,\\ldots,2^6$, encontramos los divisores $\\{25,50,100,200,400,800,1600\\}$. En definitiva, el conjunto de divisores de $1600$ es\n$$ {1, 2, 4, 5, 8, 10, 16, 20, 25, 32, 40, 50, 64, 80, 100, 160, 200, 320, 400, 800, 1600}. $$\nA continuación, vemos que algunos casos los podemos descartar rápidamente. ¿Es válida la solución $y-40=20$? No, ya que implicaría $y=60 = 3\\cdot20$, es decir, $y$ sería entonces un múltiplo entero de palmos, longitud no permitida por las restricciones que impone el enunciado del ejercicio. El mismo razonamiento es válido para los valores $40$, $80$, $160$, $320$, $100$, $200$, $400$, $800$ y $1600$.\nPara el resto de casos, conformamos la siguiente tabla\n   $y-40$ $x$ Nota     $1$ $40 + \\dfrac{1600}{1} = 1640$ Solución no válida: $x$ es múltiplo de $20$.   $2$ $40 + \\dfrac{1600}{2} = 840$ Solución no válida: $x$ es múltiplo de $20$.   $4$ $40 + \\dfrac{1600}{4} = 440$ Solución no válida: $x$ es múltiplo de $20$.   $5$ $40 + \\dfrac{1600}{5} = 360$ Solución no válida: $x$ es múltiplo de $20$.   $8$ $40 + \\dfrac{1600}{8} = 240$ Solución no válida: $x$ es múltiplo de $20$.   $10$ $40 + \\dfrac{1600}{10} = 200$ Solución no válida: $x$ es múltiplo de $20$.   $16$ $40 + \\dfrac{1600}{16} = 140$ Solución no válida: $x$ es múltiplo de $20$.   $25$ $40 + \\dfrac{1600}{25} = 104$ Solución válida.   $32$ $40 + \\dfrac{1600}{32} = 90$ Solución válida.   $50$ $40 + \\dfrac{1600}{50} = 72$ Solución válida.   $64$ $40 + \\dfrac{1600}{64} = 65$ Solución válida.    Por tanto, las dimensiones del rectángulo vienen dadas por los pares $(104, 65)$, $(90, 72)$, $(72, 90)$ y $(65, 104)$.\n","date":1552103979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"9e75dd6b952ae123a44fee5216a525a2","permalink":"https://imalexissaez.github.io/2019/03/09/midiendo-cuadrados-en-palmos/","publishdate":"2019-03-09T05:59:39+02:00","relpermalink":"/2019/03/09/midiendo-cuadrados-en-palmos/","section":"post","summary":"Problema 58: requiere andar con pies de plomo.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Midiendo cuadrados en palmos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 57: En un verde prado, la hierba crece de forma uniforme y constante. Se sabe que $70$ vacas lo consumirían en $24$ días y que $30$ vacas lo harían en $60$ días. ¿Cuántas vacas se comerían la hierba en $96$ días?\n El comienzo del enunciado de este ejercicio, aunque en apariencia tan poético como irrelevante, nos ofrece una importante pista para llevar a buen término la resolución del problema. \u0026lsquo;\u0026lsquo;En un verde prado\u0026rsquo;\u0026rsquo; nos indica que, inicialmente, el mencionado prado posee cierta cantidad de hierba (en otro caso, las vacas ni se molestarían en realizarle una visita el primer día). Consideremos pues, por ejemplo, que dicho prado posee $1$ unidad de hierba (equivalentemente, podríamos decir que está conformado por $a$ unidades de hierba, con $a\\in\\mathbb{N}$; o que simplemente posee un porcentaje de hierba igual a $100%$).\nDado que la hierba crece de forma uniforme y constante, designemos por $x$ la altura que gana a diario la hierba en nuestro verde prado. Así, ¿qué cantidad de hierba acumulará dicho prado en $24$ días? Efectivamente, $1+24x$, la unidad de hierba con la que contaba inicialmente más el crecimiento uniforme y constante de esta durante el período de tiempo considerado.\nLa siguiente cuestión que nos planteamos, acto seguido, es: ¿cuánto come una vaca al día? Dado que las $70$ vacas consumen toda la hierba disponible del verde prado en $24$ días, cada vaca es responsable de la desaparición diaria de la siguiente fracción de hierba:\n$$ \\dfrac{1 + 24x}{24\\cdot 70}. $$\nAhora bien, $30$ vacas consumen la misma cantidad de hierba en $60$ días, situación que da lugar a que cada vaca disfruta, a diario, de la siguiente fracción de hierba:\n$$ \\dfrac{1+60x}{60\\cdot 30}. $$\nIgualando ambas expresiones, seremos capaces de encontrar cuánto crece la hierba en nuestro querido verde prado a diario, es decir, el valor de $x$. Así,\n$$ \\dfrac{1 + 24x}{24\\cdot 70} = \\dfrac{1+60x}{60\\cdot 30}, $$\nesto es, $1800 + 43200x = 1680 + 100800x$, es decir,\n$$ x = \\dfrac{1}{480}. $$\nSustituyendo ahora, el consumo diario de hierba de una vaca asciende a la fracción\n$$ \\dfrac{1 + 24\\cdot\\dfrac{1}{480}}{24\\cdot70} = \\dfrac{504}{480\\cdot1680} = \\dfrac{1}{1600}. $$\nPor consiguiente, si cada vaca devora tal fracción de hierba a diario y designamos por $y$ la cantidad de vacas que consumirían nuestro amado verde prado en $96$ días, tendrá que satisfacerse que\n$$ \\dfrac{1 + 96\\cdot\\dfrac{1}{480}}{96y} = \\dfrac{1}{1600} \\Leftrightarrow \\dfrac{576}{480\\cdot96y} = \\dfrac{1}{1600} \\Leftrightarrow \\dfrac{1}{80y} = \\dfrac{1}{1600}, $$\nesto es, $20$ serán las vacas que consuman el verde prado en $96$ días.\n","date":1551844779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"2ee2ea7e836c697edd9c617555b9b23f","permalink":"https://imalexissaez.github.io/2019/03/06/cuando-un-problema-viene-con-muy-mala-leche/","publishdate":"2019-03-06T05:59:39+02:00","relpermalink":"/2019/03/06/cuando-un-problema-viene-con-muy-mala-leche/","section":"post","summary":"Problema 57: un enunciado sencillo que esconde una trampa inesperada.","tags":["Ecuaciones","Problemas"],"title":"Cuando un problema viene con muy mala leche","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Acaba de salir la convocatoria del proceso selectivo de ingreso en los cuerpos docentes de profesores de Enseñanza Secundaria. Echémosle un vistazo, destacando alguna de sus partes.\nEl título completo del documento es:\n ORDEN 7 / 2019, de 28 de febrero de 2019, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [2019 / 2095]  Algunos de sus fragmentos que me han resultado de interés son:\n Presentación de solicitudes: Quienes deseen tomar parte en este proceso selectivo deberán cumplimentar el modelo oficial de solicitud que estará disponible en la sede electrónica de la Generalitat Valenciana (http://sede.gva.es) y en la página web de la Conselleria de Educación, Investigación, Cultura y Deporte (http://www.ceice.gva.es/es/web/rrhh-educacion/oposiciones). Plazo de presentación: El plazo de presentación de la solicitud será del 5 al 29 de marzo de 2019. La no presentación de la misma en tiempo y forma supondrá la exclusión de la persona aspirante. Importe: 28,10 €, aunque varía dependiendo de ciertos supuestos. Fecha de comienzo: La realización de la primera prueba de la fase de oposición para las personas aspirantes en los procedimientos de ingreso libre y de reserva de personas con diversidad funcional tendrá lugar a partir del día 26 de junio de 2019. Acreditación de idiomas oficiales: Habrá pruebas previas, tanto para evaluar el nivel C1 de valenciano, como para adquirir el \u0026lsquo;\u0026lsquo;Certificat de Capacitació per a l’Ensenyament en Valencià\u0026rsquo;\u0026rsquo; (en las páginas 18 a 20 del documento). Directrices para la segunda prueba: Se dispondrá de un máximo de una hora para la defensa oral de la programación didáctica o de la guía docente presentada y la exposición oral de la unidad didáctica o del bloque temático, iniciando su exposición con la defensa de la programación didáctica o de la guía docente, que no podrá exceder de treinta minutos, y a continuación se realizará la exposición de la unidad didáctica o del bloque temático.  Las programaciones didácticas o las guías docentes se presentarán de forma telemática a través de la sede electrónica de la Generalitat Valenciana (http://sede.gva.es), siendo necesario identificarse por cualquiera de los sistemas de identificación o firma electrónica admitidos en la propia sede electrónica. La entrega de las programaciones didácticas se deberá efectuar en un único documento con formato PDF que no supere los 20 MB.   Distribución de plazas por sistemas de acceso: El correspondiente cuadro se encuentra en la página 31 del documento. Por ejemplo, para matemáticas se convocan 460 plazas. Programación didáctica: La programación didáctica, que tendrá carácter personal, deberá ser elaborada de forma individual por la persona aspirante, y tener una extensión máxima de 60 páginas, en formato DIN-A4, escritas a doble espacio, con letra Arial (no se admitirá ninguna otra tipología de Arial) y con un cuerpo de letra de 12 puntos, sin comprimir. La portada contendrá los datos de identificación de la persona aspirante, el cuerpo y la especialidad por la cual se presenta (no se contabilizará en las 60 páginas). No podrá contener hipervínculos. Los anexos no podrán superar las 15 páginas (que no se computarán en las 60 iniciales establecidas). En el caso de utilizar tablas, el cuerpo de la letra podrá reducirse hasta 9 puntos, sin comprimir. La presentación deberá efectuarse en un único documento en formato PDF que no superará los 20 MB.  La programación didáctica deberá organizarse en un mínimo de 10 y un máximo de 15 unidades didácticas que deberán estar numeradas.    Actualización:\n CORRECCIÓN de errores de la Orden 7 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [2019 / 2648] CORRECCIÓN de errores de la Orden 7 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [2019 / 3122] RESOLUCIÓN de 2 de abril de 2019, del director general de Centros y Personal Docente, por la que se declaran aprobadas las listas provisionales de personas admitidas y excluidas para participar en los procedimientos selectivos de ingreso y adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional. [2019 / 3373] RESOLUCIÓN de 2 de abril de 2019, del director general de Centros y Personal Docente, por la que se convoca a las personas aspirantes no exentas de la realización de la prueba de valenciano nivel C1 y se nombra el tribunal que ha de evaluarla, en el marco del procedimiento selectivo para ingreso en los cuerpos docentes del profesorado de Enseñanza Secundaria, profesorado de escuelas oficiales de idiomas, profesorado de Música y Artes Escénicas, profesorado de Artes Plásticas y Diseño y profesorado técnico de Formación Profesional. [2019 / 3379] RESOLUCIÓN de 9 de mayo de 2019, del director general de Centros y Personal Docente, por la que se convoca a los aspirantes no exentos de la realización de la prueba de castellano para extranjeros y se nombra el tribunal que ha de juzgar la prueba previa de castellano para extranjeros, en el marco del procedimiento selectivo convocado por las Órdenes 7 / 2019 y 6 / 2019, de 28 de febrero, de la Conselleria de Educación, Investigación, Cultura y Deporte. [2019 / 4840] RESOLUCIÓN de 9 de mayo de 2019, del director general de Centros y Personal Docente, por la que se convoca a las personas aspirantes no exentas, a la realización de la prueba para la obtención del Certificado de Capacitación para la Enseñanza en Valenciano y se nombra el tribunal que ha de evaluarla, en el marco del procedimiento selectivo de ingreso y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas, profesores de Artes Plásticas y Diseño y profesores técnicos de Formación Profesional, convocado por Orden 7 / 2019, de 28 de febrero. [2019 / 4842] Criterios de evaluación para la especialidad de matemáticas. Para acceder a los del resto de especialidades, seguid este enlace.  ","date":1551671979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564873201,"objectID":"4e1a0f2e251eb8167b5229a6fac9181d","permalink":"https://imalexissaez.github.io/2019/03/04/convocatoria-de-oposiciones-para-secundaria-en-la-comunidad-valenciana-2019/","publishdate":"2019-03-04T05:59:39+02:00","relpermalink":"/2019/03/04/convocatoria-de-oposiciones-para-secundaria-en-la-comunidad-valenciana-2019/","section":"post","summary":"Breve análisis de la convocatoria de oposiciones, destacando algunas de sus principales características.","tags":["Legislación"],"title":"Convocatoria de oposiciones para secundaria en la Comunidad Valenciana (2019)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 56: El diámetro de una moneda de $5$ pesetas es de $37$ mm y el de una peseta es de $23$ mm, ¿de cuántas maneras puede obtenerse la longitud de un metro alineando monedas de $5$ pesetas y de pesetas?\n Sea $x$ el número de monedas de $5$ pesetas e $y$ la cifra total de monedas de $1$ peseta. Expresando todas las cantidades involucradas en el enunciado del ejercicio en milímetros, para así trabajar con números enteros, hemos de resolver la ecuación diofántica\n$$ 37x+23y=1000, $$\npara encontrar el número de maneras en las que puede obtenerse un metro alineando monedas de los dos tipos indicados.\nComo $23$ y $37$ son números primos, tenemos que $mcd(23,37)=1$, y dado que, trivialmente, $1|1000$, estamos en condiciones de asegurar que la anterior ecuación diofántica planteada admite solución entera. De cara a su resolución, para empezar, llevemos a cabo el cambio de variable\n$$ \\begin{aligned} x \u0026amp;= 1000x^{\\prime},\\\ny \u0026amp;= 1000y^{\\prime} \\end{aligned} $$\nde manera que la ecuación diofántica se transforma en $37x^{\\prime} + 23y^{\\prime} = 1$. Utilizando el Algoritmo de Euclides, como\n$$ \\begin{aligned} 37 \u0026amp;= 23\\cdot1 + 14,\\\n23 \u0026amp;= 14\\cdot1 + 9,\\\n14 \u0026amp;= 9\\cdot1 + 5,\\\n9 \u0026amp;= 5\\cdot1 + 4,\\\n5 \u0026amp;= 4\\cdot1 + 1,\\\n4 \u0026amp;= 1\\cdot4, \\end{aligned} $$\nademás de haber comprobado que $mcd(23,37)=1$, podemos encontrar una solución particular a la ecuación diofántica sin más que expresar dicho máximo común divisor como combinación lineal de $23$ y $37$. Para ello,\n$$ \\begin{aligned} 1 \u0026amp;= 5 - 4\\cdot1\\\n\u0026amp;= 5 - 1\\cdot(9\\cdot1 - 5) \\\n\u0026amp;= (-9) + 2\\cdot5 = (-9) + 2(14\\cdot1 - 9) \\\n\u0026amp;= 2\\cdot14 - 3\\cdot9 \\\n\u0026amp;= 2\\cdot14 - 3(23\\cdot1 - 14) \\\n\u0026amp;= (-3)\\cdot23 + 5\\cdot14 \\\n\u0026amp;= (-3)\\cdot23 + 5(37 - 23\\cdot1) \\\n\u0026amp;= 5\\cdot37 - 8\\cdot23, \\end{aligned} $$\ny dado que, recordemos, la ecuación diofántica es $37x^{\\prime} +23y^{\\prime} =1$, igualando, arribamos a que $x^{\\prime}_0=5$ e $y^{\\prime}_0=(-8)$. Deshaciendo ahora el cambio de variable realizado,\n$$ \\begin{aligned} x_0 \u0026amp;= 1000x^{\\prime}_0 = 5000,\\\ny_0 \u0026amp;= 1000y^{\\prime}_0 = (-8000), \\end{aligned} $$\nes una solución particular para la ecuación diofántica $37x+23y=1000$. Por tanto, su solución general queda\n$$ \\begin{aligned} x \u0026amp;= 5000 + 23t,\\\ny \u0026amp;= (-8000) - 37t, \\end{aligned} $$\ncon $t$ número entero. Dado que el número de monedas que alineamos ha de ser mayor o igual que cero, planteamos las inecuaciones,\n$$ 5000 + 23t\\geq 0\\qquad\\text{y}\\qquad (-8000) - 37t\\geq 0, $$\nesto es,\n$$ -\\dfrac{5000}{23}\\leq t\\leq -\\dfrac{8000}{37}, $$\nes decir, $(-217.4)\\leq t\\leq (-216.2)$ y como $t$ ha de ser un número entero, únicamente deja como solución $t=(-217)$. Por tanto,\n$$ \\begin{aligned} x \u0026amp;= 5000 + 23\\cdot(-217) = 9,\\ y \u0026amp;= (-8000) - 37\\cdot(-217) = 29, \\end{aligned} $$\nesto es, solamente podemos obtener un metro alineando las monedas indicadas de una manera y es utilizando $9$ monedas de $5$ pesetas y $29$ monedas de $1$ peseta.\n","date":1551499179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564869601,"objectID":"3f47b9ffa171ef1dc7a302e6fdfd2e2d","permalink":"https://imalexissaez.github.io/2019/03/02/midiendo-metros-con-duros-y-pesetas/","publishdate":"2019-03-02T05:59:39+02:00","relpermalink":"/2019/03/02/midiendo-metros-con-duros-y-pesetas/","section":"post","summary":"Problema 56: un curioso juego de monedas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Midiendo metros con duros y pesetas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 55: Halla un cuadrado de cinco cifras que sea igual a cinco veces otro cuadrado, más uno.\n El enunciado del ejercicio nos lleva a plantear la ecuación $x^2 = 5y^2 +1$, equivalente a $x^2 -5y^2 =1$, ecuación de Pell que sabemos posee infinitas soluciones en los enteros al no ser $5$ un cuadrado perfecto. Por tanteo, hallamos la solución particular $x=9$ e $y=4$, ya que $9^2 - 5\\cdot4^2 =1$. Expresamos ahora la diferencia de cuadrados como producto de una suma y una diferencia, de forma que\n$$ 9^2 - 5\\cdot4^2 =1 \\Leftrightarrow (9+4\\sqrt{5})(9-4\\sqrt{5}) = 1. $$\nAnálogamente, la sucesión de soluciones enteras, que denotaremos por $(x_n,y_n)$, debe cumplir que $(x_n+y_n\\sqrt{5})(x_n-y_n\\sqrt{5})=1$. Expresamos la solución general utilizando recurrencias, de manera que,\n$$ \\begin{aligned} x_{n+1} + y_{n+1}\\sqrt{5} \u0026amp;= (x_n + y_n\\sqrt{5})(9+4\\sqrt{5})\\\n\u0026amp;= 9x_n + 4\\sqrt{5}x_n + 9\\sqrt{5}y_n + 20y_n, \\end{aligned} $$\nluego\n$$ \\begin{aligned} x_{n+1} \u0026amp;= 9x_n + 20y_n,\\ y_{n+1} \u0026amp;= 4x_n + 9y_n. \\end{aligned} $$\nUtilizando notación matricial,\n$$ \\begin{bmatrix} x_{n+1}\\\ny_{n+1} \\end{bmatrix} = \\begin{bmatrix} 9 \u0026amp; 20\\\n4 \u0026amp; 9 \\end{bmatrix} \\begin{bmatrix} x_n\\ y_n \\end{bmatrix}, $$\ncon $(x_1,y_1) = (9,4)$. La solución particular hallada no cumple los requisitos impuestos en el enunciado del ejercicio, por lo que procederemos a obtener la siguiente.\n$$ \\begin{bmatrix} x_2\\\ny_2 \\end{bmatrix} = \\begin{bmatrix} 9 \u0026amp; 20\\\n4 \u0026amp; 9 \\end{bmatrix} \\begin{bmatrix} 9\\\n4 \\end{bmatrix} = \\begin{bmatrix} 161\\\n72 \\end{bmatrix}, $$\nque es la solución que estamos persiguiendo, pues $161^2 = 25921 = 5\\cdot72^2+1$.\n","date":1551239979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564696801,"objectID":"7916f27e7a465b7be9c2c4977834b1e8","permalink":"https://imalexissaez.github.io/2019/02/27/mezclando-cuadrados-y-ecuaciones-diofanticas/","publishdate":"2019-02-27T05:59:39+02:00","relpermalink":"/2019/02/27/mezclando-cuadrados-y-ecuaciones-diofanticas/","section":"post","summary":"Problema 55: aparece de nuevo la ecuación de Pell.","tags":["Ecuación de Pell","Ecuaciones diofánticas","Problemas"],"title":"Mezclando cuadrados y ecuaciones diofánticas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 54: Un granjero compró vacas, cerdos y pollos. En total $100$ animales por $100$ euros. Hay al menos uno de cada. Si una vaca cuesta $10$ euros, un cerdo $3$ euros y un pollo $0.50$ euros, ¿cuántos animales de cada clase compró?\n Sea $x$ el número de vacas, $y$ el total de cerdos y $z$ la cantidad de pollos adquiridos. Como se compran $100$ animales, tenemos la ecuación lineal $x+y+z=100$, con la restricción de que $x\\geq1$, $y\\geq1$ y $z\\geq1$ ya que nos indican que, al menos, se compra un animal de cada tipo. Finalmente, dados los precios suministrados y el desembolso llevado a cabo, encontramos la ecuación $10x+3y + 0.5z = 100$. Así pues, hemos de resolver el sistema de ecuaciones\n$$ \\begin{aligned} 10x+3y+0.5z \u0026amp;= 100,\\ x+y+z \u0026amp;= 100, \\end{aligned} $$\ncon la restricción adicional indicada arriba. Despejando la variable $z$ de la segunda ecuación, $z = 100-x-y$, y sustituyéndola en la primera ecuación del sistema,\n$$ 10x + 3y + 50 - 0.5x - 0.5y = 100, $$\nesto es, $10x+3y-0.5x-0.5y=50$, o bien $19x+5y=100$, ecuación diofántica que sabemos admite solución entera, puesto que $mcd(5,19)=1$ y, obviamente, $1|100$. Así, despejando la variable $y$, por ser aquella cuyo coeficiente asociado es más reducido,\n$$ y = \\dfrac{100 - 19x}{5}, $$\npor lo que basta probar, para $x$, valores pertenecientes al menor sistema completo de restos módulo $5$. Para $x_0=0$, hallamos que $y_0 = 20$, siendo esta una solución particular de la ecuación diofántica propuesta. Su solución general, por tanto, queda\n$$ \\begin{aligned} x \u0026amp;= 5t,\\\ny \u0026amp;= 20-19t, \\end{aligned} $$\ncon $t$ número entero. Como hemos de comprar, al menos, un animal de cada tipo, tanto $x$ como $y$ han de ser positivas. De $5t\u0026gt;0$ concluimos que $t\u0026gt;0$; mientras que de $20-19t\u0026gt;0$ deducimos que $t\\leq 1$. Así, como $t$ es un número entero, únicamente puede tomar el valor $t=1$, dejando así $x=5$, $y=1$ y $z = 100-x-y = 100-5-1=94$. Es decir, el granjero compró $5$ vacas, un cerdo y $94$ pollos.\n","date":1550894379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564696801,"objectID":"685ec8f90357a25d028aff375f053a40","permalink":"https://imalexissaez.github.io/2019/02/23/en-la-granja-de-pepito/","publishdate":"2019-02-23T05:59:39+02:00","relpermalink":"/2019/02/23/en-la-granja-de-pepito/","section":"post","summary":"Problema 54: de vacas, cerdos y pollos.","tags":["Ecuaciones diofánticas","Problemas"],"title":"En la granja de Pepito","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 53: Para abonar una factura de $1840$ pesetas se entregan libras esterlinas y dan la vuelta en marcos. Calcula las libras esterlinas entregadas y los marcos devueltos suponiendo que se ha entregado la cantidad mínima de libras necesarias para pagar y que la devolución es en marcos ($1$ marco $=$ $70$ pesetas, $1$ libra $=$ $180$ pesetas).\n Sea $x$ la cantidad de libras esterlinas entregadas e $y$ el total de marcos recibidos en la devolución. Como la factura viene dada en pesetas y tenemos indicadas las tasas de conversión de las otras dos monedas en relación a las pesetas, trabajaremos durante el resto del ejercicio con esta unidad monetaria.\nCon ello en mente, la cantidad que desembolso en libras para cumplir con la factura más el total de marcos que recibo en concepto de devolución ha de ascender a $1840$ pesetas, esto es,\n$$ 180x + 70y = 1840. $$\nAhora bien, como $70 = 2\\cdot5\\cdot7$ y $180 = 2^2 \\cdot 3^2 \\cdot5$, $mcd(70, 180) = 10$. Dado que, trivialmente, $10|1840$, la ecuación diofántica propuesta admite solución entera. Simplificando dicha ecuación por $10$, tenemos que $18x + 7y = 184$, expresión que nos invita, para empezar, a llevar a cabo el cambio de variable\n$$ \\begin{aligned} x \u0026amp;= 184x^{\\prime},\\\ny \u0026amp;= 184y^{\\prime} \\end{aligned} $$\nque la transforma en $18x^{\\prime} +7y^{\\prime} =1$. Ahora, despejando la variable $y^{\\prime}$, por ser aquella cuyo coeficiente asociado es más reducido, hallamos que\n$$ y^{\\prime} = \\dfrac{1-18x^{\\prime}}{7}, $$\npor lo que basta probar, para $x^{\\prime}$, valores pertenecientes al menor sistema completo de restos módulo $7$. Para $x^{\\prime}_0 = 2$, resulta que $y^{\\prime}_0 = (-5)$, y deshaciendo el anterior cambio de variable,\n$$ \\begin{aligned} x_0 \u0026amp;= 184x^{\\prime} = 184\\cdot2 = 368,\\\ny_0 \u0026amp;= 184y^{\\prime} = 184\\cdot(-5) = (-920), \\end{aligned} $$\nes una solución particular para la ecuación diofántica planteada. Su solución genera queda, entonces,\n$$ \\begin{aligned} x \u0026amp;= 368 + 7t,\\ y \u0026amp;= (-920) - 18t, \\end{aligned} $$\ncon $t$ número entero.\nDe entre las infinitas soluciones que tenemos a nuestra disposición, busquemos aquella que se ajusta a los dictados del enunciado del ejercicio, es decir, aquella para la cual se desembolsa la mínima cantidad de libras esterlinas necesarias para abonar la factura. Esta situación se traduce en averiguar el valor de $x$ tal que, $18x \\geq 184$. Sustituyendo,\n$$ 18(368 + 7t)\\geq 184, $$\nes decir, $6624 + 126t \\geq 184$. Por tanto, $126t \\geq (-6498)$, luego $t\\geq (-51.6)$ y como $t$ ha de ser entero, la inecuación entonces queda $t\\geq (-51)$. Como buscamos el menor valor para el que satisface la inecuación, este será, evidentemente, $t=(-51)$, resultando entonces\n$$ \\begin{aligned} x \u0026amp;= 368 + 7\\cdot(-51) = 11,\\\ny \u0026amp;= (-920) - 18\\cdot(-51) = -2, \\end{aligned} $$\nesto es, abonaremos la factura con $11$ libras esterlinas y nos devolverán $2$ marcos.\n","date":1550635179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564696801,"objectID":"2fe91e25b65dd73cd7b96951b062554d","permalink":"https://imalexissaez.github.io/2019/02/20/volvemos-a-los-tiempos-de-libras-marcos-y-pesetas/","publishdate":"2019-02-20T05:59:39+02:00","relpermalink":"/2019/02/20/volvemos-a-los-tiempos-de-libras-marcos-y-pesetas/","section":"post","summary":"Problema 53: un problema clásico fuera del contexto actual.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Volvemos a los tiempos de libras, marcos y pesetas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 52: Halla las soluciones enteras de la ecuación\n$$ 30x+42y+70z-105u=(-3). $$\n Como\n$$ \\begin{aligned} 30 \u0026amp;= 2\\cdot3\\cdot5,\\\n42 \u0026amp;= 2\\cdot3\\cdot7,\\\n70 \u0026amp;= 2\\cdot5\\cdot7,\\\n105 \u0026amp;= 3\\cdot5\\cdot7, \\end{aligned} $$\nentonces $mcd(30,42,70,105)=1$, por lo que estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. A diferencia del problema anterior, en esta ocasión ningún par de coeficientes está conformado por números primos entre sí. El procedimiento que seguiremos será entonces:\n Escogeremos dos coeficientes cualesquiera. Despejaremos para conseguir una ecuación diofántica con dos variables. Dividiremos por el máximo común divisor de los mencionados coeficientes y resolveremos dicha ecuación.  De esta manera, si empezamos considerando los coeficientes asociados a las variables $x$ e $y$, como $mcd(30,42)=6$, la ecuación\n$$ 30x+42y = (-3) - 70z + 105u $$\nla podemos simplificar por $6$, llegando así a\n$$ 5x+7y = \\dfrac{(-3)-70z+105u}{6} = v,\\quad\\text{con}\\quad v = \\dfrac{(-3)-70z+105u}{6}. $$\nLlevando a cabo el cambio de variable $x = vx^{\\prime}$ e $y = vy^{\\prime}$, la ecuación queda $5x^{\\prime} +7y^{\\prime}=1$, y despejando la variable $x^{\\prime}$, por ser aquella cuyo coeficiente asociado es más reducido,\n$$ x^{\\prime} = \\dfrac{1-7y^{\\prime}}{5}, $$\nhallando que para $y^{\\prime}_0 = (-2)$, entonces $x^{\\prime}_0 = 3$. Deshaciendo el cambio de variable efectuado, $x_0 = 3v$ e $y_0 = -2v$ es una solución particular para la ecuación diofántica planteada unas líneas arriba, por lo que su solución general queda\n$$ \\begin{aligned} x \u0026amp;= 3v + 7t,\\\ny \u0026amp;= -2v - 5t, \\end{aligned} $$\ncon $t$ número entero.\nNo obstante, recordemos que declaramos antes que\n$$ v = \\dfrac{(-3) - 70z + 105u}{6}, $$\nesto es $105u - 70z - 6v = 3$, que resulta ser una ecuación diofántica de tres variables del mismo tipo que aquella con la cual iniciamos este ejercicio (el máximo común divisor de sus coeficientes asciende a $1$, pero no existe algún par de ellos que sean primos entre sí), pero con una incógnita menos. Como $mcd(6,70,105) = 1$, estamos en condiciones de asegurar que esta última ecuación diofántica planteada admite solución entera. Tomando, por ejemplo, los coeficientes asociados a las variables $u$ y $z$, escribimos entonces la ecuación $105u-70z = 3+6v$, que podemos simplificar por $35$, quedando así\n$$ 3u-2z = \\dfrac{3+6v}{35} = w,\\quad\\text{con}\\quad w = \\dfrac{3+6v}{35}. $$\nAl igual que antes, si consideramos el cambio de variable $u = wu^{\\prime}$ y $z = wz^{\\prime}$, la anterior ecuación se convierte en $3u^{\\prime} -2z^{\\prime} =1$. Despejando la variable $z^{\\prime}$, por ser aquella cuyo coeficiente asociado es más reducido,\n$$ z^{\\prime} = \\dfrac{1-3u^{\\prime}}{2}. $$\nLuego, para $u^{\\prime}_0 =(-1)$ hallamos que $z^{\\prime}_0 =(-2)$, y deshaciendo el cambio de variable efectuado, $u_0 = -w$ y $z_0 = -2w$ es una solución particular de esta ecuación diofántica, por lo que su solución general queda\n$$ \\begin{aligned} u \u0026amp;= -w+2t^{\\prime},\\ z \u0026amp;= -2w+3t^{\\prime}, \\end{aligned} $$\ncon $t^{\\prime}$ número entero.\nFinalmente, como definimos antes $$w = \\dfrac{3+6v}{35},$$ generamos al ecuación diofántica $35w-6v=3$, que sabemos admite solución entera pues $mcd(6,35) = 1$. Así, despejando ahora la variable $w$, $$w=\\dfrac{3+6v}{35},$$ y entonces $v_0 = (-18)$ y $w_0=3$ es una solución particular para ella. De esta manera, su solución general es\n$$ \\begin{aligned} v \u0026amp;= (-18)+35t^{\\prime\\prime},\\\nw \u0026amp;= 3+6t^{\\prime\\prime} \\end{aligned} $$\ncon $t^{\\prime\\prime}$ número entero. Únicamente nos resta reemplazar adecuadamente los resultados alcanzados para que así la solución quede expresada en función de valores enteros. Así,\n$$ \\begin{aligned} x \u0026amp;= 3v+7t = (-54) + 7t + 105t^{\\prime\\prime},\\\ny \u0026amp;= -2v-5t = 36 - 5t - 70t^{\\prime\\prime},\\\nz \u0026amp;= -2w + 3t^{\\prime} = (-6) + 3t^{\\prime} - 12t^{\\prime\\prime},\\ u \u0026amp;= -w+2t^{\\prime} = (-3) + 2t^{\\prime} - 6t^{\\prime\\prime}, \\end{aligned} $$\ncon $t$, $t^{\\prime}$ y $t^{\\prime\\prime}$ números enteros.\n","date":1550289579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564696801,"objectID":"606d2362a061a4143e37cdc293fada0c","permalink":"https://imalexissaez.github.io/2019/02/16/un-primer-contacto-con-ecuaciones-diofanticas-v/","publishdate":"2019-02-16T05:59:39+02:00","relpermalink":"/2019/02/16/un-primer-contacto-con-ecuaciones-diofanticas-v/","section":"post","summary":"Problema 52: ¡y subimos el número de incógnitas hasta cuatro!.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Un primer contacto con ecuaciones diofánticas (V)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 51: Halla las soluciones enteras de la ecuación $3x+2y+9z=12$.\n Dado que $mcd(2,3,9)=1$, estamos en condiciones de asegurar que la ecuación diofántica planteada admite solución entera. Al encontrar tres incógnitas, para empezar, hemos de comprobar si algún par de coeficientes está compuesto por números primos entre sí. En esta ocasión, como $mcd(2,3)=1$ podemos, por ejemplo, fijar como variables $x$ e $y$, de manera que escribimos la ecuación diofántica como sigue,\n$$ 3x+2y=12-9z. $$\nA continuación, trabajamos con la ecuación $3x+2y=1$, para la cual, despejando la variable $y$ por ser aquella cuyo coeficiente es más reducido, hallamos que\n$$ y = \\dfrac{1-3x}{2}, $$\npor lo que basta probar, para $x$, valores pertenecientes al menor sistema completo de restos módulo $2$. Así, para $x=1$ es cierto que $y = (-1)$, y entonces la solución particular a la ecuación diofántica propuesta arriba queda\n$$ \\begin{aligned} x_0 \u0026amp;= 1\\cdot(12-9z) = 12-9z,\\\ny_0 \u0026amp;= (-1)\\cdot(12-9z) = (-12) + 9z, \\end{aligned} $$\npor lo que su solución general es\n$$ \\begin{aligned} x \u0026amp;= 12 - 9z + 2t,\\ y \u0026amp;= (-12) + 9z - 3t, \\end{aligned} $$\ncon $t$ y $z$ números enteros.\n","date":1550030379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"1955155dc2c21a010b18be1f2f9ec6d2","permalink":"https://imalexissaez.github.io/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/","publishdate":"2019-02-13T05:59:39+02:00","relpermalink":"/2019/02/13/un-primer-contacto-con-ecuaciones-diofanticas-iv/","section":"post","summary":"Problema 51: incrementamos el número de incógnitas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Un primer contacto con ecuaciones diofánticas (IV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 50: Se compran manzanas y naranjas, en total $12$ piezas de fruta y cuestan $1.32$ euros. Si una manzana vale $3$ céntimos más que una naranja y hay más manzanas que naranjas, ¿cuántas piezas de cada fruta compramos?\n Sea $x$ el número de manzanas ($M$) compradas, de manera que el total de naranjas ($N$) adquiridas será $12-x$. Por otro lado, si denotamos por $y$ el precio de las naranjas ($P_N$), será $y+3$ el precio de las manzanas ($P_M$). Expresemos el desembolso realizado, $1.32$ euros, en céntimos, esto es, $132$ céntimos, para así trabajar con números enteros. De esta manera, multiplicando las cantidades por los precios e igualando al mencionado desembolso, podemos plantear la siguiente ecuación diofántica,\n$$ x(y+3) + (12-x)y=132, $$\nes decir, $xy+3x+12y-xy=132$, que, simplificando, queda la ecuación $3x+12y=132$. Como $mcd(3,12) = 3$ y $3|132$, estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. Así pues, simplificando por el máximo común divisor queda\n$$ x+4y=44. $$\nComo, en total, se adquieren $12$ piezas de frutas y se compran más manzanas que naranjas, resulta que $7\\leq x\\leq 11$. Luego,\n   $x$ ($M$) $12-x$ ($N$) $y+3$ ($P_M$) $y$ ($P_N$)     $7$ $5$ $\\notin\\mathbb{N}$ $\\notin\\mathbb{N}$   $8$ $4$ $12$ $9$   $9$ $3$ $\\notin\\mathbb{N}$ $\\notin\\mathbb{N}$   $10$ $2$ $\\notin\\mathbb{N}$ $\\notin\\mathbb{N}$   $11$ $1$ $\\notin\\mathbb{N}$ $\\notin\\mathbb{N}$    Por tanto, compramos $8$ manzanas, a $12$ céntimos cada una, y $4$ naranjas, a $9$ céntimos la unidad. A modo anecdótico, es cierto que para $x=12$ también encontraríamos solución entera al problema. No obstante, si interpretamos el enunciado de manera que al menos ha comprado una unidad de cada tipo de fruta, esta solución quedaría descartada automáticamente, pues impide la adquisición de naranjas.\n","date":1549684779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"533831fc865f049b904f834012e285f2","permalink":"https://imalexissaez.github.io/2019/02/09/que-dificil-es-la-vida-sana/","publishdate":"2019-02-09T05:59:39+02:00","relpermalink":"/2019/02/09/que-dificil-es-la-vida-sana/","section":"post","summary":"Problema 50: cuando llenar la cesta de la compra se convierte en un acertijo.","tags":["Ecuaciones diofánticas","Problemas"],"title":"¡Qué difícil es la vida sana!","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 49: Halla los números naturales $n$ de manera que se cumpla que\n$$ 1+2+ \\cdots +n = k^2, $$\ncon $k$ número natural.\n Observamos rápidamente que para $n = 1$ se verifica la propiedad, sin más que tomar asimismo $k = 1$. El enunciado propuesto en el ejercicio es equivalente a hallar los números triangulares que son cuadrados perfectos. La ecuación diofántica $1+2+ \\cdots +n = k^2$ podemos escribirla de manera más compacta utilizando la conocida expresión para la suma de los primeros $n$ números naturales. Así,\n$$ \\dfrac{n(n+1)}{2} = k^2, $$\no, equivalentemente, $n^2 +n=2k^2$, dando lugar pues a la siguiente ecuación de segundo grado en $n$, $n^2 +n-2k^2 =0$. Por tanto,\n$$ n = \\dfrac{(-1)\\pm\\sqrt{1+8k^2}}{2}. $$\nComo buscamos valores naturales para $n$, podemos prescindir del signo $-$ que aparece en el numerador. Además, $1+8k^2$ ha de ser un cuadrado perfecto, que también necesitaremos sea impar, para que el numerador sea par y así $n$, efectivamente, pertenezca al conjunto de los números naturales. De esta manera, como ha de ser $1+8k^2$ un cuadrado perfecto, planteamos la ecuación $1+8k^2 = p^2$, que nos lleva a la ecuación de Pell\n$$ p^2 -8k^2 =1, $$\nde la cual sabemos posee infinitas soluciones en los enteros, pues $8$ no es un cuadrado perfecto. Por tanteo, una solución particular es $p=3$ y $k=1$, ya que $3^2 - 8\\cdot1^2=1$. Expresamos ahora la diferencia de cuadrados como producto de una suma y una diferencia, de forma que\n$$ 3^2 - 8\\cdot 1^2 =1\\Leftrightarrow (3+\\sqrt{8})(3-\\sqrt{8})=1. $$\nDe igual manera, la sucesión de soluciones enteras, que denotaremos por $(p_n,k_n)$, debe cumplir que $(p_n + k_n\\sqrt{8})(p_n - k_n\\sqrt{8})=1$. Obtengamos la solución general utilizando recurrencias, de manera que,\n$$ p_{n+1} + k_{n+1}\\sqrt{8} = (p_n+k_n\\sqrt{8})(3+\\sqrt{8}) = 3p_n + \\sqrt{8}p_n + 3\\sqrt{8}k_n + 8k_n, $$\nluego\n$$ \\begin{aligned} p_{n+1} \u0026amp;= 3p_n + 8k_n,\\\nk_{n+1} \u0026amp;= p_n + 3k_n. \\end{aligned} $$\nUtilizando notación matricial,\n$$ \\begin{bmatrix} p_{n+1}\\\nk_{n+1} \\end{bmatrix} = \\begin{bmatrix} 3 \u0026amp; 8\\\n1 \u0026amp; 3 \\end{bmatrix} \\begin{bmatrix} p_n\\\nk_n \\end{bmatrix}. $$\nAhora, $$n = \\dfrac{(-1) + p}{2},$$ por lo que la solución general del ejercicio queda como\n$$ \\begin{bmatrix} p_{n+1}\\\nk_{n+1} \\end{bmatrix} = \\begin{bmatrix} 3 \u0026amp; 8\\\n1 \u0026amp; 3 \\end{bmatrix} \\begin{bmatrix} p_n\\\nk_n \\end{bmatrix}, $$\ncon $(p_1,k_1) = (3,1)$ y $$n = \\dfrac{(-1) + p_n}{2}.$$\nAsí, para $p_1 = 3$, tenemos que $n = ((-1)+3) / 2 = 1$. Obtengamos algunas soluciones adicionales,\n$$ \\begin{bmatrix} p_{2}\\\nk_{2} \\end{bmatrix} = \\begin{bmatrix} 3 \u0026amp; 8\\\n1 \u0026amp; 3 \\end{bmatrix} \\begin{bmatrix} 3\\\n1 \\end{bmatrix} = \\begin{bmatrix} 17 \\\n6 \\end{bmatrix}, $$\ny entonces, para $p_2=17$ queda $n = ((-1) + 17) / 2 = 8$, esto es,\n$$ 1+2+ \\cdots +7+8 = 6^2. $$\nAhora,\n$$ \\begin{bmatrix} p_3\\\nk_3 \\end{bmatrix} = \\begin{bmatrix} 3 \u0026amp; 8\\\n1 \u0026amp; 3 \\end{bmatrix} \\begin{bmatrix} 17\\\n6 \\end{bmatrix} = \\begin{bmatrix} 99\\\n35 \\end{bmatrix}, $$\ny, por tanto, para $p=99$ queda $n = ((-1) + 99)/2 = 49$, es decir,\n$$ 1+2+ \\cdots +48+49 = 35^2, $$\nbastando aplicar el procedimiento tantas veces como soluciones deseemos encontrar.\n","date":1549425579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"8fbf4d8ff793adf98012d2c52d9034ee","permalink":"https://imalexissaez.github.io/2019/02/06/buscando-numeros-triangulares-que-son-cuadrados-perfectos/","publishdate":"2019-02-06T05:59:39+02:00","relpermalink":"/2019/02/06/buscando-numeros-triangulares-que-son-cuadrados-perfectos/","section":"post","summary":"Problema 49: un primer encuentro con la ecuación de Pell.","tags":["Ecuación de Pell","Ecuaciones diofánticas","Problemas"],"title":"Buscando números triangulares que son cuadrados perfectos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 48: Halla las soluciones enteras de la ecuación $x^2 - y^2=36$.\n Al ser $36$ par y múltiplo de $4$, $36 = 2^2 \\cdot 3^2$, estamos en condiciones de asegurar que la ecuación diofántica planteada admite solución entera. Escribimos $x^2 - y^2=36$ como $(x+y)(x-y)=36$, y consideramos\n$$ \\begin{aligned} 36 \u0026amp;= 36\\cdot1 \\\n\u0026amp;= 18\\cdot2 \\\n\u0026amp;= 12\\cdot3 \\\n\u0026amp;= 9\\cdot4 \\\n\u0026amp;= 6\\cdot6 \\\n\u0026amp;= 4\\cdot9 \\\n\u0026amp;= 3\\cdot12 \\\n\u0026amp;= 2\\cdot18 \\\n\u0026amp;= 1\\cdot36, \\end{aligned} $$\ndescartando automáticamente aquellos casos en los que la paridad de ambos términos no coincide.\nAsí, para $36 = 18\\cdot2$, tenemos el sistema de ecuaciones lineales\n$$ \\begin{aligned} x+y \u0026amp;= 18,\\\nx-y \u0026amp;= 2, \\end{aligned} $$\ncon solución $x = 10$ e $y = 8$. Para la descomposición $36 = (-18)\\cdot(-2)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-10)$ e $y = (-8)$.\nA continuación, si $36 = 6\\cdot6$, tenemos el sistema de ecuaciones lineales\n$$ \\begin{aligned} x+y \u0026amp;= 6,\\\nx-y \u0026amp;= 6, \\end{aligned} $$\ncon solución $x = 6$ e $y = 0$. Para la descomposición $36 = (-6)\\cdot(-6)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-6)$ e $y = 0$.\nActo seguido, si $36 = 2\\cdot18$, tenemos el sistema de ecuaciones lineales\n$$ \\begin{aligned} x+y \u0026amp;= 2,\\\nx-y \u0026amp;= 18, \\end{aligned} $$\ncon solución $x = 10$ e $y = (-8)$. Para la descomposición $36 = (-2)\\cdot(-18)$ el sistema de ecuaciones lineales que conformaríamos posee como solución $x = (-10)$ e $y = 8$.\nQueda así resuelta la ecuación diofántica planteada en el enunciado del ejercicio.\n","date":1549079979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"52e4e588486dc9f266ad394c28d61945","permalink":"https://imalexissaez.github.io/2019/02/02/un-primer-contacto-con-ecuaciones-diofanticas-iii/","publishdate":"2019-02-02T05:59:39+02:00","relpermalink":"/2019/02/02/un-primer-contacto-con-ecuaciones-diofanticas-iii/","section":"post","summary":"Problema 48: un rápido vistazo a una ecuación diofántica no lineal.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Un primer contacto con ecuaciones diofánticas (III)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 47: Una persona ha comprado entradas para el cine para personas adultas por un precio de $640$ unidades monetarias (um) cada una y para menores de edad a $330$ um. Sabiendo que invirtió $7140$ um y que compró menos entradas de adultos que de menores, hallar el número de entradas que adquirió.\n Sean $x$ el número de entradas para personas adultas compradas e $y$ el número de entradas para menores de edad compradas, con $x,y\\in\\mathbb{N}$. Dados los precios del enunciado y la cantidad total invertida, planteamos la siguiente ecuación diofántica:\n$$ 640x + 330y = 7140, $$\nque es equivalente, simplificando por $10$, a\n$$ 64x + 33y = 714. $$\nUtilicemos el Algoritmo de Euclides para hallar el $mcd(64,33)$ y decidir así si la ecuación admite o no solución entera. Tenemos que:\n$$ \\begin{aligned} 64 \u0026amp;= 33\\cdot 1 + 31,\\\n33 \u0026amp;= 31\\cdot 1 + 2,\\\n31 \u0026amp;= 2\\cdot 15 + 1,\\\n2 \u0026amp;= 1\\cdot 2, \\end{aligned} $$\nluego $mcd(64,33) = 1$, y como $1|714$, estamos en condiciones de asegurar que la ecuación diofántica admite solución entera. Como $714$ es un número ciertamente elevado, comencemos llevando a cabo el cambio de variable\n$$ \\begin{aligned} x \u0026amp;= 714x^{\\prime},\\\ny \u0026amp;= 714y^{\\prime}, \\end{aligned} $$\nde manera que la ecuación diofántica queda $64x^{\\prime} + 33y^{\\prime} = 1$ y nos invita a despejar $y^{\\prime}$, por ser la variable cuyo coeficiente asociado es más reducido, de forma que\n$$ y^{\\prime} = \\dfrac{1-64x^{\\prime}}{33}. $$\nAhora, como el valor que figura en el denominador de la igualdad anterior es $33$, a continuación, tendríamos que darle a $x^{\\prime}$, de manera ordenada, valores del menor sistema completo de restos módulo $33$ hasta hallar una solución particular.\nNo obstante, en lugar de llevar a cabo tan titánica labor, aprovecharemos las operaciones realizadas durante el Algoritmo de Euclides para descomponer la anterior fracción como sigue:\n$$ y^{\\prime} = -x^{\\prime} + \\dfrac{1 - 31x^{\\prime}}{33} = -x^{\\prime} + y^{\\prime\\prime}, $$\ncon\n$$ y^{\\prime\\prime} = \\dfrac{1 - 31x^{\\prime}}{33}, $$\nque equivale a $33y^{\\prime\\prime} = 1 - 31x^{\\prime}$, de manera que ahora tendríamos que despejar $x^{\\prime}$, quedando:\n$$ x^{\\prime} = \\dfrac{1-33y^{\\prime\\prime}}{31} = -y^{\\prime\\prime} + \\dfrac{1-2y^{\\prime\\prime}}{31}=-y^{\\prime\\prime} + x^{\\prime\\prime}, $$\ncon\n$$ x^{\\prime\\prime} = \\dfrac{1-2y^{\\prime\\prime}}{31}, $$\nque equivale a $31x^{\\prime\\prime} = 1-2y^{\\prime\\prime}$, y despejando $y^{\\prime\\prime}$ tenemos que\n$$ y^{\\prime\\prime} = \\dfrac{1-31x^{\\prime\\prime}}{2}. $$\nTras aplicar en retiradas ocasiones la misma estrategia de descomposición, hemos alcanzado un valor razonable para el denominador de la anterior ecuación. Podemos así dar valores a $x^{\\prime\\prime}$, ya que únicamente tendríamos que probar $x^{\\prime\\prime} =0$, y $x^{\\prime\\prime} =1$ (que conforma el menor sistema completo de restos módulo $2$). Para $x^{\\prime\\prime} =0$, $y^{\\prime\\prime} \\notin\\mathbb{Z}$, pero para $x^{\\prime\\prime} =1$, $y^{\\prime\\prime} = -15$. Ahora,\n$$ \\begin{aligned} x^{\\prime} \u0026amp;= -y^{\\prime\\prime} + x^{\\prime\\prime} = 15+1 = 16,\\\ny^{\\prime} \u0026amp;= -x^{\\prime} + y^{\\prime\\prime} = -16 -15 = -31,\\\nx \u0026amp;= 714x^{\\prime} = 714\\cdot 16 = 11424,\\\ny \u0026amp;= 714y^{\\prime} = 714\\cdot(-31) = -22134, \\end{aligned} $$\npor lo que la solución particular queda\n$$ \\begin{aligned} x_0 \u0026amp;= 11424,\\\ny_0 \u0026amp;= -22134, \\end{aligned} $$\nmientras que la solución general es\n$$ \\begin{aligned} x \u0026amp;= 11424 + 33t,\\\ny \u0026amp;= -22134 - 64t, \\end{aligned} $$\ncon $t\\in\\mathbb{Z}$.\nAhora que hemos resuelto la ecuación diofántica, centrémonos en sacar el número de entradas. Por un lado, en ambos casos debe tratarse de un número mayor o igual que cero, es decir, tanto $x\\geq0$, como $y\\geq0$. Además, nos dicen que compró menos entradas de adultos que de menores, es decir, que $x\u0026lt;y$. Todo esto da lugar a las siguientes condiciones:\n$$ \\begin{aligned} x = 11424 + 33t\u0026amp;\\geq0,\\\ny = -22134 - 64t\u0026amp;\\geq0,\\\n11424 + 33t \u0026amp;\u0026lt; -22134 - 64t, \\end{aligned} $$\ncon $t\\in\\mathbb{Z}$. De la primera inecuación, se llega a que\n$$ t\\geq -\\dfrac{11424}{33}, $$\nluego $t\\geq -346$. De la segunda inecuación, se llega a que\n$$ t\\leq -\\dfrac{22134}{64}, $$\nluego $t\\leq -346$, con lo cual $t=346$, cantidad que, efectivamente, también verifica la tercera inecuación. Así,\n$$ \\begin{aligned} x \u0026amp;= 11424 + 33\\cdot(-346) = 6,\\\ny \u0026amp;= -22134 - 64\\cdot(-346) = 10, \\end{aligned} $$\nes decir, compró $6$ entradas para adultos y $10$ entradas para menores de edad.\n","date":1548820779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"0cb87be4e1aa55b14e22557e111a70cb","permalink":"https://imalexissaez.github.io/2019/01/30/nos-vamos-al-cine/","publishdate":"2019-01-30T05:59:39+02:00","relpermalink":"/2019/01/30/nos-vamos-al-cine/","section":"post","summary":"Problema 47: ¡qué complicado es salir en familia!.","tags":["Ecuaciones diofánticas","Problemas"],"title":"¡Nos vamos al cine!","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 46: Estudia cuáles de estas ecuaciones diofánticas tiene solución entera y, en su caso, calcúlala:\n (a) $25x+36y=10$. (b) $200x+1768y=8$. (c) $40x+50y=3$. (d) $213x+1123y=18$. (e) $14x+165y=1$.   Para el apartado (a), como $25=5^2$ y $36 = 2^2 \\cdot3^2$, entonces $mcd(25,36)=1$, y, dado que $1|10$, estamos en condiciones de asegurar que la ecuación diofántica propuesta admite solución entera. Empecemos despejando la variable $x$, por ser aquella cuyo coeficiente asociado es más reducido. Así,\n$$ x = \\dfrac{10-36y}{25} = -y + \\dfrac{10-11y}{25} = -y+x^{\\prime}, $$\ncon\n$$ x^{\\prime}=\\dfrac{10-11y}{25}, $$\nesto es, $25x^{\\prime} + 11y = 10$, luego\n$$ y = \\dfrac{10-25x^{\\prime}}{11} = -2x^{\\prime} + \\dfrac{10-3x^{\\prime}}{11} = -2x^{\\prime}+y^{\\prime}, $$\ncon\n$$ y^{\\prime}=\\dfrac{10-3x^{\\prime}}{11}, $$\nes decir, $3x^{\\prime} +11y^{\\prime} =10$. Finalmente,\n$$ x^{\\prime} = \\dfrac{10-11y^{\\prime}}{3}, $$\npor lo que basta probar para $y^{\\prime}$ valores pertenecientes al menor sistema completo de restos módulo $3$. Para $y^{\\prime} =2$, tenemos que $x^{\\prime} = (-4)$, y deshaciendo ahora los cambios de variable llevados a cabo anteriormente,\n$$ \\begin{aligned} y \u0026amp;= -2x^{\\prime} + y^{\\prime} = 8+2=10,\\\nx \u0026amp;= -y + x^{\\prime} = (-10) - 4 = -14, \\end{aligned} $$\nesto es, una solución particular para la ecuación diofántica planteada es $(x_0,y_0) = ((-14), 10)$, mientras que su solución general queda\n$$ \\begin{aligned} x \u0026amp;= (-14) + 36t,\\\ny \u0026amp;= 10 - 25t, \\end{aligned} $$\ncon $t$ número entero.\nDe cara al apartado (b), comencemos calculando el máximo común divisor de $200$ y $1768$ por el Algoritmo de Euclides. Tenemos que,\n$$ \\begin{aligned} 1768 \u0026amp;= 200\\cdot8 + 168,\\\n200 \u0026amp;= 168\\cdot1 + 32,\\\n168 \u0026amp;= 32\\cdot5 + 8,\\\n32 \u0026amp;= 8\\cdot4, \\end{aligned} $$\npor lo que $mcd(200,1768) = 8$ y, evidentemente, $8|8$, por lo que estamos en condiciones de asegurar que la ecuación diofántica propuesta en este apartado admite solución entera. Simplificando dicha ecuación por $8$ queda $25x + 221y = 1$. Despejemos la variable $x$, por ser aquella cuyo coeficiente es más reducido,\n$$ x = \\dfrac{1-221y}{25} = -8y + \\dfrac{1-21y}{25} = -8y + x^{\\prime},\\quad\\text{con}\\quad x^{\\prime} = \\dfrac{1-21y}{25}, $$\nesto es, $25x^{\\prime} +21y = 1$, luego\n$$ \\begin{aligned} y = \\dfrac{1-25x^{\\prime}}{21} = -x^{\\prime} + \\dfrac{1-4x^{\\prime}}{21} = -x^{\\prime} +y^{\\prime},\\quad\\text{con}\\quad y^{\\prime} = \\dfrac{1-4x^{\\prime}}{21}, \\end{aligned} $$\nes decir, $4x^{\\prime} + 21y^{\\prime} = 1$, por lo que\n$$ \\begin{aligned} x^{\\prime} = \\dfrac{1-21y^{\\prime}}{4}, \\end{aligned} $$\ny ya únicamente basta probar valores para $y^{\\prime}$ que pertenezcan al menor sistema completo de restos módulo $4$. Así, para $y^{\\prime} = 1$, tenemos que $x^{\\prime} = (-5)$, y deshaciendo los cambios de variable llevados a cabo arriba,\n$$ \\begin{aligned} y \u0026amp;= -x^{\\prime}+y^{\\prime} = 5+1=6,\\\nx \u0026amp;= -8y+x^{\\prime} = (-48)-5 = (-53). \\end{aligned} $$\nUna solución para la ecuación diofántica planteada es $(x_0,y_0) = ((-53), 6)$, y su solución general queda\n$$ \\begin{aligned} x \u0026amp;= (-53) + 1768t,\\\ny \u0026amp;= 6-200t, \\end{aligned} $$\ncon $t$ número entero.\nA continuación, en el apartado (c), como $40 = 2^3 \\cdot5$ y $50 = 2\\cdot5^2$, resulta que $mcd(40,50) = 10$, y dado que $10\\nmid 3$, estamos en condiciones de asegurar que la ecuación diofántica propuesta no admite solución entera.\nPara el apartado (d), empecemos calculando el máximo común divisor de $213$ y $1123$ utilizando el Algoritmo de Euclides,\n$$ \\begin{aligned} 1123 \u0026amp;= 213\\cdot5 + 58,\\\n213 \u0026amp;= 58\\cdot3 + 39,\\\n58 \u0026amp;= 39\\cdot1 + 19,\\\n39 \u0026amp;= 19\\cdot2 + 1,\\\n19 \u0026amp;= 1\\cdot19, \\end{aligned} $$\npor lo que $mcd(213, 1123)=1$, esto es, la ecuación diofántica admite solución entera, ya que, obviamente, $1|18$. Por comodidad en los cálculos, empecemos llevando a cabo el cambio de variable\n$$ \\begin{aligned} x \u0026amp;= 18x^{\\prime},\\\ny \u0026amp;= 18y^{\\prime}, \\end{aligned} $$\ny así queda, $213x^{\\prime} + 1123y^{\\prime}=1$. Despejando la variable $x^{\\prime}$, por ser aquella cuyo coeficiente asociado es más reducido, llegamos a que\n$$ x^{\\prime} = \\dfrac{1-1123y^{\\prime}}{213} = -5y^{\\prime} + \\dfrac{1-58y^{\\prime}}{213} = -5y^{\\prime}+x^{\\prime\\prime}, $$\ncon\n$$ x^{\\prime\\prime} = \\dfrac{1-58y^{\\prime}}{213}, $$\nesto es, $213x^{\\prime\\prime} + 58y^{\\prime} = 1$. Ahora,\n$$ y^{\\prime} = \\dfrac{1-213x^{\\prime\\prime}}{58} = -3x^{\\prime\\prime} + \\dfrac{1-39x^{\\prime\\prime}}{58} = -3x^{\\prime\\prime} + y^{\\prime\\prime}, $$\ncon\n$$ y^{\\prime\\prime} = \\dfrac{1-39x^{\\prime\\prime}}{58}, $$\nes decir, $39x^{\\prime\\prime} + 58y^{\\prime\\prime} = 1$. A continuación,\n$$ x^{\\prime\\prime} = \\dfrac{1-58y^{\\prime\\prime}}{39} = -y^{\\prime\\prime} + \\dfrac{1-19y^{\\prime\\prime}}{39} = -y^{\\prime\\prime} + x^{\\prime\\prime\\prime}, $$\ncon\n$$ x^{\\prime\\prime\\prime} = \\dfrac{1-19y^{\\prime\\prime}}{39}, $$\nesto es, $39x^{\\prime\\prime\\prime} + 19y^{\\prime\\prime}=1$. Acto seguido,\n$$ y^{\\prime\\prime} = \\dfrac{1-39x^{\\prime\\prime\\prime}}{19} = -2x^{\\prime\\prime\\prime} + \\dfrac{1-x^{\\prime\\prime\\prime}}{19} = -2x^{\\prime\\prime\\prime} + y^{\\prime\\prime\\prime}, $$\ncon\n$$ y^{\\prime\\prime\\prime} = \\dfrac{1-x^{\\prime\\prime\\prime}}{19}, $$\nes decir, $x^{\\prime\\prime\\prime} +19y^{\\prime\\prime\\prime} = 1$, luego $x^{\\prime\\prime\\prime} = 1-19y^{\\prime\\prime\\prime}$. Una solución particular para esta última es $(x^{\\prime\\prime\\prime}_0, y^{\\prime\\prime\\prime}_0) = (1,0)$, y así, deshaciendo los cambios de variable realizados, arribamos a\n$$ \\begin{aligned} y^{\\prime\\prime}_0 \u0026amp;= -2x^{\\prime\\prime\\prime}_0 + y^{\\prime\\prime\\prime}_0 = (-2)+0 = (-2),\\\nx^{\\prime\\prime}_0 \u0026amp;= -y^{\\prime\\prime}_0 + x^{\\prime\\prime\\prime}_0 = 2+1 = 3,\\\ny^{\\prime}_0 \u0026amp;= -3x^{\\prime\\prime}_0 + y^{\\prime\\prime}_0 = (-9) - 2 = (-11),\\\nx^{\\prime}_0 \u0026amp;= -5y^{\\prime}_0 + x^{\\prime\\prime}_0 = 55 + 3 = 58,\\\ny_0 \u0026amp;= 18y^{\\prime}_0 = (-198),\\\nx_0 \u0026amp;= 18x^{\\prime}_0 = 1044, \\end{aligned} $$\npor lo que la solución general a la ecuación diofántica planteada es\n$$ \\begin{aligned} x \u0026amp;= 1044 + 1123t,\\\ny \u0026amp;= (-198) - 213t, \\end{aligned} $$\ncon $t$ número entero.\nFinalmente, en el apartado (e), como\n$$ \\begin{aligned} 14 \u0026amp;= 2\\cdot7,\\\n165 \u0026amp;= 3\\cdot5\\cdot11, \\end{aligned} $$\nentonces $mcd(14,165)=1$, por lo que la ecuación diofántica propuesta admite solución entera. Despejando la variable $x$, por ser aquella cuyo coeficiente asociado es más reducido, tenemos que\n$$ x=\\dfrac{1-165y}{14}=-11y+\\dfrac{1-11y}{14}=-11y+x^{\\prime}, $$\ncon\n$$ x^{\\prime}=\\dfrac{1-11y}{14}, $$\nesto es, $14x^{\\prime}+11y=1$. Ahora,\n$$ y=\\dfrac{1-14x^{\\prime}}{11}=-x^{\\prime}+\\dfrac{1-3x^{\\prime}}{11}=-x^{\\prime}+y^{\\prime}, $$\ncon\n$$ y^{\\prime}=\\dfrac{1-3x^{\\prime}}{11}, $$\nes decir, $3x^{\\prime} +11y^{\\prime}=1$. A continuación,\n$$ \\begin{aligned} x^{\\prime} =\\dfrac{1-11y^{\\prime}}{3}, \\end{aligned} $$\npor lo que basta probar, para $y^{\\prime}$, valores pertenecientes al menor sistema completo de restos módulo $3$. Para $y^{\\prime}_0=2$, es cierto que $x^{\\prime}_0 = (-7)$, y deshaciendo los cambios de variable llevados a cabo,\n$$ \\begin{aligned} y_0 \u0026amp;= -x^{\\prime}_0 + y^{\\prime}_0 = 7+2=9,\\\nx_0 \u0026amp;= -11y_0 + x^{\\prime}_0 = (-99)-7 = (-106), \\end{aligned} $$\nllegamos a una solución particular para la ecuación diofántica planteada. Así, su solución general queda\n$$ \\begin{aligned} x \u0026amp;= (-106) + 165t,\\\ny \u0026amp;= 9-14t, \\end{aligned} $$\ncon $t$ número entero.\n","date":1548475179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"910d6cc04f4d482938d1c11db7c887ac","permalink":"https://imalexissaez.github.io/2019/01/26/un-primer-contacto-con-ecuaciones-diofanticas-ii/","publishdate":"2019-01-26T05:59:39+02:00","relpermalink":"/2019/01/26/un-primer-contacto-con-ecuaciones-diofanticas-ii/","section":"post","summary":"Problema 46: decidiendo cuándo existe solución y calculándola.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Un primer contacto con ecuaciones diofánticas (II)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 45:\n (a) Sea $c$ un número entero positivo tal que $10\\leq c\\leq 100$. ¿Cuál es el valor mínimo de $c$ para el cual la ecuación $84x+990y=c$ admite solución entera? (b) Un hombre compra caballos y vacas, pagando $1770$ euros. Una vaca cuesta $21$ euros y un caballo $31$ euros. ¿Cuántos caballos y vacas ha comprado?   Para el apartado (a), como\n$$ \\begin{aligned} 84 \u0026amp;= 2^2 \\cdot3\\cdot7,\\\n990 \u0026amp;= 2\\cdot 3^2 \\cdot5\\cdot11, \\end{aligned} $$\nentonces $mcd(84, 990) = 6$. Para que la ecuación diofántica planteada admita soluciones enteras, $6$ ha de dividir a $c$ y como buscamos el valor mínimo de $c$, nuestra tarea se reduce pues a encontrar el primer múltiplo de $6$ que pertenezca al intervalo $[10,100]$. La solución será, por tanto, $c=12$.\nEn cuanto al apartado (b), consideremos $x$ el número de vacas compradas e $y$ el total de caballos adquiridos. Dados sus respectivos precios y el importe total desembolsado, planteamos la ecuación diofántica\n$$ 21x + 31y = 1770. $$\nComo $mcd(21,31) = 1$ y $1|1770$, estamos en condiciones de asegurar que la anterior ecuación diofántica admite solución entera. Para aliviar cálculos, empecemos llevando a cabo el cambio de variable\n$$ \\begin{aligned} x \u0026amp;= 1770x^{\\prime},\\\ny \u0026amp;= 1770y^{\\prime}, \\end{aligned} $$\ncon lo cual queda $21x^{\\prime} + 31y^{\\prime} = 1$. Despejando ahora la variable $x^{\\prime}$,\n$$ \\begin{aligned} x^{\\prime} = \\dfrac{1-31y^{\\prime}}{21} = -y^{\\prime} + \\dfrac{1 - 10y^{\\prime}}{21} = -y^{\\prime} + x^{\\prime\\prime}, \\end{aligned} $$\ncon\n$$ x^{\\prime\\prime} = \\dfrac{1-10y^{\\prime}}{21}, $$\nes decir, $21x^{\\prime\\prime} = 1-10y^{\\prime}$, y despejando ahora la variable $y^{\\prime}$,\n$$ y^{\\prime} = \\dfrac{1-21x^{\\prime\\prime}}{10}, $$\necuación para la que, por tanteo, rápidamente observamos que si $x^{\\prime\\prime} = 1$, entonces $y^{\\prime} = (-2)$. Deshaciendo ahora los cambios de variable realizados,\n$$ \\begin{aligned} x^{\\prime} \u0026amp;= -y^{\\prime} + x^{\\prime\\prime} = 2 + 1 = 3,\\\nx \u0026amp;= 1770x^{\\prime} = 1770\\cdot3 = 5310,\\\ny \u0026amp;= 1770y^{\\prime} = 1770\\cdot(-2) = -3540, \\end{aligned} $$\nllegamos a una solución particular de la ecuación diofántica propuesta. Así, su solución general queda\n$$ \\begin{aligned} x \u0026amp;= 5310 + 31t,\\\ny \u0026amp;= (-3540) - 21t, \\end{aligned} $$\ncon $t$ número entero. El número de animales que ha comprado de cada clase ha de ser, necesariamente, mayor o igual que cero, por lo que planteamos las inecuaciones,\n$$ \\begin{aligned} 5310 + 31t \u0026amp;\\geq 0\\Rightarrow t\\geq -\\dfrac{5310}{31} = -171.29,\\\n-3540-21t \u0026amp;\\geq 0\\Rightarrow t\\leq -\\dfrac{3540}{21} = -168.57. \\end{aligned} $$\nComo $t$ ha de ser entero, concluimos que $-171\\leq t\\leq -169$. Por tanto,\n   $t$ $x$ (vacas) $y$ (caballos)     $-171$ $9$ $51$   $-170$ $40$ $30$   $-169$ $71$ $9$    Siendo así la posible respuesta, al interrogante planteado en el enunciado del ejercicio, cualquiera de las anteriores tres posibilidades.\n","date":1548215979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"f37f6bfeb08349cf9543753e8fc8aab4","permalink":"https://imalexissaez.github.io/2019/01/23/un-primer-contacto-con-ecuaciones-diofanticas-i/","publishdate":"2019-01-23T05:59:39+02:00","relpermalink":"/2019/01/23/un-primer-contacto-con-ecuaciones-diofanticas-i/","section":"post","summary":"Problema 45: matemáticas de caballos y vacas.","tags":["Ecuaciones diofánticas","Problemas"],"title":"Un primer contacto con ecuaciones diofánticas (I)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 44: Encuentra los dos últimos dígitos de\n$$ 2017^{2018^{2019}} + 2018^{2019^{2020}} + 2019^{2020^{2021}} $$\n Para encontrar las dos últimas cifras de la operación indicada en el enunciado del ejercicio, un posible enfoque pasa por trabajar con el valor de las congruencias módulo $100$. Estudiemos el valor de dichas congruencias para cada uno de los tres sumandos por separado.\nEn primer lugar, es cierto que\n$$ 2017^{2018^{2019}} \\equiv 17^{2018^{2019}} \\pmod{100}. $$\nAhora, como $mcd(17,100) = 1$, por el Teorema de Euler-Fermat, sabemos que\n$$ 17^{\\varphi(100)} \\equiv 1\\pmod{100}, $$\ny como $100 = 2^2 \\cdot 5^2$,\n$$ \\varphi(100) = 100\\cdot\\left(1-\\dfrac{1}{2}\\right)\\cdot\\left(1-\\dfrac{1}{5}\\right) = 40, $$\nesto es, $17^{40} \\equiv 1\\pmod{100}$. Estudiemos pues el valor de la congruencia módulo $40$ para el exponente, $2018^{2019}$. Por el Teorema chino del resto, la ecuación de congruencia lineal $x\\equiv 2018^{2019} \\pmod{40}$ es equivalente al sistema de ecuaciones de congruencia lineales\n$$ \\begin{aligned} x\u0026amp;\\equiv 2018^{2019} \\pmod{5},\\\nx\u0026amp;\\equiv 2018^{2019} \\pmod{8}, \\end{aligned} $$\nya que $mcd(5,8)=1$ y $5\\cdot8 = 40$. No obstante,\n$$ 2018^{2019} \\equiv 3^{2019}\\pmod{5}, $$\ny como $5$ es un número primo y $mcd(3,5) = 1$, por el Pequeño Teorema de Fermat, $3^4 \\equiv 1\\pmod{5}$. Como $2019 = 4\\cdot 504 + 3$, es cierto que\n$$ 3^{2019} = 3^3\\cdot (3^4)^{504} \\equiv (3^3 \\cdot 1^{504}) \\pmod{5} \\equiv 2\\pmod{5}. $$\nPor otro lado, $2018 = 2\\cdot1009$, por lo que,\n$$ \\begin{aligned} 2018^{2019} \u0026amp;= (2\\cdot1009)^{2019} \\\n\u0026amp;= 2^{2019} \\cdot 1009^{2019} \\\n\u0026amp;= 2^3 \\cdot 2^{2016} \\cdot 1009^{2019} \\\n\u0026amp;= 8 \\cdot 2^{2016} \\cdot 1009^{2019}, \\end{aligned} $$\ny así, podemos concluir que $2018^{2019} \\equiv 0\\pmod{8}$. Por consiguiente, el sistema de ecuaciones de congruencia lineales planteado arriba es equivalente a\n$$ \\begin{aligned} x\u0026amp;\\equiv 2\\pmod{5},\\\nx\u0026amp;\\equiv 0\\pmod{8}. \\end{aligned} $$\nEste último podemos resolverlo, de forma mecánica, con el procedimiento habitual que nos proporciona el Teorema chino del resto o razonando sin más. Buscamos aquí un múltiplo de $8$ (menor que $40$) que al dividirlo entre $5$ devuelva un resto de valor $2$. Tras unos rápidos cálculos mentales, encontramos que el número $32$ satisface las restricciones impuestas y, por tanto, la solución al sistema planteado arriba es $x\\equiv 32\\pmod{40}$. Con todo, hemos llegado a que\n$$ 2017^{2018^{2019}} \\equiv 17^{2018^{2019}} \\pmod{100}\\equiv 17^{32} \\pmod{100}. $$\nAhora bien, $17^{32} = ( 17^2 )^{16} = 189^{16} \\equiv 89^{16} \\pmod{100}$. Aplicando esta forma de proceder de manera recurrente, podemos reducir, en unos pocos pasos, $17^{32}$ a un número para el que el cálculo de su congruencia módulo $100$ sea razonable. Así,\n$$ \\begin{aligned} 17^{32} \u0026amp;\\equiv 89^{16} \\pmod{100} \\\n\u0026amp;\\equiv (-11)^{16} \\pmod{100} \\\n\u0026amp;\\equiv 11^{16} \\pmod{100} \\\n\u0026amp;\\equiv 21^8 \\pmod{100}\\\n\u0026amp;\\equiv 41^4 \\pmod{100} \\\n\u0026amp;\\equiv 81^2 \\pmod{100} \\\n\u0026amp;\\equiv 61\\pmod{100}, \\end{aligned} $$\nesto es,\n$$ 2017^{2018^{2019}} \\equiv 61\\pmod{100}. $$\nPara el segundo sumando, utilizaremos el Teorema chino del resto desde el principio. Así, la ecuación de congruencia lineal\n$$ x\\equiv 2018^{2019^{2020}} \\pmod{100} $$\nes equivalente al sistema de ecuaciones de congruencia lineales\n$$ \\begin{aligned} x\u0026amp;\\equiv 2018^{2019^{2020}} \\pmod{4},\\\nx\u0026amp;\\equiv 2018^{2019^{2020}} \\pmod{25}, \\end{aligned} $$\npuesto que $mcd(4,25)=1$ y $4\\cdot25=100$. Ahora bien, por lo que respecta a la primera de ellas,\n$$ 2018^{2019^{2020}} \\equiv 0\\pmod{4}, $$\npues $2018 = 2\\cdot1009$ y, gracias a ese dos que figura en la descomposición en factores primos de $2018$, operando adecuadamente con las propiedades de los exponentes (de una forma similar a como actuamos en el caso anterior) es fácil ver que la torre de potencias es múltiplo de cuatro. Por otro lado,\n$$ 2018^{2019^{2020}} \\equiv 18^{2019^{2020}} \\pmod{25}, $$\ny como $mcd(18,25)=1$ estamos en condiciones de volver a aplicar el Teorema de Euler-Fermat. Así,\n$$ 18^{\\varphi(25)}\\equiv 1\\pmod{25}, $$\ny, dado que $25=5^2$, es cierto que\n$$ \\varphi(25) = 25\\cdot\\left(1-\\dfrac{1}{5}\\right) = 20. $$\nPor consiguiente, únicamente nos resta explorar el valor de la congruencia módulo $20$ del exponente, $2019^{2020}$. Sin embargo,\n$$ \\begin{aligned} 2019^{2020} \u0026amp;\\equiv (-1)^{2020} \\pmod{20} \\\n\u0026amp;\\equiv 1^{2020}\\pmod{20} \\\n\u0026amp;\\equiv 1\\pmod{20}, \\end{aligned} $$\ny entonces\n$$ 2018^{2019^{2020}} \\equiv 18^{2019^{2020}} \\pmod{25}\\equiv 18\\pmod{25}. $$\nPor tanto, el sistema de ecuaciones de congruencia lineales planteado queda\n$$ \\begin{aligned} x\u0026amp;\\equiv 0\\pmod{4},\\\nx\u0026amp;\\equiv 18\\pmod{25}. \\end{aligned} $$\nEste último podemos resolverlo, de forma mecánica, por el clásico procedimiento asociado al Teorema chino del resto o simplemente razonando sin más. En esta ocasión, buscamos un múltiplo de cuatro (menor que $100$), tal que al dividirlo por $25$ deje un resto que asciende a $18$. Tras unos rápidos cálculos mentales, deducimos que dicho valor es $68$, luego la solución al sistema de ecuaciones planteado es $x\\equiv 68\\pmod{100}$.\nFinalmente, el modo de actuar con el tercer sumando es similar al llevado a cabo para el primero. Así,\n$$ 2019^{2020^{2021}} \\equiv 19^{2020^{2021}} \\pmod{100}, $$\ny como $mcd(19,100)=1$ sabemos, por el Teorema de Euler-Fermat, que $19^{\\varphi(100)} = 19^{40} \\equiv 1\\pmod{100}$, por lo que únicamente nos resta averiguar el valor de la congruencia módulo $40$ de exponente, $2020^{2021}$. Para ello utilizaremos, de nuevo, el Teorema chino del resto, que nos garantiza que la ecuación de congruencia lineal\n$$ x\\equiv 2020^{2021} \\pmod{40} $$\nes equivalente al sistema de ecuaciones de congruencia lineales\n$$ \\begin{aligned} x\u0026amp;\\equiv 2020^{2021} \\pmod{5},\\\nx\u0026amp;\\equiv 2020^{2021} \\pmod{8}, \\end{aligned} $$\npues $mcd(5,8)=1$ y $5\\cdot8=40$. Ahora bien, como $2020 = 2^2 \\cdot5\\cdot101$, el exponente es, directamente, múltiplo de $5$ y, por otra parte, operando adecuadamente con las propiedades de las potencias, deducimos rápidamente que asimismo será múltiplo de $8$, esto es, el sistema de ecuaciones de congruencia lineales queda\n$$ \\begin{aligned} x\u0026amp;\\equiv 0\\pmod{5},\\\nx\u0026amp;\\equiv 0\\pmod{8}, \\end{aligned} $$\ny su solución, trivialmente, es $x\\equiv 0\\pmod{40}$. Por consiguiente,\n$$ 2019^{2020^{2021}} \\equiv 19^{2020^{2021}} \\pmod{100}\\equiv 1\\pmod{100}. $$\nRecapitulando,\n$$ \\begin{aligned} 2017^{2018^{2019}} \u0026amp;\\equiv 61\\pmod{100},\\\n2018^{2019^{2020}} \u0026amp;\\equiv 68\\pmod{100},\\\n2019^{2020^{2021}} \u0026amp;\\equiv 1\\pmod{100}, \\end{aligned} $$\nluego\n$$ \\begin{aligned} \\left(2017^{2018^{2019}} + 2018^{2019^{2020}} + 2019^{2020^{2021}} \\right)\u0026amp;\\equiv (61+68+1)\\pmod{100}\\\n\u0026amp;\\equiv 30\\pmod{100}, \\end{aligned} $$\nes decir, las dos últimas cifras de la operación indicada en el enunciado del ejercicio son $30$.\n","date":1547870379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564610401,"objectID":"2ca6248a29ff28c7174326b9b3d600f1","permalink":"https://imalexissaez.github.io/2019/01/19/2019-anno-de-las-torres-de-potencias/","publishdate":"2019-01-19T05:59:39+02:00","relpermalink":"/2019/01/19/2019-anno-de-las-torres-de-potencias/","section":"post","summary":"Problema 44: uno de esos ejercicios que te tiene entretenido un rato.","tags":["Fórmula de Legendre","Pequeño Teorema de Fermat","Problemas","Teorema chino del resto","Teorema de Euler-Fermat","Teoría de números"],"title":"2019, año de las torres de potencias","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 43: Encuentra los dos últimos dígitos no nulos de $2017!$.\n Dado que hay menos potencias de $5$ que de $2$ en $n!$ para cada $n\u0026gt;1$, el número de ceros al final de $n!$ es\n$$ \\left\\lfloor\\dfrac{n}{5}\\right\\rfloor + \\left\\lfloor\\dfrac{n}{5^2}\\right\\rfloor + \\left\\lfloor\\dfrac{n}{5^3}\\right\\rfloor + \\cdots. $$\nPara $n=2017$, tenemos que\n$$ \\begin{aligned} \\left\\lfloor\\dfrac{2017}{5}\\right\\rfloor + \\left\\lfloor\\dfrac{2017}{25}\\right\\rfloor + \\left\\lfloor\\dfrac{2017}{125}\\right\\rfloor + \\left\\lfloor\\dfrac{2017}{625}\\right\\rfloor \u0026amp;= 403 + 80 + 16 + 3 \\\n\u0026amp;= 502, \\end{aligned} $$\nesto es $2017!$ acaba en $502$ ceros, situación que nos obliga a encontrar entonces el valor de la congruencia\n$$ x \\equiv \\dfrac{2017!}{2^{502}\\cdot 5^{502}}\\pmod{100}. $$\nComo $100=4\\cdot25$ y $mcd(4,25)=1$, es decir, son primos entre sí, hallaremos el valor de las congruencias para estos dos módulos y, después, aplicaremos el Teorema chino del resto.\nPara empezar,\n$$ \\dfrac{2017!}{2^{502} \\cdot 5^{502}}\\equiv 0\\pmod{4}, $$\ndebido a que en el numerador encontramos muchas más potencias de $2$ que las $502$ que hay de $5$ (de hecho, aplicando la fórmula anterior, podríamos calcular el exponente del número primo $2$ en la factorización de $2017!$ si fuese preciso).\nPor comodidad, consideremos\n$$ f(x) = \\dfrac{x!}{5^k}\\pmod{25}, $$\ndonde $5^k$ es la mayor potencia de $5$ que divide a $x$, valor que podemos hallar haciendo uso de la expresión que figura unos párrafos arriba.\nAhora bien, resulta que\n$$ \\begin{aligned} (5k+1)(5k+2)(5k+3)(5k+4)\u0026amp;= 625k^4 + 1250k^3 + 875k^2 + 250k + 24\\\n\u0026amp;\\equiv (-1)\\pmod{25}, \\end{aligned} $$\nhecho que nos permite escribir\n$$ \\begin{aligned} f(2017)\u0026amp;=\\dfrac{2017!}{5^{502}}\\pmod{25}\\\n\u0026amp;=\\dfrac{(1\\cdot2\\cdot3\\cdot4)\\cdot1\\cdot(1\\cdot2\\cdot3\\cdot4)\\cdot2\\cdots(1\\cdot2\\cdot3\\cdot4)\\cdot403\\cdot(16\\cdot17)}{5^{99}}\\pmod{25}\\\n\u0026amp;=(-1)^{403}\\cdot22\\cdot f(403)\\pmod{25}. \\end{aligned} $$\nVeamos en detalle la anterior cadena de igualdades:\n Los primeros términos de $2017!$ son $1\\cdot2\\cdot3\\cdot4\\cdot5$, de manera que ese $5$ se simplifica con uno de los que aparece en el denominador, quedando $1$. Por otra parte, por lo visto anteriormente, $(1\\cdot2\\cdot3\\cdot4)\\equiv(-1)\\pmod{25}$. A continuación, aparecería el producto $6\\cdot7\\cdot8\\cdot9\\cdot10$. Por lo que respecta al $10=2\\cdot5$, queda como $2$ al simplificar el $5$ con uno de los que figura en el denominador. Por otro lado, $6\\cdot7\\cdot8\\cdot9$ $=$ $(5\\cdot1+1)$ $(5\\cdot1+2)$ $(5\\cdot1+3)$ $(5\\cdot1+4)\\equiv (-1)\\pmod{25}$, tal y como vimos anteriormente. Al ser cierta esa congruencia podemos, por ejemplo, sustituir el anterior producto simplemente por $1\\cdot2\\cdot3\\cdot4$, del que también sabemos es congruente con $(-1)$ módulo $25$. Como $2017 = 5\\cdot403+2$, esta manera de proceder la podemos llevar a cabo en $403$ ocasiones (hecho que explica el $(-1)^{403}$ que aparece posteriormente), quedando sin \u0026lsquo;\u0026lsquo;agrupar\u0026rsquo;\u0026rsquo; los dos últimos términos (dado el orden que hemos establecido) de $2017!$, esto es, $2016$ y $2017$. Sin embargo, $2016\\equiv 16\\pmod{25}$ y $2017\\equiv 17\\pmod{25}$. Además, $16\\cdot17 = 272\\equiv 22\\pmod{25}$, cifra que figura en la última igualdad. Los anteriores $403$ grupos nombrados provocan el mismo número de simplificaciones de cincos, por lo que el denominador pasa lógicamente de ser $5^{502}$ a $5^{99}$. Finalmente, en el numerador aparece $1\\cdot2\\cdots403 = 403!$, cifra que podemos comprobar fácilmente que acaba en $99$ ceros, quedando así justificada la presencia de $f(403)$.  Razonando de manera similar,\n$$ \\begin{aligned} f(403)\u0026amp;=\\dfrac{403!}{5^{99}}\\pmod{25}\\\n\u0026amp;=\\dfrac{(1\\cdot2\\cdot3\\cdot4)\\cdot1\\cdot(1\\cdot2\\cdot3\\cdot4)\\cdot2\\cdots(1\\cdot2\\cdot3\\cdot4)\\cdot80\\cdot(1\\cdot2\\cdot3)}{5^{19}}\\pmod{25}\\\n\u0026amp;=(-1)^{80}\\cdot6\\cdot f(80)\\pmod{25},\\\nf(80)\u0026amp;=\\dfrac{80!}{5^{19}}\\pmod{25}\\\n\u0026amp;=\\dfrac{(1\\cdot2\\cdot3\\cdot4)\\cdot1\\cdot(1\\cdot2\\cdot3\\cdot4)\\cdot2\\cdots(1\\cdot2\\cdot3\\cdot4)\\cdot16}{5^{3}}\\pmod{25}\\\n\u0026amp;=(-1)^{16}\\cdot f(16)\\pmod{25},\\\nf(16)\u0026amp;=\\dfrac{16!}{5^{3}}\\pmod{25}\\\n\u0026amp;=((1\\cdot2\\cdot3\\cdot4)\\cdot1\\cdot(1\\cdot2\\cdot3\\cdot4)\\cdot2\\cdot(1\\cdot2\\cdot3\\cdot4)\\cdot3\\cdot16)\\pmod{25}\\\n\u0026amp;=(-1)^{3}\\cdot16\\cdot 3!\\pmod{25}, \\end{aligned} $$\ny realizando ahorra las correspondientes sustituciones,\n$$ \\begin{aligned} f(2017) \u0026amp;= (-1)^{502}\\cdot22\\cdot6\\cdot16\\cdot6\\pmod{25}\\\n\u0026amp;\\equiv 12672\\pmod{25}\\\n\u0026amp;\\equiv 22\\pmod{25}, \\end{aligned} $$\nesto es,\n$$ \\dfrac{2017!}{5^{502}}\\equiv 22\\pmod{25}. $$\nRecordemos en este instante que, en realidad, estamos interesados en hallar el valor de la congruencia\n$$ \\dfrac{2017!}{2^{502}\\cdot 5^{502}}\\pmod{25}, $$\nde forma que todavía queda un poco de trabajo que llevar a cabo. Sin embargo, por el Teorema de Euler-Fermat, como $mcd(2,25)=1$, es decir, son primos entre sí, entonces $2^{\\varphi(25)}\\equiv 1\\pmod{25}$. Dado que,\n$$ \\varphi(25) = 25\\cdot\\left(1-\\dfrac{1}{5}\\right) = 20, $$\ny $502 = 20\\cdot25+2$, entonces\n$$ 2^{502} = (2^{20})^{25}\\cdot2^2\\equiv 4\\cdot1^{25}\\pmod{25}\\equiv 4\\pmod{25}. $$\nAsí, sabemos que el resto de dividir\n$$ a = \\dfrac{2017!}{5^{502}} $$\nentre $25$ asciende a $22$. Como el número que nos interesa, en términos del resto, es $4$ veces el anterior, esto es, $4a$, para hallar el resto al dividir por $25$ planteamos la ecuación de congruencia lineal,\n$$ \\begin{aligned} 4a\\equiv 22\\pmod{25}\u0026amp;\\Leftrightarrow 24a\\equiv 132\\pmod{25}\\\n\u0026amp;\\Leftrightarrow (-a)\\equiv 7\\pmod{25}\\\n\u0026amp;\\Leftrightarrow a\\equiv 18\\pmod{25}, \\end{aligned} $$\nes decir, finalmente hemos llegado a que\n$$ \\dfrac{2017!}{2^{502}\\cdot 5^{502}}\\equiv 18\\pmod{25}. $$\nCombinando este último resultado alcanzado con el anterior, es cierto que la ecuación de congruencia lineal\n$$ x \\equiv \\dfrac{2017!}{2^{502}\\cdot 5^{502}}\\pmod{100}, $$\nes equivalente al sistema de ecuaciones de congruencias lineales\n$$ \\begin{aligned} x\u0026amp;\\equiv 0\\pmod{4},\\\nx\u0026amp;\\equiv 18\\pmod{25}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=4$ y $m_2=25$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=4\\cdot25 = 100$. Podemos hallar esta vía el procedimiento habitual; sin embargo, dado que la primera ecuación indica que la solución es múltiplo de $4$ y la segunda ecuación se traduce en que al dividir dicho múltiplo por $25$ ha de dejar un resto igual a $18$, llegamos, por tanteo, a que $x\\equiv 68\\pmod{100}$. Es decir, $68$ son los dos últimos dígitos no nulos de $2017!$.\n","date":1547611179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564524001,"objectID":"be849aa93e115c3d8a3c7f127a8a3dcf","permalink":"https://imalexissaez.github.io/2019/01/16/buscando-digitos-no-nulos-en-numeros-factoriales/","publishdate":"2019-01-16T05:59:39+02:00","relpermalink":"/2019/01/16/buscando-digitos-no-nulos-en-numeros-factoriales/","section":"post","summary":"Problema 43: sencillo de enunciar, muy entretenido de resolver.","tags":["Fórmula de Legendre","Problemas","Teorema chino del resto","Teoría de números"],"title":"Buscando dígitos no nulos en números factoriales","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 42: Encuentra los tres últimos dígitos del número\n$$ N=3\\times7\\times11\\times15\\times\\cdots\\times2019. $$\n Como estamos interesados en encontrar los tres últimos dígitos del producto de números dado, un posible enfoque de cara a la resolución de este ejercicio es encontrar el valor de la congruencia de dicho producto módulo $1000$, esto es, resolver $x\\equiv N\\pmod{1000}$. Ahora bien, como $1000 = 2^3 \\cdot 5^3 = 8\\cdot 125$ y $mcd(8,125)=1$ sabemos, por el Teorema chino del resto, que la anterior ecuación de congruencia lineal es equivalente al siguiente sistema de ecuaciones de congruencias lineales,\n$$ \\begin{aligned} x\u0026amp;\\equiv N\\pmod{8},\\\nx\u0026amp;\\equiv N\\pmod{125}. \\end{aligned} $$\nSin embargo, dado que en el producto $N$ aparecen, por ejemplo, los números $15 = 3\\cdot5$, $35 = 5\\cdot7$ y $55 = 5\\cdot11$, resulta que encontraríamos $5^3$ en dicho producto, provocando que $N\\equiv 0\\pmod{125}$, esto es, $N$ es múltiplo de $125$. Por otro lado,\n$$ \\begin{aligned} 3\u0026amp;\\equiv 3\\pmod{8},\\\n7\u0026amp;\\equiv (-1)\\pmod{8},\\\n11\u0026amp;\\equiv 3\\pmod{8},\\\n15\u0026amp;\\equiv (-1)\\pmod{8}, \\end{aligned} $$\npor tanto\n$$ \\begin{aligned} (3\\cdot7\\cdot11\\cdot15)\u0026amp;\\equiv (3\\cdot(-1)\\cdot3\\cdot(-1))\\pmod{8}\\\n\u0026amp;\\equiv 9\\pmod{8}\\equiv 1\\pmod{8}. \\end{aligned} $$\nAl ser los términos del producto $N$ de la forma $3+4t$, con $t$ número entero mayor o igual que cero, la anterior situación se reproduce cada cuatro términos del mencionado producto. Así, como $3+4t=2019$ implica que $t=504$ y empezamos la sucesión en $t=0$, $N$ está compuesto por $505$ términos, de forma que podemos conseguir $126$ grupos de $4$ elementos, quedando sin agrupar el último término, $2019$, que sabemos cumple $2019\\equiv 3\\pmod{8}$, por lo que\n$$ N\\equiv (1^{126} \\cdot3)\\pmod{8}\\equiv 3\\pmod{8}. $$\nRecapitulando, buscamos un múltiplo de $125$ que sea congruente con $3$ módulo $8$, es decir, hemos de resolver la ecuación, $125x\\equiv 3\\pmod{8}$. No obstante,\n$$ \\begin{aligned} 125x\\equiv 3\\pmod{8}\u0026amp;\\Leftrightarrow 5x\\equiv 3\\pmod{8}\\\n\u0026amp;\\Leftrightarrow 15x\\equiv 9\\pmod{8}\\\n\u0026amp;\\Leftrightarrow (-x)\\equiv 1\\pmod{8}\\\n\u0026amp;\\Leftrightarrow x\\equiv 7\\pmod{8}, \\end{aligned} $$\nesto es, $125\\cdot7=875$ son las tres últimas cifras de $N$.\nDe manera más clásica, una vez hallado el valor de las anteriores dos congruencias, el sistema de ecuaciones de congruencias lineales propuesto es equivalente a\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{8},\\\nx\u0026amp;\\equiv 0\\pmod{125}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=8$ y $m_2=125$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=8\\cdot125 = 1000$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,\n$$ \\begin{aligned} M_1 \u0026amp;= \\dfrac{M}{m_1} = \\dfrac{1000}{8} = 125,\\\nM_2 \u0026amp;= \\dfrac{M}{m_2} = \\dfrac{1000}{125} = 4, \\end{aligned} $$\ny, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:\n$$ \\begin{aligned} 125x\\equiv 1\\pmod{8}\u0026amp;\\Leftrightarrow 5x\\equiv 1\\pmod{8}\\\n\u0026amp;\\Leftrightarrow 25x\\equiv 5\\pmod{8}\\\n\u0026amp;\\Leftrightarrow x\\equiv 5\\pmod{8},\\\n4x\\equiv 1\\pmod{125}\u0026amp;\\Leftrightarrow 376x\\equiv 94\\pmod{125}\\\n\u0026amp;\\Leftrightarrow x\\equiv 94\\pmod{125}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{8},\u0026amp; 125x\u0026amp;\\equiv 1\\pmod{8},\u0026amp; x\u0026amp;\\equiv 5\\pmod{8},\\\nx\u0026amp;\\equiv 0\\pmod{125},\u0026amp; 4x\u0026amp;\\equiv 1\\pmod{125},\u0026amp; x\u0026amp;\\equiv 94\\pmod{125}, \\end{aligned} $$\nentonces la solución es\n$$ \\begin{aligned} x \u0026amp;\\equiv (3\\cdot125\\cdot5 + 0\\cdot4\\cdot94)\\pmod{1000}\\\n\u0026amp;\\equiv 1875\\pmod{1000}\\\n\u0026amp;\\equiv 875\\pmod{1000}, \\end{aligned} $$\nesto es, $875$ son los tres últimos dígitos de $N$.\n","date":1547265579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564524001,"objectID":"eacdbbb8bd94bb3ae4b67aeaf913931b","permalink":"https://imalexissaez.github.io/2019/01/12/tiempo-de-generalizar-problemas-al-anno-2019/","publishdate":"2019-01-12T05:59:39+02:00","relpermalink":"/2019/01/12/tiempo-de-generalizar-problemas-al-anno-2019/","section":"post","summary":"Problema 42: extendiendo un problema clásico para que coincida con el año de las oposiciones.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"Tiempo de generalizar problemas al año 2019","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 41: Los cometas 2p/Encke, 4P/Faye y 8p/Tuttle tienen períodos orbitales de $3$, $8$ y $13$ años, respectivamente. Los últimos perihelios (punto más cercano de la órbita de un cuerpo celeste alrededor del Sol) de cada uno de ellos fueron en $2017$, $2014$ y $2008$, respectivamente. ¿Cuál será el siguiente año en el cual coincidan sus perihelios? (Para este problema, asume que el tiempo se mide en años completos y que cada período orbital es constante.)\n Sea $x$ el valor entero del siguiente año en el cual coinciden los perihelios. Como el cometa 2p/Encke tiene una órbita de la forma $2017+3t$, con $t$ un número entero, entonces $x\\equiv 2017\\pmod{3}$. Análogamente, dado el cometa 4p/Faye posee una órbita de la forma $2014+8u$, con $u$ número entero, entonces $x\\equiv 2014\\pmod{8}$. Finalmente, debido a que el cometa 8p/Tuttle tiene una órbita de la forma $2008+13v$, con $v$ número entero, entonces $x\\equiv 2008\\pmod{13}$.\nAsí pues, hemos de resolver el siguiente sistema de ecuaciones de congruencias lineales,\n$$ \\begin{aligned} x\u0026amp;\\equiv 2017\\pmod{3}\\equiv 1\\pmod{3},\\\nx\u0026amp;\\equiv 2014\\pmod{8}\\equiv 6\\pmod{8}\\\nx\u0026amp;\\equiv 2008\\pmod{13}\\equiv 6\\pmod{13}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=3$, $m_2=8$ y $m_3=13$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=3\\cdot8\\cdot13 = 312$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,\n$$ \\begin{aligned} M_1 \u0026amp;= \\dfrac{M}{m_1} = \\dfrac{312}{3} = 8\\cdot13 = 104,\\\nM_2 \u0026amp;= \\dfrac{M}{m_2} = \\dfrac{312}{8} = 3\\cdot13 = 39,\\\nM_3 \u0026amp;= \\dfrac{M}{m_3} = \\dfrac{312}{13} = 3\\cdot8 = 24, \\end{aligned} $$\ny, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:\n$$ \\begin{aligned} 104x\\equiv 1\\pmod{3}\u0026amp;\\Leftrightarrow 2x\\equiv 1\\pmod{3}\\\n\u0026amp;\\Leftrightarrow x\\equiv 2\\pmod{3},\\\n39x\\equiv 1\\pmod{8}\u0026amp;\\Leftrightarrow (-x)\\equiv 1\\pmod{8}\\\n\u0026amp;\\Leftrightarrow x\\equiv (-1)\\pmod{8},\\\n24x\\equiv 1\\pmod{13}\u0026amp;\\Leftrightarrow (-2x)\\equiv 1\\pmod{13}\\\n\u0026amp;\\Leftrightarrow (-12x)\\equiv 6\\pmod{13}\\\n\u0026amp;\\Leftrightarrow x\\equiv 6\\pmod{13}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} x\u0026amp;\\equiv 1\\pmod{3},\u0026amp; 104x\u0026amp;\\equiv 1\\pmod{3},\u0026amp; x\u0026amp;\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 6\\pmod{8},\u0026amp; 39x\u0026amp;\\equiv 1\\pmod{8},\u0026amp; x\u0026amp;\\equiv (-1)\\pmod{8},\\\nx\u0026amp;\\equiv 6\\pmod{13},\u0026amp; 24x\u0026amp;\\equiv 1\\pmod{13},\u0026amp; x\u0026amp;\\equiv 6\\pmod{13}, \\end{aligned} $$\nentonces la solución es\n$$ \\begin{aligned} x \u0026amp;\\equiv (1\\cdot104\\cdot2 + 6\\cdot39\\cdot(-1) + 6\\cdot24\\cdot1)\\pmod{312}\\\n\u0026amp;\\equiv 838\\pmod{312}\\equiv 214\\pmod{312}, \\end{aligned} $$\nesto es, en los años de la forma $214+316w$, con $w$ número entero, coinciden los tres perihelios. Para $w=5$, encontramos que el año $1794$ fue el último en el que coincidieron, mientras que si $w=6$, hallamos que $2086$ será el próximo año en el que coincidan.\n","date":1547006379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564524001,"objectID":"6d8b45a87ce903310505ed5db47fdb15","permalink":"https://imalexissaez.github.io/2019/01/09/de-cometas-y-sus-perihelios/","publishdate":"2019-01-09T05:59:39+02:00","relpermalink":"/2019/01/09/de-cometas-y-sus-perihelios/","section":"post","summary":"Problema 41: un viaje por el espacio.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"De cometas y sus perihelios","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 40: Brahmagupta tiene una enorme cesta repleta de huevos camperos. Si los saca de $2$ en $2$, resulta que queda un huevo en la cesta. Si opta por extraerlos de $3$ en $3$, ahora $2$ son los huevos que restan en la cesta. Análogamente, si realiza el proceso utilizando grupos de $4$, $5$ y $6$ huevos, quedan en la cesta, respectivamente, $3$, $4$ y $5$ huevos. Sin embargo, si los saca de $7$ en $7$, la cesta se vacía por completo. ¿Cuál es la menor cantidad de huevos que puede haber en la cesta de Brahmagupta?\n Consideremos $x$ el número de huevos que se encuentran en la cesta de Brahmagupta. Los distintos modos de extracción dan lugar al siguiente sistema de ecuaciones de congruencias lineales,\n$$ \\begin{aligned} x\u0026amp;\\equiv 1\\pmod{2},\\\nx\u0026amp;\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 3\\pmod{4},\\\nx\u0026amp;\\equiv 4\\pmod{5},\\\nx\u0026amp;\\equiv 5\\pmod{6},\\\nx\u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nPor desgracia, no podemos aplicar directamente el Teorema chino del resto, pues algunos módulos no son primos entre sí. No obstante, como estamos en las condiciones de la proposición que generaliza este resultado teórico (las comprobaciones sobre los pares de congruencias se pueden llevar a cabo mentalmente de forma sencilla), sabemos que el sistema de ecuaciones de congruencias lineales posee solución. Para hallarla, desdoblando la ecuación de congruencia lineal $x\\equiv 5\\pmod{6}$, queda\n$$ \\begin{aligned} x\u0026amp;\\equiv 1\\pmod{2},\\\nx\u0026amp;\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 3\\pmod{4},\\\nx\u0026amp;\\equiv 4\\pmod{5},\\\nx\u0026amp;\\equiv 5\\pmod{2}\\equiv 1\\pmod{2},\\\nx\u0026amp;\\equiv 5\\pmod{3}\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nEncontramos dos ecuaciones de congruencias lineales repetidas, cuya escritura podemos ahorrarnos, de manera que llegamos a que\n$$ \\begin{aligned} x\u0026amp;\\equiv 1\\pmod{2},\\\nx\u0026amp;\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 3\\pmod{4},\\\nx\u0026amp;\\equiv 4\\pmod{5},\\\nx\u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nLlegados a este punto, la primera y la tercera ecuación involucran módulos de manera que uno es un factor del otro $4=2^2$. Por tanto, tenemos entre manos una posible contradicción aquí que hemos de investigar para hallar si existe o no dicha contradicción. No obstante, para cierto número entero $t$,\n$$ \\begin{aligned} x\\equiv 3\\pmod{4}\u0026amp;\\Rightarrow x = 3+4t\\Rightarrow x = 1 + 2(1+2t)\\\n\u0026amp;\\Rightarrow x\\equiv 1\\pmod{2}, \\end{aligned} $$\nluego la primera ecuación de congruencia lineal es redundante y la podremos suprimir del sistema, quedando pues\n$$ \\begin{aligned} x\u0026amp;\\equiv 2\\pmod{3},\\ x\u0026amp;\\equiv 3\\pmod{4},\\\nx\u0026amp;\\equiv 4\\pmod{5},\\\nx\u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=3$, $m_2=4$, $m_3=5$ y $m_4=7$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=3\\cdot4\\cdot5\\cdot7 = 420$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,\n$$ \\begin{aligned} M_1 \u0026amp;= \\dfrac{M}{m_1} = \\dfrac{420}{3} = 4\\cdot5\\cdot7 = 140,\\\nM_2 \u0026amp;= \\dfrac{M}{m_2} = \\dfrac{420}{4} = 3\\cdot5\\cdot7 = 105,\\\nM_3 \u0026amp;= \\dfrac{M}{m_3} = \\dfrac{420}{5} = 3\\cdot4\\cdot7 = 84,\\\nM_4 \u0026amp;= \\dfrac{M}{m_4} = \\dfrac{420}{7} = 3\\cdot4\\cdot5 = 60, \\end{aligned} $$\ny, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:\n$$ \\begin{aligned} 140x\\equiv 1\\pmod{3}\u0026amp;\\Leftrightarrow 2x\\equiv 1\\pmod{3}\\Leftrightarrow 4x\\equiv 2\\pmod{3}\\\n\u0026amp;\\Leftrightarrow x\\equiv 2\\pmod{3},\\\n105x\\equiv 1\\pmod{4}\u0026amp;\\Leftrightarrow x\\equiv 1\\pmod{4},\\\n84x\\equiv 1\\pmod{5}\u0026amp;\\Leftrightarrow (-x)\\equiv 1\\pmod{5}\\Leftrightarrow x\\equiv 4\\pmod{5},\\\n60x\\equiv 1\\pmod{7}\u0026amp;\\Leftrightarrow 4x\\equiv 1\\pmod{7}\\Leftrightarrow 8x\\equiv 2\\pmod{7}\\\n\u0026amp;\\Leftrightarrow x\\equiv 2\\pmod{7}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} x\u0026amp;\\equiv 2\\pmod{3},\u0026amp; 140x\u0026amp;\\equiv 1\\pmod{3},\u0026amp; x\u0026amp;\\equiv 2\\pmod{3},\\\nx\u0026amp;\\equiv 3\\pmod{4},\u0026amp; 105x\u0026amp;\\equiv 1\\pmod{4},\u0026amp; x\u0026amp;\\equiv 1\\pmod{4},\\\nx\u0026amp;\\equiv 4\\pmod{5},\u0026amp; 84x\u0026amp;\\equiv 1\\pmod{5},\u0026amp; x\u0026amp;\\equiv 4\\pmod{5},\\\nx\u0026amp;\\equiv 0\\pmod{7},\u0026amp; 60x\u0026amp;\\equiv 1\\pmod{7},\u0026amp; x\u0026amp;\\equiv 2\\pmod{7}, \\end{aligned} $$\nentonces la solución es\n$$ \\begin{aligned} x \u0026amp;\\equiv (2\\cdot140\\cdot2 + 3\\cdot105\\cdot1 + 4\\cdot84\\cdot4 + 0\\cdot60\\cdot1)\\pmod{420}\\\n\u0026amp;\\equiv 2219\\pmod{420}\\equiv 119\\pmod{420}, \\end{aligned} $$\nesto es, la cesta de Brahmagupta contaba con $119$ huevos.\n","date":1546660779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564524001,"objectID":"431ee7096a947f894997b851495a636f","permalink":"https://imalexissaez.github.io/2019/01/05/la-cesta-de-huevos-de-brahmagupta/","publishdate":"2019-01-05T05:59:39+02:00","relpermalink":"/2019/01/05/la-cesta-de-huevos-de-brahmagupta/","section":"post","summary":"Problema 40: un problema clásico de teoría de números.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"La cesta de huevos de Brahmagupta","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 39: Ana, Belén, Carlos y David acuden, con bastante ilusión y mucha algarabía, a un concierto de 31Knots; pero, en mitad de la cola, tras un rápido y certero cálculo de Ana, desgraciadamente se dan cuenta de que les faltan algunos euros para poder comprar las entradas, cuyo precio asciende a $50$ euros por tique.\nCada uno de ellos posee una cifra entera mayor o igual que cero de euros y, curiosamente, además\n si Belén le pide un euro a Ana, consigue acumular dos tercios de la cantidad que le quedaría a Ana; si Carlos toma prestados dos euros de Belén, llega a acumular tres quintos de la cantidad que le quedaría a Belén; si David le pide tres euros a Carlos, consigue acumular cinco séptimos de la cantidad que le quedaría a Carlos.  ¿Cuál es la mínima cantidad de euros que necesitarían entre todos para poder así permitirse la adquisición de las cuatro entradas?\n Por comodidad en la escritura, denotemos el dinero que posee cada uno, en euros, de los cuatro protagonistas del enunciado del ejercicio por sus iniciales en minúscula, esto es, $a$, $b$, $c$ y $d$. Sabemos, dado que no pueden comprar las cuatro entradas para disfrutar del concierto, que $a+b+c+d\u0026lt;4\\cdot50=200$. Hallemos cuánto dinero lleva encima cada uno de ellos haciendo uso de las condiciones que aparecen, que, matemáticamente, podemos expresar como sigue:\n$$ \\begin{aligned} b+1 \u0026amp;= \\dfrac{2}{3}(a-1),\\\nc+2 \u0026amp;= \\dfrac{3}{5}(b-2),\\\nd+3 \u0026amp;= \\dfrac{5}{7}(c-3). \\end{aligned} $$\nDespejando $b$, $c$ y $d$, encontramos que\n$$ \\begin{aligned} b\u0026amp;=\\dfrac{2a-5}{3},\\\nc\u0026amp;=\\dfrac{3b-16}{5},\\\nd\u0026amp;=\\dfrac{5c-36}{7}, \\end{aligned} $$\nque, expresadas todas ellas en función del valor de $a$, equivalen a\n$$ \\begin{aligned} b\u0026amp;=\\dfrac{2a-5}{3},\\\nc\u0026amp;=\\dfrac{3b-16}{5} = \\dfrac{3\\cdot\\dfrac{2a-5}{3} - 16}{5}=\\dfrac{2a-21}{5},\\\nd\u0026amp;=\\dfrac{5c-36}{7} = \\dfrac{5\\cdot\\dfrac{2a-21}{5} - 36}{7} = \\dfrac{2a-57}{7}. \\end{aligned} $$\nRecordemos ahora que $b$, $c$ y $d$ llevan encima una cantidad entera mayor o igual que cero de euros, hecho que se traduce en que\n$$ \\begin{aligned} (2a-5)\u0026amp;\\equiv 0\\pmod{3},\\\n(2a-21)\u0026amp;\\equiv 0\\pmod{5},\\\n(2a-57)\u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nLlegados a este momento, comenzamos a sospechar que el camino nos lleva, irremediablemente, a buscar el valor de $a$ vía el Teorema chino del resto, por lo que, previamente, vamos a adaptar la forma del sistema de ecuaciones de congruencias lineales a la que figura en el resultado teórico. Así,\n$$ \\begin{aligned} (2a-5)\\equiv 0\\pmod{3}\u0026amp;\\Leftrightarrow 2a\\equiv 5\\pmod{3}\\Leftrightarrow 4a\\equiv 10\\pmod{3}\\\n\u0026amp;\\Leftrightarrow a\\equiv 1\\pmod{3},\\\n(2a-21)\\equiv 0\\pmod{5}\u0026amp;\\Leftrightarrow 2a\\equiv 1\\pmod{5}\\Leftrightarrow 6a\\equiv 3\\pmod{5}\\\n\u0026amp;\\Leftrightarrow a\\equiv 3\\pmod{5},\\\n(2a-57)\\equiv 0\\pmod{7}\u0026amp;\\Leftrightarrow 2a\\equiv 1\\pmod{7}\\Leftrightarrow 8a\\equiv 4\\pmod{7}\\\n\u0026amp;\\Leftrightarrow a\\equiv 4\\pmod{7}. \\end{aligned} $$\nEsto es, recapitulando, la cantidad total de euros que lleva encima Ana (es decir, el valor de $a$), resulta ser la solución del siguiente sistema de ecuaciones de congruencias lineales\n$$ \\begin{aligned} a\u0026amp;\\equiv 1\\pmod{3},\\\na\u0026amp;\\equiv 3\\pmod{5},\\\na\u0026amp;\\equiv 4\\pmod{7}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=3, m_2=5$ y $m_3=7$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=3\\cdot5\\cdot7 = 105$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,\n$$ \\begin{aligned} M_1 \u0026amp;= \\dfrac{M}{m_1} = \\dfrac{105}{3} = 5\\cdot7 = 35,\\\nM_2 \u0026amp;= \\dfrac{M}{m_2} = \\dfrac{105}{5} = 3\\cdot7 = 21,\\\nM_3 \u0026amp;= \\dfrac{M}{m_3} = \\dfrac{105}{7} = 3\\cdot5 = 15, \\end{aligned} $$\ny, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:\n$$ \\begin{aligned} 35a\\equiv 1\\pmod{3}\u0026amp;\\Leftrightarrow (-a)\\equiv 1\\pmod{3}\\Leftrightarrow a\\equiv 2\\pmod{3},\\\n21a\\equiv 1\\pmod{5}\u0026amp;\\Leftrightarrow a\\equiv 1\\pmod{5},\\\n15a\\equiv 1\\pmod{7}\u0026amp;\\Leftrightarrow a\\equiv 1\\pmod{7}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} a\u0026amp;\\equiv 1\\pmod{3},\u0026amp; 35a\u0026amp;\\equiv 1\\pmod{3},\u0026amp; a\u0026amp;\\equiv 2\\pmod{3},\\\na\u0026amp;\\equiv 3\\pmod{5},\u0026amp; 21a\u0026amp;\\equiv 1\\pmod{5},\u0026amp; a\u0026amp;\\equiv 1\\pmod{5},\\\na\u0026amp;\\equiv 4\\pmod{7},\u0026amp; 15a\u0026amp;\\equiv 1\\pmod{7},\u0026amp; a\u0026amp;\\equiv 1\\pmod{7}, \\end{aligned} $$\nentonces la solución es\n$$ \\begin{aligned} a \u0026amp;\\equiv (1\\cdot35\\cdot2 + 3\\cdot21\\cdot1 + 4\\cdot15\\cdot1)\\pmod{105}\\\n\u0026amp;\\equiv 193\\pmod{105}\\\n\u0026amp;\\equiv 88\\pmod{105}, \\end{aligned} $$\nesto es, Ana lleva encima $88$ euros. Como $a=88$, entonces\n$$ \\begin{aligned} b\u0026amp;=\\dfrac{2\\cdot88-5}{3} = 57,\\\nc\u0026amp;=\\dfrac{2\\cdot88-21}{5} = 31,\\\nd\u0026amp;=\\dfrac{2\\cdot88-57}{7} = 17, \\end{aligned} $$\nes decir, Belén, Carlos y David llevan encima, respectivamente, $57$, $31$ y $17$ euros. En total suman $88+57+31+17=193$ euros, por lo que les faltan $200-193=7$ euros para poder comprar las cuatro entradas y así disfrutar del concierto.\nAlternativamente, volvamos al momento del ejercicio en el que declaramos que\n$$ \\begin{aligned} b+1 \u0026amp;= \\dfrac{2}{3}(a-1),\\\nc+2 \u0026amp;= \\dfrac{3}{5}(b-2),\\\nd+3 \u0026amp;= \\dfrac{5}{7}(c-3). \\end{aligned} $$\nSi operamos algebraicamente las ecuaciones\n$$ \\begin{aligned} 3b+3 \u0026amp;= 2a-2 \\Rightarrow 3b-2a = -5,\\\n5c+10 \u0026amp;= 3b-6 \\Rightarrow 5c-3b=-16,\\\n7d+21 \u0026amp;= 5c-15 \\Rightarrow 7d-5c=-36, \\end{aligned} $$\ny sumamos ahora las tres, llegamos a la ecuación diofántica $7d-2a=-57$, que, despejando la variable $a$ por ser aquella cuyo coeficiente asociado es más reducido, se tiene que\n$$ a = \\dfrac{7d+57}{2}. $$\nPara $d=1$, encontramos que $a=32$, arribando así a la solución particular de dicha ecuación diofántica. Su solución general es pues\n$$ \\begin{aligned} a \u0026amp;= 32 + 7t,\\\nd \u0026amp;= 1 + 2t, \\end{aligned} $$\ncon $t$ número entero. Sustituyendo estos resultados alcanzados en las ecuaciones de arriba, estamos en condiciones de encontrar las expresiones para $b$ y $c$. Así,\n$$ \\begin{aligned} b \u0026amp;= \\dfrac{-5 + 2(32+7t)}{3},\\\nc \u0026amp;= \\dfrac{36 + 7(1+2t)}{5}. \\end{aligned} $$\nAhora bien, estamos interesados en el valor entero de $t$ que nos proporciona la mínima cantidad de euros que necesitarían entre todos para poder así permitirse la adquisición de las cuatro entradas (y con la restricción añadida implícita de que las soluciones han de ser enteras). Como inicialmente no disponen de la cantidad necesaria, ello implica que $a+b+c+d\u0026lt;200$, y, sustituyendo las anteriores expresiones alcanzadas para cada una de las cuatro variables, generamos la inecuación\n$$ \\begin{aligned} 32+7t+1+2t+\\dfrac{-5 + 2(32+7t)}{3}+\\dfrac{36 + 7(1+2t)}{5}\u0026amp;\u0026lt;200\\\n480+105t+15+30t-25+320+70t+108+21+42t\u0026amp;\u0026lt;3000,\\\n247t\u0026amp;\u0026lt;2081, \\end{aligned} $$\nesto es, $t\u0026lt;8.43$. Así pues, empezando por $t=8$ (y continuando con $t=7$, $t=6$, etc.), sustituiremos arriba, hasta dar con el primer valor que genere cifras enteras para $a$, $b$, $c$ y $d$. Por tanto, si $t=8$,\n$$ \\begin{aligned} a \u0026amp;= 32+7\\cdot8 = 88,\\\nb \u0026amp;= \\dfrac{-5 + 2(32+7\\cdot8)}{3} = 57,\\\nc \u0026amp;= \\dfrac{36 + 7(1+2\\cdot8)}{5} = 31,\\\nd \u0026amp;= 1+2\\cdot8 = 17, \\end{aligned} $$\nllegando, afortunadamente, en el primer intento a la solución alcanzada por el método de las congruencias.\n","date":1546401579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564524001,"objectID":"fc5e1cab4abc6c8baad359089ca5b797","permalink":"https://imalexissaez.github.io/2019/01/02/cuatro-amigos-un-concierto-y-poco-dinero/","publishdate":"2019-01-02T05:59:39+02:00","relpermalink":"/2019/01/02/cuatro-amigos-un-concierto-y-poco-dinero/","section":"post","summary":"Problema 39: otra aplicación del Teorema chino del resto.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"Cuatro amigos, un concierto y poco dinero","type":"post"},{"authors":null,"categories":null,"content":"En aquesta pàgina compilaré diversos recursos i informació relacionats amb el Certificat de Capacitació en valencià (CC d'ara endavant). Cada universitat de la Comunitat Valenciana ofereix cursos per obtindre aquesta certificació (i també moltes acadèmies privades de la zona); no obstant això, ací em centraré específicament en les proves lliures, que són gratuïtes i es convoquen ordinàriament un parell de vegades a l'any (i extraordinàriament alguna volta més, sobretot quan s'apropen oposicions que requereixen el CC).\n1. Temari Per a preparar les esmentades proves, és recomanable utilitzar les unitats disponibles a la web del curs que ofereix el cefire.\n   Núm. Títol     0 Qüestions de llengua oralitat, escriptura i sociolingüística.   1 El plurilingüisme en el sistema educatiu. El marc legal.   2 Teories sobre l'aprenentatge de segones llengües i enfocament TILC.   3 L'avaluació en el procés d'ensenyament i aprenentatge.   4 Materials i espais per a un ensenyament TILC.    2. Descripció de la prova La informació més rellevant es resumeix a continuació:\n La prova durarà dos hores i mitja. Conté dos parts: una oral i una escrita.  En la part escrita cal elaborar un text, de 250 paraules almenys, relacionat amb un dels dos temes proposats. A més a més, s'ha d'omplir un qüestionari de 20 preguntes: 10 d'opció múltiple i 10 de verdader o fals. En la part oral cal exposar un monòleg, que no serà gravat i durarà cinc minuts aproximadament, associat amb un dels dos temes proposats.   S'ha de superar la part escrita i la part oral de manera independent.  Aquest és un model de la prova.\n3. Criteris d'avaluació En relació amb la part escrita:\n El text té una valoració màxima de 80 punts i es descompta un punt per cada errada gramatical o ortogràfica comesa. Els textos de menys de 250 paraules (una paraula és una unitat lingüística que se separa de la resta mitjançant un espai en blanc en l'escriptura) obtindran una qualificació de zero punts. En el qüestionari:  Cada encert sumarà un punt. Cada errada restarà bé 0,5 punts (per a les qüestions de verdader o fals) bé 0,25 punts (per a les d'opció múltiple). Cada resposta en blanc ni sumarà ni restarà punts.    S'obtindrà un apte en aquesta part si la qualificació total és superior a 60 punts\nPel que fa a la intervenció oral, aquesta té una valoració màxima de 30 punts, dividits com s'indica a continuació:\n Pronunciació: 3 punts. Lèxic: 3 punts. Morfosintaxi: 3 punts. Cohesió i coherència textual: 3 punts. Adequació: 3 punts. Contingut: 15 punts.  S'obtindrà un apte en aquesta part si la qualificació total és superior a 18 punts.\n4. Convocatòries Convé que revisem amb freqüència la pàgina web del Servei de Formació del Professorat associada amb l'oferta lingüística (i més concretament la corresponent a les proves de CC i DM). Els detalls de l'última convocatòria són els següents:\n Convocatòria de 27 de maig de 2019, de la Secretaria Autonòmica d'Educació i Investigació, per la qual es convoquen proves adreçades a l'obtenció de les titulacions administratives de Certificat de Capacitació per a l'Ensenyament en Valencià, Certificat de Capacitació per a l'Ensenyament en Llengua estrangera i del Diploma de Mestre de Valencià. Diagrama explicatiu del procediment.  El termini d'inscripció d'aquesta ja està tancat, però els documents poden servir de referència i orientació per a futures convocatòries.\n5. Recursos addicionals El grup de Facebook \u0026lsquo;Opositores sin Capacitació en Valencià. Noticias y recursos\u0026rsquo; (enllaç) és, possiblement, el millor lloc on estar al dia de totes les novetats relacionades amb el CC (notícies, cursos, proves, qualificacions\u0026hellip;). Els seus membres comparteixen interessants recursos com ara:\n Directori en Google Drive amb qüestionaris associats a les unitats 3 i 4, així com de caràcter general, que es proposen als cursos presencials del CEFIRE. Pel que fa a la convocatòria de maig d'enguany, la majoria de les preguntes eren idèntiques a les que figuren en aquest recurs. Un altre directori en Google Drive amb els apunts personals d'una integrant del grup de Facebook (qüestionaris, redaccions, esquemes\u0026hellip;).  D'altra banda, el canal de YouTube d'en Salva Pérez, Per no frenar, recull excel·lents consells de cara a les parts orals i escrites de les proves de la cieaCOVA, JQCV i EOI. Són una referència molt recomanable a tindre en compte per a fer un bon paper a les proves lliures de CC.\nA més a més, destaque els següents vídeos enfocats al CC d'enguany:\n      Així mateix, en deixe uns altres corresponents a les convocatòries de l'any 2018, però que encara són recomanables perquè la prova té la mateixa estructura:\n                 ","date":1546354648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563807448,"objectID":"0dc68a2e6838ebfd47c6553fabbe58f4","permalink":"https://imalexissaez.github.io/proyecto/capacitacion/","publishdate":"2019-01-01T15:57:28+01:00","relpermalink":"/proyecto/capacitacion/","section":"project","summary":"Informació i recursos d'interés relacionats amb el Certificat de Capacitació en valencià.","tags":["Valencià"],"title":"Capacitació en valencià","type":"project"},{"authors":null,"categories":null,"content":"En aquest projecte compilaré recursos útils a l'hora d'estudiar valencià per superar les proves que avaluen el nivell C1 del Marc Europeu Comú de Referència (MECR d'ara endavant) per a les llengües.\n1. Cursos 1.1. Punt per Punt En la següent graella trobem els enllaços a una excel·lent col·lecció de fascicles relacionats amb el valencià i agrupats segons els diferents nivells que proposa el MECR. En particular, els exercicis proposats per al nivell C1 ens ajudaran a preparar la corresponent prova, ja que són representatius d'aquesta.\n   Nivell Fascicles     A2 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18.   B1 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18.   B2 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18.   C1 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18.   C2 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18.    1.2. Universitat Politècnica de València La Universitat Politècnica de València (UPV d'ara endavant) ha elaborat un parell de MOOC (Massive Online Open Course) gratuïts per als estudiants dels nivells B2, C1 i C2. Els podem trobar fàcilment en el seu portal en línia UPV[X]:\n Preparació nivell B2 (Intermedi) de Valencià. Preparació nivell C1 (Suficiència) de Valencià. Preparació nivell C2 (Superior) de Valencià.  Hem d'anar amb cura, perquè no cobreixen la totalitat del temari, sinó aquelles parts d'aquest que resulten més complicades als alumnes.\nD'altra banda, si únicament estem interessats en els recursos audiovisuals dels esmentats MOOC, la majoria els trobem en el portal UPV[Media], agrupats sota l'etiqueta Aprèn valencià.\n2. Diccionaris i gramàtiques L\u0026rsquo;Acadèmia Valenciana de la Llengua (AVL d'ara endavant) comparteix en el seu portal els documents normatius que han de ser la nostra referència a l'hora d'estudiar valencià:\n Diccionari Normatiu Valencià (DNV). Diccionari ortogràfic i de pronunciació del valencià (DOPV). Gramàtica normativa valenciana (GNV). Gramàtica valenciana bàsica (GVB).  A més a més, ens poden resultar d'utilitat els següents documents publicats per l'AVL:\n La normativa ortogràfica del valencià. L'estàndard oral del valencià. Els gentilicis valencians.  Altres recursos que ens ajudaran són:\n Diccionari de la llengua catalana (DIEC2). Diccionari de sinònims. Diccionari català-valencià-balear. Gramàtica essencial de la llengua catalana. Lèxic Obert Flexionat de Català: pàgina web que recull diversos diccionaris i respon a preguntes del tipus: com es conjuga el verb dirigir? Quin és el plural de llapis? Quin és el gentilici per a Àustria? Amb quines síl·labes es divideix la paraula abstrusament? Quantes síl·labes té intuïció? Quin substantiu s’utilitza per denominar l’acció del verb aclucar? De quina llengua prové el manlleu afrikaans? Optimot: cercador d'informació lingüística que ajuda a resoldre dubtes sobre la llengua catalana. Ortografia catalana.  3. Lèxics L'AVL té en la seua web oficial una sèrie de fitxes de vocabulari dels més diversos assumptes:\n d'activitats recreatives i a l'aire lliure, de l'astronomia, de l'automòbil, de la casa, de la carnisseria, de la cultura religiosa, de la ferreteria, de la imatge personal, de la música, de la religió catòlica, de la roba i complements, de la salut i la sanitat, de la xarcuteria, de les fruites i verdures, de les malalties, del carrer, del cos humà, del forn i de les pastisseries, del futbol, del joc de pilota, del peix i marisc, del restaurant, dels esports, dels instruments musicals i dels viatges.  D'altra banda, en el portal gencat trobem:\n 50 termes del món digital, 50 termes del món de l'empresa.  4. Jocs educatius Aquests recursos són útils per a reforçar l'ortografia, la gramàtica i el vocabulari:\n Enjogassa't: t'esperen més de tres mil reptes i moltes sorpreses per a fornir el vocabulari, regar l'ortografia i enfortir la gramàtica. El valencià estarà més viu gràcies a tu i sentiràs l'energia de la teua llengua. Jugallengua: és una aplicació que ajuda a aprendre valencià de manera lúdica, ja que s'ha dissenyat com un joc de preguntes i respostes sobre llengua. Pràctic 2: és un programa que integra un conjunt d'activitats d'autoaprenentatge, de manera que l'usuari, gràcies al sistema d'autocorrecció, pot comprovar immediatament quin és el grau de coneixements de valencià que té assolit i a quins aspectes de la gramàtica ha de dedicar més esforços per a millorar els seus coneixements lingüístics.  5. Convocatòries d'exàmens En l'actualitat, hi ha tres entitats que acrediten els coneixements de valencià: la Comissió Interuniversitària d’Estandardització d’Acreditacions de Coneixements de Valencià (CIEACOVA), la Junta Qualificadora de Coneixements de Valencià (JQCV) i l\u0026rsquo;Escola Oficial d'Idiomes (EOI).\nLa inscripció per a les proves es fa amb mesos d'antelació, per la qual cosa hem de visitar amb freqüència les webs oficials de les esmentades entitats. Els exàmens i les corresponents preinscripcions tenen lloc, aproximadament, en:\n   Mes Entitat que acredita Preinscripció (aproximadament)     Gener CIEACOVA Novembre   Juny CIEACOVA, EOI, JQCV Febrer - abril   Setembre EOI Febrer    Exemples de convocatòries:\n CIEACOVA: ACORD de 17 de gener de 2019, del Ple de la Comissió Interuniversitària d’Estandardització d’Acreditacions de Coneixements de Valencià (CIEACOVA), que estableix la convocatòria marc de les proves de maig-juny de 2019 per a l’obtenció dels certificats oficials d’acreditació de coneixements de valencià de les universitats valencianes i es nomena el Tribunal Central. [Enllaç] EOI: RESOLUCIÓ de 6 de febrer de 2019, de la Direcció General de Política Lingüística i Gestió del Multilingüisme, per la qual s’estableixen el calendari i el procés d’inscripció i matriculació per a la realització de la prova de certificació dels nivells del Marc Europeu Comú de Referència per a l’aprenentatge, l’ensenyament i l’avaluació de llengües (MECR) dels ensenyaments d’idiomes de règim especial en les escoles oficials d’idiomes de la Comunitat Valenciana, corresponent a la convocatòria 2019. [2019 / 1213] JQCV: RESOLUCIÓ de 26 de febrer de 2019, de la Direcció General de Política Lingüística i Gestió del Multilingüisme, per la qual es convoquen les proves per a l’obtenció dels certificats oficials administratius de coneixements de valencià i es nomena la Comissió Coordinadora i les comissions examinadores. [2019 / 2070]  ","date":1546354648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563807448,"objectID":"23b6f234d3b24ed38021d3055f920d5f","permalink":"https://imalexissaez.github.io/proyecto/valenciano-c1/","publishdate":"2019-01-01T15:57:28+01:00","relpermalink":"/proyecto/valenciano-c1/","section":"project","summary":"Recursos útils a l’hora d’estudiar valencià per superar les proves que avaluen el nivell C1.","tags":["Valencià"],"title":"Valencià (nivell C1)","type":"project"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 38: Un general cuenta el número de soldados supervivientes de una batalla alineándolos, sucesivamente, en filas de diferentes tamaños. En cada ocasión, anota el total que quedaron sin poder completar una fila. Disponía de $1200$ combatientes antes de la refriega. Tras el encuentro si los alineaba en filas de $5$, quedaban $3$ sin poder completar una fila; si lo hacía en filas de $6$, volvían a quedar $3$ sin poder completar una fila; si los repartía en filas de $7$, únicamente uno quedaba fuera de las filas y si los alineaba en filas de $11$, no quedaba soldado alguno que no estuviese en una fila ¿Cuántos soldados sobrevivieron la batalla?\n Consideremos $x$ el número de soldados supervivientes de la batalla, cantidad que sabemos es menor o igual que $1200$ por ser este el número de los que disponía el general inicialmente, es decir, $0\\leq x\\leq 1200$.\nLas sucesivas alineaciones de los soldados, las traducimos en el siguiente sistema de congruencias lineales,\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{5},\\\nx\u0026amp;\\equiv 3\\pmod{6},\\\nx\u0026amp;\\equiv 1\\pmod{7},\\\nx\u0026amp;\\equiv 0\\pmod{11}. \\end{aligned} $$\nPor la estructura que presenta el anterior sistema y dado que $m_1=5$, $m_2=6$, $m_3=7$ y $m_4=11$ son primos entre sí, sabemos, por el Teorema chino del resto, que dicho sistema admite solución módulo $M=5\\cdot6\\cdot7\\cdot11 = 2310$. Procedamos entonces al cálculo de las soluciones utilizando el método habitual. Así,\n$$ \\begin{aligned} M_1 \u0026amp;= \\dfrac{M}{m_1} = \\dfrac{2310}{5} = 6\\cdot7\\cdot11 = 462,\\\nM_2 \u0026amp;= \\dfrac{M}{m_2} = \\dfrac{2310}{6} = 5\\cdot7\\cdot11 = 385,\\\nM_3 \u0026amp;= \\dfrac{M}{m_3} = \\dfrac{2310}{7} = 5\\cdot6\\cdot11 = 330,\\\nM_4 \u0026amp;= \\dfrac{M}{m_4} = \\dfrac{2310}{11} = 5\\cdot6\\cdot7 = 210, \\end{aligned} $$\ny, a continuación, resolvemos las siguientes ecuaciones de congruencia lineales:\n$$ \\begin{aligned} 462x\\equiv 1\\pmod{5}\u0026amp;\\Leftrightarrow 2x\\equiv 1\\pmod{5}\\Leftrightarrow 6x\\equiv 3\\pmod{5}\\Leftrightarrow x\\equiv 3\\pmod{5},\\\n385x\\equiv 1\\pmod{6}\u0026amp;\\Leftrightarrow x\\equiv 1\\pmod{6},\\\n330x\\equiv 1\\pmod{7}\u0026amp;\\Leftrightarrow x\\equiv 1\\pmod{7},\\\n210x\\equiv 1\\pmod{11}\u0026amp;\\Leftrightarrow x\\equiv 1\\pmod{11}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} x\u0026amp;\\equiv 3\\pmod{5},\u0026amp; 462x\u0026amp;\\equiv 1\\pmod{5},\u0026amp; x\u0026amp;\\equiv 3\\pmod{5},\\\nx\u0026amp;\\equiv 3\\pmod{6},\u0026amp; 385x\u0026amp;\\equiv 1\\pmod{6},\u0026amp; x\u0026amp;\\equiv 1\\pmod{6},\\\nx\u0026amp;\\equiv 1\\pmod{7},\u0026amp; 330x\u0026amp;\\equiv 1\\pmod{7},\u0026amp; x\u0026amp;\\equiv 1\\pmod{7},\\\nx\u0026amp;\\equiv 0\\pmod{11},\u0026amp; 210x\u0026amp;\\equiv 1\\pmod{11},\u0026amp; x\u0026amp;\\equiv 1\\pmod{11}, \\end{aligned} $$\nentonces la solución es\n$$ \\begin{aligned} x \u0026amp;\\equiv (3\\cdot462\\cdot3 + 3\\cdot385\\cdot1 + 1\\cdot330\\cdot1 + 0\\cdot210\\cdot1)\\pmod{2310}\\\n\u0026amp;\\equiv 5643\\pmod{2310}\\equiv 1023\\pmod{2310}, \\end{aligned} $$\nesto es, asciende a $1023$ el número de soldados que sobrevivieron a la batalla.\n","date":1546055979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"817c6af10426598f74db7b8172b20c28","permalink":"https://imalexissaez.github.io/2018/12/29/contando-soldados-de-una-manera-curiosa/","publishdate":"2018-12-29T05:59:39+02:00","relpermalink":"/2018/12/29/contando-soldados-de-una-manera-curiosa/","section":"post","summary":"Problema 38: estoy seguro de que por menos ha habido motines.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"Contando soldados de una manera curiosa","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 37: Un cierto número de billetes se reparten entre siete subalternos y dos jefes, teniendo en cuenta que un jefe cobra el doble que un subalterno. Tras el reparto, sobran seis billetes; pero si hubiese faltado un jefe, el reparto habría salido exacto. Por otro lado, si hubiera faltado un subalterno, serían entonces ocho los billetes que habrían sobrado. Calcular el menor número positivo de billetes que cobraron cada uno.\n La clave para resolver este ejercicio es plantearse la cuestión: \u0026lsquo;'¿entre cuántas partes hay que repartir el total de billetes?''. Como cada jefe cobra por dos subalternos, en verdad son once las partes entre las que repartir.\nAsí, si denotamos por $x$ el número de billetes, la primera ecuación de congruencia lineal es $x\\equiv 6\\pmod{11}$, pues se reparte entre las once partes y sobran (es decir, el resto asciende a) seis. Cuando falta un jefe, son entonces nueve las partes entre las que repartir, y al ser exacto dicho reparto se traduce entonces en la ecuación de congruencia lineal $x\\equiv 0\\pmod{9}$. Finalmente, cuando falta un subalterno, son diez las partes entre las que repartir, y como sobran ocho billetes, la correspondiente ecuación de congruencia lineal es $x\\equiv 8\\pmod{10}$.\nEn resumen, hemos de resolver el sistema de congruencias lineales,\n$$ \\begin{aligned} x\u0026amp;\\equiv 6\\pmod{11},\\\nx\u0026amp;\\equiv 0\\pmod{9},\\\nx\u0026amp;\\equiv 8\\pmod{10}. \\end{aligned} $$\nComo $mcd(9,10,11)=1$, esto es, son primos entre sí los tres números, por el Teorema chino del resto estamos en condiciones de asegurar que existe solución módulo $9\\cdot10\\cdot11 = 990$. Ahora bien,\n$$ M_1=90,\\qquad M_2=110,\\qquad M_3=99, $$\npor lo que el siguiente paso es resolver las ecuaciones de congruencias lineales,\n$$ \\begin{aligned} 90x\u0026amp;\\equiv 1\\pmod{11}\\Leftrightarrow 2x\\equiv 1\\pmod{11}\\Leftrightarrow x\\equiv 1\\pmod{11},\\\n110x\u0026amp;\\equiv 1\\pmod{9}\\Leftrightarrow 2x\\equiv 1\\pmod{9}\\Leftrightarrow x\\equiv 5\\pmod{11},\\\n99x\u0026amp;\\equiv 1\\pmod{10}\\Leftrightarrow (-x)\\equiv 1\\pmod{10}\\Leftrightarrow x\\equiv (-1)\\pmod{11}. \\end{aligned} $$\nAgrupando ahora toda la información adecuadamente,\n$$ \\begin{aligned} x\u0026amp;\\equiv 6\\pmod{11},\u0026amp; 90x\u0026amp;\\equiv 1\\pmod{11},\u0026amp; x\u0026amp;\\equiv 6\\pmod{11},\\\nx\u0026amp;\\equiv 0\\pmod{9},\u0026amp; 110x\u0026amp;\\equiv 1\\pmod{9},\u0026amp; x\u0026amp;\\equiv 5 \\pmod{9},\\\nx\u0026amp;\\equiv 8\\pmod{10},\u0026amp; 99x\u0026amp;\\equiv 1\\pmod{10},\u0026amp; x\u0026amp;\\equiv (-1)\\pmod{10}, \\end{aligned} $$\nla solución al sistema queda\n$$ \\begin{aligned} x \u0026amp;\\equiv (6\\cdot90\\cdot6 + 0\\cdot110\\cdot5 + 8\\cdot99\\cdot(-1))\\pmod{990}\\ \u0026amp;\\equiv 2448\\pmod{990}\\equiv 468\\pmod{990}. \\end{aligned} $$\nNótese que podíamos habernos ahorrado los cálculos asociados a la segunda ecuación del sistema, por aquel $0$ que figura en la misma. Por tanto, el menor número positivo de billetes a repartir es $468$, y como $468 = 11\\cdot42 + 6$, concluimos que los subalternos cobran $42$ billetes, mientras que los jefes $84$ billetes.\n","date":1545796779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"ee39b5de8df6cfc8c5a8515876c260d4","permalink":"https://imalexissaez.github.io/2018/12/26/repartiendo-el-aguinaldo-de-la-empresa/","publishdate":"2018-12-26T05:59:39+02:00","relpermalink":"/2018/12/26/repartiendo-el-aguinaldo-de-la-empresa/","section":"post","summary":"Problema 37: un enunciado muy apropiado para estas fechas.","tags":["Problemas","Teorema chino del resto","Teoría de números"],"title":"Repartiendo el aguinaldo de la empresa","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 36: ¿Cuántas cifras tiene el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial?\n Antes de abordar la resolución del ejercicio propiamente dicho, veamos con un par de ejemplos la manera de proceder, para así intentar detectar patrones. Por ejemplo, si consideramos el número $354$, podemos aislar la primera cifra escribiéndolo como $300 + 54$, es decir, $3 \\cdot 10^2 + 54$. Ahora, si colocamos la primera cifra en el último lugar de la derecha, el número pasa a ser $543$, y como deseamos aislar de nuevo el $3$, podemos escribirlo como $540 + 3$ o, equivalentemente, como $54\\cdot10 + 3$. Por desgracia, no se cumple para este ejemplo la condición exigida en el enunciado del ejercicio, puesto que\n$$ \\dfrac{3}{2}\\cdot 354 = 531\\neq 543. $$\nSi ahora consideramos el número $4537 = 4\\cdot10^3 + 537$, después conformaríamos el número $5374=537\\cdot10 + 4$ y, desgraciadamente,\n$$ \\dfrac{3}{2}\\cdot4537 = 6805.5\\neq 5374. $$\nNo obstante, estos dos intentos fallidos nos permiten atisbar los protagonistas de este ejercicio: la primera cifra del número buscado, que denotaremos como $A$ y el resto del número, que señalaremos como $B$. Así, dado un número de $n$ cifras, buscamos que se satisfaga la ecuación\n$$ \\dfrac{3}{2}(A\\cdot10^{n-1} + B) = B\\cdot10 + A. $$\nOperando algebraicamente, llegamos a que\n$$ \\begin{aligned} 3A\\cdot10^{n-1} + 3B \u0026amp;= 20B+2A,\\\n17B \u0026amp;= 3A\\cdot10^{n-1} - 2A,\\\n17B \u0026amp;= A(3\\cdot10^{n-1} - 2),\\\nB \u0026amp;= \\dfrac{A(3\\cdot10^{n-1} - 2)}{17}. \\end{aligned} $$\nAhora bien, como $A$ es la primera cifra del número buscado, es cierto que $1\\leq A\\leq 9$, luego no puede ser múltiplo de $17$, hecho que nos permite concluir que $3\\cdot10^{n-1} - 2$ es divisible por $17$. Para hallar el valor de $n$, podemos optar por dividir, sucesivamente, números de la forma $30, 300, 3000,\\ldots$, entre $17$ hasta dar con el dividendo adecuado que arroja un resto para la división que ascienda a $2$.\nAlternativamente, usando congruencias, que $3\\cdot10^{n-1} - 2$ sea múltiplo de $17$ es equivalente a escribir\n$$ (3\\cdot10^{n-1} - 2)\\equiv 0\\pmod{17}, $$\nesto es,\n$$ 3\\cdot10^{n-1} \\equiv 2\\pmod{17}. $$\nMultiplicando toda la ecuación de congruencia lineal por $6$ (ya que $3\\cdot6=18$, cifra que queda muy cercana a un múltiplo de $17$) queda\n$$ 18\\cdot10^{n-1} \\equiv 12\\pmod{17}, $$\nes decir,\n$$ 10^{n-1} \\equiv 12\\pmod{17}. $$\nNos aproximamos a la estructura de un resultado muy conocido de Teoría de números, por lo que podemos investigar qué sucede al multiplicar ahora por $10$ la ecuación de congruencia lineal. Así,\n$$ 10^{n-1} \\equiv 12\\pmod{17}\\Leftrightarrow 10^n\\equiv 120\\pmod{17}\\equiv 1\\pmod{17}, $$\ny como $17$ es un número primo y $mcd(10,17)=1$, entonces, por el Pequeño Teorema de Fermat, sabemos que $10^{16} \\equiv 1\\pmod{17}$.\nIgualando términos con la anterior ecuación de congruencia lineal, concluimos que $n=16$. No obstante, dicho resultado no garantiza haber encontrado el menor número natural que verifica esa propiedad, por lo que hemos de proceder con cautela y seguir investigando. No obstante, como $10^8 \\equiv (-1)\\pmod{17}$ (a modo anecdótico, si hubiera salido $10^8 \\equiv 1\\pmod{17}$, hubiésemos tenido que probar con $10^4$ y así sucesivamente), en esta ocasión sí podemos concluir que el resultado teórico nos ha llevado al menor valor de $n$ para el que se satisface la propiedad. Así, el menor número que cumple que, cuando la primera cifra de la izquierda se coloca en el último lugar de la derecha, el número que resulta es una vez y media el número inicial posee $16$ cifras.\n","date":1545451179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"b95e4094cf112864bae24e76f86ba39e","permalink":"https://imalexissaez.github.io/2018/12/22/y-volvemos-con-los-problemas-de-mover-digitos/","publishdate":"2018-12-22T05:59:39+02:00","relpermalink":"/2018/12/22/y-volvemos-con-los-problemas-de-mover-digitos/","section":"post","summary":"Problema 36: con un par de ejemplos, enseguida detectamos el patrón a seguir.","tags":["Problemas","Teoría de números"],"title":"Y volvemos con los problemas de mover dígitos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 35: Encuentra el menor número natural $n$ tal que $n / 2$ es cuadrado perfecto, $n / 3$ es cubo perfecto y $n / 5$ es potencia quinta perfecta.\n Dado que podemos dividir $n$ por $2$, $3$ y $5$ y el resultado de dichas operaciones continúa siendo un número natural (porque se trata, respectivamente de cuadrado, cubo y potencia quinta perfectos), ello implica que en su descomposición en factores primos aparecerán los términos $2^x$, $3^y$ y $5^z$, con $x, y, z\\geq 1$. En ejercicios anteriores también considerábamos la posibilidad de un término entero $k$ que agrupaba potencias de números primos distintos a los tres mencionados anteriormente, pero, en esta ocasión, como nuestro objetivo es hallar el menor natural $n$ que satisface las condiciones del enunciado del ejercicio, asumiremos que $k=1$. Así, $n=2^x 3^y 5^z$.\nAhora bien, como $n / 2 = 2^{x-1} 3^y 5^z$ es un cuadrado perfecto, los exponentes de la factorización dada serán múltiplos de dos ($x-1=\\dot{2}$, $y=\\dot{2}$, $z=\\dot{2}$). Al ser $n / 3 = 2^x 3^{y-1} 5^z$ un cubo perfecto, los exponentes anteriores serán múltiplos de $3$ ($x=\\dot{3}$, $y-1=\\dot{3}$, $z=\\dot{3}$). Finalmente, como $n / 5 = 2^x 3^y 5^{z-1}$ es una potencia quinta perfecta, los exponentes previos serán múltiplos de $5$ ($x=\\dot{5}$, $y=\\dot{5}$, $z-1=\\dot{5}$).\nAsí pues, para $x$ surge el siguiente sistema de congruencias lineales\n$$ \\begin{aligned} x-1\u0026amp;\\equiv 0\\pmod{2},\\\nx\u0026amp;\\equiv 0\\pmod{3},\\\nx\u0026amp;\\equiv 0\\pmod{5}, \\end{aligned} $$\nque podemos resolver utilizando el Teorema chino del resto, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $3$ y $5$, lo será de $15$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $2$. Son candidatos $15,45,75,\\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $x=15$.\nAnálogamente, para $y$ aparece el siguiente sistema de congruencias lineales\n$$ \\begin{aligned} y\u0026amp;\\equiv 0\\pmod{2},\\\ny-1\u0026amp;\\equiv 0\\pmod{3},\\\ny\u0026amp;\\equiv 0\\pmod{5}, \\end{aligned} $$\nque podemos resolver utilizando el Teorema chino del resto, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $2$ y $5$, lo será de $10$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $3$. Son candidatos $10,40,70,\\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $y=10$.\nFinalmente, para $z$ encontramos el siguiente sistema de congruencias lineales\n$$ \\begin{aligned} z\u0026amp;\\equiv 0\\pmod{2},\\\nz\u0026amp;\\equiv 0\\pmod{3},\\\nz-1\u0026amp;\\equiv 0\\pmod{5}, \\end{aligned} $$\nque podemos resolver utilizando el Teorema chino del resto, aunque por tanteo es sencillo en este caso hallar la solución. Al ser múltiplo de $2$ y $3$, lo será de $6$. Entre los múltiplos de este último, hemos de buscar aquel que al restarle una unidad el resultado sea múltiplo de $5$. Son candidatos $6,36,66,\\ldots$, pero como estamos interesados en encontrar el menor natural $n$, escogemos como solución final $z=6$.\nPor tanto, el menor número natural $n$ tal que $n/2$ es cuadrado perfecto, $n/3$ es cubo perfecto y $n/5$ es potencia quinta perfecta es $n=2^{15} \\cdot 3^{10} \\cdot 5^6$.\n","date":1545191979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"f5a72406a54785802ffb1ff70ac16588","permalink":"https://imalexissaez.github.io/2018/12/19/cuadrado-perfecto-cubo-perfecto-potencia-quinta-perfecta/","publishdate":"2018-12-19T05:59:39+02:00","relpermalink":"/2018/12/19/cuadrado-perfecto-cubo-perfecto-potencia-quinta-perfecta/","section":"post","summary":"Problema 35: jugando con las factorizaciones.","tags":["Problemas","Teoría de números"],"title":"Cuadrado perfecto, cubo perfecto, potencia quinta perfecta...","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 34: Caracteriza aquellos números naturales cuyo número de divisores es impar.\n De partida, sabemos que los números naturales buscados no serán primos, puestos estos últimos siempre poseen una cantidad par de divisores, dos para ser más concretos: $1$ y el propio número primo. Así pues, consideremos un número natural $m$ expresado mediante su factorización en factores primos,\n$$ m=a^x b^y c^z\\cdots, $$\ncon $a,b,c,\\ldots$ números primos y $x,y,z,\\ldots$ números naturales. Sabemos que el número de divisores de $m$ es, en total,\n$$ (x + 1)(y + 1)(z + 1)\\cdots. $$\nAhora bien, nos indican que dicho producto ha de ser un número impar, hecho que traduce en que todos y cada uno de sus términos han de ser números impares (ya que bastaría con que únicamente uno fuese par para que todo el producto resultase un número par). Como $x+1, y+1, z+1,\\ldots$ son números impares, inmediatamente deducimos que $x,y,z,\\ldots$ serán números pares, que podrán escribirse como $x=2p, y=2q, z=2r,\\ldots$ para ciertos enteros $p,q,r,\\ldots$. De esta manera,\n$$ m = a^x b^y c^z\\cdots = a^{2p} b^{2q} c^{2r}\\cdots = (a^p b^q c^r\\cdots)^2, $$\nesto es, los números naturales que se caracterizan por poseer una cifra impar de divisores son cuadrados perfectos. Con ello, en función de la cantidad de divisores de un número, contamos así con un criterio para decidir rápidamente si dicho número es o no un cuadrado perfecto, según su total de divisores sea o no una cifra impar.\n","date":1544846379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"1b6d7307bde0ade624853c528ff68f2a","permalink":"https://imalexissaez.github.io/2018/12/15/y-si-el-numero-de-divisores-es-impar/","publishdate":"2018-12-15T05:59:39+02:00","relpermalink":"/2018/12/15/y-si-el-numero-de-divisores-es-impar/","section":"post","summary":"Problema 34: una propiedad interesante.","tags":["Problemas","Teoría de números"],"title":"¿Y si el número de divisores es impar?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 33:\n (a) ¿En cuántos ceros acaba el número $1000!$? (b) Demuestra que $1000!$ no es divisible por $2^{995}$,   Para el apartado (a), nuestra labor consistiría en contar el número de dieces que podemos encontrar en la expresión de $1000! = 1\\cdot2\\cdot3\\cdots999\\cdot1000$. No estamos en condiciones de emplear directamente la Fórmula de Legendre, puesto que $10$ no es un número primo, pero $10=2\\cdot5$, de manera que nuestra tarea se reduce a buscar el número de veces que figura $5$ en la factorización en números primos de $1000!$ (porque $2$ aparecerá con mayor frecuencia, al ser menor que $5$, por ello nos interesa solamente hallar el número de cincos).\nAsí, aplicando la mencionada fórmula,\n$$ \\begin{aligned} v_5(1000!) \u0026amp;= \\left\\lfloor\\dfrac{1000}{5}\\right\\rfloor + \\left\\lfloor\\dfrac{1000}{5^2}\\right\\rfloor + \\left\\lfloor\\dfrac{1000}{5^3}\\right\\rfloor + \\left\\lfloor\\dfrac{1000}{5^4}\\right\\rfloor\\\n\u0026amp;= 200 + 40 + 8 + 1 = 249, \\end{aligned} $$\nes decir, $1000!$ acaba en $249$ ceros.\nPara el apartado (b), quizá de forma un tanto rebuscada, simplemente nos preguntan por el número de veces que aparece $2$ en la factorización en números primos de $1000!$, puesto que tal valor nos permitirá verificar la propiedad enunciada. Aplicando, de nuevo, la Fórmula de Legendre, tenemos que\n$$ \\begin{aligned} v_2(1000!) \u0026amp;= \\left\\lfloor\\dfrac{1000}{2}\\right\\rfloor + \\left\\lfloor\\dfrac{1000}{2^2}\\right\\rfloor + \\cdots + \\left\\lfloor\\dfrac{1000}{2^9}\\right\\rfloor\\\n\u0026amp;= 500 + 250 + 125 + 62 + 31 + 15 + 7 + 3 + 1 \\\n\u0026amp;= 994, \\end{aligned} $$\nluego $2^{994}|1000!$, pero $2^{995}\\nmid 1000!$, como queríamos demostrar.\n","date":1544587179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"3761036400ebf94c46197baa2351e7d3","permalink":"https://imalexissaez.github.io/2018/12/12/buscando-ceros-muchos-ceros-en-un-factorial/","publishdate":"2018-12-12T05:59:39+02:00","relpermalink":"/2018/12/12/buscando-ceros-muchos-ceros-en-un-factorial/","section":"post","summary":"Problema 33: trabajando con números enormes.","tags":["Fórmula de Legendre","Problemas","Teoría de números"],"title":"Buscando ceros, muchos ceros, en un factorial","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 32: Encuentra el número natural más pequeño con $6$ como cifra de las unidades de manera que si el $6$ se mueve al principio, el número queda multiplicado por cuatro.\n Antes de abordar la resolución del ejercicio propiamente en sí, analicemos el movimiento del $6$ con un par de números en concreto para intentar detectar posibles patrones.\nPor ejemplo, un número como el $326$ es cierto que podemos escribirlo como\n$$ 326 = 320 + 6 = 32\\cdot10 + 6. $$\nAl mover la cifra de las unidades al principio queda entonces el número $632$, que podemos escribir como\n$$ 632 = 600 + 32 = 6\\cdot 10^2 + 32.$$\nLa idea, como vemos, es intentar aislar la cifra $6$ de alguna forma posible, que luego nos permita construir una ecuación que satisfaga las condiciones impuestas en el enunciado del ejercicio.\nConsideremos ahora el número $8886$, actuando como antes, lo podemos escribir como $8886 = 8880 + 6 = 888\\cdot10 + 6 = 10n + 6$, donde $n = 888$. Al mover la cifra de las unidades al principio del número queda $6888$, que podemos escribir como $6888 = 6000 + 888 = 6\\cdot 10^3 + n = 6\\cdot 10^m + n$, con $m + 1$ como número de dígitos del número inicial.\nAsí pues, el número inicial vamos a denotarlo como $10n + 6$, mientras que el resultado de llevar a cabo el movimiento de la cifra de las unidades al principio del número será $6\\cdot10^m + n$. Como el enunciado marca que este último es cuatro veces más grande que el considerado en principio, planteamos así la ecuación\n$$ 4(10n + 6) = 6\\cdot10^m + n, $$\no, equivalentemente, $39n = 6\\cdot10^m - 24$, ecuación diofántica que podemos simplificar por $3$, quedando pues\n$$ 13n = 2\\cdot10^m - 8. $$\nAhora bien, como el miembro derecho de esta última ecuación es un número par y $13$ es un número impar, necesariamente $n$ ha de ser un número par, es decir, de la forma $n=2x$, para algún $x\\in\\mathbb{Z}$. Sustituyendo arriba y despejando la variable queda\n$$ \\begin{aligned} 13(2x) \u0026amp;= 2\\cdot10^m - 8,\\\n13x \u0026amp;= 10^m - 4,\\\nx \u0026amp;= \\dfrac{10^m - 4}{13}. \\end{aligned} $$\nPodemos ahora introducir la expresión en una calculadora científica y generar una tabla de valores para ella en función de $m$, quedándonos con el primero para el cual $x$ sea un número natural. Alternativamente, podemos actuar por tanteo, dividiendo las potencias de $10$ entre $13$ hasta dar con la primera en la que el resto de esta operación matemática sea $4$. Así,\n$$ \\begin{aligned} 10 \u0026amp;= 13\\cdot 0 + 10,\\\n100 \u0026amp;= 13\\cdot 7 + 9,\\\n1000 \u0026amp;= 13\\cdot 76 + 12,\\\n10000 \u0026amp;= 13\\cdot 769 + 3,\\\n100000 \u0026amp;= 13\\cdot 7692 + 4, \\end{aligned} $$\npor tanto $x = 7692$, de manera que $n = 2x = 15384$, es decir, el número que buscamos es, recordando la expresión que generamos al principio de la resolución del ejercicio, $10n + 6 = 153846$ (y es el menor por ser el primero que satisface la ecuación diofántica). Como nota anecdótica, si estuviéramos interesados en hallar el siguiente valor que cumple con los dictados del enunciado, seguiríamos dividiendo potencias de $10$, encontrando que el siguiente que verifica la condición de interés es $x = 76927692$.\nAlternativamente, veamos cómo resolver la ecuación $13x = 10^m - 4$ de forma técnica. Tal y como viene planteada dicha ecuación, es cierto que $10^m - 4$ es múltiplo de $13$, por lo que hemos de resolver la ecuación de congruencia $10^m - 4\\equiv 0\\pmod{13}$, o, equivalentemente, $10^m\\equiv 4\\pmod{13}$.\nAhora bien, como $10\\equiv(-3)\\pmod{13}$, entonces\n$$ 10^2\\equiv (-3)^2\\pmod{13}\\equiv 9\\pmod{13}\\equiv (-4)\\pmod{13}, $$\ny así podemos escribir\n$$ \\begin{aligned} 10^m\\equiv 4\\pmod{13}\u0026amp;\\Leftrightarrow 10^2\\cdot10^{m-2}\\equiv 4\\pmod{13}\\\n\u0026amp;\\Leftrightarrow 10^{m - 2}\\equiv (-1)\\pmod{13}. \\end{aligned} $$\nComo $13$ es un número primo y $mcd(10, 13) = 1$, el Pequeño Teorema de Fermat afirma que $10^{12}\\equiv 1\\pmod{13}$. La expresión que figura en la ecuación previa no se ajusta exactamente a la anterior estructura, pero si la elevamos al cuadrado queda\n$$ (10^{m-2})^2\\equiv (-1)^2\\pmod{13}\\Leftrightarrow 10^{2m-4}\\equiv 1\\pmod{13}, $$\ne, igualando exponentes, $2m-4 = 12$, de donde $m = 8$. Este valor, lo introduciríamos en la expresión que nos permite calcular el número $x$, hallando entonces $76927692$, cifra que sabemos no es la menor. Hemos de ser cautos aquí, puesto que el resultado asociado a Fermat en ningún momento afirma que el exponente dado es el menor para el que se cumple que sea congruente con uno módulo $13$. No obstante, de haber uno más pequeño, sí que será cierto que dividirá a $12$.\nPor tanto, si probamos con $10^6$, encontramos que $10^6\\equiv 1\\pmod{13}$, e, igualando como antes exponentes, $2m-4=6$, de donde $m=5$, llegando así a la primera solución que encontramos por tanteo arriba. ¿Podría haber todavía alguna menor? Como $10^3\\equiv (-1)\\pmod{13}$, estamos en condiciones de descartar esa situación. Por tanto, el asociado a $m=5$ es el valor más pequeño para el que se satisface la ecuación de congruencia lineal, llevándonos a la solución $x=7692$ y permitiéndonos concluir el ejercicio tal y como hicimos por el método de tanteo.\n","date":1544241579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"b8ae068caddbe3390e07e8df5d290866","permalink":"https://imalexissaez.github.io/2018/12/08/moviendo-cifras-de-posicion-en-un-numero/","publishdate":"2018-12-08T05:59:39+02:00","relpermalink":"/2018/12/08/moviendo-cifras-de-posicion-en-un-numero/","section":"post","summary":"Problema 32: siempre conviene empezar con ejemplos sencillos.","tags":["Problemas","Teoría de números"],"title":"Moviendo cifras de posición en un número","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 31: Demuestra que $a^{25} - a$ es divisible entre $30$ para cualquier entero $a$.\n Hemos de ser capaces de probar que $(a^{25} - a)\\equiv 0\\pmod{30}$ para todo $a\\in\\mathbb{Z}$. Como $30=2\\cdot3\\cdot5$, veremos si la expresión es múltiplo de cada uno de los factores primos de $30$ y, en caso afirmativo, por las propiedades de las congruencias, estaremos en condiciones de concluir que asimismo será múltiplo de $30$.\nVamos a apoyarnos en el corolario del Pequeño Teorema de Fermat, que afirma que si $p$ es un número primo y $a\\in\\mathbb{Z}$, entonces $a^p\\equiv a\\pmod{p}$. Así, para $p=5$,\n$$ \\begin{aligned} a^{25} \u0026amp;= (a^5)^5\\\n\u0026amp;\\equiv a^5\\pmod{5}\\\n\u0026amp;\\equiv a\\pmod{5}, \\end{aligned} $$\nde manera que $(a^{25} - a)\\equiv 0\\pmod{5}$, esto es, la expresión es múltiplo de $5$. Procediendo de manera similar, para $p=3$,\n$$ \\begin{aligned} a^{25} \u0026amp;= a\\cdot (a^8)^3\\\n\u0026amp;\\equiv (a\\cdot a^8)\\pmod{3}\\\n\u0026amp;\\equiv (a^3)^3\\pmod{3}\\\n\u0026amp;\\equiv a^3\\pmod{3}\\\n\u0026amp;\\equiv a\\pmod{3}, \\end{aligned} $$\ny, por tanto, $(a^{25} - a)\\equiv 0\\pmod{3}$, es decir, la expresión es asimismo múltiplo de $3$. Finalmente, para $p=2$,\n$$ \\begin{aligned} a^{25} \u0026amp;= a\\cdot(a^{12})^2\\\n\u0026amp;\\equiv (a\\cdot a^{12})\\pmod{2}\\\n\u0026amp;\\equiv (a\\cdot (a^6)^2)\\pmod{2}\\\n\u0026amp;\\equiv (a\\cdot a^6)\\pmod{2}\\\n\u0026amp;\\equiv (a\\cdot(a^3)^2)\\pmod{2}\\\n\u0026amp;\\equiv (a\\cdot a^3)\\pmod{2}\\\n\u0026amp;\\equiv a^4\\pmod{2}\\\n\u0026amp;\\equiv (a^2)^2\\pmod{2}\\\n\u0026amp;\\equiv a^2\\pmod{2}\\\n\u0026amp;\\equiv a\\pmod{2}, \\end{aligned} $$\ny, por consiguiente, $(a^{25} - a)\\equiv 0\\pmod{2}$, esto es, la expresión también es múltiplo de $2$. Al ser múltiplo de $2$, $3$ y $5$, por las propiedades de las congruencias podemos afirmar que $(a^{25} - a)\\equiv 0\\pmod{30}$, es decir, la expresión es múltiplo de $30$.\nA modo de nota final, aunque nos hubiese dado la impresión de que escoger la descomposición $30=5\\cdot 6$ habría acelerado la resolución de este ejercicio, hemos de ser cautos, pues $6$ no es un número primo, requisito indispensable para aplicar el resultado que nos ha permitido llevar a buen puerto este problema. En este último caso, habría sido necesario recurrir a otras herramientas para verificar la propiedad propuesta en el enunciado del ejercicio.\n","date":1543982379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"d090907f61b9744b4098c683fbe1c66c","permalink":"https://imalexissaez.github.io/2018/12/05/sera-multiplo-de-treinta-o-no/","publishdate":"2018-12-05T05:59:39+02:00","relpermalink":"/2018/12/05/sera-multiplo-de-treinta-o-no/","section":"post","summary":"Problema 31: el Pequeño Teorema de Fermat siempre tan útil.","tags":["Pequeño Teorema de Fermat","Problemas","Teoría de números"],"title":"¿Será múltiplo de treinta o no?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 30: Sea $n$ un número natural no nulo. Dado el conjunto de fracciones\n$$ A_n = \\left{\\dfrac{1}{n},\\dfrac{2}{n},\\dfrac{3}{n},\\ldots,\\dfrac{n}{n}\\right}. $$\nCalcula el número de fracciones irreducibles y la suma de dichas fracciones.\n Acompañemos la resolución de este ejercicio con un caso particular para $n$, con el objetivo de que esta sea así más ilustrativa. Por ejemplo, si $n=8$, el conjunto de fracciones a estudiar es\n$$ A_8 = \\left{\\dfrac{1}{8},\\dfrac{2}{8},\\dfrac{3}{8},\\dfrac{4}{8},\\dfrac{5}{8},\\dfrac{6}{8},\\dfrac{7}{8},\\dfrac{8}{8}\\right}, $$\nque contiene $4$ fracciones irreducibles,\n$$ \\left{\\dfrac{1}{8},\\dfrac{3}{8},\\dfrac{5}{8},\\dfrac{7}{8}\\right}. $$\nEstas se caracterizan por ser aquellas en las que numerador y denominador son coprimos. Así pues, el problema se reduce a encontrar, dado un número natural $n$ no nulo, la cantidad de enteros positivos menores o iguales a $n$ y coprimos con $n$, esto es, $\\varphi(n)$.\nEn nuestro caso concreto, para $n=8=2^3$, efectivamente,\n$$ \\varphi(8) = 8\\left(1 - \\dfrac{1}{2}\\right) = 8\\cdot\\dfrac{1}{2} = 4. $$\nPor tanto, recapitulando, dado $n$ un número natural no nulo, la cantidad de fracciones irreducibles que figuran en el conjunto $A_n$ es igual a $\\varphi(n)$.\nPara calcular su suma, si volvemos a centrar nuestra atención en el caso particular de $n=8$, tenemos que\n$$ \\dfrac{1}{8} + \\dfrac{7}{8} = 1,\\qquad \\dfrac{3}{8} + \\dfrac{5}{8} = 1, $$\nesto es, podemos agrupar las fracciones irreducibles de dos en dos, de manera que su suma es $1$. Efectivamente, haciendo uso del Teorema 1.9 de [1], sabemos que, dados dos números enteros $a$ y $b$, para cualquier número entero $x$ se cumple que\n$$ mcd(a,b) = mcd(b,a) = mcd(a,-b) = mcd(a,b+ax). $$\nConsiderando ahora un número natural $k\u0026lt;n$ coprimo con $n$, se tiene que $mcd(k,n)=1$, y basta tomar en el resultado anterior $a=n$, $b=(-k)$ y $x=1$ para deducir que $1 = mcd(n,k) = mcd(n,(-k))= mcd(n,n-k)$ y, así, concluimos que si la fracción $k / n$ es irreducible, asimismo lo es $(n - k) / n$. Además, trivialmente\n$$ \\dfrac{k}{n} + \\dfrac{n-k}{n} = 1. $$\nPor tanto, aplicando el resultado alcanzado, la suma de las fracciones irreducibles del conjunto $A_n$ será\n$$ S = \\dfrac{\\varphi(n)}{2}, $$\nquedando resuelto así el ejercicio.\nReferencias  [1] Ivan Niven, Herbert S. Zuckerman y Hugh L. Montgomery. An Introduction to the Theory of Numbers. 5ª edición. New York, United States: Wiley, 1991. ISBN: 9780471625469.  ","date":1543636779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564437601,"objectID":"f77129a0e10ec49aa0df81da3a6bbf32","permalink":"https://imalexissaez.github.io/2018/12/01/de-fracciones-irreducibles-y-su-suma/","publishdate":"2018-12-01T05:59:39+02:00","relpermalink":"/2018/12/01/de-fracciones-irreducibles-y-su-suma/","section":"post","summary":"Problema 30: formalizando un resultado, en apariencia, sencillo.","tags":["Problemas","Teoría de números"],"title":"De fracciones irreducibles y su suma","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 29: Prueba que $437$ es divisor de\n (a) $16^{99} - 1$. (b) $18! + 1$.   Para ambos apartados, vamos a aprovechar que $437 = 19\\cdot 23$ y, de cara a demostrar que es divisor de los números dados en los apartados (a) y (b), estudiaremos si $19$ y $23$ lo son y, en caso afirmativo, por las propiedades de las congruencias, concluiremos que $437$ los divide.\nPara el apartado (a), como $19$ es un número primo y $mcd(16,19)=1$, entonces, por el Pequeño Teorema de Fermat, $16^{18}\\equiv 1\\pmod{19}$. Ahora, como $99 = 18\\cdot5 + 9$, entonces\n$$ \\begin{aligned} 16^{99} \u0026amp;= 16^9\\cdot(16^{18})^5\\\n\u0026amp;\\equiv (16^9\\cdot 1^{18})\\pmod{19}\\\n\u0026amp;\\equiv 16^9\\pmod{19}\\\n\u0026amp;\\equiv 4^{18}\\pmod{19}, \\end{aligned} $$\npero como $mcd(4,19)=1$, aplicando de nuevo el resultado anterior, $4^{18}\\equiv 1\\pmod{19}$, luego\n$$ ( 16^{99} - 1 )\\equiv (1 - 1)\\pmod{19}\\equiv 0\\pmod{19}, $$\nesto es, $16^{99}-1$ es múltiplo de $19$. De manera similar, como $23$ es un número primo y $mcd(16,23)=1$, por el mismo teorema que antes sabemos que $16^{22}\\equiv 1\\pmod{23}$, y como $99=22\\cdot4+11$, tenemos que\n$$ \\begin{aligned} 16^{99} \u0026amp;= 16^{11}\\cdot(16^{22})^4\\\n\u0026amp;\\equiv (16^{11}\\cdot 1^4)\\pmod{23}\\\n\u0026amp;\\equiv 16^{11}\\pmod{23}\\\n\u0026amp;\\equiv 4^{22}\\pmod{23}, \\end{aligned} $$\ny utilizando la estrategia previa, como $mcd(4,23)=1$, sabemos que $4^{22}\\equiv 1\\pmod{23}$. Así,\n$$ ( 16^{99} - 1 )\\equiv (1 - 1)\\pmod{23}\\equiv 0\\pmod{23}, $$\nes decir, $16^{99} - 1$ es múltiplo de $23$ y, por las propiedades de las congruencias, será asimismo múltiplo de $19\\cdot23=437$.\nPara el apartado (b), como $19$ es un número primo, aplicando el Teorema de Wilson, $18!\\equiv (-1)\\pmod{19}$, luego\n$$ ( 18! + 1 )\\equiv (-1+1)\\pmod{19}\\equiv 0\\pmod{19}, $$\nesto es, $18!+1$ es múltiplo de $19$. Por otro lado, $23$ es asimismo un número primo, de manera que utilizando de nuevo el resultado anterior, $22!\\equiv (-1)\\pmod{23}$. Ahora bien, $22! = 22\\cdot21\\cdot20\\cdot19\\cdot18!$ y como $22\\equiv (-1)\\pmod{23}$, $21\\equiv (-2)\\pmod{23}$, $20\\equiv (-3)\\pmod{23}$ y $19\\equiv (-4)\\pmod{23}$, llegamos a que\n$$ \\begin{aligned} 22! \u0026amp;= (22\\cdot21\\cdot20\\cdot19\\cdot18!)\\\n\u0026amp;\\equiv ((-1)\\cdot(-2)\\cdot(-3)\\cdot(-4)\\cdot18!)\\pmod{23}\\\n\u0026amp;\\equiv (24\\cdot18!)\\pmod{23}\\\n\u0026amp;\\equiv (1\\cdot18!)\\pmod{23}\\\n\u0026amp;\\equiv 18!\\pmod{23}, \\end{aligned} $$\ny juntando ambos resultados, concluimos que $18!\\equiv (-1)\\pmod{23}$, luego\n$$ ( 18! + 1 )\\equiv ( -1 + 1 )\\pmod{23}\\equiv 0\\pmod{23}, $$\nes decir, $18!+1$ es múltiplo de $23$, y como también lo era de $19$, concluimos que asimismo lo será de $19\\cdot23=437$.\n","date":1543377579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564351201,"objectID":"6d0dc3c664128f584e3b269564425882","permalink":"https://imalexissaez.github.io/2018/11/28/presentando-el-teorema-de-wilson/","publishdate":"2018-11-28T05:59:39+02:00","relpermalink":"/2018/11/28/presentando-el-teorema-de-wilson/","section":"post","summary":"Problema 29: un resultado que da mucho juego en teoría de números.","tags":["Problemas","Teorema de Wilson","Teoría de números"],"title":"Presentando el Teorema de Wilson","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 28: Encuentra diez números compuestos consecutivos.\n Dado que preguntan por diez números compuestos consecutivos cualesquiera (y no, por ejemplo, por los diez primeros números que satisfacen dicha propiedad), existen dos estrategias habituales para abordar la resolución de este tipo de ejercicios.\nEn primer lugar, consideremos que buscamos únicamente tres números compuestos consecutivos, en lugar de los diez que solicita el enunciado, de cara a aliviar un tanto la escritura. Tomemos entonces el factorial de $4$, $4! = 1\\cdot2\\cdot3\\cdot4$, de manera que es cierto que:\n$$ \\begin{aligned} 4! + 2 \u0026amp;= 2\\cdot(1\\cdot3\\cdot4 + 1),\\\n4! + 3 \u0026amp;= 3\\cdot(1\\cdot2\\cdot4 + 1),\\\n4! + 4 \u0026amp;= 4\\cdot(1\\cdot2\\cdot3 + 1), \\end{aligned} $$\nson tres números consecutivos compuestos. En general, dado $n\\in\\mathbb{N}$, si buscamos $n$ números compuestos consecutivos, una opción es considerar el número $(n+1)!$ y, a partir de él, generar el conjunto de números compuestos consecutivos siguiente:\n$$ {(n+1)! + k: k\\in\\mathbb{N}, 2\\leq k\\leq n+1}. $$\nAsí, para $n=10$, siguiendo esta indicación, un conjunto de diez números compuestos consecutivos es $\\{11! + k: k\\in\\mathbb{N}, 2\\leq k\\leq 11\\}$.\nAlternativamente, si no queremos trabajar con números cuya magnitud es tan severa, podemos optar por construir el producto de los primeros números primos hasta encontrar aquel que supere en valor la cantidad de números compuestos consecutivos que deseamos encontrar. Por ejemplo, para $n=3$, el mencionado producto sería $2\\cdot3\\cdot5$, que satisface que:\n$$ \\begin{aligned} 2\\cdot3\\cdot5 + 2 \u0026amp;= 2(3\\cdot 5 + 1),\\\n2\\cdot3\\cdot5 + 3 \u0026amp;= 3(2\\cdot 5 + 1),\\\n2\\cdot3\\cdot5 + 4 \u0026amp;= 2(3\\cdot 5 + 2), \\end{aligned} $$\nson tres números consecutivos compuestos. Para $n=10$, consideraríamos entonces el conjunto\n$$ {2\\cdot3\\cdot5\\cdot7\\cdot11 + k:k\\in\\mathbb{N}, 2\\leq k\\leq 11}, $$\nque contiene diez números compuestos consecutivos.\n","date":1543031979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564351201,"objectID":"7df52ecb26cd026a16e766c12c1f6183","permalink":"https://imalexissaez.github.io/2018/11/24/buscando-numeros-compuestos/","publishdate":"2018-11-24T05:59:39+02:00","relpermalink":"/2018/11/24/buscando-numeros-compuestos/","section":"post","summary":"Problema 28: factoriales y números primos al rescate.","tags":["Problemas","Teoría de números"],"title":"Buscando números compuestos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 27: Calcula los dos últimos dígitos de $3^{1492}$.\n Para encontrar los dos últimos dígitos de $3^{1492}$, un posible enfoque es hallar el valor de su congruencia módulo $100$. El número $100$ no es primo, pero sí que es cierto que $mcd(3, 100)=1$, situación que nos permite hacer uso del Teorema de Euler-Fermat. Este resultado afirma que\n$$ 3^{\\varphi(100)}\\equiv 1\\pmod{100}. $$\nAhora bien, como $100 = 2^2\\cdot5$, entonces\n$$ \\varphi(100) = 100\\left(1-\\dfrac{1}{2}\\right)\\left(1-\\dfrac{1}{5}\\right) = 100\\cdot\\dfrac{1}{2}\\cdot\\dfrac{4}{5} = 40, $$\ny, por tanto, $3^{40}\\equiv 1\\pmod{100}$. De esta manera, como $1492 = 40\\cdot 37 + 12$, podemos escribir\n$$ \\begin{aligned} 3^{1492} \u0026amp;= 3^{12}\\cdot(3^{40})^{37}\\\n\u0026amp;\\equiv (3^{12}\\cdot1^{37})\\pmod{100}\\\n\u0026amp;\\equiv 3^{12}\\pmod{100}\\\n\u0026amp;\\equiv 41\\pmod{100}, \\end{aligned} $$\nsin más que hacer uso de la calculadora para obtener el valor de $3^{12}$.\nAlternativamente, para hallar el valor de esta última congruencia, podemos manipular la potencia, $12$, como sigue:\n$$ \\begin{aligned} 3^{12} \u0026amp;= (3^4)^3\\\n\u0026amp;= 81^3\\\n\u0026amp;\\equiv(-19)^3\\pmod{100}\\\n\u0026amp;\\equiv (-6859)\\pmod{100}\\\n\u0026amp;\\equiv(-59)\\pmod{100}\\\n\u0026amp;\\equiv 41\\pmod{100}, \\end{aligned} $$\ncomo antes, pudiéndose optar también por estrategias similares del tipo $3^{12} = 3^5\\cdot 3^5\\cdot 3^2$ o $3^{12} = 3^6\\cdot 3^6$, entre otras.\nAsí, finalmente, los dos últimos dígitos de $3^{1492}$ son $41$.\n","date":1542772779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564351201,"objectID":"424d1c37b848c84deb118f5fb710984b","permalink":"https://imalexissaez.github.io/2018/11/21/una-aplicacion-rapida-del-teorema-de-euler-fermat/","publishdate":"2018-11-21T05:59:39+02:00","relpermalink":"/2018/11/21/una-aplicacion-rapida-del-teorema-de-euler-fermat/","section":"post","summary":"Problema 27: presentando este importante resultado.","tags":["Problemas","Teorema de Euler-Fermat","Teoría de números"],"title":"Una aplicación rápida del Teorema de Euler-Fermat","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 26: Demuestra que la última cifra decimal de\n$$ 2^{2^n} + 1 $$\nes $7$, para cada $n\\in\\mathbb{N}$, con $n\u0026gt;1$.\n Para hallar la cifra de las unidades del número\n$$ 2^{2^n} + 1, $$\nun posible enfoque es estudiar el valor de la congruencia de dicho número módulo $10$. Ahora bien, como $10$ no es un número primo y $mcd(2, 10)=2$, no estamos en condiciones de aplicar ninguno de los resultados teóricos asociados a Fermat. Analicemos, pues, el comportamiento del valor de las congruencias de las potencias de $2$ módulo $10$,\n$$ \\begin{aligned} 2^1\u0026amp;\\equiv 2\\pmod{10},\\\n2^2\u0026amp;\\equiv 4\\pmod{10},\\\n2^3\u0026amp;\\equiv 8\\pmod{10},\\\n2^4\u0026amp;\\equiv 6\\pmod{10}. \\end{aligned} $$\nA la vista de este último valor alcanzado, y teniendo en cuenta el resultado al que pretendemos arribar, bastaría comprobar que, para cada número natural, con $n\u0026gt;1$, $2^n$ es múltiplo de $4$.\nPor inducción, para $n=2$, $2^2=4$ que, efectivamente es múltiplo de $4$. Supongamos ahora cierta la afirmación para un número natural dado $n$, con $n\\geq 2$, esto es, que existe un número entero $k$ de manera que $2^n=4k$. Sin embargo, $2^{n+1} = 2\\cdot 2^n = 2\\cdot(4k) = 4\\cdot 2k$, es decir, la propiedad asimismo se satisface para $n+1$. El Principio de inducción matemática nos permite concluir que se verifica para cada número natural $n$, con $n\\geq 2$.\nPor tanto, al ser $2^n\\equiv 0\\pmod{4}$, entonces\n$$ 2^{2^n}\\equiv 6\\pmod{10}, $$\nhecho que se traduce en que\n$$ ( 2^{2^n} + 1 )\\equiv 7\\pmod{10} $$\no, equivalentemente, que, dadas las condiciones impuestas en el enunciado del ejercicio, la cifra de las unidades del número\n$$ 2^{2^n} + 1 $$\nes $7$.\n","date":1542427179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564351201,"objectID":"8a51cf2d7552cab99bed6a80223937f0","permalink":"https://imalexissaez.github.io/2018/11/17/buscando-la-ultima-cifra-de-una-torre-de-potencias/","publishdate":"2018-11-17T05:59:39+02:00","relpermalink":"/2018/11/17/buscando-la-ultima-cifra-de-una-torre-de-potencias/","section":"post","summary":"Problema 26: qué hacer cuando no podemos recurrir a la artillería que proporciona Fermat.","tags":["Problemas","Teoría de números"],"title":"Buscando la última cifra de una torre de potencias","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 25: Para cada entero no negativo $n$, se considera el valor $P(n)$,\n$$ P(n) = \\dfrac{n^7}{7} + \\dfrac{n^3}{3} + \\dfrac{11n}{21}. $$\n (a) Demuestra que en $\\mathbb{Z}_3$ y en $\\mathbb{Z}_7$ se verifica que $3n^7 + 7n^3 + 11n = 0$. (b) Demuestra que $P(n)$ es un entero.   Para el apartado (a), recordemos que el conjunto finito $\\mathbb{Z}_3 = \\{\\overline{0}, \\overline{1}, \\overline{2}\\}$, que es un cuerpo al ser $3$ un número primo, viene definido como el conjunto cociente de $\\mathbb{Z}$ por la relación de equivalencia dada por la congruencia módulo $3$. Así, como $3\\equiv 0\\pmod{3}$, para cada entero no negativo $n$, $3n^7\\equiv 0\\pmod{3}$. Por otro lado, al ser $3$ un número primo, sabemos, por el corolario del Pequeño Teorema de Fermat, que $n^3\\equiv n\\pmod{3}$, para cada entero no negativo $n$, por lo que $7n^3\\equiv 7n\\pmod{3}\\equiv n\\pmod{3}$. Por tanto,\n$$ \\begin{aligned} (3n^7+7n^3+11n)\u0026amp;\\equiv (0+n+11n)\\pmod{3}\\\n\u0026amp;\\equiv 12n\\pmod{3}\\\n\u0026amp;\\equiv 0\\pmod{3}, \\end{aligned} $$\npara cada entero no negativo $n$. Alternativamente, en el caso de no recordar el anterior corolario, llegaríamos a que\n$$ \\begin{aligned} (3n^7+7n^3+11n)\u0026amp;\\equiv (0+7n^3+11n)\\pmod{3}\\\n\u0026amp;\\equiv (n^3-n)\\pmod{3}, \\end{aligned} $$\npero\n$$ n^3-n = n(n^2 - 1) = (n - 1)n(n + 1), $$\nesto es, $n^3 - n$ es el resultado de multiplicar tres números consecutivos, entre los cuales siempre seremos capaces de encontrar un múltiplo de $3$, haciendo pues que se verifique que $(n^3 - n)\\equiv 0\\pmod{3}$.\nPor lo que respecta al conjunto finito $\\mathbb{Z}_7$, cuerpo también al ser $7$ un número primo, que se define siguiendo un procedimiento similar al mostrado para $\\mathbb{Z}_3$, la manera de proceder es idéntica. Como $7\\equiv 0\\pmod{7}$, entonces, para cada entero no negativo $n$, es cierto que $7n^3\\equiv 0\\pmod{7}$. Además, aplicando el corolario del Pequeño Teorema de Fermat, como $7$ es un número primo, $n^7\\equiv n\\pmod{7}$, por lo que $3n^7\\equiv 3n\\pmod{7}$ para cada entero no negativo $n$. Luego,\n$$ \\begin{aligned} (3n^7+7n^3+11n)\u0026amp;\\equiv (3n+0+11n)\\pmod{7}\\\n\u0026amp;\\equiv 14n\\pmod{7}\\ \u0026amp;\\equiv 0\\pmod{7}. \\end{aligned} $$\nEn cuanto al apartado (b), operando en la expresión de $P(n)$ llegamos a que\n$$ P(n) = \\dfrac{n^7}{7} + \\dfrac{n^3}{3} + \\dfrac{11n}{21} = \\dfrac{3n^7 + 7n^3 + 11n}{21}, $$\ny para que $P(n)\\in\\mathbb{Z}$, para cada entero no negativo $n$, el numerador de la anterior expresión ha de ser múltiplo de $21$. Sin embargo, en el apartado (a) acabamos de probar que $(3n^7 + 7n^3 + 11n)\\equiv 0\\pmod{3}$ y $(3n^7 + 7n^3 + 11n)\\equiv 0\\pmod{7}$, de manera que, aplicando las propiedades de las congruencias, se verifica que $(3n^7 + 7n^3 + 11n)\\equiv 0\\pmod{21}$, es decir, el numerador es múltiplo de $21$ y, por tanto, $P(n)\\in\\mathbb{Z}$ para cada entero no negativo $n$.\n","date":1542167979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"6c059e1960b2a3a49acf5f23aedf0bd3","permalink":"https://imalexissaez.github.io/2018/11/14/un-polinomio-que-solo-toma-valores-enteros/","publishdate":"2018-11-14T05:59:39+02:00","relpermalink":"/2018/11/14/un-polinomio-que-solo-toma-valores-enteros/","section":"post","summary":"Problema 25: el retorno del Pequeño Teorema de Fermat.","tags":["Pequeño Teorema de Fermat","Problemas","Teoría de números"],"title":"Un polinomio que solo toma valores enteros","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 24: Escribe los divisores de $1001$. Considera ahora\n$$ N = a_0 + a_1t + \\cdots + a_nt^n $$\ny\n$$ S = a_0-a_1+a_2-\\cdots+(-1)^na_n, $$\ndonde $t=1000$ y $a_n\\in\\mathbb{Z}$ y demuestra que $N\\equiv S\\pmod{1001}$. Deduce de ello un criterio de divisibilidad por $7$, $11$ o $13$ y aplícalo al número $312879645$.\n Como $1001 = 7\\cdot11\\cdot13$, el conjunto de divisores del número $1001$ es\n$$ {1,7,11,13,77,91,143,1001}. $$\nA continuación, si consideramos $t=1000$, como\n$$ t\\equiv (-1)\\pmod{1001}, $$\nentonces se cumple que $t^2\\equiv (-1)^2\\pmod{1001}\\equiv 1\\pmod{1001}$ y, en general, $t^n\\equiv (-1)^n\\pmod{1001}$, para cada $n\\in\\mathbb{N}$. Este hecho nos permite concluir que\n$$ \\begin{aligned} N \u0026amp;= a_0 + a_1t + \\cdots + a_nt^n \\\n\u0026amp;\\equiv (a_0-a_1+a_2-\\cdots+(-1)^na_n)\\pmod{1001}, \\end{aligned} $$\nes decir, $N\\equiv S\\pmod{1001}$, tal y como se nos pedía demostrar.\nAhora bien, que $N$ sea congruente con $S$ módulo $1001$ implica que existe un $k\\in\\mathbb{Z}$ de manera que podemos escribir $N = 1001k+S$. Por tanto, dado que $1001=7\\cdot11\\cdot13$, el número $N$ será divisible por $7$, $11$ o $13$, siempre y cuando $S$ sea divisible por $7$, $11$ o $13$ (por aplicación directa de las propiedades de las congruencias), quedando así establecido el criterio de divisibilidad solicitado.\nFinalmente, si tomamos $N=312879645$, es cierto que lo podemos expresar como\n$$ N = 645 + 879\\cdot1000 + 312\\cdot1000^2, $$\npor lo que $a_0 = 645$, $a_1=879$ y $a_2=312$. Esto provoca que\n$$ S = 645 - 879 + 312 = 78 = 13\\cdot 6, $$\ny como $S$ es divisible por $13$ concluimos, por lo anterior, que $N$ es asimismo divisible por $13$. Alternativamente, podríamos decir que como $7\\nmid S$, entonces $7\\nmid N$ y, análogamente, como $11\\nmid S$, entonces $11\\nmid N$, quedando así únicamente concluir como arriba que como $13|S$, entonces $13|N$.\nPor ejemplo, si consideramos ahora $N=178178$, su expresión en esta base $1000$ que introduce el presente ejercicio es $N = 178 + 178\\cdot 1000$, quedando entonces $a_0=178$, $a_1=178$ y, por consiguiente, $S = 178-178 = 0$. Ahora bien, como $7|0$, entonces $7|N$ y, de forma similar, como $11|0$ y $13|0$, entonces $11|N$ y $13|N$. Añadiendo ahora un tres delante de $N$, es decir, $N=3178178$, tenemos $N = 178 + 178\\cdot1000 + 3\\cdot1000^2$, con $a_0=178$, $a_1=178$, $a_2=3$ y $S=3$. Como $7\\nmid 3$, $11\\nmid 3$ ni $13\\nmid 3$, entonces concluimos que este último número no es divisible por $7$, $11$ ni $13$.\n","date":1541822379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"5a83adbcec632fe437172aed7635c7ac","permalink":"https://imalexissaez.github.io/2018/11/10/un-curioso-criterio-de-divisibilidad/","publishdate":"2018-11-10T05:59:39+02:00","relpermalink":"/2018/11/10/un-curioso-criterio-de-divisibilidad/","section":"post","summary":"Problema 24: trabajando con múltiplos de 1000.","tags":["Criterios de divisibilidad","Problemas","Teoría de números"],"title":"Un curioso criterio de divisibilidad","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"La semana anterior analizamos el paquete polynom, que nos permite fácilmente llevar a cabo la transcripción de divisiones de polinomios con LaTeX. A continuación, estudiaremos una manera alternativa para lidiar con este asunto que, además, nos permitirá operar en conjuntos finitos.\nSupongamos, sin pérdida de generalidad, que nuestro objetivo es dividir los polinomios\n$$ 5x^5 - 2x^4 + 2x^3 - 5x^2 + 2x + 1 $$\ny\n$$ 3x^3 + x^2 - 5x + 2 $$\nen $\\mathbb{Z}_7$. Para ello, \u0026lsquo;\u0026lsquo;dibujaremos\u0026rsquo;\u0026rsquo; la operación matemática en una matriz, método que nos permitirá organizar fácilmente los pasos y, de paso, imprimir algunas rayas horizontales cuando proceda.\nPara empezar, en el preámbulo del documento, insertamos las dos siguientes líneas:\n\\usepackage{tikz}\r\\usetikzlibrary{matrix}\r Ahora, donde deseemos ubicar la división de los anteriores polinomios, tecleamos:\n\\begin{center}\r\\begin{tikzpicture}\r\\matrix (a) [matrix of math nodes, column sep=0pt]\r{\r5x^5 \u0026amp; -2x^4 \u0026amp; +2x^3 \u0026amp; -5x^2 \u0026amp; +2x \u0026amp; +1 \u0026amp; \u0026amp; 3x^3+x^2-5x+2 \\\\\r};\r\\draw (a-1-8.north west) |- (a-1-8.south east);\r\\end{tikzpicture}\r\\end{center}\r dando el resultado que figura en la siguiente imagen:\n\r\rPrimer resultado parcial.\r\r\rOrganizar los monomios del dividendo como elementos individuales de una matriz nos facilitará la empresa de \u0026lsquo;\u0026lsquo;alinear\u0026rsquo;\u0026rsquo; las posteriores operaciones de la división. Por otro lado, el comando draw es el que dibuja la \u0026lsquo;\u0026lsquo;caja\u0026rsquo;\u0026rsquo; de esta operación matemática, tomando como referencia las posiciones de los elementos de la matriz.\nContinuemos la división, siempre teniendo en cuenta que trabajamos en $\\mathbb{Z}_7$. Así, para la primera etapa, teclearíamos acto seguido:\n\\begin{center}\r\\begin{tikzpicture}\r\\matrix (a) [matrix of math nodes, column sep=0pt]\r{\r5x^5 \u0026amp; -2x^4 \u0026amp; +2x^3 \u0026amp; -5x^2 \u0026amp; +2x \u0026amp; +1 \u0026amp; \u0026amp; 3x^3+x^2-5x+2 \\\\\r-5x^2 \u0026amp; +3x^4 \u0026amp; -x^3 \u0026amp; -x^2 \u0026amp; \u0026amp; \u0026amp; \u0026amp; 4x^2\\\\\r\u0026amp; +x^4 \u0026amp; +x^3 \u0026amp; +x^2 \u0026amp; +2x \u0026amp; \u0026amp; \u0026amp; \\\\\r};\r\\draw (a-1-8.north west) |- (a-1-8.south east);\r\\draw (a-2-1.south west) -- (a-2-4.south east);\r\\end{tikzpicture}\r\\end{center}\r cuyo resultado se recoge en la siguiente figura:\n\r\rSegundo resultado parcial.\r\r\rEfectivamente, no queda tan estético como el que conseguíamos la semana pasada con el paquete polynom. No obstante, funcionalmente hablando, los pequeños desajustes horizontales de signos no molestan en exceso.\nUna vez asimilada la idea del procedimiento a seguir, únicamente nos resta continuar con la división, escribiendo ahora:\n\\begin{center}\r\\begin{tikzpicture}\r\\matrix (a) [matrix of math nodes, column sep=0pt]\r{\r5x^5 \u0026amp; -2x^4 \u0026amp; +2x^3 \u0026amp; -5x^2 \u0026amp; +2x \u0026amp; +1 \u0026amp; \u0026amp; 3x^3+x^2-5x+2 \\\\\r-5x^2 \u0026amp; +3x^4 \u0026amp; -x^3 \u0026amp; -x^2 \u0026amp; \u0026amp; \u0026amp; \u0026amp; 4x^2 + 5x + 1\\\\\r\u0026amp; +x^4 \u0026amp; +x^3 \u0026amp; +x^2 \u0026amp; +2x \u0026amp; \u0026amp; \u0026amp; \\\\\r\u0026amp; -x^4 \u0026amp; +2x^3 \u0026amp; -3x^2 \u0026amp; -3x \u0026amp; \u0026amp; \u0026amp; \\\\\r\u0026amp; \u0026amp; +3x^3 \u0026amp; -2x^2 \u0026amp; -x \u0026amp; +1 \u0026amp; \u0026amp; \\\\\r\u0026amp; \u0026amp; -3x^3 \u0026amp; -x^2 \u0026amp; -2x \u0026amp; -2 \u0026amp; \u0026amp; \\\\\r\u0026amp; \u0026amp; \u0026amp; -3x^2 \u0026amp; -3x \u0026amp; -1 \u0026amp; \u0026amp; \\\\\r};\r\\draw (a-1-8.north west) |- (a-1-8.south east);\r\\draw (a-2-1.south west) -- (a-2-4.south east);\r\\draw (a-4-2.south west) -- (a-4-5.south east);\r\\draw (a-6-3.south west) -- (a-6-6.south east);\r\\end{tikzpicture}\r\\end{center}\r Obteniendo como resultado el que aparece en la siguiente imagen:\n\r\rResultado final.\r\r\r","date":1541563179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"5f43a97037a92efcce1397178d559952","permalink":"https://imalexissaez.github.io/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/","publishdate":"2018-11-07T05:59:39+02:00","relpermalink":"/2018/11/07/como-dividir-polinomios-con-latex-en-conjuntos-finitos/","section":"post","summary":"La semana anterior analizamos el paquete 'polynom', que nos permite fácilmente llevar a cabo la transcripción de divisiones de polinomios con LaTeX. A continuación, estudiaremos una manera alternativa para lidiar con este asunto que, además, nos permitirá operar en conjuntos finitos.","tags":["LaTeX"],"title":"¿Cómo dividir polinomios con LaTeX en conjuntos finitos?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 23: Sea $n$ un número natural. Sea $A_n = 2^n + 2^{2n} + 2^{3n}$.\n a) Demuestra que para todo $n$, $A_{n+3}\\equiv A_n\\pmod{7}$. b) ¿Para qué valores de $n$, $A_n$ es múltiplo de $7$? c) Los números en base $2$, $1110$, $1010100$ y $1001001000$, ¿son divisibles por $7$?   Para el apartado a),\n$$ A_{n+3} = 2^{n+3} + 2^{2(n+3)} + 2^{3(n+3)} = 2^{n+3} + 2^{2n+6} + 2^{3n+9}. $$\nAhora bien, aprovechando que $2^3=8\\equiv 1\\pmod{7}$, tenemos que\n$$ A_{n+3} = 2^3\\cdot2^n + (2^3)^2\\cdot2^{2n} + (2^3)^3\\cdot 2^{3n} \\equiv (2^n + 2^{2n} + 2^{3n})\\pmod{7}, $$\nes decir, $A_{n+3}\\equiv A_n\\pmod{7}$, como queríamos demostrar.\nEn cuanto al apartado b), teniendo presente el resultado alcanzado en el apartado anterior, estudiemos qué sucede para tres números consecutivos. Por comodidad de cara a los cálculos, tomaremos $1$, $2$ y $3$ como valores para $n$, y así,\n$$ \\begin{aligned} A_1 \u0026amp;= 2^1+2^2+2^3 = 14\\equiv 0\\pmod{7},\\\nA_2 \u0026amp;= 2^2+2^4+2^6 = 84\\equiv 0\\pmod{7},\\\nA_3 \u0026amp;= 2^3+2^6+2^9 = 584\\equiv 3\\pmod{7}, \\end{aligned} $$\nes decir, como $A_{1}$ es múltiplo de $7$ y se satisface la propiedad dada en a), que podemos escribir como $( A_{n + 3} - A_{n} ) \\equiv 0 \\pmod{7}$, concluimos que $A_{4}$ será múltiplo de $7$ también, así como $A_{7}, A_{10}, A_{13}$ y, en general, los números de la forma $n=3k+1$, con $k\\in\\mathbb{Z}$, sin más que aplicar reiteradamente la citada propiedad. Un argumento similar se podría esgrimir para los números de la forma $n=3k+2$, con $k\\in\\mathbb{Z}$, a la vista del resultado alcanzado para $A_2$. De igual manera, este cauce de pensamiento nos llevaría a descartar que cualquier número de la forma $n=3k$, con $k\\in\\mathbb{Z}$, vaya a ser múltiplo de $7$, ya que $A_3$ no lo es. En conclusión, $A_n$ será múltiplo de $7$ para todos aquellos valores de $n$ que no sean múltiplo de $3$.\nFinalmente, en el apartado c), por el Teorema Fundamental de la Numeración, sabemos que podemos escribir\n$$ \\begin{aligned} 1110_{(2} \u0026amp;= 2^1+2^2+2^3 = A_1,\\\n1010100_{(2} \u0026amp;= 2^2+2^4+2^6 = A_2,\\ 1001001000_{(2} \u0026amp;= 2^3+2^6+2^9 = A_3, \\end{aligned} $$\ny por lo establecido para el apartado anterior, $A_{1}$ y $A_{2}$ son divisibles por $7$, mientras que $A_{3}$ no lo es. De esta manera, los números $1110_{(2}$ y $1010100_{(2}$ son divisibles por $7$, mientras que $1001001000_{(2}$ no lo es.\n","date":1541217579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"1312bdd3183957ee862e3e877d9d8b14","permalink":"https://imalexissaez.github.io/2018/11/03/empezando-con-teoria-de-numeros-vii/","publishdate":"2018-11-03T05:59:39+02:00","relpermalink":"/2018/11/03/empezando-con-teoria-de-numeros-vii/","section":"post","summary":"Problema 23: seguimos trabajando con múltiplos y criterios de divisibilidad.","tags":["Criterios de divisibilidad","Problemas","Teorema Fundamental de la Numeración","Teoría de números"],"title":"Empezando con teoría de números (VII)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Escribiendo unos apuntes sobre polinomios, llegó el momento de mostrar un ejemplo de la división de un par de ellos. La clásica pregunta no se hizo esperar, ¿cómo transcribo en LaTeX esa operación matemática?\nAcompañemos este artículo con un ejemplo concreto. Sean\n$$ P = x^4 + 3x^3 - 2x^2 + x - 1 $$\ny\n$$ Q = x^2 + x - 1 $$\nlos polinomios implicados en la división, siendo nuestro objetivo mostrar la mencionada operación paso por paso (y no simplemente ofrecer el resultado final, acción que no entraña misterio a la hora de llevarla a cabo con LaTeX).\nComo suele ser habitual, tras una rápida búsqueda con Google, no soy la primera persona que se ha encontrado en esta encrucijada. En los foros que consulté, la recomendación estándar era emplear el paquete polynom, que a través del comando \\polylongdiv nos facilita enormemente la tarea. De forma automática, se ocupa de realizar y organizar (con LaTeX) todos los pasos involucrados en una división de polinomios.\nAsí pues, empecemos ubicando en el preámbulo de nuestro documento la siguiente instrucción:\n\\usepackage{polynom}\r Antes de proceder a realizar división alguna, conviene que declaremos personalmente el valor de ciertos argumentos opcionales:\n\\polyset{style=C, div=:, vars=x}\r donde:\n style: declara el estilo con el que efectuará la división de polinomios, pudiendo escoger entre los valores A, B y C. div: señala el símbolo con el que se expresará la división (dependiendo del estilo escogido, la asignación de este parámetro es importante). vars: indica el valor de la variable del polinomio. Generalmente utilizamos x, pero no es descabellado emplear n cuando estamos lidiando con temas asociados a números enteros.  Ahora, allí donde deseemos ubicar la división de los polinomios $P$ y $Q$ definidos arriba, tecleamos:\n$$\\polylongdiv{x^4+3x^3-2x^2+x-1}{x^2+x-1}$$\r Obteniendo como resultado:\n\r\rResultado de la división de polinomios.\r\r\rEstudiemos el resultado visual de la operación bajo los distintos estilos que nos ofrece el paquete polynom.\nEstilo A:\n\r\rEstilo para la división A.\r\r\rEstilo B:\n\r\rEstilo para la división B.\r\r\rEstilo C:\n\r\rEstilo para la división C.\r\r\rPersonalmente, el último de los mostrados es el estilo que me resulta más atractivo para mostrar cómo realizar paso a paso una división de polinomios con LaTeX. No obstante, como siempre, \u0026lsquo;\u0026lsquo;para gustos, los colores\u0026rsquo;'.\nPara finalizar, me gustaría comentar que:\n Aun siendo bastante satisfactoria esta solución, ninguno de los estilos que ofrece el paquete polynom se ajusta exactamente a como habitualmente organizamos la división por estos lares. Por limitaciones de TeX, no podemos llevar a cabo la división de polinomios en conjuntos finitos como, por ejemplo, $\\mathbb{Z}_4$ o en el cuerpo $\\mathbb{Z}_7$.  En ambos casos, una posible vía de escape que he encontrado es recurrir al paquete tikz y, manualmente, \u0026lsquo;\u0026lsquo;dibujar\u0026rsquo;\u0026rsquo; la propia división de polinomios. No es un proceso demasiado complejo y quizá lo ilustre en una futura entrada.\n","date":1540958379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"c1c242cefb980f4fea902622db06c9dd","permalink":"https://imalexissaez.github.io/2018/10/31/como-dividir-polinomios-con-latex/","publishdate":"2018-10-31T05:59:39+02:00","relpermalink":"/2018/10/31/como-dividir-polinomios-con-latex/","section":"post","summary":"Escribiendo unos apuntes sobre polinomios, llegó el momento de mostrar un ejemplo de la división de un par de ellos. La clásica pregunta no se hizo esperar, ¿cómo transcribo en LaTeX esa operación matemática?","tags":["LaTeX"],"title":"¿Cómo dividir polinomios con LaTeX?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 22 (Comunidad Valenciana, 2006):\n a) Halla la base en que $$3753_{(x} - 3586_{(x} = 189_{(x}.$$ b) Una vez hallado el valor de $x$, deduce el criterio de divisibilidad entre $x-1$ de dicha base. c) Después, justifica si alguno de los números dados es divisible por $x-1$ en dicha base. d) Por último, pasa el primero de los números dados a base $9$.   Para el apartado a), por el Teorema Fundamental de la Numeración, sabemos que\n$$ \\begin{aligned} 3753_{(x} \u0026amp;= 3x^0 + 5x^1 + 7x^2 + 3x^3 = 3+5x+7x^2+3x^3,\\\n3586_{(x} \u0026amp;= 6x^0 + 8x^1 + 5x^2 + 3x^3 = 6+8x+5x^2+3x^3,\\\n189_{(x} \u0026amp;= 9x^0 + 8x^1 + 1x^2 = 9+8x+x^2, \\end{aligned} $$\npor lo que la igualdad planteada en el enunciado es equivalente a:\n$$ 3+5x+7x^2 + 3x^3 - (6+8x+5x^2 + 3x^3) = 9+8x+x^2. $$\nOperando, esta se convierte en $x^2 - 11x-12=0$, y como\n$$ x^2 - 11x-12 = (x-12)(x+1), $$\nconcluimos que la base del sistema de numeración en la que se satisface la anterior igualdad es $x=12$ ($x=-1$ queda descartada automáticamente pues toda base ha de ser un número natural estrictamente mayor que $1$. Es más, a modo anecdótico, si las soluciones hubiesen sido $x=7$ y $x=12$, también habríamos descartado de forma automática la primera, pues en la expresión de los números implicados en la igualdad hay dígitos mayores o iguales que $7$).\nPara el apartado b), consideremos el número de $n$ cifras $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ en base $12$. Utilizando el mismo resultado anterior, sabemos que podemos expresarlo como\n$$ a_{n-1}a_{n-2}\\cdots a_1a_0 = a_0+a_112+\\cdots+a_{n-2}12^{n-1}+a_{n-1}12^{n-1}. $$\nDe cara a encontrar el criterio de divisibilidad del $11$ emplearemos las propiedades de las congruencias sobre las potencias de $12$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ de manera que\n$$ a_0+a_112+a_212^2+\\cdots+a_{n-1}12^{n-1}\\equiv 0\\pmod{11}. $$\nAhora, como $12\\equiv 1\\pmod{11}$, fácilmente apreciamos que\n$$ 12^2\\equiv 1^2\\pmod{11}\\equiv 1\\pmod{11} $$\ny, en general, $12^i\\equiv 1\\pmod{11}$, para cada $i\\in\\mathbb{N}$, por lo que\n$$ a_0+a_112+\\cdots+a_{n-1}12^{n-1}\\equiv (a_0+a_1+\\cdots+a_{n-1})\\pmod{11}, $$\nes decir, el número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$, en base $12$, es divisible por $11$ siempre y cuando la suma de sus dígitos sea múltiplo de $11$.\nEn el apartado c), a partir de la condición obtenida arriba, podemos concluir que\n $3+7+5+3 = 18\\equiv 7\\pmod{11}$, $3+5+8+6 = 22\\equiv 0\\pmod{11}$, $1+8+9 = 18\\equiv 7\\pmod{11}$,  esto es, $3586_{(12}$ es el único número, de entre los tres propuestos, divisible por $11$.\nFinalmente, en el apartado d) tenemos que\n$$ \\begin{aligned} 3753_{(12} \u0026amp;= 3\\cdot12^0 + 5\\cdot12^1 + 7\\cdot12^2 + 3\\cdot12^3 \\\n\u0026amp;= 5184+1008+60+3 \\\n\u0026amp;= 6255_{(10}, \\end{aligned} $$\ny dividiendo ahora sucesivamente por $9$,\n$$ \\begin{aligned} 6255 \u0026amp;= 9\\cdot 695 + 0,\\\n695 \u0026amp;= 9\\cdot 77 + 2,\\\n77 \u0026amp;= 9\\cdot 8 + 5, \\end{aligned} $$\narribamos a que $6255_{(10} = 8520_{(9}$, de manera que $3753_{(12} = 8520_{(9}$ por la unicidad que nos concede el *Teorema Fundamental de la Numeración*.\n","date":1540612779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"b785c2e41c30485336dae10b3f667210","permalink":"https://imalexissaez.github.io/2018/10/27/empezando-con-teoria-de-numeros-vi/","publishdate":"2018-10-27T05:59:39+02:00","relpermalink":"/2018/10/27/empezando-con-teoria-de-numeros-vi/","section":"post","summary":"Problema 22: trabajando con distintos sistemas de numeración.","tags":["Criterios de divisibilidad","Problemas","Teorema Fundamental de la Numeración","Teoría de números"],"title":"Empezando con teoría de números (VI)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 21: Calcula la regla de divisibilidad por $7$.\n Veamos que, en esta ocasión, proceder como en ejercicios anteriores no dará lugar a establecer una sencilla regla para el criterio de divisibilidad del $7$. En efecto, consideremos el número de $n$ cifras $a_{n - 1} a_{n - 2}\\cdots a_2a_1a_0$ en base $10$. Sabemos, por el *Teorema Fundamental de la Numeración*, que podemos expresarlo como\n$$ a_{n-1}a_{n-2}\\cdots a_1a_0 = a_0+a_110+ \\cdots + a_{n-2}10^{n-2}+a_{n-1}10^{n-1}. $$\nPara encontrar el criterio de divisibilidad del $7$ utilizaremos las propiedades de las congruencias sobre las potencias de $10$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ de manera que\n$$ a_0+a_110+a_210^2 + \\cdots + a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\\equiv 0\\pmod{7}, $$\nesto es, dicho número sea múltiplo de $7$.\nAhora bien,\n$$ \\begin{aligned} 10\u0026amp;\\equiv 3\\pmod{7},\\\n10^2\u0026amp;\\equiv 3^2\\pmod{7}\\equiv 9\\pmod{7}\\equiv 2\\pmod{7},\\\n10^3\u0026amp;\\equiv 3^3\\pmod{7}\\equiv 27\\pmod{7}\\equiv 6\\pmod{7},\\\n10^4\u0026amp;\\equiv 3^4\\pmod{7}\\equiv 81\\pmod{7}\\equiv 4\\pmod{7},\\\n\u0026amp;\\vdots \\end{aligned} $$\ny comenzamos a atisbar que el criterio que podríamos extraer es ciertamente extraño y muy complicado de recordar, puesto que\n$$ a_0+a_110+\\cdots + a_{n-1}10^{n-1}\\equiv (a_0 + 3a_1 + 2a_2 + \\cdots)\\pmod{7}. $$\nPor lo que respecta a la divisibilidad de un número por $7$, conviene que tengamos a mano el siguiente resultado: \u0026lsquo;'un número de la forma $n=10d+u$, con $d\u0026gt;0$ y $0\\leq u\\leq 9$ es múltiplo de $7$ si, y solo si, $d-2u$ es múltiplo de $7$''.\nEfectivamente, si suponemos cierto que $(10d+u)\\equiv 0\\pmod{7}$, es decir, que $n=10d+u$ es múltiplo de $7$, y aplicamos ahora propiedades de las congruencias sobre la forma del número $n$, llegamos a que\n$$ \\begin{aligned} (10d+u)\\equiv 0\\pmod{7} \u0026amp;\\Leftrightarrow (3d-6u)\\equiv 0\\pmod{7} \\\n\u0026amp;\\Leftrightarrow (3(d-2u))\\equiv 0\\pmod{7}, \\end{aligned} $$\nesto es, hemos arribado a que el producto de dos números es múltiplo de $7$, y como sabemos que el número $3$ no lo es, concluimos que $d-2u$ es múltiplo de $7$.\nRecíprocamente, si $d-2u$ es múltiplo de $7$, $(d-2u)\\equiv 0\\pmod{7}$ y multiplicando por $10$ la ecuación de congruencia, $(10d-20u)\\equiv 0\\pmod{7}$. Ahora, como $(-20)\\equiv 1\\pmod{7}$, llegamos a que $(10d+u)\\equiv 0\\pmod{7}$, es decir, el número $n=10d+u$ es un múltiplo de $7$, quedando así la doble implicación probada.\nVeamos en acción esta proposición con un par de ejemplos sencillos. Si $n=63 = 60+3$, entonces $d = 6$, $u=3$ y $d-2u = 6-2\\cdot3=0$ que, efectivamente, es un múltiplo de $7$, luego $63$ asimismo lo es. Si $n = 9009$, tenemos que $d = 900$, $u=9$ y $d-2u = 900-2\\cdot9=882 = 7\\cdot126$, luego $d-2u$ es un múltiplo de $7$, por lo que podemos concluir que el número $9009$ también lo es.\n","date":1540353579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"d0d4d8edb49238b004efe7b0c8385834","permalink":"https://imalexissaez.github.io/2018/10/24/empezando-con-teoria-de-numeros-v/","publishdate":"2018-10-24T05:59:39+02:00","relpermalink":"/2018/10/24/empezando-con-teoria-de-numeros-v/","section":"post","summary":"Problema 21: el extraño criterio de divisibilidad del 7.","tags":["Criterios de divisibilidad","Problemas","Teorema Fundamental de la Numeración","Teoría de números"],"title":"Empezando con teoría de números (V)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Recursos"],"content":"En los últimos días he dado, por casualidad, con una serie de problemas que pertenecen a esta competición matemática y que me han resultado ciertamente curiosos, tanto por su complejidad como por la creatividad puesta en escena a la hora de resolverlos.\nSi echamos un rápido vistazo al primer párrafo de la página de la Wikipedia dedicada a esta competición encontramos:\n The William Lowell Putnam Mathematical Competition, often abbreviated to Putnam Competition, is an annual mathematics competition for undergraduate college students enrolled at institutions of higher learning in the United States and Canada (regardless of the students\u0026rsquo; nationalities). It awards a scholarship and cash prizes ranging from $250 to $2,500 for the top students and $5,000 to $25,000 for the top schools, plus one of the top five individual scorers (designated as Putnam Fellows) is awarded a scholarship of up to $12,000 plus tuition at Harvard University (Putnam Fellow Prize Fellowship), the top 100 individual scorers have their names mentioned in the American Mathematical Monthly (alphabetically ordered within rank), and the names and addresses of the top 500 contestants are mailed to all participating institutions. It is widely considered to be the most prestigious university-level mathematics competition in the world, and its difficulty is such that the median score is often zero (out of 120) despite being attempted by students specializing in mathematics.\n A primera vista, esta competición destaca por:\n Suculentos premios, tanto en metálico, como en becas de la prestigiosa universidad Harvard. Unos resultados cuya mediana se sitúa en $0$ puntos, de los $120$ posibles, hecho que advierte de la crudeza de los enunciados a los que se enfrentan los estudiantes.  En la página oficiosa podemos encontrar los enunciados, con sus respectivas soluciones, de la prueba correspondiente al año pasado (la asociada al 2018 todavía no ha tenido lugar). Además, nos recomiendan tres libros de cara a la preparación:\n The William Lowell Putnam Mathematical Competition Problems and Solutions 1938-1964 A. M. Gleason, R. E. Greenwood, and L. M. Kelly, Editors. The William Lowell Putnam Mathematical Competition Problems and Solutions 1965-1984 Gerald L. Alexanderson, Leonard F. Klosinski, and Loren C. Larson, Editors. The William Putnam Mathematical Competition 1985-2000: Problems, Solutions and Commentary Kiran S. Kedlaya, Bjorn Poonen, and Ravi Vakil.  Existe una página oficial de la competición Putnam, pero, por lo que he podido comprobar tras una rápida exploración, es únicamente informativa, sin ofrecer apenas recursos didácticos de interés.\nPor otro lado, en esta página tenemos acceso a una especie de archivo histórico que recoge los enunciados de ediciones anteriores, muchos de ellos con sus soluciones asociadas, remontándose hasta el año 1994.\nPodemos encontrar más referencias y consejos en esta interesante discusión de la sección dedicada a matemáticas de StackExchange. En ella nos redirigen a la web personal del profesor A. J. Hildebrand, que es sumamente interesante, sobre todo por la selección guiada de libros (sobre resolución de problemas matemáticos) que ofrece y que reproduzco a continuación:\n [Principiante] A. Gardiner, The Mathematical Olympiad Handbook. [Principiante - Intermedio] E. Lozansky and C. Rousseau, Winning solutions. [Principiante - Avanzado] Arthur Engel, Problem solving strategies. [Intermedio - Avanzado] Loren Larson, Problem solving through problems [Intermedio - Avanzado] Paul Zeitz, The Art and Craft of Problem Solving. [Avanzado] D. J. Newman, A problem seminar. [Avanzado] R. Gelca and T. Andreescu, Putnam and Beyond.  Del último libro, además, existe una segunda edición en el mercado, bastante reciente, que también merecería su hueco en el anterior listado.\nAsí pues, tenemos a nuestra disposición una ingente cantidad de recursos que, en mi opinión, pueden tenernos entretenidos durante años si los examinamos con el cariño que merecen.\n","date":1540007979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"25a592b2129f3006b9d31f601ff5cb2c","permalink":"https://imalexissaez.github.io/2018/10/20/referencias-de-interes-sobre-la-competicion-matematica-putnam/","publishdate":"2018-10-20T05:59:39+02:00","relpermalink":"/2018/10/20/referencias-de-interes-sobre-la-competicion-matematica-putnam/","section":"post","summary":"En los últimos días he dado, por casualidad, con una serie de problemas que pertenecen a esta competición matemática y que me han resultado ciertamente curiosos, tanto por su complejidad como por la creatividad puesta en escena a la hora de resolverlos.","tags":["Putnam"],"title":"Referencias de interés sobre la competición matemática Putnam","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 20: Calcula las reglas de divisibilidad para $3$ y para $9$.\n Consideremos el número de $n$ cifras $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ en base $10$. Sabemos, por el *Teorema Fundamental de la Numeración*, que podemos expresarlo como\n$$ a_{n-1}a_{n-2}\\cdots a_1a_0 = a_0+a_110+\\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}. $$\nPara encontrar el criterio de divisibilidad del $3$ utilizaremos las propiedades de las congruencias sobre las potencias de $10$, buscando una condición sobre los dígitos del número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ de manera que\n$$ a_0+a_110+a_210^2+\\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\\equiv 0\\pmod{3}, $$\nesto es, dicho número sea múltiplo de $3$.\nAsí, como $10\\equiv 1\\pmod{3}$, fácilmente apreciamos que\n$$ 10^2\\equiv 1^2\\pmod{3}\\equiv 1\\pmod{3} $$\ny, en general, $10^i\\equiv 1\\pmod{3}$, para cada $i\\in\\mathbb{N}$, por lo que\n$$ a_0+a_110+\\cdots+a_{n-1}10^{n-1}\\equiv (a_0+a_1+\\cdots+a_{n-1})\\pmod{3}, $$\nes decir, el número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ es divisible por $3$ siempre y cuando la suma de sus dígitos sea múltiplo de $3$.\nPor lo que respecta al criterio de divisibilidad del $9$, el modo de proceder es muy similar al mostrado arriba. Volvemos a buscar una condición sobre los dígitos del número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ de manera que\n$$ a_0+a_110+a_210^2+\\cdots+a_{n-2}10^{n-2}+a_{n-1}10^{n-1}\\equiv 0\\pmod{9}, $$\nesto es, dicho número sea múltiplo de $9$. Al igual que antes, como $10\\equiv 1\\pmod{9}$, se sigue que $10^2\\equiv 1^2\\pmod{9}\\equiv 1\\pmod{9}$ y, en general, $10^i\\equiv 1\\pmod{9}$, para cada $i\\in\\mathbb{N}$, por lo que\n$$ a_0+a_110+\\cdots+a_{n-1}10^{n-1}\\equiv (a_0+a_1+\\cdots+a_{n-1})\\pmod{9}, $$\nes decir, el número $a_{n-1}a_{n-2}\\cdots a_2a_1a_0$ es divisible por $9$ siempre y cuando la suma de sus dígitos sea múltiplo de $9$. Expresado de otra manera, todo número es congruente con la suma de sus cifras módulo $9$. Por ejemplo, $162\\equiv 0\\pmod{9}$, ya que $1+6+2=9$ y $9\\equiv 0\\pmod{9}$; mientras que $172\\equiv 1\\pmod{9}$, puesto que $1+7+2=10$ y $10\\equiv 1\\pmod{9}$.\nNota: es más, el último criterio de divisibilidad hallado se puede generalizar como sigue: \u0026lsquo;'dado un sistema de numeración cuya base $b$ es mayor que $2$, un número es divisible por $b-1$ siempre que la suma de sus dígitos sea congruente con $0$ módulo $b-1$''.\n","date":1539748779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564264801,"objectID":"7c6a45015b5a8eb96cec662f0f9fa581","permalink":"https://imalexissaez.github.io/2018/10/17/empezando-con-teoria-de-numeros-iv/","publishdate":"2018-10-17T05:59:39+02:00","relpermalink":"/2018/10/17/empezando-con-teoria-de-numeros-iv/","section":"post","summary":"Problema 20: descifrando algunos criterios de divisibilidad.","tags":["Criterios de divisibilidad","Problemas","Teorema Fundamental de la Numeración","Teoría de números"],"title":"Empezando con teoría de números (IV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 19: Calcula el valor de la expresión\n$$ (1^3 + 2^3 + \\cdots + 100^3)\\pmod{4}. $$\n Si tenemos en cuenta que\n$$ \\begin{aligned} 1\\equiv 1\\pmod{4} \u0026amp;\\Rightarrow 1^3\\equiv 1^3\\pmod{4}\\equiv 1\\pmod{4},\\\n2\\equiv 2\\pmod{4} \u0026amp;\\Rightarrow 2^3\\equiv 2^3\\pmod{4}\\equiv 8\\pmod{4}\\equiv 0\\pmod{4},\\\n3\\equiv 3\\pmod{4} \u0026amp;\\Rightarrow 3^3\\equiv 3^3\\pmod{4}\\equiv 27\\pmod{4}\\equiv 3\\pmod{4},\\ 4\\equiv 0\\pmod{4} \u0026amp;\\Rightarrow 4^3\\equiv 0^3\\pmod{4}\\equiv 0\\pmod{4},\\\n5\\equiv 1\\pmod{4} \u0026amp;\\Rightarrow 5^3\\equiv 1^3\\pmod{4}\\equiv 1\\pmod{4},\\\n6\\equiv 2\\pmod{4} \u0026amp;\\Rightarrow 6^3\\equiv 2^3\\pmod{4}\\equiv 8\\pmod{4}\\equiv 0\\pmod{4}, \\end{aligned} $$\nenseguida atisbamos cómo se repetiría el mismo patrón cada cuatro sumandos. Ahora bien,\n$$ \\begin{aligned} (1^3 + 2^3 + 3^3 + 4^3)\\pmod{4}\u0026amp;\\equiv (1 + 0 + 3 + 0)\\pmod{4}\\\n\u0026amp;\\equiv 4\\pmod{4}\\\n\u0026amp;\\equiv 0\\pmod{4}, \\end{aligned} $$\ny como en la suma de cubos propuesta en el enunciado del ejercicio hemos de sumar $25$ veces el resultado del patrón anterior, llegamos a que\n$$ (1^3 + 2^3 + \\cdots+100^3)\\pmod{4} \\equiv 0\\pmod{4}, $$\nes decir, la suma de los cubos de los cien primeros números naturales es múltiplo de $4$.\n","date":1539403179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"050dbd160166b1ae4412b4e858cfa099","permalink":"https://imalexissaez.github.io/2018/10/13/empezando-con-teoria-de-numeros-iii/","publishdate":"2018-10-13T05:59:39+02:00","relpermalink":"/2018/10/13/empezando-con-teoria-de-numeros-iii/","section":"post","summary":"Problema 19: calculando el resto de una enorme suma.","tags":["Problemas","Teoría de números"],"title":"Empezando con teoría de números (III)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 18: Calcula el inverso de $3$ módulo $7$.\n El enunciado nos plantea resolver\n$$ 3x\\equiv 1\\pmod{7}. $$\nComo $mcd(3,7)=1$, es decir, $3$ y $7$ son coprimos, estamos en condiciones de asegurar que seremos capaces de encontrar el inverso de $3$ módulo $7$, $x$. Para ello, como los números involucrados son pequeños, podemos simplemente optar por emplear la \u0026lsquo;\u0026lsquo;cuenta de la vieja\u0026rsquo;\u0026rsquo; y extraer el valor de $x$ por fuerza bruta. Así,\n$$ \\begin{aligned} 3\\cdot 1 \u0026amp;= 3\\equiv 3\\pmod{7},\\\n3\\cdot 2 \u0026amp;= 6\\equiv 6\\pmod{7},\\\n3\\cdot 3 \u0026amp;= 9\\equiv 2\\pmod{7},\\\n3\\cdot 4 \u0026amp;= 12\\equiv 5\\pmod{7},\\\n3\\cdot 5 \u0026amp;= 15\\equiv 1\\pmod{7}, \\end{aligned} $$\nluego $x=5$ es el inverso de $3$ módulo $7$.\nAlternativamente, podemos llevar a cabo operaciones elementales sobre la propia ecuación de congruencia. Como $2\\cdot3=6$, que es un valor muy cercano a $7$, entonces\n$$ \\begin{aligned} 3x\\equiv 1\\pmod{7}\u0026amp;\\Leftrightarrow 6x\\equiv 2\\pmod{7}\\\n\u0026amp;\\Leftrightarrow -x\\equiv 2\\pmod{7}\\\n\u0026amp;\\Leftrightarrow x\\equiv (-2)\\pmod{7}\\\n\u0026amp;\\Leftrightarrow x\\equiv 5\\pmod{7}, \\end{aligned} $$\narribando así al mismo resultado que antes.\n","date":1539230379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"6cdaf8a69ad06685977944aa91609554","permalink":"https://imalexissaez.github.io/2018/10/11/empezando-con-teoria-de-numeros-ii/","publishdate":"2018-10-11T05:59:39+02:00","relpermalink":"/2018/10/11/empezando-con-teoria-de-numeros-ii/","section":"post","summary":"Problema 18: calculando inversos.","tags":["Problemas","Teoría de números"],"title":"Empezando con teoría de números (II)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 17: Calcula el resto de la división de\n$$ 2^{1538} $$\nentre $5$.\n Estudiemos, utilizando la teoría de congruencias, el comportamiento del valor de las primeras potencias de $2$.\n$$ \\begin{aligned} 2^1\u0026amp;\\equiv 2 \\pmod{5},\\\n2^2\u0026amp;\\equiv 4 \\pmod{5}\\equiv(-1) \\pmod{5},\\\n2^3\u0026amp;\\equiv 3 \\pmod{5},\\\n2^4\u0026amp;\\equiv 1 \\pmod{5}. \\end{aligned} $$\nEste resulta un buen punto en el que detener nuestro análisis, ya que ahora sabemos que las potencias de $2$ que son múltiplo de $4$ son congruentes con $1$ módulo $5$. Es decir, $2^8\\equiv 1 \\pmod{5}$, $2^{12}\\equiv 1 \\pmod{5}$, etc. Antes de continuar, cabe señalar que:\n Podíamos habernos ahorrado algunos cálculos, ya que como $p=5$ es un número primo y $mcd(2,5)=1$, entonces, por el Pequeño Teorema de Fermat (ver abajo), $2^{5-1} = 2^4\\equiv 1 \\pmod{5}$. Además, en el momento en el que hemos obtenido la potencia para la cual $(-1)\\pmod{5}$ ya podíamos intuir cuándo llegaríamos al resultado deseado, ya que $(-1)^2=1$, lo que indica que al elevar al cuadrado la potencia asociada ($2^2$ en este caso) tendríamos que sería congruente $1$ módulo $5$. Es decir $( 2^{2} )^{2} = 2^{4} \\equiv 1\\pmod{5}$.  Ahora, dividiendo, sabemos que $1538 = 384\\cdot 4 + 2$ y, por tanto,\n$$ 2^{1538} = 2^{384\\cdot 4 + 2} = (2^4)^{384}\\cdot 2^2\\equiv (1\\cdot 4)\\pmod{5}\\equiv 4\\pmod{5}, $$\ny así, el resto de la división de $2^{1538}$ entre $5$ asciende a $4$.\n Teorema (Pequeño Teorema de Fermat): sea $p$ un número primo y supongamos que $p$ no divide a $a$. Entonces\n$$ a^{p - 1}\\equiv 1\\pmod{p}. $$\n ","date":1539057579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"880051d46b40dc545467480860bb529a","permalink":"https://imalexissaez.github.io/2018/10/09/empezando-con-teoria-de-numeros-i/","publishdate":"2018-10-09T05:59:39+02:00","relpermalink":"/2018/10/09/empezando-con-teoria-de-numeros-i/","section":"post","summary":"Problema 17: presentando el Pequeño Teorema de Fermat.","tags":["Pequeño Teorema de Fermat","Problemas","Teoría de números"],"title":"Empezando con teoría de números (I)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 16: Resuelve\n (a) $a_{n+2}+a_n = \\sin{(\\pi n)}$. (b) $a_{n+2}+a_n = \\sin{\\left(\\dfrac{\\pi}{2}n\\right)}$.   El apartado (a) nos plantea la ecuación en diferencias lineal completa de orden 2,\n$$ a_{n+2}+a_n = \\sin{(\\pi n)}. $$\nEsta tiene como ecuación en diferencias lineal homogénea asociada\n$$ a_{n+2}+a_n = 0, $$\ncuya ecuación característica correspondiente es\n$$ \\lambda^2+1=0. $$\nComo $\\lambda^2+1 = (\\lambda - i)(\\lambda + i)$, estamos en el caso de raíces complejas conjugadas simples, para las que $\\varrho = 1$ y $\\theta = \\pi/2$, de manera que la solución para la ecuación anterior queda\n$$ \\begin{aligned} a_h(n) \u0026amp;= 1^n\\left(A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right)\\\n\u0026amp;= A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, \\end{aligned} $$\ncon $A,B\\in\\mathbb{R}$.\nAhora, para hallar una solución particular, $a_p(n)$, como $b(n) = \\sin{(\\pi n)}$ y $\\lambda = \\cos{(\\pi)} + i\\sin{(\\pi)} = -1$ no es raíz de la ecuación característica, proponemos $a_p(n) = a\\cos{(\\pi n)} + b\\sin{(\\pi n)}$, de manera que, sustituyendo en la ecuación inicial\n$$ \\begin{aligned} a\\cos{(\\pi(n+2))} + b\\sin{(\\pi(n+2))} + a\\cos{(\\pi n)} + b\\sin{(\\pi n)} \u0026amp;= \\sin{(\\pi n)},\\\na\\cos{(\\pi n+2\\pi)} + b\\sin{(\\pi n+2\\pi)} + a\\cos{(\\pi n)} + b\\sin{(\\pi n)} \u0026amp;= \\sin{(\\pi n)}, \\end{aligned} $$\ny recordando que\n$$ \\begin{aligned} \\cos{(k_1+k_2)} \u0026amp;= \\cos{(k_1)}\\cos{(k_2)}-\\sin{(k_1)}\\sin{(k_2)},\\\n\\sin{(k_1+k_2)} \u0026amp;= \\sin{(k_1)}\\cos{(k_2)}+\\cos{(k_1)}\\sin{(k_2)}, \\end{aligned} $$\nentonces $\\cos{(\\pi n+2\\pi)} = \\cos{(\\pi n)}$ y $\\sin{(\\pi n+2\\pi)} = \\sin{(\\pi n)}$, con lo que la ecuación anterior queda\n$$ \\begin{aligned} a\\cos{(\\pi n)} + b\\sin{(\\pi n)} + a\\cos{(\\pi n)} + b\\sin{(\\pi n)} \u0026amp;= \\sin{(\\pi n)},\\\n2a\\cos{(\\pi n)} + 2b\\sin{(\\pi n)} \u0026amp;= \\sin{(\\pi n)}, \\end{aligned} $$\ne, igualando coeficientes, llegamos a que $2a=0$, de donde $a=0$, y $2b=1$, con lo que $b=1 / 2$, de forma que\n$$ a_p(n) = \\dfrac{1}{2}\\sin{(\\pi n)}. $$\nFinalmente, la solución general de la ecuación inicial la obtenemos haciendo\n$$ a(n) = a_h(n) + a_p(n) = A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)} + \\dfrac{1}{2}\\sin{(\\pi n)}, $$\ncon $A,B\\in\\mathbb{R}$.\nEn el apartado (b), tenemos la ecuación en diferencias lineal completa de orden 2,\n$$ a_{n+2}+a_n = \\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, $$\ncuya correspondiente ecuación lineal homogénea es\n$$ a_{n+2}+a_n = 0, $$\ncon ecuación característica asociada\n$$ \\lambda^2 + 1=0. $$\nComo $\\lambda^2+1 = (\\lambda - i)(\\lambda + i)$, estamos en el caso de raíces complejas conjugadas simples, para las que $\\varrho = 1$ y $\\theta = \\pi/2$, de manera que la solución para la ecuación anterior queda\n$$ \\begin{aligned} a_h(n) \u0026amp;= 1^n\\left( A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)} \\right)\\\n\u0026amp;= A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, \\end{aligned} $$\ncon $A,B\\in\\mathbb{R}$.\nAhora, para hallar una solución particular, $a_p(n)$, como\n$$ b(n) = \\sin{\\left(\\dfrac{\\pi}{2}n\\right)} $$\ny\n$$ \\lambda = \\cos{\\left(\\dfrac{\\pi}{2}\\right)} + i\\sin{\\left(\\dfrac{\\pi}{2}\\right)} = i $$\nes raíz simple ($m=1$) de la ecuación característica, proponemos\n$$ \\begin{aligned} a_p(n) \u0026amp;= n^1\\left(a\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + b\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right)\\\n\u0026amp;= n\\left(a\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + b\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right), \\end{aligned} $$\nde manera que, sustituyendo en la ecuación inicial,\n$$ (n+2)\\left(a\\cos{\\left(\\dfrac{\\pi}{2}(n+2)\\right)} + b\\sin{\\left(\\dfrac{\\pi}{2}(n+2)\\right)}\\right)+n\\left(a\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + b\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right) = \\sin{\\left(\\dfrac{\\pi}{2}n\\right)} $$\ny recordando que\n$$ \\begin{aligned} \\cos{(k_1+k_2)} \u0026amp;= \\cos{(k_1)}\\cos{(k_2)}-\\sin{(k_1)}\\sin{(k_2)},\\\n\\sin{(k_1+k_2)} \u0026amp;= \\sin{(k_1)}\\cos{(k_2)}+\\cos{(k_1)}\\sin{(k_2)}, \\end{aligned} $$\nentonces\n$$ \\begin{aligned} \\cos{\\left(\\dfrac{\\pi}{2}(n+2)\\right)} \u0026amp;= \\cos{\\left(\\dfrac{\\pi}{2}n+\\pi\\right)} = -\\cos{\\left(\\dfrac{\\pi}{2}n\\right)},\\\n\\sin{\\left(\\dfrac{\\pi}{2}(n+2)\\right)} \u0026amp;= \\sin{\\left(\\dfrac{\\pi}{2}n+\\pi\\right)} = -\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, \\end{aligned} $$\ncon lo que la ecuación anterior queda\n$$ (n+2)\\left(-a\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} - b\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right)+ n\\left(a\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + b\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right) = \\sin{\\left(\\dfrac{\\pi}{2}n\\right)} $$\ne, igualando coeficientes, llegamos a que $-2a=0$, de donde $a=0$, y $-2b=1$, por lo que $b = -1 / 2$, de forma que\n$$ a_p(n) = -\\dfrac{1}{2}\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}. $$\nFinalmente, la solución general de la ecuación inicial la obtenemos haciendo\n$$ \\begin{aligned} a(n) = a_h(n) + a_p(n) \u0026amp;= A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)} -\\dfrac{1}{2}\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\\n\u0026amp;=A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + \\left(B-\\dfrac{1}2{}\\right)\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, \\end{aligned} $$\ncon $A,B\\in\\mathbb{R}$.\n","date":1538798379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"9aeec17fd719c62564fb8bc5da811380","permalink":"https://imalexissaez.github.io/2018/10/06/repasando-ecuaciones-en-diferencias-lineales-v/","publishdate":"2018-10-06T05:59:39+02:00","relpermalink":"/2018/10/06/repasando-ecuaciones-en-diferencias-lineales-v/","section":"post","summary":"Problema 16: volvemos a trabajar con números complejos.","tags":["Ecuaciones en diferencias","Problemas"],"title":"Repasando ecuaciones en diferencias lineales (V)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 15: Resuelve\n (a) $a_{n+2}-3a_{n+1}-2a_n = 3^n$. (b) $a_{n+2}-3a_{n+1}+2a_n = 2^n$.   En el apartado (a), encontramos la ecuación en diferencias lineal completa de orden 2,\n$$ a_{n+2}-3a_{n+1}-2a_n = 3^n. $$\nSu ecuación en diferencias lineal homogénea asociada es\n$$ a_{n+2}-3a_{n+1}-2a_n = 0, $$\ncon ecuación característica\n$$ \\lambda^2 - 3\\lambda - 2 = 0. $$\nAhora, como $\\lambda^2 - 3\\lambda - 2=(\\lambda - 2)(\\lambda - 1)$, estamos en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda\n$$ a_h(n) = c_11^n + c_22^n = c_1+c_22^n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nA continuación, para encontrar una solución particular, $a_p(n)$, como $b(n) = 3^n$ y $\\lambda = 3$ no es raíz de la ecuación característica, proponemos $a_p(n) = k3^n$, de manera que, sustituyendo en la ecuación inicial,\n$$ \\begin{aligned} k3^{n+2} - 3k3^{n+1} + 2k3^n \u0026amp;= 3^n,\\ 9k - 9k + 2k \u0026amp;= 1,\\\n2k \u0026amp;= 1, \\end{aligned} $$\nes decir, $k = 1 / 2$, con lo que\n$$ a_p(n) = \\dfrac{1}{2}3^n. $$\nFinalmente, la solución general de la ecuación inicial la obtenemos haciendo\n$$ a(n) = a_h(n) + a_p(n) = c_1+c_22^n + \\dfrac{1}{2}3^n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nEn el apartado (b), la ecuación en diferencias lineal\n$$ a_{n+2}-3a_{n+1}+2a_n = 2^n $$\nes completa de orden 2. Su ecuación en diferencial lineal homogénea asociada es\n$$ a_{n+2}-3a_{n+1}+2a_n = 0, $$\ncon ecuación característica correspondiente\n$$ \\lambda^2 - 3\\lambda + 2 = 0. $$\nComo $\\lambda^2 - 3\\lambda + 2 = (\\lambda - 2)(\\lambda - 1)$, estamos en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda\n$$ a_h(n) = c_11^n + c_22^n=c_1+c_22^n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nAhora, para encontrar una solución particular, $a_p(n)$, como $b(n) = 2^n$ y $\\lambda=2$ es una raíz simple ($m=1$) de la ecuación característica, proponemos $a_p(n) = kn^12^n = kn2^n$, de forma que, sustituyendo en la ecuación inicial,\n$$ \\begin{aligned} k(n+2)2^{n+2} - 3k(n+1)2^{n+1}+2kn2^n \u0026amp;= 2^n,\\\n4k(n+2) - 6k(n+1) + 2kn \u0026amp;= 1,\\\n4kn + 8k - 6kn - 6k + 2kn \u0026amp;=1,\\\n2k \u0026amp;= 1, \\end{aligned} $$\nes decir, $k=1 / 2$, con lo que\n$$ a_p(n) = \\dfrac{1}{2}n2^n = n2^{n-1}. $$\nFinalmente, la solución general de la ecuación inicial la obtenemos haciendo\n$$ a(n) = a_h(n) + a_p(n) = c_1+c_22^n+n2^{n-1}, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\n","date":1538625579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"2403ba85a81627b61ae567da189429f1","permalink":"https://imalexissaez.github.io/2018/10/04/repasando-ecuaciones-en-diferencias-lineales-iv/","publishdate":"2018-10-04T05:59:39+02:00","relpermalink":"/2018/10/04/repasando-ecuaciones-en-diferencias-lineales-iv/","section":"post","summary":"Problema 15: aparecen funciones potenciales como términos independientes.","tags":["Ecuaciones en diferencias","Problemas"],"title":"Repasando ecuaciones en diferencias lineales (IV)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 14: Resuelve\n (a) $a_{n+2}-5a_{n+1}+6a_n = 10$. (b) $a_{n+2}-3a_{n+1}+2a_n = 4$.   En el apartado (a), encontramos la ecuación en diferencias lineal completa de orden 2,\n$$ a_{n+2}-5a_{n+1}+6a_n = 10. $$\nEmpecemos abordando su ecuación en diferencias lineal homogénea asociada,\n$$ a_{n+2}-5a_{n+1}+6a_n = 0, $$\ncuya ecuación característica correspondiente es\n$$ \\lambda^2 - 5\\lambda + 6 = 0. $$\nAhora, como $\\lambda^2 - 5\\lambda + 6=(\\lambda - 3)(\\lambda - 2)$, estamos en el caso de raíces reales simples, de manera que la solución para la ecuación anterior queda\n$$ a_h(n) = c_12^n + c_23^n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nA continuación, de cara a encontrar una solución particular, $a_p(n)$, como $b(n)=10$ y $\\lambda=1$ no es raíz de la ecuación característica, proponemos $a_p(n) = k$, de forma que, sustituyendo esta en la ecuación inicial,\n$$ k - 5k + 6k = 10, $$\nes decir, $k=5$, con lo que\n$$ a_p(n)=5. $$\nFinalmente, la solución general para la ecuación inicial la obtenemos haciendo\n$$ a(n) = a_h(n) + a_p(n) = c_12^n + c_23^n + 5, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nEn el apartado (b), la ecuación en diferencias lineal\n$$ a_{n+2}-3a_{n+1}+2a_n = 4 $$\nes completa de orden 2. Procediendo como antes, abordamos su ecuación en diferencias lineal homogénea correspondiente\n$$ a_{n+2}-3a_{n+1}+2a_n = 0, $$\ncon ecuación característica asociada\n$$ \\lambda^2 - 3\\lambda + 2 = 0. $$\nComo $\\lambda^2 - 3\\lambda + 2 = (\\lambda - 2)(\\lambda - 1)$, volvemos a estar en el caso de raíces reales simples, por lo que la solución para la ecuación anterior queda\n$$ a_h(n) = c_11^n + c_22^n=c_1 + c_22^n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\nActo seguido, para encontrar una solución particular, $a_p(n)$, como $b(n)=4$ y $\\lambda=1$ es raíz simple ($m=1$) de la ecuación característica, proponemos $a_p(n) = kn^1 = kn$, de forma que, sustituyendo en la ecuación inicial,\n$$ k(n+2)-3k(n+1)+2kn = kn+2k-3kn-3k+2kn= -k = 4, $$\nes decir, $k = -4$, con lo que\n$$ a_p(n) = -4n. $$\nFinalmente, la solución general de la ecuación inicial la obtenemos haciendo\n$$ a(n) = a_h(n) + a_p(n) = c_1+c_22^n-4n, $$\ncon $c_1,c_2\\in\\mathbb{R}$.\n","date":1538452779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"3d61a237e3291096b470ba52e0a54f00","permalink":"https://imalexissaez.github.io/2018/10/02/repasando-ecuaciones-en-diferencias-lineales-iii/","publishdate":"2018-10-02T05:59:39+02:00","relpermalink":"/2018/10/02/repasando-ecuaciones-en-diferencias-lineales-iii/","section":"post","summary":"Problema 14: ecuaciones en diferencias lineales completas sencillas.","tags":["Ecuaciones en diferencias","Problemas"],"title":"Repasando ecuaciones en diferencias lineales (III)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 13: Resuelve\n (a) $a_{n+3} - 3a_{n+2} + 4a_{n+1} - 12a_n = 0$. (b) $a_{n+4} + 2a_{n+2} + a_n = 0$.   En el apartado (a), $a_{n+3} - 3a_{n+2} + 4a_{n+1} - 12a_n = 0$ es una ecuación en diferencias lineal homogénea de orden 3, que tiene por ecuación característica\n$$ \\lambda^3 - 3\\lambda^2 + 4\\lambda - 12 = 0. $$\nAhora bien, como $\\lambda^3 - 3\\lambda^2 + 4\\lambda - 12 = (\\lambda - 3)(\\lambda - 2i)(\\lambda + 2i)$, tenemos una raíz real simple y dos raíces complejas conjugadas simples, para las que $\\varrho = 2$ y $\\theta = \\pi/2$, de manera que la solución queda\n$$ a_h(n) = c_13^n + 2^n\\left(A\\cos{\\left(\\dfrac{\\pi}{2}n\\right)} + B\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}\\right), $$\ncon $c_1, A, B\\in\\mathbb{R}$.\nA continuación, en el apartado (b), $a_{n+4} + 2a_{n+2} + a_n = 0$ es homogénea de orden 4, con ecuación característica\n$$ \\lambda^4 + 2\\lambda^2 + 1 = 0. $$\nEsta ecuación bicuadrada en $\\lambda$ la podemos resolver mediante el cambio de variable $t = \\lambda^2$, de forma que la ecuación queda como $t^2+2t+1=0$ y posee $t=-1$ como raíz real de multiplicidad $m=2$, es decir,\n$$ t^2+2t+1 = (t+1)^2. $$\nAsí, si deshacemos ahora el cambio de variable, resulta que\n$$ \\lambda^4 + 2\\lambda^2 + 1 = (\\lambda - i)^2(\\lambda + i)^2, $$\ncon lo cual tenemos dos raíces complejas conjugadas de multiplicidad $m=2$, para las que $\\varrho=1$ y $\\theta = \\pi/2$, por lo que la solución queda\n$$ \\begin{aligned} a_h(n) \u0026amp;= 1^n\\left( (An+B)cos{\\left(\\dfrac{\\pi}{2}n\\right)} + (Cn+D)\\sin{\\left(\\dfrac{\\pi}{2}n\\right)} \\right)\\\n\u0026amp;= (An+B)cos{\\left(\\dfrac{\\pi}{2}n\\right)} + (Cn+D)\\sin{\\left(\\dfrac{\\pi}{2}n\\right)}, \\end{aligned} $$\ncon $A,B,C,D\\in\\mathbb{R}$.\n","date":1538193579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"26e112fbe12895432605a885d2c87c27","permalink":"https://imalexissaez.github.io/2018/09/29/repasando-ecuaciones-en-diferencias-lineales-ii/","publishdate":"2018-09-29T05:59:39+02:00","relpermalink":"/2018/09/29/repasando-ecuaciones-en-diferencias-lineales-ii/","section":"post","summary":"Problema 13: aparecen raíces complejas en el polinomio característico.","tags":["Ecuaciones en diferencias","Problemas"],"title":"Repasando ecuaciones en diferencias lineales (II)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 12: Resuelve\n (a) $a_{n+3} - 3a_{n+2} - 4a_{n+1} + 12a_n = 0$. (b) $a_{n+3} - 4a_{n+2} + 5a_{n+1} - 2a_n = 0$.   En el apartado (a), encontramos la ecuación en diferencias lineal homogénea de orden 3 dada por $a_{n+3} - 3a_{n+2} - 4a_{n+1} + 12a_n = 0$, cuya ecuación característica asociada es\n$$ \\lambda^3-3\\lambda^2-4\\lambda+12=0. $$\nAhora bien, como $\\lambda^3 - 3\\lambda^2 - 4\\lambda + 12 = (\\lambda - 3)(\\lambda - 2)(\\lambda + 2)$, estamos ante el caso de raíces reales simples, de manera que la solución queda\n$$ a_h(n) = c_1(-2)^n + c_22^n + c_33^n, $$\ncon $c_1,c_2,c_3\\in\\mathbb{R}$.\nPara el apartado (b), $a_{n+3} - 4a_{n+2} + 5a_{n+1} - 2a_n = 0$ es homogénea de orden 3, con ecuación característica\n$$ \\lambda^3 - 4\\lambda^2 + 5\\lambda - 2 = 0. $$\nComo $\\lambda^3 - 4\\lambda^2 + 5\\lambda - 2 = (\\lambda - 2)(\\lambda - 1)^2$, $\\lambda=1$ es una raíz real de multiplicidad $m=2$, mientras que $\\lambda=2$ es una raíz real simple, por lo que la solución queda\n$$ a_h(n) = c_11^n + c_2n1^n + c_32^n = c_1+c_2n+c_32^n, $$\ncon $c_1,c_2,c_3\\in\\mathbb{R}$.\n","date":1538020779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"33c656a4d30004a91d930f72cf2670de","permalink":"https://imalexissaez.github.io/2018/09/27/repasando-ecuaciones-en-diferencias-lineales-i/","publishdate":"2018-09-27T05:59:39+02:00","relpermalink":"/2018/09/27/repasando-ecuaciones-en-diferencias-lineales-i/","section":"post","summary":"Problema 12: ecuaciones en diferencias lineales homogéneas.","tags":["Ecuaciones en diferencias","Problemas"],"title":"Repasando ecuaciones en diferencias lineales (I)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Cierto es que LaTeX genera unos documentos matemáticos realmente vistosos. No menos cierto es que el comportamiento de LaTeX, en ocasiones, es un tanto peculiar, ofreciendo duras batallas para solventar ciertos problemas.\nEn esta ocasión, me encontraba esta misma mañana redactando unos apuntes de teoría de grafos cuando, en un ejemplo trivial donde los haya, he hallado este desbarajuste:\n\r\rLa definición del conjunto excede el margen ampliamente.\r\r\rHe definido el conjunto de aristas del grafo casi en el borde del margen y LaTeX, en lugar de romper la expresión matemática como en otras ocasiones hace de manera automática, ha decidido rebasar el margen derecho. El resultado, estéticamente, es horroroso, por mucho que el mencionado conjunto este bien agrupado y su lectura resulte cómoda.\nGeneralmente, cuando me encuentro en este tipo de situaciones, opto por reescribir la oración, de manera que añado o suprimo texto y, al final, se produce un buen encaje del contenido matemático en los márgenes.\nNo obstante, quizá buscando pretextos absurdos para descansar un rato de la transcripción de apuntes, me he decantado esta mañana por investigar las posibilidades que ofrece LaTeX para evitar que este comportamiento tenga lugar. Tras una rápida búsqueda en Google, he dado con esta entrada, cuya lectura es más que recomendable.\nUna de las primeras opciones que tenemos a nuestra disposición, lógicamente, es escribir la problemática expresión matemática en una línea independiente. En mi caso, el resultado sería el siguiente:\n\r\rDefinición del conjunto en su propia línea.\r\r\rSin embargo, ¿no adquiere así un protagonismo inmerecido el conjunto de aristas del grafo? No termina de convencerme, para esta situación particular, la solución propuesta.\nUna alternativa es emplear el comando \\sloppy antecediendo el párrafo donde reside la expresión matemática que ha decidido realizar una excursión por los márgenes del documento. Esta instrucción juega con el espaciado entre las palabras, siendo su resultado el que muestro a continuación:\n\r\rDefinición del conjunto utilizando \\sloppy.\r\r\rSinceramente, tampoco resulta de mi agrado. ¿Qué más opciones tenemos? Utilizar el comando \\allowbreak allá donde queramos se produzca la separación en nuestra expresión matemática. Volviendo a la situación original, parece que sería adecuado cortar la declaración del conjunto de aristas del grafo tras el elemento $(2, 3)$ y el resultado ahora es\n\r\rDefinición del conjunto utilizando \\allowbreak.\r\r\rEsta solución, en mi opinión, es la más agradable visualmente hablando. No obstante:\n Insertar el comando \\allowbreak resta bastante legibilidad al código fuente del documento. Si LaTeX no ha decido \u0026ldquo;romper\u0026rdquo; automáticamente la declaración de un conjunto, debemos sospechar que algún buen motivo tendrá. Efectivamente, con este enfoque, resulta un tanto más complicado seguir la definición del conjunto de aristas del grafo.  En conclusión, arriba tenemos tres estrategias que resuelven el problema planteado de mejor o peor manera. No obstante, es posible que al final me decante por la reescritura de la línea y evite recurrir a alguna de ellas.\n","date":1537847979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"ca8baaf9bca1f2c0f179b6e4cc3493eb","permalink":"https://imalexissaez.github.io/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/","publishdate":"2018-09-25T05:59:39+02:00","relpermalink":"/2018/09/25/como-evitar-que-las-ecuaciones-en-linea-superen-los-margenes/","section":"post","summary":"Cierto es que LaTeX genera unos documentos matemáticos realmente vistosos. No menos cierto es que el comportamiento de LaTeX, en ocasiones, es un tanto peculiar, ofreciendo duras batallas para solventar ciertos problemas.","tags":["LaTeX"],"title":"¿Cómo evitar que las ecuaciones en línea superen los márgenes?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En el presente artículo abordaremos con sumo detalle un problema propuesto en la convocatoria de oposiciones de Extremadura, de este mismo año 2018, para la especialidad de matemáticas.\n Problema 11: En su último viaje a Estados Unidos, el señor Martínez cambió un cheque de viaje. El cajero, al pagarle, confundió el número de dólares con los centavos y viceversa. El señor Martínez gastó 68 centavos en sellos y comprobó que el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado. ¿Qué valor mínimo tenía el cheque de viaje?\n Al leer el enunciado, enseguida apreciamos dos partes que nos sirven de pista hacia el tipo de problema que tenemos entre manos. Para empezar, cuando aparece \u0026lsquo;\u0026lsquo;el dinero que le quedaba era el doble del importe del cheque de viaje que había cambiado\u0026rsquo;', debemos sospechar que, en algún momento de la resolución del ejercicio, plantearemos una ecuación algebraica, posiblemente lineal. Esta poseerá múltiples soluciones, quizá incluso infinitas, ya que en la cuestión se interesan por el \u0026lsquo;\u0026lsquo;valor mínimo\u0026rsquo;'. Al estar trabajando con dólares y centavos, cantidades monetarias que usualmente se representan utilizando números enteros, todo ello nos va a hacer pensar rápidamente en ecuaciones diofánticas.\nAsí pues, una de las claves de este ejercicio reside en trabajar en centavos, para evitar así operar con decimales. De esta manera, si el señor Martínez viajó a Estados con un cheque de viaje cuyo valor ascendía a $a$ dólares y $b$ centavos, con $a$ y $b$ números enteros mayores o iguales de cero, en total el valor de dicho cheque era de $100a + b$ centavos.\nAhora, en el banco se equivocaron al cambiarle el cheque de viaje, intercambiando los papeles de dólares y centavos, de forma que, al final, el señor Martínez recibió $100b + a$ centavos. De estos, gastó 68 centavos en sellos, quedándole entonces disponible $100b + a - 68$ centavos.\nLa anterior cantidad nos dicen que equivalía al doble del importe del cheque de viaje que había cambiado ($2(100a + b)$), es decir, tenemos la ecuación diofántica\n$$ 100b + a - 68 = 200a + 2b, $$\nque queda, operando,\n$$ 199a-98b=-68. $$\nObtengamos el $mcd(199,98)$ utilizando el Algoritmo de Euclides:\n$$ \\begin{aligned} 199 \u0026amp;= 98\\cdot 2 + 3,\\ 98 \u0026amp;= 3\\cdot 32 + 2,\\\n3 \u0026amp;= 2\\cdot 1 + 1,\\\n2 \u0026amp;= 1\\cdot 2, \\end{aligned} $$\nluego $mcd(199, 98) = 1$ y como $1|68$ sabemos que la ecuación diofántica admite solución entera.\nDespejamos entonces $b$, por ser la variable cuyo coeficiente asociado es más pequeño, quedando así\n$$ b = \\dfrac{199a + 68}{98}. $$\nAhora, como el valor que figura en el denominador de la igualdad anterior es $98$, a continuación, tendríamos que darle a $a$, de manera ordenada, valores del menor sistema completo de restos módulo $98$ hasta hallar una solución particular.\nNo obstante, en lugar de llevar a cabo tan titánica labor, aprovecharemos las operaciones realizadas durante el Algoritmo de Euclides para descomponer la anterior fracción como sigue:\n$$ b = 2a + \\dfrac{3a+68}{98} = 2a + b^{\\prime}, $$\ncon\n$$ b^{\\prime} = \\dfrac{3a+68}{98}, $$\nque equivale a $98b^{\\prime} = 3a + 68$, ecuación en la que ahora despejaremos $a$, teniendo que\n$$ a = \\dfrac{98b^{\\prime} - 68}{3}. $$\nPodemos así dar valores a $b^{\\prime}$, ya que únicamente tendríamos que probar $b^{\\prime}=0$, $b^{\\prime}=1$ y $b^{\\prime}=2$ (que conforma el menor sistema completo de restos módulo $3$). Para $b^{\\prime}=0$, $a\\notin\\mathbb{Z}$, pero si $b^{\\prime}=1$, entonces $a=10$ y, por tanto, $b = 2a+b^{\\prime} = 21$, quedando así la solución particular como sigue:\n$$ \\begin{aligned} a_0 \u0026amp;= 10,\\\nb_0 \u0026amp;= 21, \\end{aligned} $$\nmientras que la solución general es\n$$ \\begin{aligned} a \u0026amp;= 10 - 98t,\\\nb \u0026amp;= 21 - 199t, \\end{aligned} $$\ncon $t\\in\\mathbb{Z}$.\nUna vez resuelta la ecuación diofántica, centrémonos de nuevo en aquello que nos pedían en el enunciado: \u0026lsquo;'¿Qué valor mínimo tenía el cheque de viaje?''. Como hablamos de cantidades monetarias, tanto $a$, como $b$, han de ser mayores o iguales que cero, es decir,\n$$ \\begin{aligned} a \u0026amp;= 10 -98t \\geq0 \\Rightarrow t\\leq\\dfrac{10}{98},\\\nb \u0026amp;= 21 - 199t \\geq0 \\Rightarrow t\\leq\\dfrac{21}{199}, \\end{aligned} $$\ny $t\\in\\mathbb{Z}$. Por consiguiente, el valor mínimo se alcanza cuando $t=0$, donde $a=10$ y $b=21$. Así, el señor Martínez viajó a Estados Unidos con un cheque de viaje cuyo valor ascendía a 10 dólares y 21 centavos.\n","date":1537588779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"378e7d8aec2a20d27223fb9c7906ca94","permalink":"https://imalexissaez.github.io/2018/09/22/una-historia-de-cheques-de-viaje/","publishdate":"2018-09-22T05:59:39+02:00","relpermalink":"/2018/09/22/una-historia-de-cheques-de-viaje/","section":"post","summary":"Problema 11: el relato de un... ¿error?","tags":["Ecuaciones diofánticas","Problemas"],"title":"Una historia de cheques de viaje","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Por uno de esos casuales de la vida, me ha dado por revisar el sitio web con el móvil y ha sido entonces cuando he presenciado un horror sin parangón: ¿por qué se ven así mis bloques de código?\nAl parecer, me caracterizo por ser un animal de costumbres y cualquier desviación que me lleve mucho más allá de mi zona de confort me produce hasta angustia. Habitualmente, con los temas para páginas web con los que he trabajado, los bloques de código tienen habilitada la aparición de una barra de desplazamiento horizontal cuando figuran instrucciones de longitud considerable.\nEste es un comportamiento que me parece adecuado, ya que incrementa, en mi opinión, la legibilidad de los mencionados bloques de código. Por desgracia, en el tema Beautiful Hugo no viene configurado así por defecto, de manera que una instrucción de longitud considerable se llega a dividir en varias líneas, dificultando en exceso la lectura.\nLas opciones de estilo para los bloques de código, curiosamente, no están declaradas en el archivo main.css, como sería de esperar, sino en un fichero denominado codeblock.css, que se encuentra en la ruta \\static\\css\\ del directorio donde hayamos decidido almacenar localmente nuestro sitio web. Su contenido original es\n/* --- Code blocks --- */\r.chroma .ln { margin-right: 0.8em; padding: 0 0.4em 0 0.4em; }\rpre code.hljs {\rpadding: 9.5px;\r}\r Tras investigar un rato, he conseguido que aparezca la deseada barra de desplazamiento horizontal añadiendo unas cuantas líneas al anterior archivo, de forma que ahora presenta el siguiente aspecto:\n/* --- Code blocks --- */\r.chroma .ln { margin-right: 0.8em; padding: 0 0.4em 0 0.4em; }\rpre code.hljs {\rpadding: 9.5px;\r}\rpre {\roverflow-x: auto;\r}\rpre code {\rword-wrap: normal;\rwhite-space: pre;\r}\r El único inconveniente de este enfoque es que solo afecta a los bloques de código escritos usando fences y no a los que generamos mediante el shortcode highlight de Hugo. No obstante, como habitualmente no recurro a este último, no he decido indagar más al respecto.\nEn los próximos artículos del Proyecto Metablog continuaremos con la edición de diversas plantillas del tema Beautiful Hugo, para terminar de aprender cómo adaptarlo a nuestro gusto.\n","date":1537415979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"42bc30f9b1d176a7fe7ef745a855f0c0","permalink":"https://imalexissaez.github.io/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/","publishdate":"2018-09-20T05:59:39+02:00","relpermalink":"/2018/09/20/mejorando-la-estetica-de-los-bloques-de-codigo/","section":"post","summary":"Lección 10: mejorando la legibilidad de los bloques de código fuente.","tags":["css","Beautiful Hugo","Hugo"],"title":"Mejorando la estética de los bloques de código","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"El tema Beautiful Hugo viene, por defecto, configurado para que podamos escribir expresiones matemáticas utilizando KaTeX. Tras unos minutos experimentando con esta tecnología surge enseguida la primera duda: ¿cómo puedo escribir ecuaciones en línea?\nPara empezar, recomiendo encarecidamente que acudamos a la página de versiones de KaTeX y nos hagamos con la última de ellas, para estar al día en las opciones que ofrece esta herramienta. A la hora de escribir estas líneas, dicha versión venía etiquetada como v0.10.0-rc.1.\nPara ello, hacemos clic sobre el enlace denominado katex.zip y así iniciaremos la descarga de un archivo comprimido, del cual nos interesan especialmente dos archivos contenidos en su interior:\n katex.min.css y katex.min.js.  El primero de ellos lo ubicaremos, dentro del directorio donde hayamos decidido almacenar localmente el sitio web, en la ruta \\static\\css\\, mientras que el segundo en \\static\\js\\, sobrescribiendo en ambos casos las antiguas versiones que existiesen en dichas carpetas.\nUna vez al día, la siguiente tarea implica la modificación de una de las plantillas del tema Beautiful Hugo, concretamente la denominada como footer.html, ubicada en la ruta \\layouts\\partials\\. Editamos el mencionado fichero con Sublime Text 3 y buscamos la siguiente línea:\n\u0026lt;script\u0026gt; renderMathInElement(document.body); \u0026lt;/script\u0026gt;\r Vamos a configurar KaTeX de manera que reconozca las expresiones encerradas entre $ o \\\\( como ecuaciones en línea, mientras que las delimitadas por $$ o \\\\[ como ecuaciones centradas en sus propias líneas. Para ello, tecleamos en el lugar de la anterior instrucción el siguiente bloque de código:\n\u0026lt;script\u0026gt;\rrenderMathInElement(\rdocument.body,\r{\rdelimiters: [\r{left: \u0026quot;$$\u0026quot;, right: \u0026quot;$$\u0026quot;, display: true},\r{left: \u0026quot;\\\\[\u0026quot;, right: \u0026quot;\\\\]\u0026quot;, display: true},\r{left: \u0026quot;$\u0026quot;, right: \u0026quot;$\u0026quot;, display: false},\r{left: \u0026quot;\\\\(\u0026quot;, right: \u0026quot;\\\\)\u0026quot;, display: false}\r]\r}\r);\r\u0026lt;/script\u0026gt;\r Una vez habilitada la opción de escribir ecuaciones en línea, un hecho salta a la vista de inmediato: ¿no parece que el tamaño de letra para las expresiones matemáticas es mayor que el declarado para el texto estándar? Efectivamente, peculiaridad que, en mi opinión, desluce bastante el aspecto (e incluso diría que dificulta la lectura) de los artículos.\nLa solución pasa por modificar la hoja de estilos del tema Beautiful Hugo, almacenada en el archivo main.css, que está ubicado en la ruta \\static\\css\\. Tras experimentar con cierto rango de valores para el tamaño de fuente de los objetos de la clase .katex, al final me he decantado por la siguiente solución, que he colocado al principio del fichero main.css:\n/* Modificación para hacer que el tamaño de letra de KaTeX sea similar al de la web */\r.katex { font-size: 1.1em !important; }\r En los próximos artículos del Proyecto Metablog continuaremos con la edición de diversas plantillas del tema Beautiful Hugo, para terminar de aprender cómo adaptarlo a nuestro gusto.\n","date":1537243179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564178401,"objectID":"990e130567a4eb0c02c52fe9bdce2f46","permalink":"https://imalexissaez.github.io/2018/09/18/configurando-el-comportamiento-de-katex/","publishdate":"2018-09-18T05:59:39+02:00","relpermalink":"/2018/09/18/configurando-el-comportamiento-de-katex/","section":"post","summary":"Lección 9: revisamos cómo añadir ecuaciones en línea y, además, modificamos el tamaño de la letra para las expresiones matemáticas.","tags":["Beautiful Hugo","Hugo","KaTeX"],"title":"Configurando el comportamiento de KaTeX","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 10: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$, $$4^{n+1} + 5^{2n-1}$$ es un múltiplo de 21.\n Aunque ya planteamos, hace un par de días, la resolución de este enunciado empleando el principio de inducción matemática en el Problema 9, vamos a darle aquí un enfoque alternativo a dicha resolución utilizando la teoría de congruencias.\nPara empezar, para cada $n\\in\\mathbb{N}$, $4^{n+1} + 5^{2n-1}$ es un entero mayor o igual que 21 y será múltiplo de este último siempre que\n$$ 4^{n+1} + 5^{2n-1}\\equiv 0 \\pmod{21}. $$\nAhora bien, como $21=3\\cdot 7$ y $mcd(3,7)=1$, demostrar la expresión anterior equivale a probar que las expresiones\n$$ 4^{n+1} + 5^{2n-1}\\equiv 0 \\pmod{3} $$\ny\n$$ 4^{n+1} + 5^{2n-1}\\equiv 0 \\pmod{7}, $$\nse satisfacen conjuntamente, ya que sabemos, por las propiedades de las congruencias, que dados $n,m\\in\\mathbb{N}$ fijos y $a,b\\in\\mathbb{Z}$, si $a\\equiv b \\pmod{n}$, $a\\equiv b \\pmod{m}$ y $mcd(n,m)=1$, entonces $a\\equiv b \\pmod{nm}$.\nAsí pues, dado que $4\\equiv 1 \\pmod{3}$ y $5\\equiv (-1) \\pmod{3}$, entonces, para cada $n\\in\\mathbb{N}$,\n$$ \\begin{aligned} 4^{n+1}+5^{2n-1} \u0026amp;\\equiv (1^{n+1} + (-1)^{2n-1}) \\pmod{3}\\\n\u0026amp;\\equiv (1-1) \\pmod{3}\\\n\u0026amp;\\equiv 0 \\pmod{3}, \\end{aligned} $$\nquedando así una demostrada. Para verificar la restante tengamos en cuenta que $5\\equiv (-2) \\pmod{7}$ y así, para cada $n\\in\\mathbb{N}$,\n$$ \\begin{aligned} 4^{n+1} + 5^{2n-1} \u0026amp;= 2^{2(n+1)} + 5^{2n-1}\\\n\u0026amp;= 2^{2n+2} + 5^{2n-1}\\\n\u0026amp;= 2^32^{2n-1} + 5^{2n-1}\\\n\u0026amp;\\equiv (2^32^{2n-1} + (-2)^{2n-1}) \\pmod{7}\\\n\u0026amp;\\equiv (2^32^{2n-1} + (-1)^{2n-1}2^{2n-1}) \\pmod{7}\\\n\u0026amp;\\equiv (2^32^{2n-1} - 2^{2n-1}) \\pmod{7}\\\n\u0026amp;\\equiv ((2^3-1)2^{2n-1}) \\pmod{7}\\\n\u0026amp;\\equiv 7\\cdot 2^{2n-1} \\pmod{7}\\\n\u0026amp;\\equiv 0 \\pmod{7}. \\end{aligned} $$\nPor tanto, podemos concluir que, para cada $n\\in\\mathbb{N}$, $4^{n+1} + 5^{2n-1}$ es un múltiplo de 21.\n","date":1536983979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"71184897645d1c6df7f0aff7649ca53f","permalink":"https://imalexissaez.github.io/2018/09/15/multiplos-de-21-en-ceuta-version-congruencias/","publishdate":"2018-09-15T05:59:39+02:00","relpermalink":"/2018/09/15/multiplos-de-21-en-ceuta-version-congruencias/","section":"post","summary":"Problema 10: siempre hay varias estrategias para abordar un mismo problema.","tags":["Problemas","Teoría de números"],"title":"Múltiplos de 21 en Ceuta (versión congruencias)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En el presente artículo abordaremos con sumo detalle un problema propuesto en la convocatoria de oposiciones de Ceuta, de este mismo año 2018, para la especialidad de matemáticas.\n Problema 9: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$, $4^{n+1} + 5^{2n-1}$ es un múltiplo de 21.\n Para empezar, decimos que un número $m$ es múltiplo de 21 cuando existe un número $k\\in\\mathbb{Z}$ de manera que podemos escribir $m=21k$. Así, podemos redactar de nuevo el enunciado del ejemplo como sigue: demuestra que, para cada número $n\\in\\mathbb{N}$, existe un número $k\\in\\mathbb{Z}$ tal que\n$$ 4^{n+1} + 5^{2n-1}=21k. $$\nUtilicemos el principio de inducción matemática, dado en el teorema 1.1 (ver abajo), para comprobar la anterior identidad. Rápidamente apreciamos que se cumple de manera trivial para $n=1$, puesto que\n$$ 4^{1+1}+5^{2-1} = 4^2 + 5 = 16 + 5 = 21, $$\ny bastaría entonces que tomásemos $k=1$ para constatar que es múltiplo de 21.\nActo seguido, suponemos cierta la igualdad para un $n\\in\\mathbb{N}$ dado, con $n\\geq 1$, es decir, que efectivamente se cumple que existe un número $k\\in\\mathbb{Z}$ tal que\n$$ 4^{n+1}+5^{2n-1}=21k, $$\ny estudiamos si se satisface asimismo para $n+1$. De esta manera, nuestro objetivo será demostrar que existe un $k^\\prime\\in\\mathbb{Z}$ tal que se verifica la siguiente identidad,\n$$ 4^{n+2} + 5^{2n+1} = 21k^\\prime. $$\nPodemos escribir el miembro izquierdo de la ecuación anterior como\n$$ 4^{n+2} + 5^{2n+1} = 4\\cdot4^{n+1} + 5^{2n+1}, $$\ny utilizar, acto seguido, la hipótesis de inducción, que afirma que existe $k\\in\\mathbb{Z}$ tal que $4^{n+1} + 5^{2n-1}=21k$. La clave reside en despejar adecuadamente el término que nos interesa de dicha hipótesis. Así, como $4^{n+1} + 5^{2n-1}=21k$, entonces $4^{n+1}=21k - 5^{2n-1}$ y, sustituyendo arriba, tenemos que\n$$ \\begin{aligned} 4\\cdot4^{n+1} + 5^{2n+1} \u0026amp;= 4(21k - 5^{2n-1}) + 5^{2n+1}\\\n\u0026amp;= 4\\cdot 21k - 4\\cdot 5^{2n-1} + 5^{2n+1}\\\n\u0026amp;= 4\\cdot 21k - 4\\cdot 5^{2n-1} + 5^2\\cdot5^{2n-1}\\\n\u0026amp;= 4\\cdot 21k + 5^{2n-1}(5^2-4)\\\n\u0026amp;= 4\\cdot 21k + 21\\cdot5^{2n-1}\\\n\u0026amp;= 21(4k + 5^{2n-1})\\\n\u0026amp;= 21k^\\prime, \\end{aligned} $$\ncon $k^\\prime=4k + 5^{2n-1}\\in\\mathbb{Z}$ y, por tanto, la identidad se verifica para $n+1$. El principio de inducción matemática nos permite concluir que es cierta para cada $n\\in\\mathbb{N}$.\n Teorema 1.1 (Principio de inducción matemática): Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:\n El número 1 pertenece al conjunto $S$. Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.  Entonces todo entero positivo pertenece al conjunto $S$.\n ","date":1536811179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"1e95e437ae73a82d6f879e75dcd31efe","permalink":"https://imalexissaez.github.io/2018/09/13/multiplos-de-21-en-ceuta/","publishdate":"2018-09-13T05:59:39+02:00","relpermalink":"/2018/09/13/multiplos-de-21-en-ceuta/","section":"post","summary":"Problema 9: combinando teoría de números e inducción.","tags":["Inducción","Problemas"],"title":"Múltiplos de 21 en Ceuta","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 8: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$,\n$$ n\u0026lt;2^n. $$\n Hagamos uso del principio de inducción matemática, dado en el teorema 1.1 (ver abajo), para demostrar la desigualdad planteada en el enunciado del problema. Enseguida apreciamos que esta se cumple de forma trivial para $n=1$, ya que\n$$ 1 \u0026lt; 2^1 = 2. $$\nAhora, asumimos cierta la desigualdad para un $n\\in\\mathbb{N}$ dado, con $n\\geq 1$, es decir, que efectivamente se cumple que\n$$ n \u0026lt; 2^n, $$\ny estudiamos si se verifica asimismo para $n+1$. Así pues, el objetivo pasa ahora por demostrar que se satisface la siguiente desigualdad\n$$ n+1 \u0026lt; 2^{n+1}. $$\nApoyándonos en que $n+1\\leq n+n = 2n$, para cada $n\\in\\mathbb{N}$, (siendo una desigualdad estricta cuando $n\u0026gt;1$) y en la hipótesis de inducción, tenemos que\n$$ \\begin{aligned} n+1 \u0026amp;\\leq n+n\\\n\u0026amp;= 2n\\\n\u0026amp;\u0026lt; 2\\cdot 2^n\\\n\u0026amp;= 2^{n+1}, \\end{aligned} $$\nes decir, la desigualdad se verifica para $n+1$. El principio de inducción matemática nos permite concluir que es cierta para cada $n\\in\\mathbb{N}$.\n Teorema 1.1 (Principio de inducción matemática): Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:\n El número 1 pertenece al conjunto $S$. Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.  Entonces todo entero positivo pertenece al conjunto $S$.\n ","date":1536638379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"1089c6cb88e81c5f99c52be4a08f2938","permalink":"https://imalexissaez.github.io/2018/09/11/probando-una-sencilla-desigualdad-por-induccion/","publishdate":"2018-09-11T05:59:39+02:00","relpermalink":"/2018/09/11/probando-una-sencilla-desigualdad-por-induccion/","section":"post","summary":"Problema 8: no solo de igualdades vive el principio de inducción matemática.","tags":["Inducción","Problemas"],"title":"Probando una sencilla desigualdad por inducción","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 7: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$,\n$$ 1^4+2^4+\\cdots+n^4=\\dfrac{n(n+1)(6n^3+9n^2+n-1)}{30}. $$\n Vaya por delante que estamos ante uno de esos problemas que rápidamente se ganan el apelativo de tediosos, no tanto por su dificultad, sino por el elevado número de operaciones algebraicas que debemos llevar a cabo durante el proceso de su resolución.\nCuando en una propiedad a verificar aparecen involucrados polinomios de grado considerable, la segunda parte del principio de inducción matemática conlleva el desarrollo de múltiples binomios de la forma $(n+1)^m$, con $m\\in\\mathbb{N}$. Para reducir un tanto el tedio, siempre es aconsejable que, en primer lugar, factoricemos los mencionados polinomios.\nComo nota curiosa, consultados diferentes recursos didácticos, la fórmula para la suma de las potencias cuartas de los $n$ primeros números naturales suele venir dada por\n$$ 1^4 + 2^4 + \\cdots + n^4=\\dfrac{6n^5+15n^4+10n^3-n}{30}, $$\nhecho que nos puede llevar a sospechar que la proporcionada en el enunciado del presente problema ya está completamente factorizada.\nNo obstante, como por naturaleza hemos de ser recelosos, utilicemos el Teorema de la raíz racional para investigar si podemos escribir el polinomio $6n^3 + 9n^2 + n - 1$ de una manera que nos resulte más cómoda de cara a futuras operaciones con él. Recordemos que, dada una ecuación polinómica con coeficientes enteros\n$$ a_mn^m + a_{m-1}n^{m-1} + \\cdots + a_0=0, $$\nsi $a_0$ y $a_m$ son enteros distintos de cero, entonces las posibles soluciones que son del tipo $n = p/q$ satisfacen:\n $p$ es divisor de $a_0$. $q$ es divisor de $a_m$. $p$ y $q$ son primos entre sí.  En nuestro problema, el conjunto de candidatos para $p$ es $\\{\\pm1\\}$, mientras que para $q$ es $\\{\\pm1,\\pm2,\\pm3,\\pm6\\}$ y rápidamente podemos comprobar que $n = -1 / 2$ es solución del polinomio dado. Así,\n$$ 6n^3 + 9n^2 + n - 1 = (2n + 1)(3n^2 + 3n - 1), $$\nde manera que\n$$ \\begin{aligned} \\sum_{k=1}^{n}{k^4} \u0026amp;= 1^4+2^4+\\cdots+n^4\\\n\u0026amp;= \\dfrac{n(n+1)(6n^3+9n^2+n-1)}{30}\\\n\u0026amp;=\\dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30}. \\end{aligned} $$\nUna vez hemos alcanzado una expresión irreducible para el polinomio que figura en el numerador de la identidad anterior, utilizamos el principio de inducción matemática, dado en el teorema 1.1 (ver abajo), para comprobar dicha igualdad. Enseguida observamos que se satisface de manera trivial para $n=1$, puesto que\n$$ 1 = 1^4 = \\dfrac{1\\cdot2\\cdot3\\cdot5}{30}=1. $$\nA continuación, suponemos verdadera la identidad para un cierto $n\\in\\mathbb{N}$, con $n\\geq 1$, es decir, que efectivamente se verifica que\n$$ \\sum_{k=1}^{n}{k^4} = \\dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30} $$\ny estudiamos si se satisface para $n+1$. Así pues, el objetivo que tenemos ahora entre manos es comprobar si\n$$ \\begin{aligned} \\sum_{k=1}^{n+1}{k^4} \u0026amp;= \\dfrac{(n+1)(n+2)(2(n+1)+1)(3(n+1)^2+3(n+1)-1)}{30}\\\n\u0026amp;= \\dfrac{(n+1)(n+2)(2n+3)(3n^2+9n+5)}{30}. \\end{aligned} $$\nApliquemos la hipótesis de inducción y llevemos a cabo algunas operaciones algebraicas elementales, de forma que\n$$ \\begin{aligned} \\sum_{k=1}^{n+1}{k^4} \u0026amp;= (n+1)^4 + \\sum_{k=1}^{n}{k^4}\\\n\u0026amp;= (n+1)^4 + \\dfrac{n(n+1)(2n+1)(3n^2+3n-1)}{30}\\\n\u0026amp;= \\dfrac{30(n+1)^4 + n(n+1)(2n+1)(3n^2+3n-1)}{30}\\\n\u0026amp;= \\dfrac{(n+1)(30(n+1)^3+n(2n+1)(3n^2+3n-1))}{30}. \\end{aligned} $$\nPor tanto, el resultado quedaría probado siempre y cuando fuesen equivalentes las expresiones de los polinomios $(n+2)(2n+3)(3n^2+9n+5)$ y $30(n+1)^3 + n(2n+1)(3n^2+3n-1)$. Efectivamente, si desarrollamos\n$$ \\begin{aligned} (n+2)(2n+3) \u0026amp;= 2n^2+3n+4n+6 = 2n^2+7n+6,\\\n(2n^2+7n+6)(3n^2+9n+5) \u0026amp;= 6n^4+39n^3+91n^2+89n+30, \\end{aligned} $$\ny, por otro lado,\n$$ \\begin{aligned} 30(n+1)^3 \u0026amp;= 30n^3 + 90n^2 + 90n + 30,\\\nn(2n+1)(3n^2+3n-1) \u0026amp;= 6n^4+9n^3+n^2-n, \\end{aligned} $$\nde manera que la suma de estas dos últimas ecuaciones asciende a $6n^4 + 39n^3 + 91n^2 + 89n + 30,$ y, por tanto, la identidad se verifica para $n+1$. El principio de inducción matemática nos permite concluir que es cierta para cada $n\\in\\mathbb{N}$.\n Teorema 1.1 (Principio de inducción matemática): Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:\n El número 1 pertenece al conjunto $S$. Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.  Entonces todo entero positivo pertenece al conjunto $S$.\n ","date":1536379179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"8105e4a0f227757f58eb1465245d5064","permalink":"https://imalexissaez.github.io/2018/09/08/una-expresion-para-la-suma-de-potencias-cuartas/","publishdate":"2018-09-08T05:59:39+02:00","relpermalink":"/2018/09/08/una-expresion-para-la-suma-de-potencias-cuartas/","section":"post","summary":"Problema 7: a veces, no queda otra que arremangarse las mangas y calcular.","tags":["Inducción","Problemas"],"title":"Una expresión para la suma de potencias cuartas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 6: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$,\n$$ 1^3 + 2^3 + \\cdots + n^3=(1+2+3+\\cdots+n)^2. $$\n Para empezar, y de cara a aliviar ligeramente la escritura en un futuro, podemos plantear de manera más compacta la identidad dada en el enunciado del presente problema como sigue\n$$ 1^3 + 2^3 + \\cdots + n^3 = \\sum_{k=1}^{n}{k^3} = \\left(\\sum_{k=1}^{n}{k}\\right)^2 = (1+2+3+\\cdots+n)^2. $$\nEn esta ocasión, si optamos por una aproximación similar a la seguida en los problemas anteriores, la demostración puede volverse un tanto tediosa debido a los cálculos implicados. Es por ello que, utilizando el resultado probado en el problema 1, la igualdad que buscamos verificar aquí sería equivalente a\n$$ \\sum_{k=1}^{n}{k^3} = \\left(\\sum_{k=1}^{n}{k}\\right)^2 = \\left(\\dfrac{n(n+1)}{2}\\right)^2 = \\dfrac{n^2(n+1)^2}{4}. $$\nUna vez alcanzada una expresión más manejable para la identidad planteada, empleamos el principio de inducción matemática, dado en el Teorema 1.1 (ver abajo), para probarla. Rápidamente comprobamos que se verifica de manera trivial para $n=1$, puesto que\n$$ 1 = 1^3 = \\dfrac{1^2\\cdot2^2}{4} = \\dfrac{4}{4} = 1. $$\nAhora, suponemos cierta la identidad para un número dado $n\\in\\mathbb{N}$, con $n\\geq 1$, es decir, que efectivamente se cumple que\n$$ \\sum_{k=1}^{n}{k^3} = \\dfrac{n^2(n+1)^2}{4}, $$\ny estudiamos si se satisface asimismo para $n+1$. Así pues, acto seguido, el objetivo que tenemos entre manos es verificar si es cierta la igualdad\n$$ \\sum_{k=1}^{n+1}{k^3} = \\dfrac{(n+1)^2(n+2)^2}{4}. $$\nApliquemos la hipótesis de inducción y llevemos a cabo algunas operaciones algebraicas elementales, de manera que\n$$ \\begin{aligned} \\sum_{k=1}^{n+1}{k^3} \u0026amp;= (n+1)^3 + \\sum_{k=1}^{n}{k^3}\\\n\u0026amp;= (n+1)^3 + \\dfrac{n^2(n+1)^2}{4}\\\n\u0026amp;= \\dfrac{4(n+1)^3 + n^2(n+1)^2}{4}\\\n\u0026amp;= \\dfrac{(n+1)^2(4(n+1)+n^2)}{4}\\\n\u0026amp;= \\dfrac{(n+1)^2(n^2+4n+4)}{4}\\\n\u0026amp;= \\dfrac{(n+1)^2(n+2)^2}{4} \\end{aligned} $$\ny, por tanto, la identidad se verifica para $n+1$. El principio de inducción matemática nos permite concluir que es cierta para cada $n\\in\\mathbb{N}$.\n Teorema 1.1 (Principio de inducción matemática): Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:\n El número 1 pertenece al conjunto $S$. Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.  Entonces todo entero positivo pertenece al conjunto $S$.\n ","date":1536206379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"110b639002e92fa24bc2bbfbe4fa5c54","permalink":"https://imalexissaez.github.io/2018/09/06/y-les-llego-el-turno-a-los-cubos/","publishdate":"2018-09-06T05:59:39+02:00","relpermalink":"/2018/09/06/y-les-llego-el-turno-a-los-cubos/","section":"post","summary":"Problema 6: en matemáticas, reutilizar resultados es clave.","tags":["Inducción","Problemas"],"title":"¡Y les llegó el turno a los cubos!","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 5: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$,\n$$ \\sum_{k=1}^{n}{k^2} = \\dfrac{n(n+1)(2n+1)}{6}. $$\n Ante nosotros se plantea la tarea de demostrar una propiedad (la identidad sugerida arriba), que supuestamente se satisface para una sucesión de índices enteros que conforman un conjunto cuyo cardinal es infinito ($n\\in\\mathbb{N}$, con $n\\geq 1$, en este caso). Entre las diferentes estrategias que tenemos a nuestra disposición para abordar esta empresa, el principio de inducción matemática, dado en el Teorema 1.1 (ver abajo), quizá sea el instrumento más aconsejable para una primera aproximación a la resolución del problema.\nAsí pues, la manera en la que ahora procederemos será ciertamente similar a la seguida en una entrada anterior. Para empezar, a simple vista, podemos apreciar rápidamente que la igualdad se satisface de forma trivial para $n=1$, puesto que\n$$ 1 = \\sum_{k=1}^{1}{k^2} = \\dfrac{1\\cdot2\\cdot3}{6} = 1. $$\nActo seguido, asumimos verdadera la identidad para un cierto $n\\in\\mathbb{N}$, con $n\\geq 1$, es decir, que efectivamente se verifica que\n$$ \\sum_{k=1}^{n}{k^2} = \\dfrac{n(n+1)(2n+1)}{6}, $$\ny estudiamos si se satisface asimismo para $n+1$. Así pues, ahora comprobaremos si se cumple la igualdad\n$$ \\sum_{k=1}^{n+1}{k^2} = \\dfrac{(n+1)(n+2)(2n+3)}{6}. $$\nPara ello, apliquemos la hipótesis de inducción y llevemos a cabo algunas operaciones algebraicas elementales, de manera que\n$$ \\begin{aligned} \\sum_{k=1}^{n+1}{k^2} \u0026amp;= (n+1)^2 + \\sum_{k=1}^{n}{k^2}\\\n\u0026amp; = (n+1)^2 + \\dfrac{n(n+1)(2n+1)}{6}\\\n\u0026amp; = \\dfrac{6(n+1)^2 + n(n+1)(2n+1)}{6}\\\n\u0026amp; = \\dfrac{(n+1)(6(n+1) + n(2n+1))}{6}\\\n\u0026amp; = \\dfrac{(n+1)(2n^2+7n+6)}{6}\\\n\u0026amp; = \\dfrac{(n+1)(n+2)(2n+3)}{6}, \\end{aligned} $$\ny, por tanto, la identidad se verifica para $n+1$. El principio de inducción matemática nos permite concluir que es cierta para cada $n\\in\\mathbb{N}$.\n Teorema 1.1 (Principio de inducción matemática): Sea $S$ un conjunto de enteros positivos que tienen las dos propiedades siguientes:\n El número 1 pertenece al conjunto $S$. Si un entero $k$ pertenece a $S$, también $k+1$ pertenece a S.  Entonces todo entero positivo pertenece al conjunto $S$.\n ","date":1536033579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"3d680fab7467543e958e2fac74ebb653","permalink":"https://imalexissaez.github.io/2018/09/04/sumando-cuadrados/","publishdate":"2018-09-04T05:59:39+02:00","relpermalink":"/2018/09/04/sumando-cuadrados/","section":"post","summary":"Problema 5: seguimos reforzando el Principio de inducción matemática.","tags":["Inducción","Problemas"],"title":"Sumando cuadrados","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"A estas alturas de la película, seguramente con algún que otro artículo redactado y revisado localmente de manera concienzuda, no nos queda más remedio que ocuparnos de un asunto un tanto tedioso: el alojamiento de nuestro sitio web en Internet.\nPara tal empresa he optado por GitHub, que nos permite alojar páginas web estáticas de manera gratuita (¡y sin publicidad!). Desgraciadamente, el proceso dista de ser intuitivo, por lo que examinaremos todos y cada uno de los pasos de la guía oficial con sumo detalle.\nPara empezar, existe una serie de requisitos que hemos de cumplir para subir nuestro sitio web a GitHub y son:\n Tener instalado en nuestro equipo una versión de Git superior a la 2.8. Disponer de una cuenta de usuario en GitHub. Contar con una página web lista para ser publicada en Internet.  Por lo que respecta a los dos primeros puntos del listado anterior, si estamos siguiendo el Proyecto Metablog desde sus orígenes, no supondrán problema alguno, pues fueron abordados en la primera entrada de la serie. En cuanto al tercer punto, con todo el trabajo que llevamos acumulado hasta el momento, es más que posible que entre nuestras manos tengamos ya un esbozo de sitio web que merezca la pena mostrar al resto del mundo.\nUna vez comprobado que satisfacemos los requisitos del procedimiento, el primer paso a realizar consiste en crear dos nuevos repositorios en nuestra cuenta de GitHub. Para ello, acudimos a la página de nuestro perfil en GitHub y hacemos clic en el símbolo + situado en la parte derecha del menú superior, para, a continuación, seleccionar la opción New repositoy.\n\r\rCreación de un nuevo repositorio en GitHub.\r\r\rEl primer repositorio que crearemos estará dedicado a almacenar el código fuente de nuestro sitio web y, en un alarde de infinita originalidad, lo denominaremos sitio-web, tal y como figura en la siguiente imagen. Cuando hayamos rellenado el campo Repository name haremos clic en el botón Create repository.\n\r\rElección del nombre del repositorio.\r\r\rA continuación, de las tres opciones que nos ofrece la página que aparece ante nosotros, vamos a escoger la segunda, ya que cuando en esta entrada generamos nuestro primer sitio web, a la vez iniciamos un repositorio Git. Aquella acción, que en su momento podía parecer un tanto extraña, queda ahora totalmente justificada.\nAsí pues, abrimos la terminal del sistema, nos desplazamos hasta el directorio raíz donde hayamos decidido almacenar localmente nuestro sitio web y tecleamos:\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/sitio-web.git\r En mi caso, en lugar de \u0026lt;USERNAME\u0026gt;, aparece directamente ImAlexisSaez. Cada uno de nosotros tendrá definida esa parte del comando de manera diferente, por lo que recomiendo encarecidamente copiar la instrucción de la página de GitHub en lugar de la que aparece arriba.\nActo seguido, escribimos en la terminal:\ngit push -u origin master\r De esta manera, transcurridos unos segundos, tendremos disponible en GitHub una copia del código fuente que permite generar nuestra página web estática.\nA continuación, volvemos a GitHub y creamos un nuevo repositorio. Este último tendrá un nombre especial que será, además, la dirección de acceso a nuestro sitio web. Hemos de combinar nuestra cuenta de usuario en GitHub con la extensión .github.io. Por ejemplo, en mi caso queda ImAlexisSaez.github.io y así es como rellené en su momento el campo Repository name. Una vez escrito, simplemente tenemos que hacer clic en el botón Create repository.\nVolvemos a la terminal del sistema y tecleamos hugo server, para poder dar así una última revisión local a nuestro sitio web, utilizando la dirección ``http://localhost:1313, y comprobar que todo está en perfecto estado. Cuando estemos satisfechos, acudimos de nuevo a la terminal del sistema y cerramos el servidor local, empleando para ello la combinación de teclas Ctrl + c`.\nActo seguido, escribimos:\nrm -rf public\r Este comando borra por completo la carpeta public, que se encuentra en el directorio donde tenemos almacenado localmente nuestro sitio web. Dicha carpeta se genera automáticamente cada vez que tecleamos hugo server en la terminal del sistema, y contiene la versión final de nuestra página web.\nEl siguiente paso, precisamente, es crear un submódulo de manera que la carpeta public apunte a otra dirección de GitHub. Para ello, desde la terminal del sistema, tecleamos\ngit submodule add -b master git@github.com:\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io.git public\r donde sustituiremos \u0026lt;USERNAME\u0026gt; por el nombre de nuestra cuenta de usuario en GitHub (por ejemplo, ImAlexisSaez en mi caso).\n¡Ya casi tenemos todo a punto! Únicamente hemos de abrir Sublime Text 3 y en un archivo, que guardaremos como deploy.sh en el directorio raíz donde hayamos almacenado localmente nuestro sitio web, copiamos el siguiente bloque de código:\n#!/bin/bash\recho -e \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026quot;\r# Build the project.\rhugo # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;`\r# Go To Public folder\rcd public\r# Add changes to git.\rgit add .\r# Commit changes.\rmsg=\u0026quot;rebuilding site `date`\u0026quot;\rif [ $# -eq 1 ]\rthen msg=\u0026quot;$1\u0026quot;\rfi\rgit commit -m \u0026quot;$msg\u0026quot;\r# Push source and build repos.\rgit push origin master\r# Come Back up to the Project Root\rcd ..\r El anterior bloque de código se encarga, de manera automática, del proceso de subida de nuestro sitio web a GitHub. Para utilizarlo, desde la terminal del sistema, nos situaremos en el directorio raíz donde hayamos decidido almacenar nuestro sitio web y teclearemos\n./deploy.sh \u0026quot;Mensaje que resuma los cambios\u0026quot;\r En mi caso, no me suelo esforzar mucho en declarar mensajes óptimamente descriptivos y, por ejemplo, cuando suba esta entrada el comando será del estilo ./deploy.sh \u0026quot;Añade entrada 20180901\u0026quot;. Los mensajes asociados al repositorio donde guardo el código fuente sí que intento que sean más expresivos y reflejen adecuadamente los cambios de las diferentes versiones.\nCon esto, damos por finalizado el proceso y nuestro sitio web será ahora accesible para todo el mundo a través de la dirección web que proporciona el segundo repositorio que hemos creado (en mi caso https://imalexissaez.github.io/).\nEn la siguiente entrada del Proyecto Metablog posiblemente empecemos a realizar cambios en la hoja de estilos CSS y personalizar todavía más el tema Beautiful Hugo.\n","date":1535774379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564005601,"objectID":"17b23e7adb3a7c822d3c98ee391d9ae6","permalink":"https://imalexissaez.github.io/2018/09/01/alojando-nuestro-sitio-web-en-github/","publishdate":"2018-09-01T05:59:39+02:00","relpermalink":"/2018/09/01/alojando-nuestro-sitio-web-en-github/","section":"post","summary":"Lección 8: analizamos cómo utilizar GitHub para publicar nuestra página web.","tags":["Hugo","GitHub"],"title":"Alojando nuestro sitio web en GitHub","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Tras haber recorrido, en el Proyecto Metablog, las seis estaciones del vía crucis asociado al calvario de la instalación de Hugo y la personalización del tema Beautiful Hugo, llega el momento más anhelado por todos: generar contenido para el sitio web.\nA continuación, examinaremos, con sumo detalle, todo el proceso de elaboración y revisión local de artículos para nuestra página web. Para empezar, me gustaría comentar que, en el apartado de la guía oficial asociado a este asunto, se utiliza la combinación de la terminal del sistema y el comando hugo new para dar a luz, de manera automática, una nueva entrada en el sitio web.\nNo obstante, como no podía ser de otra manera y en un acto de la más absurda rebeldía, prefiero llevar a cabo este proceso de forma manual (qué obsesión con el control tengo, ¿verdad?). Si nos fijamos, desde el explorador de archivos de Windows, en la estructura de nuestra página web (heredada del sitio de ejemplo del tema Beautiful Hugo), en el interior del directorio raíz existe una carpeta denominada \\content\\, dentro de la cual residen anidadas otras dos: \\page\\ y \\post\\.\nPara respetar este esquema, he decidido ubicar todos los artículos del sitio web que se organicen por alguna taxonomía (recordemos que, en esta entrada, incluso añadimos alguna adicional a las que vienen dadas por defecto con Hugo) en la carpeta \\post\\, mientras que el resto irá al directorio \\page\\.\nSiguiendo esta lógica, como seguramente la primera entrada que vayamos a publicar en nuestro sitio web será una especie de presentación en su blog, generaremos, utilizando Sublime Text 3, un nuevo fichero en la carpeta \\post\\. Este poseerá la extensión .md, pues vamos a escribir todos y cada uno de nuestros artículos utilizando el lenguaje de marcado Markdown. Para aquellas personas que escuchan por primera vez hablar de él, recomiendo encarecidamente que dediquen unos minutos a completar este tutorial sobre el mismo.\nLa estructura de todo artículo será la que figura acto seguido:\n---\rMetadatos del artículo.\r---\rPárrafo (o párrafos) de introducción al artículo.\rCuerpo del artículo.\r Al comienzo de cada entrada ubicaremos, delimitada por los caracteres ---, cierta información relevante (metadatos) acerca de la misma, que suministraremos en la forma de pares variable: valor. Las variables disponibles a nuestro alcance vendrán determinadas por el tema que hayamos escogido finalmente para nuestro sitio web, aunque sí que es cierto que algunas de ellas son comunes a la mayoría de los temas (como, por ejemplo, title, date o draft).\nTeniendo en cuenta que nuestra página web hace uso del tema Beautiful Hugo, y considerando la definición de taxonomías y la personalización del permalink que llevamos a cabo en esta entrada, utilizo siempre el mismo esquema para la cabecera de mis artículos:\n---\rtitle:\rslug:\rdate:\rdraft:\rbigimg:\rapartados:\retiquetas:\rproyectos:\r---\r En el caso particular de esta entrada, la anterior cabecera ha quedado como sigue:\n---\rtitle: \u0026quot;Publicando la primera entrada en nuestro sitio web\u0026quot;\rslug: \u0026quot;publicando-la-primera-entrada-en-nuestro-sitio-web\u0026quot;\rdate: \u0026quot;2018-08-30T05:59:39+02:00\u0026quot;\rdraft: false\rbigimg: [{src: \u0026quot;img/blog/20180830-cabecera.jpg\u0026quot;}]\rapartados: [\u0026quot;Blog\u0026quot;]\retiquetas: [\u0026quot;Hugo\u0026quot;]\rproyectos: [\u0026quot;MetaBlog\u0026quot;]\r---\r Veamos a continuación el cometido de cada una de las variables que figuran en la cabecera:\n title: contiene el título del artículo. A diferencia de otros temas, por desgracia Beautiful Hugo no admite la posibilidad de emplear Markdown o LaTeX en ciertas partes del título, hecho que debemos tener en consideración. slug: tal y como comentamos en esta entrada, vamos a configurar manualmente el permalink de cada entrada. Una de sus partes será, precisamente, la asociada a esta variable. Para generar su valor, sustituyo a mano los espacios por guiones y suprimo cualquier acento, eñe o carácter extraño a los ojos del alfabeto inglés que pudiese figurar en el título del artículo. En particular, para esta entrada, el permalink será /2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/, es decir, la fecha de publicación junto al valor que hemos asignado a la variable slug. date: fecha y hora de publicación del artículo. Me gustaría comentar aquí que nada nos impide generar contenido para fechas futuras, aunque cuando escribamos en la terminal del sistema hugo server, no tendremos acceso a su revisión. Para solventar esta situación, tenemos que añadir la etiqueta -F, es decir, teclear hugo server -F. draft: variable que nos permite indicar si la entrada en concreto tiene carácter de borrador (utilizando el valor true) o si ya está lista para su publicación en nuestro sitio web (empleando el valor false). Para revisar localmente una página web que contenga artículos en forma de borrador, hemos de escribir en la terminal del sistema hugo server -D. bigimg: esta variable nos permite insertar la ruta hacia una imagen de cabecera para nuestros artículos. En esta entrada está explicado en detalle el funcionamiento de esta característica particular del tema Beautiful Hugo. apartados: primera taxonomía que utilizaremos para agrupar contenido según la categoría a la que pertenezca el artículo. No es más que la localización al español de la habitual categories. etiquetas: segunda taxonomía que utilizaremos para agrupar contenido según las palabras clave que caractericen a la entrada. No es más que la localización al español de la habitual tags. proyectos: tercera taxonomía (generalmente opcional) que nos permitirá agrupar contenido que pertenezca a distintos apartados y posea diferentes etiquetas.  Tras declarar la cabecera, redactaremos un párrafo (o varios) de introducción al artículo, tras los cuales escribiremos la instrucción more, precedida de los símbolos \u0026lt;!-- y seguida de --\u0026gt;. Dichos párrafos, además de ser aquellos que den comienzo a nuestra entrada, serán los que figuren en las páginas de listado de nuestro sitio web. ¿A qué me refiero con las páginas de listado? Serían, por ejemplo, la principal de acceso al sitio web y todas aquellas que ofrecen un índice que contiene los artículos asociados a una taxonomía en particular.\nTras dicha instrucción, finalmente, ya solo nos restará explayarnos tanto como deseemos en el cuerpo de la entrada. The sky is the limit!\nEn el próximo artículo del Proyecto Metablog estudiaremos cómo utilizar GitHub para alojar nuestra página web en Internet.\n","date":1535601579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"1a1d778780510c53a206b3d3c7e821e2","permalink":"https://imalexissaez.github.io/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/","publishdate":"2018-08-30T05:59:39+02:00","relpermalink":"/2018/08/30/publicando-la-primera-entrada-en-nuestro-sitio-web/","section":"post","summary":"Lección 7: generamos una entrada para el blog y estudiamos cómo configurar sus metadatos.","tags":["Hugo","Beautiful Hugo"],"title":"Publicando la primera entrada en nuestro sitio web","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Opino que una buena manera de encarar unas oposiciones pasa por revisar concienzudamente los criterios de evaluación adoptados en anteriores convocatorias. Echemos un vistazo en este artículo a los seguidos en la última.\nEl primer problema que encontramos reside en el acceso a la información de interés. Si acudimos a la sección de oposiciones de la página web de la Conselleria d\u0026rsquo; Educació, Investigació, Cultura i Esport de la Generalitat Valenciana, a la hora de escribir estas líneas, tenemos acceso los apartados que figuran en la siguiente imagen:\n\r\rSección de oposiciones de la página web de la Conselleria.\r\r\rComo podemos comprobar rápidamente, no aparece sección alguna dedicada al Cuerpo de Profesores de Enseñanza Secundaria, que sería aquella de nuestro interés. No obstante, el portal sí conserva una copia de los criterios de evaluación que se adoptaron para las últimas oposiciones en la especialidad de matemáticas, aunque he sido incapaz de acceder a ellos a través de los diferentes menús que ofrece el sitio web.\nEl documento se titula \u0026ldquo;Criterios de evaluación del procedimiento selectivo de ingreso en el cuerpo de profesores de enseñanza de secundaria, especialidad de matemáticas\u0026rdquo; y entonces, conociendo este dato, basta una búsqueda rápida en Google para encontrar el enlace que nos permite su consulta.\nEn la segunda página de este recurso encontramos los elementos que se valorarán asociados con la redacción del tema y son:\n Estructura del tema.  Presenta un índice. Justifica la importancia del tema. Hace una introducción del mismo. Las distintas partes están compensadas en extensión según su importancia. Elabora una conclusión acorde con el planteamiento del tema.   Contenidos específicos.  Adapta los contenidos al tema y desarrolla todos los apartados expresados en el título del tema. Secuencia de manera lógica y clara sus apartados. Argumenta los contenidos. Profundiza en los mismos, siendo la información de cada parte lo más completa y exhaustiva posible. No existen errores de contenido o concepto. Relaciona el tema elegido con otros temas.   Expresión.  Muestra fluidez en la redacción. Hace un uso adecuado del lenguaje, con una correcta ortografía y una buena construcción sintáctica. Emplea terminología científica amplia y adecuada al tema tratado.   Presentación.  Presenta un escrito con limpieza y claridad. Deberá limitarse a la lectura de lo escrito.   Bibliografía / documentación.  Fundamenta los contenidos con autores o bibliografías. Las fuentes y/o bases de datos utilizados están actualizadas.    El anterior listado nos puede, e incluso me atrevería a decir que nos debe, orientar de cara a la elaboración de nuestros temas, o bien puede ser un factor que nos decante por uno u otro temario de cara a su adquisición y futura revisión personal.\nPor otro lado, echo en falta una rúbrica detallada, con sus indicadores de logro y las correspondientes ponderaciones para cada una de las variables arriba recogidas. Sinceramente, en algunos puntos no termina de quedarme claro cómo se procederá a la evaluación.\nCambiando de tercio, por lo que respecta a la resolución de problemas, la información todavía es más escueta, apenas cinco líneas relegadas al final de la tercera página del documento:\n Resolución de problemas.  Desarrollo y resultado correcto en problemas y cuestiones. Explica el método de resolución. Rigurosidad matemática. Demuestra originalidad y destreza en la solución de las cuestiones.    Al igual que antes, aunque tenemos acceso a aquello que se valorará, en algunos puntos me es difícil imaginar cómo se procederá a su evaluación. La originalidad, destreza y rigurosidad me parecen atributos complicados de cuantificar y fuertemente sujetos a la subjetividad de quien examina.\nEn cuanto a la defensa de la programación docente, me atrevería a decir que no encontramos demasiadas sorpresas aquí y nuestra labor se limita a exponer, uno por uno, los apartados que en la convocatoria exigen que contenga. Así pues, valorarán:\n Estructura de la programación.  Contextualiza y justifica la programación en el marco legal y la realidad escolar. Se adapta al nivel y/o alumnado elegido. Está claramente estructurada y hace mención a las unidades didácticas programadas.   Elementos de la programación.  Desarrolla y adapta los elementos básicos del currículum: objetivos, contenidos y criterios de evaluación. Se expondrán con claridad y serán adecuados al nivel elegido. Hace referencia a las competencias básicas si la programación es de ESO. Realiza una buena secuenciación y temporalización de los contenidos. Desarrolla una metodología adecuada: estrategias y principios metodológicos claros y concisos. Se expresarán y justificarán los criterios y procedimientos de evaluación y calificación así como los mecanismos de refuerzo y recuperación. Se tendrá en cuenta la utilización en la programación de otros aspectos educativos como: el uso de las TIC, fomento de la lectura, relación con las familias\u0026hellip; Se marcarán las medidas específicas de atención a la diversidad. Mostrará originalidad e individualidad. Usa mecanismos de autoevaluación de la actividad docente.   Expresión y exposición oral.  Muestra seguridad y coherencia en la exposición. Hace un uso correcto del lenguaje, siendo fluido, rico y variado. Capta la atención con un discurso ameno. Deberá ser equilibrada en los tiempos. La presentación consistirá en la defensa de la misma y no una mera repetición de lo escrito.   Bibliografía. Documentación.  Toma como referencia la normativa vigente. Hace alusión a autores y bibliografía.    Especial atención merece el tercer punto, que no deja apenas margen para la improvisación. Esta parte requiere una preparación exhaustiva, que maneje los tiempos de manera adecuada y nos proporcione seguridad vía repetición ad infinitum de la defensa.\nFinalmente, por lo que respecta a la defensa de la unidad didáctica, se valorara:\n Estructura de la unidad didáctica.  Se ajusta a los requisitos de la convocatoria. Contextualiza y justifica la unidad en el marco legal y en la realidad escolar. Se adapta al nivel y/o alumnado elegido. Desarrolla y adapta los elementos básicos de la unidad didáctica. Tiene en cuenta las necesidades específicas de apoyo educativo del alumnado.   Elementos de la unidad didáctica.  Competencias básicas –sólo en ESO. Objetivos y contenidos de aprendizaje. Estarán claramente formulados, con coherencia y serán adecuados al nivel y al momento concreto del curso escolar elegido. Actividades de enseñanza y aprendizaje. Serán motivadoras, variadas, graduadas en dificultad y accesibles a la mayoría del alumnado. Procedimientos y criterios de evaluación. Flexibilidad y adaptación a la diversidad del alumnado. Mecanismos de recuperación. Atención a la diversidad. Utilización de nuevas tecnologías.   Expresión y exposición oral.  Muestra seguridad y coherencia en la exposición. Hace un uso correcto del lenguaje, siendo fluido, rico y variado. Capta la atención con un discurso ameno. Utiliza material auxiliar sin contenido curricular y recursos didácticos (pizarra, ilustraciones, diagramas, mapas, esquemas, multimedia, TIC.)   Bibliografía. Documentación.  Toma como referencia la normativa vigente. Hace alusión a autores y bibliografía.    El documento concluye detallando la fase de concurso, de escaso interés para la temática de este artículo.\nAsí pues, sabiendo qué se espera de nosotros, podemos organizar el desarrollo de cada una de las partes de manera adecuada. Si bien es cierto que estos criterios de evaluación corresponden a los de la última convocatoria, no sería descabellado suponer que la mayoría de ellos se extrapolarán a la siguiente. En cualquier caso, podemos echar un rápido vistazo a los asociados a la convocatoria de este año para el Cuerpo de Maestros y comprobar que aquellos definidos para Educación Primaria no distan sobremanera de los listados arriba.\n","date":1535428779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"d3377cf97a3f098cf464b3d686cc825f","permalink":"https://imalexissaez.github.io/2018/08/28/criterios-de-evaluacion-de-oposicion-para-la-especialidad-de-matematicas/","publishdate":"2018-08-28T05:59:39+02:00","relpermalink":"/2018/08/28/criterios-de-evaluacion-de-oposicion-para-la-especialidad-de-matematicas/","section":"post","summary":"Opino que una buena manera de encarar unas oposiciones pasa por revisar concienzudamente los criterios de evaluación adoptados en anteriores convocatorias. Echemos un vistazo en este artículo a los seguidos en la última.","tags":["Legislación"],"title":"Criterios de evaluación de oposición para la especialidad de matemáticas","type":"post"},{"authors":["Alexis Sáez"],"categories":["Estadística"],"content":"En mi reciente vuelta a Twitter, he empezado a seguir al profesor responsable del excelente MOOC \u0026ldquo;Improving your statistical inferences\u0026rdquo; (enlace), Daniël Lakens (@lakens), que comparte más que interesantes perlas relacionadas con el campo de la estadística.\nHace unos días anunciaba que había actualizado un script para R cuyo nombre no tiene desperdicio: \u0026ldquo;Perfect t-test\u0026quot;. Las principales referencias que tenemos que consultar son:\n The perfect t-test. Repositorio en GitHub con el código asociado al anterior artículo.  Como no podía ser de otra manera, un recurso así despierta enormemente tanto mi curiosidad, como las ganas de echar un rato explorando las posibilidades que ofrece.\nAhora bien, ¿de qué trata todo el asunto? Estamos ante un documento escrito con R Markdown cuyo objetivo es automatizar el proceso de comparación de medias para dos muestras, tanto independientes como dependientes (cada caso tiene su archivo asociado). No obstante, cuando la mayoría de programas informáticos orientados al análisis de datos ya incorporan este tipo de herramienta, ¿qué justifica la existencia de este recurso?\nSegún el autor, no todos los investigadores siguen las recomendaciones que los estadísticos indican (o bien no están al día de las mismas), e incluso, hecho que personalmente considero más grave, los propios programas informáticos ignoran dichas recomendaciones en ocasiones.\nDentro del \u0026ldquo;peligro\u0026rdquo; que supone emplear algoritmos que automatizan análisis de datos, que pueden provocar que llevemos a cabo todo tipo de acciones sin saber muy bien las razones para ello, dado que los vamos a utilizar igualmente, siempre será más recomendable que escojamos aquellos que mejor diseñados estén, ¿verdad?\nVeamos qué nos ofrece el código de Daniël Lakens. Una vez digerido el README del repositorio, e instalado los paquetes necesarios (así como actualizado JAGS, que aún estaba utilizando la versión 3), sólo tengo que encontrar algún conjunto de datos que me permita llevar a cabo una prueba t.\nHe escogido el conjunto de datos hsb2 (incluido en el paquete openintro), que está formado por los registros de una encuesta realizada a 200 estudiantes de secundaria. Vamos a investigar una simple cuestión, ¿existen diferencias en las puntuaciones, asociadas a matemáticas, entre chicos y chicas? Para resolver el interrogante, lo primero que debemos hacer es generar un archivo de texto que contenga los datos de interés, siguiendo el formato que se nos especifica en el archivo perfect_independent_t-test.Rmd.\n# Carga la librería que contiene el conjunto de datos hsb2\rlibrary(openintro)\r# Carga el conjunto de datos hsb2\rdata(hsb2)\r# Documentación del conjunto de datos\r?hsb2\r# Exploración básica del conjunto de datos\rstr(hsb2)\r# Crea el archivo que se usará con \u0026quot;perfect_independent_t-test.Rmd\u0026quot;\rwrite.table(hsb2[c(\u0026quot;id\u0026quot;, \u0026quot;gender\u0026quot;, \u0026quot;math\u0026quot;)],\rfile = \u0026quot;datos_hsb2_math.txt\u0026quot;,\rrow.names = FALSE,\rsep = \u0026quot;,\u0026quot;)\r Nota: en lugar de crear un archivo de texto cuyas columnas estuvieran delimitadas por tabuladores, escogí utilizar comas. Eso luego implica realizar modificaciones menores en el fichero de la prueba t.\nAhora, con datos_hsb2_math.txt ubicado en el mismo directorio que perfect_independent_t-test.Rmd, únicamente tenemos que actualizar la ruta que aparece en la línea 62 para la variable alldata (y, en mi caso, añadir sep = \u0026quot;,\u0026quot;), así como correctamente asignar las variables xlabel, ylabel, factorlabel, measurelabel, xlabelstring e ylabelstring siguiendo las instrucciones. El resto de variables, para una primera aproximación a esta herramienta, podemos dejarlas con los valores que han recibido por defecto.\nEn mi caso, he cambiado el formato del documento de salida de Word a PDF, y, tras pulsar el botón correspondiente, he acabado con un documento ¡de 15 páginas para una simple prueba t! A la próxima persona que escuche quejarse de que SPSS devuelve una miríada de resultados voy a invitarle amablemente a que utilice este script.\nSin embargo, una vez superado el susto inicial, gran parte del documento son explicaciones generales que justifican el modo de proceder seguido. La primera figura que encontramos es el siguiente boxplot (creo que en español se llama diagrama de caja y bigotes, pero no estoy completamente seguro), con el objeto de identificar la existencia de posibles valores atípicos:\n\r\rBoxplot.\r\r\rA continuación, se realizan cuatro contrastes de hipótesis para comprobar si se verifica el supuesto de normalidad para las puntuaciones de ambos grupos (su violación tiene efectos, por ejemplo, sobre el error de tipo I):\n\r\rResultados de los contrastes de hipótesis.\r\r\rEn uno de los cuatros contrastes, los datos con los que estamos trabajando aportan evidencia suficiente para sospechar de la veracidad de la hipótesis nula (\u0026ldquo;las puntuaciones siguen una distribución normal\u0026rdquo;), por lo que tendríamos que preferiblemente recurrir a métodos no paramétricos o estadísticos robustos. No obstante, en el propio documento nos avisan de que con muestras grandes (y podemos considerar que la dada lo es) este tipo de situaciones pueden presentarse.\nPodemos examinar la distribución de puntuaciones, para cada uno de los grupos, de manera gráfica, a partir de las siguientes figuras, y juzgar así cómo se desvían nuestros datos (línea negra) de la distribución normal asociada (línea discontinua roja):\n\r\rDistribución de las puntuaciones de los chicos.\r\r\r\r\rDistribución de las puntuaciones de las chicas.\r\r\rPor si las anteriores figuras todavía no resolvieran el interrogante, tenemos a nuestra disposición los siguientes gráficos Q-Q:\n\r\rGráfico Q-Q.\r\r\rNo resulta por tanto descabellado aceptar que se verifica el supuesto de normalidad para los datos dados. Pasemos ahora a estudiar la hipótesis de igualdad de varianzas entre los grupos considerados. Para ello, utilizaremos la prueba de Levene, que en nuestro caso particular concluye:\n Levene’s test for equality of variances (p = 0.46) indicates that the assumption that variances are equal is not rejected.\n A continuación encontramos la sección de resultados donde, siguiendo el estilo de publicación de las revistas científicas, se recogen las conclusiones para la prueba t que hemos llevado a cabo. Aquí, en función de la filosofía con la que solamos trabajar y de si se verifican las condiciones asociadas a esta prueba, tendremos que escoger entre la sección dedicada a estadísticos frecuentistas, bayesianos o robustos. Por ejemplo, para la primera opción encontraríamos:\n The mean math of participants in the male condition (M = 52.95, SD = 9.66, n = 91) was greater than the mean of participants in the female condition (M = 52.39, SD = 9.15, n = 109). The difference between the two measurements (M = 0.55, 95% CI = [-2.09;3.19]) was analyzed with Welch’s t-test, t(187.58) = 0.41, p = 0.682, Hedges’ g = 0.06, 95% CI [-0.22;0.34]. This can be considered a tiny effect. The observed data is not surprising under the assumption that the null-hypothesis is true. The Common Language effect size (McGraw \u0026amp; Wong, 1992) indicates that the likelihood that the math of a random person in the male condition is greater than the math of a random person in the female condition is 52%.\n Tenemos a nuestra disposición la media, la desviación estándar y el tamaño muestral para cada uno de los grupos considerados. A continuación encontramos el valor del estadístico asociado a la prueba t de Welch, así como su correspondiente p-valor. Como indicador del tamaño del efecto encontramos la g de Hedges. Sin embargo, al margen del aluvión de valores con el que ya seríamos capaces de dar respuesta al interrogante que ha motivado este artículo (¿seríamos de verdad capaces?), me ha encantado la parte final de este párrafo, donde nos transmiten con palabras llanas qué conclusiones deberíamos extraer.\nEl documento añade los gráficos que mostraré a continuación, así como las referencias para las justificaciones vertidas a lo largo de él, el propio conjunto de datos y cierta información técnica de la sesión de trabajo en R. Es un estupendo recurso para tener siempre disponible a mano, ¿verdad?\n\r\rViolin plot.\r\r\r\r\rGráfico de dispersión.\r\r\r\r\rIntervalos de confianza.\r\r\r","date":1535169579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"78612d27ca424e6268012c541dcb01fd","permalink":"https://imalexissaez.github.io/2018/08/25/anatomia-de-una-prueba-t-perfecta/","publishdate":"2018-08-25T05:59:39+02:00","relpermalink":"/2018/08/25/anatomia-de-una-prueba-t-perfecta/","section":"post","summary":"En mi reciente vuelta a Twitter, he empezado a seguir al profesor responsable del excelente MOOC 'Improving your statistical inferences', Daniël Lakens, que comparte más que interesantes perlas relacionadas con el campo de la estadística.","tags":["Prueba T","R"],"title":"Anatomía de una prueba t perfecta","type":"post"},{"authors":["Alexis Sáez"],"categories":["Estadística"],"content":"Cuanto menos, es ciertamente llamativo, así como invita con fuerza a su lectura, el título de uno de los artículos de John P. A. Ioannidis: \u0026ldquo;Why Most Published Research Findings Are False\u0026quot;.\nEstaba echando un vistazo a los contenidos de la primera semana del MOOC \u0026ldquo;Improving your statistical inferences\u0026rdquo; (enlace), disponible en la plataforma Coursera (curso que, por cierto, me ha dejado muy buenas sensaciones), y en uno de sus vídeos recomiendan la lectura del mencionado artículo.\nPor fortuna, es un texto de acceso abierto que podemos encontrar en este enlace. Tras la introducción técnica, la sección de corolarios no tiene desperdicio alguno. En ella se afirma que es menos probable que los resultados de la investigación en una disciplina científica sean verdaderos:\n Cuanto menor sea el tamaño muestral. Cuanto menor sea el tamaño del efecto. Cuanto mayor sea el número de relaciones y menor sea el conjunto de las que están probadas. Cuanto mayor sean la flexibilidad en el diseño, las definiciones, los resultados y los modos de análisis. Cuanto mayor sean la financiación y otros intereses y prejuicios. Cuanto mayor sea el número de equipos científicos involucrados.  Además, aunque encontramos los anteriores factores expuestos de manera separada, a menudo es cierto que unos poseen influencia sobre otros y pueden presentarse de forma simultánea. El autor finaliza el artículo exponiendo algunas directrices para mejorar la situación planteada.\nMerece la pena dedicar un poco de nuestro tiempo a la lectura y estudio de este texto.\n","date":1534996779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"db72b4b01d2a7416d5abb58ab216aca3","permalink":"https://imalexissaez.github.io/2018/08/23/porque-la-mayoria-de-los-resultados-en-investigacion-son-falsos/","publishdate":"2018-08-23T05:59:39+02:00","relpermalink":"/2018/08/23/porque-la-mayoria-de-los-resultados-en-investigacion-son-falsos/","section":"post","summary":"Cuanto menos, es ciertamente llamativo, así como invita con fuerza a su lectura, el título de uno de los artículos de John P. A. Ioannidis: 'Why Most Published Research Findings Are False'.","tags":["Papers"],"title":"Porqué la mayoría de los resultados en investigación son falsos","type":"post"},{"authors":["Alexis Sáez"],"categories":["Estadística"],"content":"Por recomendación, el otro día puse las manos sobre el artículo de Jacob Cohen: \u0026ldquo;Things I Have Learned (So Far)\u0026quot;, publicado originalmente en diciembre de 1990 en la revista American Psychologist. Veamos qué impresiones me ha dejado su lectura.\nEs posible que, por su antigüedad, alguien pueda llegar a pensar que no merece demasiado la pena dedicarle tiempo a este texto, ¡nada más lejos de la realidad!\nEl acceso al documento original (enlace), desgraciadamente, implica un desembolso de aproximadamente doce dólares. No obstante, a través de una búsqueda rápida en Google es fácil (y, posiblemente, ilegal) dar con él e, incluso, con una traducción al español, publicada en el año 1992 en la revista Anales de Psicología. La pregunta natural aquí es, ¿por qué un artículo publicado hace más de dos décadas no ha sido liberado completamente?\nAlgunas de las claves que comparte Jacob Cohen y me han parecido interesantes son:\n En la medida de nuestras posibilidades, debemos evitar el uso inconsciente de las famosas \u0026ldquo;reglas de oro\u0026quot;, que suelen instaurar rígidos criterios universales. Por ejemplo, en lugar de calificar una muestra como pequeña porque su tamaño es menor que treinta, conviene que llevemos a cabo un análisis del poder estadístico del estudio, para decidir si el tamaño muestral es el idóneo para los objetivos que perseguimos. \u0026ldquo;Menos es más\u0026rdquo; (salvo cuando hablamos de tamaños muestrales). No es demasiado recomendable que nuestros proyectos se caractericen por tener un número desproporcionado de variables dependientes, o independientes, o de ambos tipos. En esos casos, la cantidad de hipótesis a contrastar crece desmesuradamente, y deberíamos estar muy atentos al control del error de tipo I. En relación con lo anterior, es aconsejable que prestemos atención también a la forma de presentar resultados. Los programas informáticos de hoy en día son capaces de arrojar cifras con un alto número de decimales, pero debemos detenernos a pensar hasta qué punto es útil reportarlos todos. \u0026ldquo;Simple es mejor\u0026quot;. Conviene que describamos gráficamente una variable antes que optar por hacerlo vía sus primeros momentos, así como que utilicemos un diagrama de puntos en lugar de escoger un indicador numérico para transmitir en qué medida están asociadas dos variables. Que podamos realizar, de manera sencilla, complejos análisis de datos utilizando programas informáticos, no implica que no sea necesario entender perfectamente qué estamos haciendo en cada momento del proceso. Conviene que nos detengamos a estudiar con detalle todo lo relacionado con la correcta interpretación del p-valor (\u0026quot;this result does not tell us about the truth of the null hypothesis, given the data […] What it tells us is the probability of the data, given the truth of the null hypothesis.\u0026quot;). Continuando con el punto anterior, no tenemos que utilizar el p-valor como sustituto de un indicador del tamaño del efecto, y es recomendable que reportemos un intervalo de confianza de este último (de hecho, debería ser el principal objetivo de cualquier investigación) en la sección de resultados, para que los hallazgos significativos queden correctamente contextualizados. Conviene, antes de llevar a cabo cualquier estudio, que planeemos con atención el tamaño del efecto que buscamos, el nivel de significación que vamos a asumir y el poder estadístico con el que queremos trabajar. A partir de ellos, obtendremos el tamaño muestral necesario y, en el caso de encontrarse éste fuera de nuestras posibilidades, procederemos a realizar ajustes en las anteriores cantidades.  Por otra parte, algunas de las citas que me han encantado del artículo son:\n \u0026ldquo;I have so heavily emphasized the desirability of working with few variables and large sample sizes that some of my students have spread the rumor that my idea of the perfect study is one with 10,000 cases and no variables. They go too far.\u0026rdquo;\n  \u0026ldquo;We sometimes learn more from what we see than from what we compute; sometimes what we learn from what we see is that we shouldn’t compute, at least not on those data as they stand.\u0026rdquo;\n  \u0026ldquo;The atmosphere that characterizes statistics as applied in the social and biomedical sciences is that of a secular religion (Salsburg, 1985), apparently of Judeo-Christian derivation, as it employs as its most powerful icon a six-pointed cross, often presented multiply for enhanced authority. I confess that I am an agnostic.\u0026rdquo;\n  \u0026ldquo;Despite widespread misconceptions to the contrary, the rejection of a given null hypothesis gives us no basis for estimating the probability that a replication of the research will again result in rejecting that null hypothesis.\u0026rdquo;\n  \u0026ldquo;consider the sanctified (and sanctifying) magic .05 level. […] Its arbitrary unreasonable tyranny has led to data fudging of varying degrees of subtlety from grossly altering data to dropping cases where there \u0026lsquo;must have been\u0026rsquo; errors.\u0026rdquo;\n  \u0026ldquo;I have learned and taught that the primary product of a research inquiry is one or more measures of effect size, not p values.\u0026rdquo;\n En resumen, una amena lectura aderezada de píldoras de sabiduría que recomendaría a cualquier persona interesada en esta disciplina.\n","date":1534823979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"56d0708661b365c96fea10c9e6c42a66","permalink":"https://imalexissaez.github.io/2018/08/21/aprendiendo-de-la-experiencia-de-jacob-cohen/","publishdate":"2018-08-21T05:59:39+02:00","relpermalink":"/2018/08/21/aprendiendo-de-la-experiencia-de-jacob-cohen/","section":"post","summary":"Por recomendación, el otro día puse las manos sobre el artículo de Jacob Cohen: 'Things I Have Learned (So Far)', publicado originalmente en diciembre de 1990 en la revista American Psychologist.","tags":["Papers"],"title":"Aprendiendo de la experiencia de Jacob Cohen","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Tras la buena experiencia vivida después de la sesión dedicada a machine learning, de la convención SciPy 2017, me he animado a seguir explorando la lista de reproducción del canal de Youtube asociado a la cuenta de Enthought.\nVarios títulos han captado poderosamente mi atención (a la hora de escribir estas líneas, la mencionada lista de reproducción sobrepasa los noventa vídeos), pero teniendo en cuenta que todo el ecosistema de SciPy se asienta sobre la librería NumPy, he terminado considerando que la elección más sensata era optar por \u0026ldquo;Introduction to Numerical Computing with NumPy\u0026rdquo;, que viene de la mano de Dillon Niederhut.\nEste artículo recoge las notas personales tomadas durante la visualización de dicho tutorial, al cual podemos acceder a través del siguiente enlace, y que posee asociado un repositorio en GitHub que, principalmente, conviene tener a mano para seguir algunos de los ejercicios planteados durante la sesión.\nAntes de empezar, me gustaría destacar que el material está enfocado a principiantes, por lo que el ritmo es bastante más sosegado que el llevado por aquel de machine learning que mencionaba en el primer párrafo. Además, me ha parecido ciertamente curiosa la manera de tratar a los participantes, intentando en todo momento que se sientan en un entorno de aprendizaje bastante confortable.\n1. ¿Por qué aprender a utilizar la librería NumPy? Qué mejor manera de empezar esta entrada que justificando la necesidad de aprender a utilizar la librería NumPy. Introducirse al manejo de un nuevo módulo (y no digamos ya dominarlo) es una tarea que normalmente requiere una buena inversión de horas de estudio y experimentación, y NumPy, por desgracia, no es la excepción que rompe la mencionada regla. Así pues, ¿por qué aprender a utilizar la librería NumPy?\nLa respuesta, grosso modo, vendría dada por el más que discutible rendimiento del lenguaje de programación Python a la hora de llevar a cabo cálculos numéricos. Ilustremos este hecho con un sencillo ejemplo: sumaremos los elementos de una lista que contendrá los primeros mil números enteros positivos (que construiremos con la función range()), midiendo el tiempo que requiere la mencionada operación a través del comando mágico %timeit.\ntest_list = list(range(1001))\r%timeit sum(test_list)\r 100000 loops, best of 3: 10.8 µs per loop  Ahora repitamos la misma operación empleando funciones de la librería NumPy. Para ello:\n importaremos el módulo siguiendo la convención establecida, es decir, escribiendo import numpy as np, creamos una réplica de la anterior lista (que, en breve, empezaremos a llamar array) utilizando la función arange(), y sumaremos sus elementos mediante la función sum().  import numpy as np\rtest_array = np.arange(1001)\r%timeit np.sum(test_array)\r The slowest run took 14.21 times longer than the fastest. This could mean that an intermediate result is being cached.\r100000 loops, best of 3: 5.02 µs per loop\r Hemos reducido a la mitad el tiempo que precisa el sistema para realizar el cálculo numérico requerido. No obstante, quizá no logre impactarnos el hecho de pasar de 11 a 5 microsegundos. Intentemos forzar un tanto el anterior ejemplo incrementando de manera significativa el número de elementos.\nn = 1000001\rtest_list = list(range(n)) # Python\rtest_array = np.arange(n) # NumPy\r %timeit sum(test_list)\r 10 loops, best of 3: 46.3 ms per loop\r %timeit np.sum(test_array)\r 1000 loops, best of 3: 748 µs per loop\r El resultado ahora sí que debería ser una buena justificación de cara a decidir si invertir o no nuestro preciado tiempo en aprender a utilizar la librería NumPy. Esta considerable mejora en el tiempo de ejecución para cálculos numéricos se produce en cualquier tipo de operación matemática que llevemos a cabo empleando funciones de dicho módulo.\nSi tenemos en mente utilizar el lenguaje de programación Python para analizar datos, considerando que al final casi todo se reduce a realizar cálculos numéricos con matrices de dimensiones considerables, NumPy se convierte entonces en una herramienta esencial.\nSin entrar en demasiados detalles técnicos, esta situación se produce debido a que:\n es distinta, y mucho más eficiente, la manera en que se accede a los elementos de un array de NumPy con respecto a como Python procede a realizar tal tarea en sus estructuras de datos básicas, el número de comprobaciones intermedias a la hora de llevar a cabo cálculos numéricos es menor en NumPy, y NumPy está escrito utilizando el lenguaje de programación C, que es bastante más rápido que Python.  Sin embargo, no es oro todo lo que reluce en NumPy. En futuras secciones veremos que las, a priori, ventajas expuestas en el listado anterior (sobretodo las dos primeras), conllevan aparejados ciertos inconvenientes de los que hemos de ser conscientes para evitar bugs en nuestros códigos.\n2. ¿Qué está pasando aquí? Primeras sorpresas que nos regala Numpy Para empezar, al utilizar los arrays de NumPy, vamos a perder ciertas características deseables que poseen las estructuras de datos básicas de Python. Por ejemplo, los elementos de una lista en Python pueden ser heterogéneos, es decir, de diversos tipos. En una misma lista podemos almacenar números enteros, cadenas de texto, números decimales y valores lógicos sin problema alguno. No obstante, todos los elementos de un array de NumPy, obligatoriamente, deben pertenecer al mismo tipo. Por otro lado, estamos acostumbrados a ampliar o reducir el tamaño de una lista en Python de manera dinámica, mientras que en NumPy tendremos que trabajar con arrays de dimensión fija preestablecida. Esto último no es del todo cierto, pero reajustar el tamaño de un array en NumPy no es una operación eficiente, por lo que no se suele realizar salvo contadas excepciones.\nSin embargo, aquello esbozado en el párrafo anterior palidece ante la pérdida de esas \u0026ldquo;redes de seguridad\u0026rdquo; a las que Python nos tiene acostumbrados. Ilustremos la situación mediante algunos ejemplos: crearemos un array en NumPy a través de la función array(), pasándole una lista con los elementos que queremos pertenezcan al mencionado array. Además, impondremos que dichos elementos sean del tipo int8, utilizando para ello el argumento dtype.\nNota: para conocer más detalles sobre los distintos tipos disponibles para los elementos de array, podemos echar un vistazo a la página de la documentación oficial asociada al tema.\na = np.array([-1, 0, 1, 100], dtype='int8')\ra\r array([ -1, 0, 1, 100], dtype=int8)\r Empecemos llevando a cabo algunas operaciones básicas. Por ejemplo, ¿qué sucede en Python cuando intentamos dividir un número por cero?\n1 / 0\r ---------------------------------------------------------------------------\rZeroDivisionError Traceback (most recent call last)\r\u0026lt;ipython-input-7-b710d87c980c\u0026gt; in \u0026lt;module\u0026gt;()\r----\u0026gt; 1 1 / 0\rZeroDivisionError: division by zero\r 1 // 0\r ---------------------------------------------------------------------------\rZeroDivisionError Traceback (most recent call last)\r\u0026lt;ipython-input-8-8ba90f639c23\u0026gt; in \u0026lt;module\u0026gt;()\r----\u0026gt; 1 1 // 0\rZeroDivisionError: integer division or modulo by zero\r Python arroja una excepción si encuentra una situación de este tipo, deteniendo por completo el proceso de la que forme parte. Probemos ahora a dividir por cero el array a declarado arriba.\nNota: en NumPy las operaciones aritméticas sobre vectores se realizan elemento a elemento, por lo que una instrucción del estilo a + 1 lo que hace es sumar una unidad a cada una de las componentes del array a.\na / 0\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rC:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rarray([-inf, nan, inf, inf])\r a // 0\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rarray([0, 0, 0, 0], dtype=int8)\r Recibimos un warning en la consola, pero el proceso continúa. Es más, incluso devuelve un resultado que es, cuanto menos, curioso. Para la división entera, obtenemos un vector cuyos elementos son todos nulos, mientras que para la división estándar, los elementos son inf (infinito) o nan (Not A Number o, lo que es lo mismo, una entidad indefinida).\nPor mucho que hayamos declarado de tipo entero (int8) los elementos de nuestro array a, ya no estamos trabajando, por así decirlo, con los integer de Python, y son distintas las reglas definidas para ellos. Con NumPy hemos de ser muy conscientes de este hecho, para evitar todo tipo de \u0026ldquo;situaciones curiosas\u0026rdquo;.\na // 0 + 1\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rarray([1, 1, 1, 1], dtype=int8)\r La siguiente sorpresa la podemos encontrar si, por el motivo que sea, nos interesa elevar al cuadrado las componentes del array a declarado arriba.\na\r array([ -1, 0, 1, 100], dtype=int8)\r a ** 2\r array([ 1, 0, 1, 16], dtype=int8)\r Todo parece correcto hasta que llegamos a un más que sorprendente $100^2 = 16$. ¿Qué acaba de suceder aquí? Integer overflow. Al declarar que el tipo de los elementos de nuestro array a sería int8, nos es imposible representar un número tan grande como 100 ** 2. En esta ocasión, ni siquiera recibimos un warning que nos advierta de que se ha producido tal situación.\nRecuperemos ahora el tema de los nan que brevemente ha aparecido anteriormente al llevar a cabo una división por cero.\na / 0\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rC:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rarray([-inf, nan, inf, inf])\r A la hora de analizar tablas de datos, es ciertamente frecuente encontrar que los valores pérdidos se codifiquen como nan. Curiosamente, en NumPy, tenemos que:\nnp.nan == np.nan\r False\r Hecho que, por otra parte, es bastante lógico. Si tenemos una entidad indefinida, difícil será que podamos comparar si es igual a otra entidad indefinida. No obstante, esta filosofía invalida la búsqueda de valores perdidos por la clásica vía de comparación con nan. En NumPy, para comprobar la existencia de dichos valores y que han sido codificados como nan, tendremos que emplear funciones del tipo isnan().\nnp.isnan(np.nan)\r True\r np.isnan(a / 0)\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rC:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\rarray([False, True, False, False], dtype=bool)\r Finalmente, como tanto los inf como los nan se codifican de manera distinta a los números enteros, no vamos a poder tener en un array de enteros ciertos elementos declarados como nan.\nnp.array([1, 2, np.nan], dtype='int8')\r ---------------------------------------------------------------------------\rValueError Traceback (most recent call last)\r\u0026lt;ipython-input-18-6d8f5ee90faf\u0026gt; in \u0026lt;module\u0026gt;()\r----\u0026gt; 1 np.array([1, 2, np.nan], dtype='int8')\rValueError: cannot convert float NaN to integer\r No obstante, con otros tipos de datos, esta situación no se da.\nnp.array([1, 2, np.nan], dtype='float32')\r array([ 1., 2., nan], dtype=float32)\r Así pues, a modo de resumen, la moraleja que extraemos de este apartado sería que, si vamos a utilizar la librería NumPy, tenemos que empezar a prestar más atención a las representaciones binarias de nuestros datos y su efecto a la hora de trabajar numéricamente con ellas.\n3. Creando arrays especiales en NumPy La librería NumPy contiene una serie de funciones orientadas a generar arrays especiales como, por ejemplo, aquellos cuyas componentes son todas nulas, todas unos o, incluso, que consistan en una serie de huecos vacíos a rellenar en un futuro.\nnp.zeros\r \u0026lt;function numpy.core.multiarray.zeros\u0026gt;\r np.ones\r \u0026lt;function numpy.core.numeric.ones\u0026gt;\r np.empty\r \u0026lt;function numpy.core.multiarray.empty\u0026gt;\r Las anteriores funciones mostradas requieren como argumento obligatorio, para crear los arrays asociados, el número total de elementos (si buscamos generar un array unidimensional) o una tupla que contenga las distintas dimensiones (si deseamos crear un array multidimensional).\nnp.zeros(5)\r array([ 0., 0., 0., 0., 0.])\r np.ones((2, 2))\r array([[ 1., 1.],\r[ 1., 1.]])\r np.empty((3, 3, 3))\r array([[[ 1.04468097e-311, 1.04464737e-311, 9.34598925e-307],\r[ 8.45605478e-307, 1.37962592e-306, 1.24610994e-306],\r[ 1.29061821e-306, 4.45057637e-308, 8.90051274e-307]],\r[[ 8.45596650e-307, 1.11261434e-306, 4.45061880e-308],\r[ 1.69109959e-306, 7.56603882e-307, 4.45063578e-308],\r[ 1.24606309e-306, 1.78019625e-306, 9.34610469e-307]],\r[[ 8.90051274e-307, 1.95810846e-306, 1.29062229e-306],\r[ 1.33506605e-306, 1.37962388e-306, 1.37961302e-306],\r[ 8.45596650e-307, 2.44033110e-312, 0.00000000e+000]]])\r En los elementos que componen el array generado a partir de la función empty() encontramos aquello que previamente residía en memoria en el instante anterior a la creación de dicho array. Es por ello que, en ocasiones, si procedemos a revisarlos inmediatamente después de su declaración, encontremos valores curiosos tipo 9.34598925e-307.\n4. Accediendo a los elementos de un array Partiendo del array a que declaramos en una sección anterior, en esta veremos cómo acceder a sus elementos. En NumPy podemos utilizar las clásicas estrategias de get y slice a las que estamos acostumbrados en Python para extraer elementos de sus estructuras de datos básicas.\na\r array([ -1, 0, 1, 100], dtype=int8)\r Así, por ejemplo, para acceder al primer elemento de a, -1, no tenemos más que escribir:\na[0]\r -1\r type(a[0])\r numpy.int8\r Como suele ser habitual en Python, al emplear estrategias de tipo get perdemos la estructura de datos de la que partíamos. Al ejecutar a[0] el resultado deja de ser un array de NumPy para convertirse, en este caso, en un número entero. Como ya advertimos en una sección anterior, a la hora de trabajar con NumPy debemos en todo momento saber con qué tipo de dato estamos trabajando y las reglas bajo las que se rige. El entero que acabamos de extraer del array a, como hemos podido comprobar mediante la función type(), es de tipo numpy.int8, no de tipo int como a primera vista podríamos sospechar. Cierta cautela se nos exige si tras la extracción tenemos en mente llevar a cabo cualquier tipo de operación matemática con el mencionado valor.\na[0] // 0\r C:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in floor_divide\r\u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel.\r0\r Podemos utilizar también índices negativos para acceder a los elementos de un array.\na[-1]\r 100\r Además, como comentábamos al principio, es posible emplear estrategias de tipo slice para recuperar ciertas partes de los arrays declarados. Por ejemplo:\na[0:2]\r array([-1, 0], dtype=int8)\r En esta ocasión, la estructura de datos se conserva, puesto que el resultado de la extracción continúa siendo un array.\nPor otro lado, las reglas habituales del uso de estrategias de tipo slice se mantienen para los arrays de NumPy. Por ejemplo:\na[:2]\r array([-1, 0], dtype=int8)\r a[::2]\r array([-1, 1], dtype=int8)\r Finalmente, aunque los arrays sean, generalmente, de tamaño fijo, son un tipo de estructura de datos mutable, es decir, podemos modificar en cualquier momento el valor de sus elementos. Por ejemplo, para reemplazar en el array a el elemento 100 por un 5, simplemente tendríamos que teclear:\na[-1] = 5\ra\r array([-1, 0, 1, 5], dtype=int8)\r 5. Trabajando con arrays multidimensionales Para generar arrays multidimensionales no tenemos más que anidar listas ([]) en la declaración del argumento de la función array(). Por ejemplo, podemos generar un array bidimensional siguiendo un patrón similar al que figura a continuación:\nb = np.array([[0, 1, 2],\r[3, 4, 5],\r[6, 7, 8],\r[9, 10, 11]])\rb\r array([[ 0, 1, 2],\r[ 3, 4, 5],\r[ 6, 7, 8],\r[ 9, 10, 11]])\r El array b es bidimensional, como bien podemos comprobar a través de sus atributos .ndim y .shape.\nb.ndim\r 2\r b.shape\r (4, 3)\r Al tratarse b de los primeros once números enteros positivos (incluyendo el 0), para evitar errores a la hora de introducir los datos, podríamos haber empleado primero la función arange(), para luego emplear reshape() y transformar el array unidimensional en uno bidimensional.\nb = np.arange(12).reshape(4, 3)\rb\r array([[ 0, 1, 2],\r[ 3, 4, 5],\r[ 6, 7, 8],\r[ 9, 10, 11]])\r Es posible que, en este preciso instante, estemos tentados a denominar la primera dimensión del array b como filas y la segunda como columnas, por su similaridad con las tablas de datos con las que estamos acostumbrados a lidiar. No obstante, debemos ser cautos con esta nomenclatura, puesto que con NumPy podemos generar arrays $n$-dimensionales y, en ese contexto, es un tanto confuso hablar de filas y columnas.\nEl acceso a los elementos del array b lo podemos llevar a cabo, al igual que en la sección anterior, mediante estrategias de tipo get o slice. Por ejemplo:\nb[2, 2]\r 8\r type(b[2, 2])\r numpy.int32\r b[:2, :2]\r array([[0, 1],\r[3, 4]])\r Como era de esperar, no tenemos por qué utilizar la misma estrategia en todas las dimensiones del array, pero sí debemos prestar atención a la estructura de datos resultante (o más bien a su dimensión) cuando empleamos ambos tipos.\nb[1:3, -1]\r array([5, 8])\r b[1:3, -1:]\r array([[5],\r[8]])\r Dependiendo de si acto seguido vamos a utilizar el anterior resultado para llevar a cabo algún tipo de cálculo matemático, este detalle puede resultar de vital relevancia.\nSi estamos interesados en que el resultado de la extracción conserve el número de dimensiones del objeto original, en todas y cada una de las dimensiones hemos de emplear estrategias de tipo slice.\nb[:1, :1]\r array([[0]])\r b[:1, :1].ndim\r 2\r b[:1, :1].shape\r (1, 1)\r Ejercicio: dado el array tridimensional c:\nc = np.arange(24).reshape(2, 3, 4)\rc\r array([[[ 0, 1, 2, 3],\r[ 4, 5, 6, 7],\r[ 8, 9, 10, 11]],\r[[12, 13, 14, 15],\r[16, 17, 18, 19],\r[20, 21, 22, 23]]])\r Se pide:\n  Extraer el número 17.\n  Extraer el array\n[[ 0, 1, 2, 3],\r[ 4, 5, 6, 7],\r[ 8, 9, 10, 11]].\r   Extraer el array [12, 13, 14, 15].\n  Solución:\nc[1, 1, 1]\r 17\r c[0, :, :]\r array([[ 0, 1, 2, 3],\r[ 4, 5, 6, 7],\r[ 8, 9, 10, 11]])\r c[1, 0, :]\r array([12, 13, 14, 15])\r Nota: este ejercicio resulta trivial si previamente optamos por convertir el array tridimensional c en uno unidimensional utilizando la función flatten():\nc.flatten()\r array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\r17, 18, 19, 20, 21, 22, 23])\r Ejercicio: dado el array bidimensional a:\na = np.arange(25).reshape(5, 5)\ra\r array([[ 0, 1, 2, 3, 4],\r[ 5, 6, 7, 8, 9],\r[10, 11, 12, 13, 14],\r[15, 16, 17, 18, 19],\r[20, 21, 22, 23, 24]])\r Se pide:\n  Extraer el array [20, 21, 22, 23, 24].\n  Extraer el array\n[[ 1, 3],\r[ 6, 8],\r[11, 13],\r[16, 18],\r[21, 23]].\r   Extraer el array\n[[ 5, 7],\r[15, 17]].\r   Solución:\na[4, :] # a[-1, :]\r array([20, 21, 22, 23, 24])\r a[:, 1::2] # a[:, 1:4:2]\r array([[ 1, 3],\r[ 6, 8],\r[11, 13],\r[16, 18],\r[21, 23]])\r a[1::2, 0:4:2] # a[1::2, :3:2]\r array([[ 5, 7],\r[15, 17]])\r Esta manera de extraer los elementos de un array es extremadamente rápida y eficiente (coste de orden constante), característica deseable a hora de llevar a cabo análisis de datos de tablas cuyas dimensiones sean considerables. No obstante, con estrategias de get y slice no siempre seremos capaces de acceder fácilmente a cualquier subconjunto de elementos de un array, teniendo que recurrir entonces a lo que se conoce como fancy indexing.\n6. Accediendo a los elementos de un array mediante Fancy indexing La primera estrategia de acceso a los elementos de un array empleando fancy indexing consiste, simplemente, en utilizar una llamada de tipo get donde proporcionaremos una lista ([]) que contenga los índices de los elementos que deseamos extraer. Ilustremos la manera de proceder mediante algunos ejemplos.\na = np.arange(4)\ra\r array([0, 1, 2, 3])\r Si ahora buscamos acceder al primer (índice 0) y último (índice 3) elemento de a, escribiríamos:\na[[0, 3]]\r array([0, 3])\r De la misma forma podemos extraer los elementos primero, segundo y último de a\na[[0, 1, 3]]\r array([0, 1, 3])\r a[[0, 1, -1]] # versión con índices negativos\r array([0, 1, 3])\r Veamos a continuación cómo proceder a la hora de trabajar con arrays bidimensionales.\nb = np.arange(12).reshape(4, 3)\rb\r array([[ 0, 1, 2],\r[ 3, 4, 5],\r[ 6, 7, 8],\r[ 9, 10, 11]])\r Supongamos que buscamos extraer los números 2 y 6. Necesitaremos ahora pasar dos listas a la llamada de tipo get para acceder a dichos números, una con sus índices asociados a la primera dimensión (0 y 2 en este caso) y otra con sus correspondientes índices de la segunda dimensión (2 y 0 en esta ocasión).\nb[[0, 2], [2, 0]]\r array([2, 6])\r Seguramente quede más clara la manera de proceder si ilustramos la anterior estrategia para un array tridimensional.\nc\r array([[[ 0, 1, 2, 3],\r[ 4, 5, 6, 7],\r[ 8, 9, 10, 11]],\r[[12, 13, 14, 15],\r[16, 17, 18, 19],\r[20, 21, 22, 23]]])\r Si nos interesa acceder a los números 6 y 17, dentro de la estrategia de tipo get tendríamos que declarar tres listas (porque el array c es tridimensional), cada una de ellas compuesta por dos elementos (debido a que buscamos extraer dos números), indicando los índices de los mencionados números para todas y cada una de las dimensiones del array c.\nPara el caso del número 6:\n Índice de la primera dimensión: 0. Índice de la segunda dimensión: 1. Índice de la tercera dimensión: 2.  Para el caso del número 17:\n Índice de la primera dimensión: 1. Índice de la segunda dimensión: 1. Índice de la tercera dimensión: 1.  Ahora, la intuición seguramente nos llevaría a escribir una llamada del tipo c[[0, 1, 2], [1, 1, 1]], a partir de las \u0026ldquo;coordenadas en el espacio\u0026rdquo; de los números buscados, recibiendo entonces un error en la consola.\nc[[0, 1, 2], [1, 1, 1]]\r ---------------------------------------------------------------------------\rIndexError Traceback (most recent call last)\r\u0026lt;ipython-input-63-2310a6526161\u0026gt; in \u0026lt;module\u0026gt;()\r----\u0026gt; 1 c[[0, 1, 2], [1, 1, 1]]\rIndexError: index 2 is out of bounds for axis 0 with size 2\r Debemos intentar evitar pensar en los elementos de un array multidimensional a partir de sus coordenadas y hacerlo empleando directamente el número de dimensiones. Para que la anterior instrucción hubiese funcionado, el array c tendría que haber sido bidimensional (porque encontramos declaradas dos listas) y el objetivo acceder a tres elementos (debido a que cada una de las listas posee tres componentes).\nDe esta manera, para extraer los números 6 y 17 de c, hemos de teclear:\nc[[0, 1], [1, 1], [2, 1]]\r array([ 6, 17])\r A medida que el número de elementos a los que queremos acceder o la cantidad de dimensiones del array se incrementan, esta forma de proceder se vuelve ciertamente un tanto tediosa. Es por ello que, en ocasiones, conviene emplear una estrategia alternativa de fancy indexing cuyo funcionamiento se asienta en el adecuado uso de máscaras.\nSupongamos que, trabajando con el array c, estamos interesados en acceder a todos aquellos elementos que sean estrictamente mayores que 16. Si escribimos:\nc \u0026gt; 16\r array([[[False, False, False, False],\r[False, False, False, False],\r[False, False, False, False]],\r[[False, False, False, False],\r[False, True, True, True],\r[ True, True, True, True]]], dtype=bool)\r Obtenemos un array tridimensional formado por valores lógicos, y de la misma dimensión que c, que, para todos y cada uno de sus elementos, nos informa de si satisface la condición planteada (True) o no (False). Dicha información se la podemos suministrar a una estrategia de tipo get para así acceder a los elementos que nos interese.\nc[c \u0026gt; 16]\r array([17, 18, 19, 20, 21, 22, 23])\r Como no podía ser de otra manera, la concatenación de accesos está también permitida. En el caso de buscar el primer elemento estrictamente mayor que 16 podríamos teclear:\nc[c \u0026gt; 16][0]\r 17\r No obstante, en ocasiones resulta un tanto confusa esta forma de proceder, sobretodo si el número de dimensiones con las que trabajamos es considerable y concatenamos varios accesos de este estilo. Posiblemente facilita más la lectura del código escribir la anterior instrucción en dos líneas, de la siguiente manera:\nd = c[c \u0026gt; 16]\rd[0]\r 17\r Sin embargo, la pregunta lógica que podríamos plantearnos en este instante es, ¿conviene que declaremos un nuevo objeto, con todo el coste de almacenamiento que ello supone, simplemente por mejorar levemente la legibilidad de nuestros códigos? La respuesta, aunque pueda parecer sorprendente, es afirmativa, dado que, posiblemente, no estaremos creando un nuevo array sino simplemente una nueva cabecera que apunta al array del que estamos extrayendo datos.\nSí, es un tanto confuso el final del anterior párrafo y, para añadir más complejidad al asunto si cabe, es una situación que conlleva ciertos efectos \u0026ldquo;curiosos\u0026rdquo; de los que hemos de ser conscientes para evitar bugs de difícil detección (qué recuerdos de los tiempos de punteros con el lenguaje de programación C). Las líneas que figuran a continuación son dignas de una segunda parte para la sección del tutorial \u0026ldquo;¿Qué está pasando aquí? Primeras sorpresas que nos regala Numpy\u0026quot;.\nRescatemos el array c:\nc\r array([[[ 0, 1, 2, 3],\r[ 4, 5, 6, 7],\r[ 8, 9, 10, 11]],\r[[12, 13, 14, 15],\r[16, 17, 18, 19],\r[20, 21, 22, 23]]])\r Y almacenemos en un nuevo objeto d el resultado de cierta extracción de elementos:\nd = c[:, 1:2, 1:3]\rd\r array([[[ 5, 6]],\r[[17, 18]]])\r Si ahora accedemos a cierta información de interés sobre el objeto d, a partir de su atributo flags, encontramos que:\nd.flags\r  C_CONTIGUOUS : False\rF_CONTIGUOUS : False\rOWNDATA : False\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r El atributo OWNDATA posee como valor False, es decir, el array no controla sus propios datos. Hemos generado un nuevo objeto, d, pero no se ha llevado a cabo ninguna copia independiente de sus elementos en memoria, sino simplemente la creación de una cabecera con información que apunta hacia los elementos de interés del array c que nos permiten construir el array d.\nEsta forma de proceder es ciertamente eficiente, porque copiar datos en memoria es una operación costosa tanto en tiempo de ejecución como en espacio para almacenamiento. Sin embargo, conlleva aparejada la siguiente \u0026ldquo;curiosa\u0026rdquo; (y, por otra parte, muy lógica) situación.\nd[0, 0, 0] = 1000\r d\r array([[[1000, 6]],\r[[ 17, 18]]])\r c\r array([[[ 0, 1, 2, 3],\r[ 4, 1000, 6, 7],\r[ 8, 9, 10, 11]],\r[[ 12, 13, 14, 15],\r[ 16, 17, 18, 19],\r[ 20, 21, 22, 23]]])\r Cambios en el array d afectan al array c del cual se originó, por lo que se exige, como ya viene siendo habitual a estas alturas con la librería NumPy, cierta cautela a la hora de llevar a cabo algunas operaciones.\nSin embargo, si utilizamos las estrategias de fancy indexing, esbozadas en la sección anterior, generalmente no encontraremos este tipo de situaciones. NumPy tratará de, en un principio, resolver la situación creando únicamente una nueva cabecera, pero, de no ser posible (situación sumamente habitual), procederá a realizar una copia de los datos de interés.\ne = c[c \u0026gt; 16]\re\r array([1000, 17, 18, 19, 20, 21, 22, 23])\r e.flags\r  C_CONTIGUOUS : True\rF_CONTIGUOUS : True\rOWNDATA : True\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r e[0] = 5\re\r array([ 5, 17, 18, 19, 20, 21, 22, 23])\r c\r array([[[ 0, 1, 2, 3],\r[ 4, 1000, 6, 7],\r[ 8, 9, 10, 11]],\r[[ 12, 13, 14, 15],\r[ 16, 17, 18, 19],\r[ 20, 21, 22, 23]]])\r Esta situación también se presenta al emplear las funciones reshape() o al trasponer un array. En lugar de crear una nueva copia de los datos, únicamente se genera una cabecera en memoria que apunta a las direcciones adecuadas para componer los nuevos arrays. Esto conlleva, por tanto, que apenas suponga coste alguno el utilizar este tipo de funciones.\nf = np.array([[1, 2], [3, 4]])\rf\r array([[1, 2],\r[3, 4]])\r f.flags\r  C_CONTIGUOUS : True\rF_CONTIGUOUS : False\rOWNDATA : True\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r g = f.reshape(4, 1)\rg\r array([[1],\r[2],\r[3],\r[4]])\r g.flags\r  C_CONTIGUOUS : True\rF_CONTIGUOUS : True\rOWNDATA : False\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r h = f.T\rh\r array([[1, 3],\r[2, 4]])\r h.flags\r  C_CONTIGUOUS : False\rF_CONTIGUOUS : True\rOWNDATA : False\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r Como colofón, si examinamos el atributo .flags del propio objeto c:\nc.flags\r  C_CONTIGUOUS : True\rF_CONTIGUOUS : False\rOWNDATA : False\rWRITEABLE : True\rALIGNED : True\rUPDATEIFCOPY : False\r Teniendo en cuenta que el array c no se ha generado a partir de un objeto distinto, ¿no debería poseer el atributo OWNDATA el valor True? La justificación reside en la expresión que hemos empleado para crear dicho array y que, a estas alturas de la vida y del tutorial, posiblemente hayamos ya olvidado.\nRecordemos que habíamos tecleado c = np.arange(24).reshape(2, 3, 4), de manera que la función arange() comienza creando una cabecera con la información del array (del estilo .ndim o .shape), así como reservando cierto espacio en memoria para almacenar sus elementos. Después, la función reshape() únicamente genera una nueva cabecera apuntando de manera adecuada a los mencionados elementos y es por ello que el array c no cree que sea el propietario de los datos que lo integran. No obstante, que el valor del atributo OWNDATA sea False indica que sus datos podrían o no ser manipulados desde otro objeto, pero no implica que necesariamente puedan serlo.\nEjercicio: dado el array bidimensional a:\na = np.arange(25).reshape(5, 5)\ra\r array([[ 0, 1, 2, 3, 4],\r[ 5, 6, 7, 8, 9],\r[10, 11, 12, 13, 14],\r[15, 16, 17, 18, 19],\r[20, 21, 22, 23, 24]])\r Se pide:\n Extraer el array [ 1, 7, 13, 19]. Extraer el array compuesto por los números divisibles entre 3.  Soluciones:\na[[0, 1, 2, 3], [1, 2, 3, 4]] # alternativa: a[np.arange(4), np.arange(4)+1]\r array([ 1, 7, 13, 19])\r Resolvamos el segundo apartado paso por paso:\na % 3\r array([[0, 1, 2, 0, 1],\r[2, 0, 1, 2, 0],\r[1, 2, 0, 1, 2],\r[0, 1, 2, 0, 1],\r[2, 0, 1, 2, 0]], dtype=int32)\r a % 3 == 0\r array([[ True, False, False, True, False],\r[False, True, False, False, True],\r[False, False, True, False, False],\r[ True, False, False, True, False],\r[False, True, False, False, True]], dtype=bool)\r a[a % 3 == 0]\r array([ 0, 3, 6, 9, 12, 15, 18, 21, 24])\r 7. Operaciones con arrays En esta última sección del notebook veremos dos tipos de operaciones:\n matemáticas: conservan la dimensión del array (como, por ejemplo, la suma +), y de reducción: disminuyen la dimensión del array (como, por ejemplo, la media mean()).  Las operaciones matemáticas entre arrays en NumPy se suelen llevar a cabo elemento, por lo que debemos ser cautos con las dimensiones de los arrays implicados en la operación, ya que en NumPy no se produce ningún tipo de \u0026ldquo;reciclaje de arrays\u0026rdquo; (como al que estamos habituados si utilizamos el lenguaje de programación R).\na\r array([[ 0, 1, 2, 3, 4],\r[ 5, 6, 7, 8, 9],\r[10, 11, 12, 13, 14],\r[15, 16, 17, 18, 19],\r[20, 21, 22, 23, 24]])\r a + 5\r array([[ 5, 6, 7, 8, 9],\r[10, 11, 12, 13, 14],\r[15, 16, 17, 18, 19],\r[20, 21, 22, 23, 24],\r[25, 26, 27, 28, 29]])\r a + a\r array([[ 0, 2, 4, 6, 8],\r[10, 12, 14, 16, 18],\r[20, 22, 24, 26, 28],\r[30, 32, 34, 36, 38],\r[40, 42, 44, 46, 48]])\r a + np.arange(7)\r ---------------------------------------------------------------------------\rValueError Traceback (most recent call last)\r\u0026lt;ipython-input-94-825c7dd057ef\u0026gt; in \u0026lt;module\u0026gt;()\r----\u0026gt; 1 a + np.arange(7)\rValueError: operands could not be broadcast together with shapes (5,5) (7,)  Estaremos en condiciones de llevar a cabo operaciones entre arrays de distintas dimensiones siempre y cuando verifique las reglas de broadcasting, que podemos consultar en la siguiente página de la documentación oficial. Grosso modo, dos dimensiones son compatibles bien cuando son iguales, bien cuando una de ellas es 1, y el proceso de comparación se lleva a cabo de atrás hacia delante.\na + np.arange(5)\r array([[ 0, 2, 4, 6, 8],\r[ 5, 7, 9, 11, 13],\r[10, 12, 14, 16, 18],\r[15, 17, 19, 21, 23],\r[20, 22, 24, 26, 28]])\r a.shape\r (5, 5)\r np.arange(5).shape\r (5,)\r Así,\na: 5 x 5\rnp.arange(5): 5\ra + np.arange(5): 5 x 5\r Esquema que, a primera vista, no parece satisfacer las reglas de broadcasting, puesto que en la dimensión situada a la izquierda, tenemos un 5 para el array a, pero no hay elemento alguno para np.arange(5). No obstante, internamente, NumPy aplica a np.arange(5) un reshape(1, 5) para poder llevar a cabo la suma, quedando ahora el esquema:\na: 5 x 5\rnp.arange(5).reshape(1, 5): 1 x 5\ra + np.arange(5).reshape(1,5): 5 x 5\r Cumpliéndose así las mencionadas reglas.\nPor lo que respecta a las operaciones de reducción, algunas de las más habituales vienen dadas a través de las funciones:\n np.sum() np.mean() np.std() np.var() np.min() np.max() np.argmin() np.argmax()  Veamos algunos ejemplos de su aplicación a arrays unidimensionales:\nb\r array([[ 0, 1, 2],\r[ 3, 4, 5],\r[ 6, 7, 8],\r[ 9, 10, 11]])\r b.flatten()\r array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\r np.sum(b.flatten())\r 66\r np.mean(b.flatten())\r 5.5\r np.max(b.flatten())\r 11\r np.argmax(b.flatten())\r 11\r Ahora bien, si trabajamos con la versión multidimensional del array b, podemos aplicar las operaciones de reducción por dimensiones, utilizando el argumento axis. En arrays bidimensionales, vamos a estar fuertemente tentados a denominar estas operaciones bien con la coletilla \u0026ldquo;por columnas\u0026rdquo; (para axis=0), bien \u0026ldquo;por filas\u0026rdquo; (para axis=1), pero recordemos que tal nomenclatura se vuelve confusa cuando la dimensión del array es estrictamente superior a 2.\nb\r array([[ 0, 1, 2],\r[ 3, 4, 5],\r[ 6, 7, 8],\r[ 9, 10, 11]])\r np.sum(b, axis=0) # reducción de la primera dimensión (suma por \u0026quot;columnas\u0026quot;)\r array([18, 22, 26])\r np.sum(b, axis=1) # reducción de la segunda dimensión (suma por \u0026quot;filas\u0026quot;)\r array([ 3, 12, 21, 30])\r np.argmax(b, axis=0)\r array([3, 3, 3], dtype=int64)\r np.argmax(b, axis=1)\r array([2, 2, 2, 2], dtype=int64)\r Si aplicamos la función argmax() directamente al array bidimensional b, NumPy actuará internamente como hicimos nosotros anteriormente, aplicando la función flatten() para luego buscar en qué posición reside el elemento de mayor valor y devolver dicha posición. Esta información, en arrays unidimensionales es bastante informativa, pero es complicada de interpretar en arrays multidimensionales. Si deseamos acceder a los índices, para cada una de las dimensiones, donde se alcanza el mayor valor, podemos hacer uso de la función unravel_index() de la siguiente manera:\nnp.unravel_index(np.argmax(b), b.shape)\r (3, 2)\r Finalmente, veamos cómo se propagan los elementos nan al llevar a cabo operaciones matemáticas y de reducción:\na = a.astype('float64')\ra\r array([[ 0., 1., 2., 3., 4.],\r[ 5., 6., 7., 8., 9.],\r[ 10., 11., 12., 13., 14.],\r[ 15., 16., 17., 18., 19.],\r[ 20., 21., 22., 23., 24.]])\r a[2, 3] = np.nan\ra\r array([[ 0., 1., 2., 3., 4.],\r[ 5., 6., 7., 8., 9.],\r[ 10., 11., 12., nan, 14.],\r[ 15., 16., 17., 18., 19.],\r[ 20., 21., 22., 23., 24.]])\r a + 5\r array([[ 5., 6., 7., 8., 9.],\r[ 10., 11., 12., 13., 14.],\r[ 15., 16., 17., nan, 19.],\r[ 20., 21., 22., 23., 24.],\r[ 25., 26., 27., 28., 29.]])\r np.sum(a)\r nan\r np.sum(a, axis=0)\r array([ 50., 55., 60., nan, 70.])\r np.sum(a, axis=1)\r array([ 10., 35., nan, 85., 110.])\r En resumen, la librería NumPy contiene un conjunto de herramientas más que recomendable para todas aquellas personas que en su día a día utilicen el lenguaje de programación Python para llevar a cabo cualquier tipo de cálculo numérico. Un considerable incremento en la velocidad y una gestión de memoria más eficiente, cuya única contrapartida aparejada es requerir un buen entendimiento de las características del problema, así como de todas las implicaciones que los pasos para resolverlo conllevan.\n","date":1534564779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"a189b762db4bd86421f475853fcb86af","permalink":"https://imalexissaez.github.io/2018/08/18/breve-introduccion-a-la-libreria-numpy/","publishdate":"2018-08-18T05:59:39+02:00","relpermalink":"/2018/08/18/breve-introduccion-a-la-libreria-numpy/","section":"post","summary":"Tras la buena experiencia vivida después de la sesión dedicada a Machine learning, de la convención SciPy 2017, me he animado a seguir explorando la lista de reproducción del canal de Youtube asociado a la cuenta de Enthought.","tags":["NumPy","Python"],"title":"Breve introducción a la librería NumPy","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"¿Te has quedado sin planes para el fin de semana? Aunque tu lista de tareas pendientes y, generalmente, poco atractivas parezca haber crecido de manera exponencial en los últimos tiempos, ¿el cuerpo te pide algo distinto?\n¿Qué tal invertir las próximas seis horas y media de tu vida disfrutando de un tutorial sobre Machine Learning con Python? Suena interesante, ¿verdad? Al menos es así en esta especie de universo paralelo donde parece que vivo últimamente.\nEn la cuenta de YouTube asociada a Enthought, creadores de la conocida distribución Canopy para Python, ha aparecido recientemente una lista de reproducción que alberga los tutoriales y charlas correspondientes a la última convención SciPy: \u0026ldquo;SciPy 2017: Scientific Computing with Python Conference\u0026rdquo;.\nAquel al que hacía referencia en el primer párrafo estuvo dividido en dos sesiones, a las que podemos acceder directamente a través de los siguientes enlaces:\n Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller \u0026amp; Alexandre Gram. Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller \u0026amp; Alexandre Gram.  No obstante, antes de lanzarte de cabeza a su visualización, te recomendaría adoptases una actitud de aprendizaje activo para un mayor aprovechamiento. Es un tutorial bastante práctico, que se apoya en el uso de numerosos Jupyter Notebooks que también tenemos a nuestra disposición sin coste alguno. ¿Por qué no experimentar personalmente con el código para así reforzar las ideas vertidas y el uso de distintos algoritmos?\nLa única pega que presenta esta aproximación al tutorial reside en que nuestro equipo debe cumplir una serie de requisitos, que exploraremos rápidamente en la siguiente sección.\nInstalación de las herramientas asociadas En función de los distintos programas que ya estén instalados en nuestro sistema, el paseo por el siguiente listado nos llevará más o menos tiempo:\n  Utilizando nuestro navegador favorito, dirijámonos en primer lugar al repositorio en GitHub, que contiene los notebooks asociados al tutorial.\n  Echemos un rápido vistazo a su archivo README.md, que alberga información de interés sobre el mencionado tutorial, así como unas breves instrucciones para que configuremos nuestro equipo de manera adecuada y podamos utilizar el material disponible sin problema alguno.\n  Clonemos o \u0026ldquo;forkeemos\u0026rdquo; (no hace falta que lo compruebes, ambos sabemos que esa aberración no va a estar registrada en el diccionario, pero si utilizas git me habrás entendido) el propio repositorio. Si no tienes cuenta en GitHub o, directamente, no estás entiendo nada de lo que llevo escrito en este punto, sitúate en la parte superior derecha de la página asociada al repositorio, haz clic sobre el botón Clone or download y pulsa sobre el enlace Download ZIP. Descargarás un archivo comprimido que contiene todo el material de este repositorio, de forma que podrás descomprimirlo en tu unidad de disco duro donde desees y trabajar desde dicha localización.\n  Iniciemos Jupyter Notebook y naveguemos por los directorios hasta alcanzar la ruta donde hayamos almacenado los materiales del repositorio. Si no dispones de esta aplicación en tu ordenador, una manera fácil de hacerte con ella, y a la vez con los módulos que se utilizarán a lo largo del tutorial, es descargar la distribución de Python Anaconda asociada a la versión 3.6 del mencionado lenguaje de programación. Por otro lado, si es la primera vez que escuchas hablar de notebooks (en R y Python son muy populares hoy en día), te aconsejaría que previamente leyeses algún tutorial asociado a esta herramienta. Este es más que recomendable.\n  En la raíz del repositorio figura el notebook check_env.ipynb. Abrámoslo y ejecutemos la única celda que lo compone, que es un bloque de código que comprueba si nuestro sistema cumple los requisitos necesarios para seguir sin problemas el tutorial. En el caso de que alguna de las líneas de la salida asociadas a los diversos módulos no esté precedida por un [OK], tendremos que actualizar manualmente la versión del paquete correspondiente.\n  Opcionalmente, podemos descargar los conjuntos de datos asociados al tutorial (acción recomendable si en algunos momentos vamos a depender de redes wifi para trabajar con el material) sin más que teclear python fetch_data.py.\n  Notebooks En mi opinión, si tenemos un mínimo conocimiento de Python y Machine Learning, una buena manera de abordar el tutorial en sí consistiría en llevar a cabo una lectura previa del notebook que nos interese (experimentación con el código incluida), para luego visualizar la parte de la grabación del tutorial donde se desarrolla ese contenido en particular. Finalmente, con la explicación todavía fresca en nuestras cabezas, podríamos reforzar el contenido leyendo de nuevo el notebook concreto. No obstante, si no cumples el primer requisito comentado, directamente te aconsejaría empezar con la grabación e ir revisando posteriormente cada notebook a medida que se vayan abordando durante el vídeo.\nA poco que eches un vistazo por encima al material disponible, comprobarás que hay una cantidad más que considerable. Tanto que fue imposible abarcar los 23 notebooks durante las dos sesiones que se llevaron a cabo y, en algunos casos, ciertos temas fueron expuestos de manera bastante tangencial. Es por ello que vuelvo a recomendar no limitarse únicamente a disfrutar de la grabación, sino invertir también cierto tiempo en la lectura de los cuadernos, así como en la experimentación con ellos (realización de ejercicios incluida).\nSin más preámbulos, a continuación, podemos acceder al listado completo de los notebooks disponibles, junto con sus respectivos enlaces tanto a GitHub como al instante en el que comienza su desarrollo en el vídeo de YouTube:\n  \u0026ldquo;Introduction to machine learning with sample applications, Supervised and Unsupervised learning\u0026rdquo;. GitHub. Youtube.\n  \u0026ldquo;Scientific Computing Tools for Python: NumPy, SciPy, and matplotlib\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Data formats, preparation, and representation\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Training and test data\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Estimators for classification\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Estimators for regression analysis\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Unsupervised learning: Unsupervised Transformers\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Unsupervised learning: Clustering\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;The scikit-learn estimator interface\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Preparing a real-world dataset (titanic)\u0026quot;. GitHub. YouTube.\n  \u0026ldquo;Working with text data via the bag-of-words model\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Case Study - Text classification for SMS spam detection\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Cross-Validation\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Model complexity and grid search for adjusting hyperparameters\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Scikit-learn Pipelines\u0026rdquo;. GitHub. Debido a la falta de tiempo disponible, este notebook tuvo que ser excluido de la sesión.\n  \u0026ldquo;Supervised learning: Performance metrics for classification\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Linear Models\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Decision trees and random forests, and ensemble methods\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: feature selection\u0026rdquo;. GitHub. Por falta de tiempo, se excluyó de la sesión.\n  \u0026ldquo;Unsupervised learning: Hierarchical and density-based clustering algorithms\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Unsupervised learning: Non-linear dimensionality reduction\u0026rdquo;. GitHub. Debido a la falta de tiempo disponible, este notebook tuvo que ser excluido de la sesión.\n  \u0026ldquo;Unsupervised learning: Anomaly Detection\u0026rdquo;. GitHub. YouTube.\n  \u0026ldquo;Supervised learning: Out-of-core learning\u0026rdquo;. GitHub. Debido a la falta de tiempo disponible, este notebook tuvo que ser excluido de la sesión.\n  Enlaces de utilidad asociados al tutorial Recojo, a continuación, algunos enlaces, que han surgido a lo largo del artículo, relacionados con el tutorial:\n Machine Learning with scikit learn Part One - SciPy 2017 Tutorial - Andreas Mueller \u0026amp; Alexandre Gram. Machine Learning with scikit learn Part Two - SciPy 2017 Tutorial - Andreas Mueller \u0026amp; Alexandre Gram. Repositorio en GitHub asociado al tutorial. Anaconda. Jupyter Notebook Tutorial: The Definitive Guide.  ","date":1534391979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"3177ee38e122af580af07cbd4bf359b1","permalink":"https://imalexissaez.github.io/2018/08/16/tutorial-sobre-machine-learning-con-python/","publishdate":"2018-08-16T05:59:39+02:00","relpermalink":"/2018/08/16/tutorial-sobre-machine-learning-con-python/","section":"post","summary":"¿Qué tal invertir las próximas seis horas y media de tu vida disfrutando de un tutorial sobre Machine Learning con Python? Suena interesante, ¿verdad? Al menos es así en esta especie de universo paralelo donde parece que vivo últimamente.","tags":["Machine Learning","Python","SciPy"],"title":"Tutorial sobre Machine Learning con Python","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"En este artículo exploraremos las posibilidades que nos ofrece una librería de R, readr, integrante del famoso tidyverso, de cara a la importación y exportación de nuestros conjuntos de datos.\nNo me ha disgustado, en absoluto, el sistema que caracteriza los cursos de la plataforma DataCamp. Píldoras condensadas de teoría acompañadas, de inmediato, por ejercicios para su aplicación directa, ofreciendo así un enfoque para el aprendizaje bastante práctico y ameno. He tomado algunas notas personales para el curso abierto, que en el portal aparece, relativo a la librería readr: \u0026ldquo;Reading Data into R with readr\u0026quot;, al que podemos acceder a través del siguiente enlace.\nEl material está desglosado en dos capítulos. En el primero de ellos, aprenderemos diversas funciones, contenidas en este paquete, que facilitarán enormemente la labor de importar datos utilizando el lenguaje de programación R. En el segundo, el objetivo será utilizar las herramientas que la librería pone a nuestra disposición para analizar y convertir las clases que poseen las columnas del conjunto de datos recién importado.\nreadr es una componente del denominado tidyverso (tidyverse en inglés, que parece que siempre suena mejor), un conjunto de librerías que todo usuario de R debería si no dominar, al menos conocer, para así resolver ciertas situaciones de la manera más sencilla posible (basta imaginar tener que hacer a mano algunas de las tareas que paquetes como dplyr o tidyr llevan a cabo para darse cuenta de este hecho).\n1. Importando datos con readr 1.1. Archivos .csv A la hora de importar conjuntos de datos en R, uno de los formatos más habituales en los que hallamos información es en archivos separados por comas (comma separated values), cuya extensión suele ser .csv. En ellos encontramos múltiples líneas que recogen la tabla de interés, y en las cuales los valores aparecen, de manera consecutiva, separados por el carácter ,.\nPara importar este tipo de ficheros en nuestra sesión de R, utilizaremos la función read_csv(). Para acceder a su documentación, en primer lugar, cargaremos la librería readr (o la instalaremos si todavía no lo hemos hecho).\nif(!require(readr)) {install.packages(\u0026quot;readr\u0026quot;)}\r ## Loading required package: readr\r library(readr)\r ?read_csv\r El único argumento que hemos de pasar a esta función, de manera obligatoria, es file, el nombre del archivo que pretendemos importar (o bien la ruta completa donde éste se encuentra). El resto son opcionales, y deberían resultarnos familiares la mayoría de ellos si hemos trabajado alguna vez con funciones del tipo read.table() o read.csv(). Algunas de las ventajas que utilizar read_csv() ofrece son:\n No convierte, automáticamente, las columnas con cadenas de caracteres a factores, como sí hacen por defecto las otras funciones referidas en el párrafo anterior. Reconoce ocho clases diferentes de datos (integer, logical, etc.), dejando el resto como cadenas de caracteres.  Pongamos a prueba su uso importando un conjunto de datos que contiene tanto los pesos, como el tipo de alimentación, de 71 pollos. El archivo de interés es chickwts.csv, por lo que empezaremos especificando la ruta para acceder a él en el argumento file. Como en el segundo capítulo llevaremos a cabo algunas acciones sobre los conjuntos de datos que aparecerán en esta sección, todos los ficheros que importemos los almacenaremos en objetos dentro de R.\ncwts \u0026lt;- read_csv(file = \u0026quot;datasets/chickwts.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## weight = col_integer(),\r## feed = col_character()\r## )\r Es interesante el mensaje que aparece en la consola al ejecutar la anterior instrucción, ya que nos informa el resultado del análisis, que la función realiza, para inferir las clases de cada una de las columnas que componen la tabla. Echemos un vistazo al contenido del archivo que acabamos de importar.\nhead(cwts)\r ## # A tibble: 6 × 2\r## weight feed\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt;\r## 1 179 horsebean\r## 2 160 horsebean\r## 3 136 horsebean\r## 4 227 horsebean\r## 5 217 horsebean\r## 6 168 horsebean\r str(cwts)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 71 obs. of 2 variables:\r## $ weight: int 179 160 136 227 217 168 108 124 143 140 ...\r## $ feed : chr \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 2\r## .. ..$ weight: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ feed : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r A primera vista, la columna feed posiblemente estaría mejor codificada bajo la clase factor (aunque esto siempre va a depender de nuestros intereses y el uso que tengamos en mente para esta variable). No obstante, recordemos que éste no es el comportamiento que por defecto incorpora la función read_csv() (aunque después veremos cómo declarar con antelación las clases para las columnas de un archivo y posibilitar su lectura como factores).\nUtilicemos de nuevo esta función con otro conjunto de datos, chickwts2.csv (más información relativa al peso y tipo de alimentación de 18 pollos distintos), que usaremos más adelante en este capítulo, cuando lleguemos al apartado de exportar tablas a ficheros.\ncwts2 \u0026lt;- read_csv(\u0026quot;datasets/chickwts2.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## weight = col_integer(),\r## feed = col_character()\r## )\r head(cwts2)\r ## # A tibble: 6 × 2\r## weight feed\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt;\r## 1 309 corn\r## 2 229 corn\r## 3 213 corn\r## 4 257 corn\r## 5 244 corn\r## 6 271 corn\r str(cwts2)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 18 obs. of 2 variables:\r## $ weight: int 309 229 213 257 244 271 243 248 257 303 ...\r## $ feed : chr \u0026quot;corn\u0026quot; \u0026quot;corn\u0026quot; \u0026quot;corn\u0026quot; \u0026quot;corn\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 2\r## .. ..$ weight: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ feed : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 1.2. Archivos .tsv La librería readr posee también una función específica para la lectura de los archivos separados por tabulaciones, cuya extensión suele ser .tsv (aunque personalmente también he visto alguno que utiliza .tab). Se trata de read_tsv() y si accedemos a su documentación comprobaremos que su uso es exactamente idéntico al de la función que exploramos en la sección anterior.\n?read_tsv\r Investiguemos alguno de los argumentos que podemos declarar, de manera opcional, en esta función (y, por tanto, lo que aprendamos será de utilidad también de cara al uso de read_csv()). Por ejemplo, para controlar el nombre de las columnas de la tabla que deseamos importar, el argumento col_names es el indicado, y puede tomar los siguientes valores:\n TRUE: utiliza la información disponible en la primera línea del archivo para declarar los nombres de las columnas, no incluyéndolos por tanto en el interior de la propia tabla. FALSE: genera, de manera automática, los clásicos nombres X1, X2, X3, etc., para las columnas, y empieza a incluir la información en la tabla desde la primera fila. La última opción disponible es utilizar un vector que contenga los nombres de las columnas, y, como antes, desde la primera fila se insertarán los datos en el interior de la tabla.  Por ejemplo, importemos a continuación el fichero salaries.tsv. Si abrimos el archivo con un editor de texto plano cualquiera, comprobaremos que la primera línea no contiene los respectivos nombres para cada una de las columnas, y dado que no conocemos de antemano qué declara cada una, usar el argumento col_names = FALSE parece la opción más adecuada.\nsalaries \u0026lt;- read_tsv(\u0026quot;datasets/Salaries.tsv\u0026quot;, col_names = FALSE)\r ## Parsed with column specification:\r## cols(\r## X1 = col_character(),\r## X2 = col_character(),\r## X3 = col_integer(),\r## X4 = col_integer(),\r## X5 = col_character(),\r## X6 = col_integer()\r## )\r head(salaries)\r ## # A tibble: 6 × 6\r## X1 X2 X3 X4 X5 X6\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Prof B 19 18 Male 139750\r## 2 Prof B 20 16 Male 173200\r## 3 AsstProf B 4 3 Male 79750\r## 4 Prof B 45 39 Male 115000\r## 5 Prof B 40 41 Male 141500\r## 6 AssocProf B 6 6 Male 97000\r str(salaries)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 397 obs. of 6 variables:\r## $ X1: chr \u0026quot;Prof\u0026quot; \u0026quot;Prof\u0026quot; \u0026quot;AsstProf\u0026quot; \u0026quot;Prof\u0026quot; ...\r## $ X2: chr \u0026quot;B\u0026quot; \u0026quot;B\u0026quot; \u0026quot;B\u0026quot; \u0026quot;B\u0026quot; ...\r## $ X3: int 19 20 4 45 40 6 30 45 21 18 ...\r## $ X4: int 18 16 3 39 41 6 23 45 20 18 ...\r## $ X5: chr \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; ...\r## $ X6: int 139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 6\r## .. ..$ X1: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X2: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X3: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X4: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X5: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X6: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r En la llamada a la función read_tsv(), hemos recibido por consola el siguiente mensaje:\nParsed with column specification:\rcols(\rX1 = col_character(),\rX2 = col_character(),\rX3 = col_integer(),\rX4 = col_integer(),\rX5 = col_character(),\rX6 = col_integer()\r)\r Como ya comentábamos en la sección anterior, esta información nos indica la clase que la función read_tsv() ha inferido para todas y cada una de las columnas contenidas en el archivo. De hecho, este comportamiento no se restringe únicamente a las funciones read_csv() y read_tsv(), sino a todas las implementadas en la librería readr cuya empresa es, precisamente, la lectura de ficheros de datos.\nA través del argumento col_types tenemos cierto control sobre la declaración de la clase de las columnas, utilizando funciones predefinidas del estilo col_*() (como col_integer(), col_character(), etc.). La forma de usar este argumento es muy sencilla: simplemente tenemos que escribir col_types = cols() e incluir en el interior de cols() los nombres de las columnas y la clase que deseamos posean (siguiendo el estilo de, por ejemplo, el mensaje por consola que mostrábamos arriba).\nUna función que nos puede interesar, en este momento, es col_skip(), que le indica a R que omita una determinada columna a la hora de importar la información de un archivo de datos. Veamos su uso con más detalle a través de un ejemplo. Supongamos que sólo estamos interesados en las columnas primera, quinta y sexta del anterior fichero de datos. Así pues, no tendríamos más que escribir:\nsalaries \u0026lt;- read_tsv(\u0026quot;datasets/Salaries.tsv\u0026quot;, col_names = FALSE,\rcol_types = cols(\rX2 = col_skip(),\rX3 = col_skip(), X4 = col_skip()\r))\r head(salaries)\r ## # A tibble: 6 × 3\r## X1 X5 X6\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Prof Male 139750\r## 2 Prof Male 173200\r## 3 AsstProf Male 79750\r## 4 Prof Male 115000\r## 5 Prof Male 141500\r## 6 AssocProf Male 97000\r str(salaries)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 397 obs. of 3 variables:\r## $ X1: chr \u0026quot;Prof\u0026quot; \u0026quot;Prof\u0026quot; \u0026quot;AsstProf\u0026quot; \u0026quot;Prof\u0026quot; ...\r## $ X5: chr \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; \u0026quot;Male\u0026quot; ...\r## $ X6: int 139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 6\r## .. ..$ X1: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X2: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X3: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X4: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X5: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X6: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 1.3. Archivos .csv (formato europeo) En muchos países de este continente, usamos la coma como separador decimal, de manera que los archivos separados por comas, en realidad, terminan siendo separados por el símbolo ; (punto y coma). Por curiosidad, puedes probar a crear una tabla sencilla en, por ejemplo, Excel y exportarla como archivo separado por comas, para luego abrir el archivo con un editor de texto plano y verificar que, efectivamente, los valores están separados por ; (en realidad este comportamiento se puede modificar desde las opciones de formato del sistema operativo, pero no entraremos en ese tipo de detalles).\nEn previsión de esta particularidad, la librería readr pone a nuestra disposición la función read_csv2(), que identifica el símbolo ; como separador de valores, mientras que , queda como separador decimal. Obviando esta salvedad, su uso es idéntico al de las funciones presentadas en los anteriores apartados.\nTomemos ahora el archivo trees.csv (que contiene información sobre la circunferencia, la altura y el volumen de cerezos negros), el cual viene dado en el formato al que nos estamos refiriendo aquí, e importémoslo directamente con la función read_csv(), en lugar de con read_csv2(), para ver qué sucede.\ntrees_wrong \u0026lt;- read_csv(\u0026quot;datasets/trees.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## `Girth\u0026quot;;\u0026quot;Height\u0026quot;;\u0026quot;Volume` = col_character()\r## )\r## Warning: 30 parsing failures.\r## row col expected actual\r## 1 -- 1 columns 3 columns\r## 2 -- 1 columns 3 columns\r## 3 -- 1 columns 3 columns\r## 4 -- 1 columns 3 columns\r## 5 -- 1 columns 3 columns\r## ... ... ......... .........\r## See problems(...) for more details.\r En favor de la función read_csv() hay que decir que, al menos, nos indica la existencia de ciertos problemas, o situaciones inesperadas, durante la importación del archivo. De todas formas, podemos observar cómo ha procedido a generar una tabla con una única columna, en lugar de las correspondientes tres que hubiese sido lo adecuado en esta ocasión. Comprobemos qué contiene el objeto trees_wrong.\ndim(trees_wrong)\r ## [1] 31 1\r head(trees_wrong)\r ## # A tibble: 6 × 1\r## `Girth\u0026quot;;\u0026quot;Height\u0026quot;;\u0026quot;Volume`\r## \u0026lt;chr\u0026gt;\r## 1 8\r## 2 8\r## 3 8\r## 4 10\r## 5 10\r## 6 10\r str(trees_wrong)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 31 obs. of 1 variable:\r## $ Girth\u0026quot;;\u0026quot;Height\u0026quot;;\u0026quot;Volume: chr \u0026quot;8\u0026quot; \u0026quot;8\u0026quot; \u0026quot;8\u0026quot; \u0026quot;10\u0026quot; ...\r## - attr(*, \u0026quot;problems\u0026quot;)=Classes 'tbl_df', 'tbl' and 'data.frame': 30 obs. of 4 variables:\r## ..$ row : int 1 2 3 4 5 6 7 8 9 10 ...\r## ..$ col : chr NA NA NA NA ...\r## ..$ expected: chr \u0026quot;1 columns\u0026quot; \u0026quot;1 columns\u0026quot; \u0026quot;1 columns\u0026quot; \u0026quot;1 columns\u0026quot; ...\r## ..$ actual : chr \u0026quot;3 columns\u0026quot; \u0026quot;3 columns\u0026quot; \u0026quot;3 columns\u0026quot; \u0026quot;3 columns\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 1\r## .. ..$ Girth\u0026quot;;\u0026quot;Height\u0026quot;;\u0026quot;Volume: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r Veamos ahora el resultado que obtenemos al utilizar la función read_csv2().\ntrees \u0026lt;- read_csv2(\u0026quot;datasets/trees.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## Girth = col_double(),\r## Height = col_integer(),\r## Volume = col_double()\r## )\r dim(trees)\r ## [1] 31 3\r head(trees)\r ## # A tibble: 6 × 3\r## Girth Height Volume\r## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 8.3 70 10.3\r## 2 8.6 65 10.3\r## 3 8.8 63 10.2\r## 4 10.5 72 16.4\r## 5 10.7 81 18.8\r## 6 10.8 83 19.7\r str(trees)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 31 obs. of 3 variables:\r## $ Girth : num 8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\r## $ Height: int 70 65 63 72 81 83 66 75 80 75 ...\r## $ Volume: num 10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 3\r## .. ..$ Girth : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ Height: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ Volume: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 1.4. Archivos con ancho de columna fijo En ocasiones, el formato en el que encontramos los archivos de datos es similar al mostrado en R a la hora de imprimir en consola un data.frame. Es decir, cada columna posee un total de caracteres fijos y éstas se separan usando espacios en blanco (que también se utilizan para rellenar aquellos valores cuya longitud es menor que la correspondiente a su columna).\nEl archivo names.txt constituye un ejemplo de lo comentado en el párrafo anterior. En su interior encontramos los nombres de ciertos personajes famosos, el estado donde supuestamente residen y, como no podía ser de otra manera, sus falsos números de teléfono.\nLa función adecuada para lidiar con estos casos es read_table(), cuya documentación ofrece un listado de argumentos bastante familiares a estas alturas.\n?read_table\r Importemos pues el fichero names.txt, declarando adecuadamente los nombres para las columnas utilizando el parámetro col_names.\nnames \u0026lt;- read_table(\u0026quot;datasets/names.txt\u0026quot;,\rcol_names = c(\u0026quot;name\u0026quot;, \u0026quot;state\u0026quot;, \u0026quot;phone\u0026quot;))\rnames  ## # A tibble: 6 × 3\r## name state phone\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Oprah Winfrey null 800-555-4111\r## 2 Walt Disney Florida 407-555-4341\r## 3 Michael Scott Pennsylvania 570-555-2301\r## 4 Cosmo Kramer New York 212-555-9337\r## 5 Rutherford B. Hayes Ohio 220-555-1388\r## 6 Chester A. Arthur Vermont 802-555-8383\r str(names)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 6 obs. of 3 variables:\r## $ name : chr \u0026quot;Oprah Winfrey\u0026quot; \u0026quot;Walt Disney\u0026quot; \u0026quot;Michael Scott\u0026quot; \u0026quot;Cosmo Kramer\u0026quot; ...\r## $ state: chr \u0026quot;null\u0026quot; \u0026quot;Florida\u0026quot; \u0026quot;Pennsylvania\u0026quot; \u0026quot;New York\u0026quot; ...\r## $ phone: chr \u0026quot;800-555-4111\u0026quot; \u0026quot;407-555-4341\u0026quot; \u0026quot;570-555-2301\u0026quot; \u0026quot;212-555-9337\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 3\r## .. ..$ name : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ state: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ phone: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r Aprovechemos este particular ejemplo para ilustrar el tratamiento de los valores perdidos con las funciones de la librería readr dedicadas a importar archivos de datos. Por defecto, sólo se reconoce NA como valor perdido, pero, en esta ocasión, si nos fijamos en la primera fila de la tabla, han optado por usar null para registrar la ausencia de información para ciertos atributos concretos.\nNo supone esto demasiado inconveniente, puesto que utilizando el parámetro na podemos declarar, mediante un vector, qué cadenas de texto deben ser consideradas como valores perdidos (y automáticamente pasarán a ser NA en el objeto que creemos en R). Por defecto, na = \u0026quot;NA\u0026quot;, de manera que simplemente tenemos que declarar na = c(\u0026quot;NA\u0026quot;, \u0026quot;null\u0026quot;) en nuestro caso.\nnames2 \u0026lt;- read_table(\u0026quot;datasets/names.txt\u0026quot;, col_names = c(\u0026quot;name\u0026quot;, \u0026quot;state\u0026quot;, \u0026quot;phone\u0026quot;),\rna = c(\u0026quot;NA\u0026quot;, \u0026quot;null\u0026quot;))\rhead(names2)  ## # A tibble: 6 × 3\r## name state phone\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Oprah Winfrey \u0026lt;NA\u0026gt; 800-555-4111\r## 2 Walt Disney Florida 407-555-4341\r## 3 Michael Scott Pennsylvania 570-555-2301\r## 4 Cosmo Kramer New York 212-555-9337\r## 5 Rutherford B. Hayes Ohio 220-555-1388\r## 6 Chester A. Arthur Vermont 802-555-8383\r 1.5. Archivos de texto Es posible que nuestro interés no se centre tanto en examinar tablas de datos, como texto propiamente dicho, sobretodo ahora que tan de moda está el análisis de sentimiento (para estudiar opiniones, discursos, etc.). La librería readr pone a nuestra disposición un par de funciones que nos serán útiles en estos casos:\n read_lines(): devuelve un vector de cadenas de texto, donde cada elemento recoge una línea del archivo de datos original.  ?read_lines\r  read_file(): devuelve un vector de dimensión unitaria que contiene el texto completo del archivo de datos original, y donde los saltos de línea se representan utilizando \\n.  ?read_file\r En el fichero tweets.txt encontramos algunos tuits correspondientes a la cuenta @RealCarrotFacts (puedes comprobar que, efectivamente, existe dicha cuenta y que es un tanto curiosa). Procedamos a importar su contenido utilizando ambas funciones, para así apreciar de manera práctica la diferencia.\ntweets \u0026lt;- read_lines(\u0026quot;datasets/tweets.txt\u0026quot;)\rtweets\r ## [1] \u0026quot;carrots can be eat by most people\u0026quot; ## [2] \u0026quot;On predisents day we honor the big US man himself: Aberham Liclon. Tall, skinny, dry, and cruncy - he was america's carrot\u0026quot;\r## [3] \u0026quot;knock knoc who is there? yup: carosot ( joke )\u0026quot; ## [4] \u0026quot;it is 2016 time for a carot emoji please!\u0026quot; ## [5] \u0026quot;when life give you lemnos , have a carrot\u0026quot; ## [6] \u0026quot;If you squent your eyes real hard a football look like a dry brown carrot Honestly\u0026quot;\r str(tweets)\r ## chr [1:6] \u0026quot;carrots can be eat by most people\u0026quot; ...\r tweets_all \u0026lt;- read_file(\u0026quot;datasets/tweets.txt\u0026quot;)\rtweets_all\r ## [1] \u0026quot;carrots can be eat by most people\\nOn predisents day we honor the big US man himself: Aberham Liclon. Tall, skinny, dry, and cruncy - he was america's carrot\\nknock knoc who is there? yup: carosot ( joke )\\nit is 2016 time for a carot emoji please!\\nwhen life give you lemnos , have a carrot\\nIf you squent your eyes real hard a football look like a dry brown carrot Honestly\u0026quot;\r str(tweets_all)\r ## chr \u0026quot;carrots can be eat by most people\\nOn predisents day we honor the big US man himself: Aberham Liclon. Tall, skinny, dry, and\u0026quot;| __truncated__\r 1.6. Escribiendo archivos .csv y .tsv Una vez hemos importado nuestro conjunto de datos de interés, y realizamos sobre él ciertas manipulaciones, es bastante probable que deseemos almacenar el resultado en un archivo para su posterior uso y disfrute. La librería readr contiene varias funciones del estilo write_*() (por ejemplo, write_csv() o write_tsv()) orientadas a satisfacer esta necesidad, y que se caracterizan por un par de detalles realmente interesantes:\n A diferencia de funciones como write.csv(), no añaden por defecto los números (o nombres) de las filas al archivo exportado, lo cual suele ser el comportamiento deseado en la mayoría de ocasiones. El parámetro col_names adopta como valor el contrario al que posee append, manera de actuar que tiene todo el sentido del mundo. Si decidimos continuar añadiendo datos a un archivo que previamente hemos exportado, declararemos append = TRUE y, por tanto, no aparecerán de nuevo, y en mitad del fichero, los nombres de las columnas.  Veamos este último punto con mayor detalle a través de un ejemplo. En primer lugar, exportaremos a un archivo separado por comas el objeto cwts que generamos en una sección anterior. A Continuación, añadiremos al mencionado archivo el contenido del objeto cwts2.\nwrite_csv(cwts, \u0026quot;chickwts.csv\u0026quot;)\rwrite_csv(cwts2, \u0026quot;chickwts.csv\u0026quot;, append=TRUE)\r Procedamos ahora a importar el fichero recién generado y examinémoslo.\ncwts3 \u0026lt;- read_csv(\u0026quot;chickwts.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## weight = col_integer(),\r## feed = col_character()\r## )\r head(cwts3)\r ## # A tibble: 6 × 2\r## weight feed\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt;\r## 1 179 horsebean\r## 2 160 horsebean\r## 3 136 horsebean\r## 4 227 horsebean\r## 5 217 horsebean\r## 6 168 horsebean\r str(cwts3)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 89 obs. of 2 variables:\r## $ weight: int 179 160 136 227 217 168 108 124 143 140 ...\r## $ feed : chr \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; \u0026quot;horsebean\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 2\r## .. ..$ weight: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ feed : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 1.7. Escribiendo archivos .rds Es posible que estemos interesados en exportar no solamente los valores de una tabla, sino ciertos metadatos asociados a ella, como pueden ser, por ejemplo, las clases de las diferentes columnas que la compongan. No es fácil incorporar este tipo de información a un archivo separado por comas o tabulaciones, por lo que la librería readr nos ofrece la posibilidad de exportar un objeto completo de R a través de la función write_rds().\n?write_rds\r La mencionada función no es más que un wrapper (desconozco la traducción a español de este término) de la función saveRDS(), con la única particularidad de que, por defecto, no comprime el archivo resultante (aunque este comportamiento se puede definir a través del parámetro compress).\nIlustremos su aplicación mediante un ejemplo. Exportaremos el objeto trees que generamos en una sección anterior utilizando la función write_rds(), para a continuación importarlo inmediatamente con read_rds() y asignarlo a trees2. Finalmente, compararemos si ambos objetos son idénticos, empleando para ello la función identical().\nwrite_rds(trees, \u0026quot;trees.rds\u0026quot;)\rtrees2 \u0026lt;- read_rds(\u0026quot;trees.rds\u0026quot;)\ridentical(trees, trees2)\r ## [1] TRUE\r 2. Analizando datos con readr 2.1. Modificando la clase de las columnas Aunque las funciones para importar archivos de datos que pone a nuestra disposición la librería readr, realizan una labor estupenda a la hora de inferir la clase de cada una de las columnas que componen una tabla, su comportamiento dista de ser perfecto. Esto se traducirá, seguramente, en la necesidad de llevar a cabo ciertas modificaciones, sobre las mencionadas clases, para algunos casos concretos.\nPara ello, la función adecuada a utilizar es type_convert(), que incorpora el conocido argumento col_types en su llamada. Ilustremos su uso y aprovechemos, además, para emplear la notación abreviada para los tipos de datos que readr ofrece. Tomaremos el objeto trees y declararemos todas sus columnas de tipo numeric.\n?type_convert\r trees3 \u0026lt;- type_convert(trees, col_types = cols(\rGirth = \u0026quot;d\u0026quot;, Height = \u0026quot;d\u0026quot;, Volume = \u0026quot;d\u0026quot;)\r)\r ## Warning: The following named parsers don't match the column names: Girth,\r## Height, Volume\r str(trees3)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 31 obs. of 3 variables:\r## $ Girth : num 8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\r## $ Height: int 70 65 63 72 81 83 66 75 80 75 ...\r## $ Volume: num 10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 3\r## .. ..$ Girth : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ Height: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ Volume: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r Nota: aunque la función se utiliza tal y como está descrito (e incluso en el propio curso de DataCamp ésta sería la respuesta adecuada), he encontrado algún tipo de problema al emplear type_convert(), de forma que no reconoce los nombres de las columnas.\n2.2. Transformando columnas de texto en factores Una de las características de las funciones de importación de datos de la librería readr es que no interpretan, de manera automática, las columnas que poseen cadenas de texto como factores. No obstante, en ocasiones nos puede interesar que la clase de algunas columnas sea factor.\nEn estas situaciones, podemos utilizar la función parse_factor() sobre las columnas del objeto recién importado que buscamos sean factores, especificando, si queremos, los niveles que adoptan.\n?parse_factor\r Ilustremos su uso mediante un ejemplo. En el objeto salaries, que generamos en el capítulo anterior, la primera columna, X1, contiene el tipo de profesor universitario; mientras que la segunda, X5, hace referencia al sexo de la persona. Transformemos ambas en factores.\nsalaries$X1 \u0026lt;- parse_factor(salaries$X1,\rlevels = c(\u0026quot;Prof\u0026quot;, \u0026quot;AsstProf\u0026quot;, \u0026quot;AssocProf\u0026quot;))\rsalaries$X5 \u0026lt;- parse_factor(salaries$X5, levels = c(\u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;))\r head(salaries)\r ## # A tibble: 6 × 3\r## X1 X5 X6\r## \u0026lt;fctr\u0026gt; \u0026lt;fctr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Prof Male 139750\r## 2 Prof Male 173200\r## 3 AsstProf Male 79750\r## 4 Prof Male 115000\r## 5 Prof Male 141500\r## 6 AssocProf Male 97000\r str(salaries)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 397 obs. of 3 variables:\r## $ X1: Factor w/ 3 levels \u0026quot;Prof\u0026quot;,\u0026quot;AsstProf\u0026quot;,..: 1 1 2 1 1 3 1 1 1 1 ...\r## $ X5: Factor w/ 2 levels \u0026quot;Male\u0026quot;,\u0026quot;Female\u0026quot;: 1 1 1 1 1 1 1 1 1 2 ...\r## $ X6: int 139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 6\r## .. ..$ X1: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X2: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X3: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X4: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_skip\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X5: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ X6: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 2.3. Trabajando con fechas Si una de las columnas del archivo de datos viene dada en la forma YYYY-MM-DD, las funciones de importación de la librería readr la interpretarán automáticamente como de tipo Date (fecha).\nNo obstante, si en la tabla están presentes algunos valores que son fechas y no se ajustan a la estructura comentada arriba, a través de la función parse_date() (y su argumento format) podemos lidiar con esta situación.\n?parse_date\r Consideremos el siguiente ejemplo: en el archivo weather.csv, donde se recogen distintos indicadores relacionados con el clima, la columna date contiene la fecha en el formato \u0026ldquo;mes/día/año\u0026rdquo;. Con esta información, procedamos a transformar la clase de la columna de manera oportuna.\nweather \u0026lt;- read_csv(\u0026quot;datasets/weather.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## origin = col_character(),\r## date = col_character(),\r## hour = col_integer(),\r## temp = col_double(),\r## dewp = col_double(),\r## humid = col_double(),\r## wind_dir = col_integer(),\r## wind_speed = col_double(),\r## wind_gust = col_double(),\r## precip = col_double(),\r## pressure = col_double(),\r## visib = col_double()\r## )\r head(weather)\r ## # A tibble: 6 × 12\r## origin date hour temp dewp humid wind_dir wind_speed wind_gust\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 EWR 12/22/2013 9 64.94 60.98 87.00 190 13.80936 15.891535\r## 2 EWR 7/23/2013 6 77.00 75.20 94.19 140 4.60312 5.297178\r## 3 EWR 10/30/2013 11 44.96 35.96 70.52 0 0.00000 0.000000\r## 4 EWR 12/25/2013 21 28.04 6.08 38.69 250 3.45234 3.972884\r## 5 EWR 6/18/2013 9 66.02 62.06 87.05 10 5.75390 6.621473\r## 6 EWR 5/5/2013 15 57.92 37.04 45.58 NA 4.60312 5.297178\r## # ... with 3 more variables: precip \u0026lt;dbl\u0026gt;, pressure \u0026lt;dbl\u0026gt;, visib \u0026lt;dbl\u0026gt;\r str(weather)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 500 obs. of 12 variables:\r## $ origin : chr \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; ...\r## $ date : chr \u0026quot;12/22/2013\u0026quot; \u0026quot;7/23/2013\u0026quot; \u0026quot;10/30/2013\u0026quot; \u0026quot;12/25/2013\u0026quot; ...\r## $ hour : int 9 6 11 21 9 15 11 11 15 20 ...\r## $ temp : num 64.9 77 45 28 66 ...\r## $ dewp : num 60.98 75.2 35.96 6.08 62.06 ...\r## $ humid : num 87 94.2 70.5 38.7 87 ...\r## $ wind_dir : int 190 140 0 250 10 NA 310 0 350 290 ...\r## $ wind_speed: num 13.81 4.6 0 3.45 5.75 ...\r## $ wind_gust : num 15.89 5.3 0 3.97 6.62 ...\r## $ precip : num 0.01 0.01 0 0 0 0 0 0 0 0 ...\r## $ pressure : num 1010 NA 1026 1033 1012 ...\r## $ visib : num 10 4 10 10 10 10 10 0.25 10 10 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 12\r## .. ..$ origin : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ date : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ hour : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ temp : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ dewp : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ humid : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_dir : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_speed: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_gust : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ precip : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ pressure : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ visib : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r weather$date \u0026lt;- parse_date(weather$date, format = \u0026quot;%m/%d/%Y\u0026quot;)\r head(weather)\r ## # A tibble: 6 × 12\r## origin date hour temp dewp humid wind_dir wind_speed wind_gust\r## \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 EWR 2013-12-22 9 64.94 60.98 87.00 190 13.80936 15.891535\r## 2 EWR 2013-07-23 6 77.00 75.20 94.19 140 4.60312 5.297178\r## 3 EWR 2013-10-30 11 44.96 35.96 70.52 0 0.00000 0.000000\r## 4 EWR 2013-12-25 21 28.04 6.08 38.69 250 3.45234 3.972884\r## 5 EWR 2013-06-18 9 66.02 62.06 87.05 10 5.75390 6.621473\r## 6 EWR 2013-05-05 15 57.92 37.04 45.58 NA 4.60312 5.297178\r## # ... with 3 more variables: precip \u0026lt;dbl\u0026gt;, pressure \u0026lt;dbl\u0026gt;, visib \u0026lt;dbl\u0026gt;\r str(weather)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 500 obs. of 12 variables:\r## $ origin : chr \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; \u0026quot;EWR\u0026quot; ...\r## $ date : Date, format: \u0026quot;2013-12-22\u0026quot; \u0026quot;2013-07-23\u0026quot; ...\r## $ hour : int 9 6 11 21 9 15 11 11 15 20 ...\r## $ temp : num 64.9 77 45 28 66 ...\r## $ dewp : num 60.98 75.2 35.96 6.08 62.06 ...\r## $ humid : num 87 94.2 70.5 38.7 87 ...\r## $ wind_dir : int 190 140 0 250 10 NA 310 0 350 290 ...\r## $ wind_speed: num 13.81 4.6 0 3.45 5.75 ...\r## $ wind_gust : num 15.89 5.3 0 3.97 6.62 ...\r## $ precip : num 0.01 0.01 0 0 0 0 0 0 0 0 ...\r## $ pressure : num 1010 NA 1026 1033 1012 ...\r## $ visib : num 10 4 10 10 10 10 10 0.25 10 10 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 12\r## .. ..$ origin : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ date : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ hour : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ temp : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ dewp : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ humid : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_dir : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_integer\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_speed: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ wind_gust : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ precip : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ pressure : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ visib : list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_double\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 2.4. Trabajando con números Es posible que la tabla que deseamos importar contenga, entre sus valores, expresiones numéricas asociadas cantidades monetarias, de manera que incluyan caracteres no numéricos (como el símbolo de la moneda o diversos separadores de millares, por ejemplo).\nEn estos casos, la función a utilizar, de la librería readr, es parse_number(), que omite los mencionados caracteres no numéricos presentes en los valores de una columna.\n?parse_number\r En el archivo debt.csv tenemos datos relacionados con la deuda nacional de Estados Unidos para ciertos años. Importemos el archivo y examinemos su contenido.\ndebt \u0026lt;- read_csv(\u0026quot;datasets/national_debt.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## V1 = col_character(),\r## V2 = col_character()\r## )\r head(debt)\r ## # A tibble: 6 × 2\r## V1 V2\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 9/30/15 $18,150,617,666,484.30\r## 2 9/30/14 $17,824,071,380,733.80\r## 3 9/30/13 $16,738,183,526,697.30\r## 4 9/30/12 $16,066,241,407,385.80\r## 5 9/30/11 $14,790,340,328,557.10\r## 6 9/30/10 $13,561,623,030,891.70\r str(debt)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 16 obs. of 2 variables:\r## $ V1: chr \u0026quot;9/30/15\u0026quot; \u0026quot;9/30/14\u0026quot; \u0026quot;9/30/13\u0026quot; \u0026quot;9/30/12\u0026quot; ...\r## $ V2: chr \u0026quot;$18,150,617,666,484.30\u0026quot; \u0026quot;$17,824,071,380,733.80\u0026quot; \u0026quot;$16,738,183,526,697.30\u0026quot; \u0026quot;$16,066,241,407,385.80\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 2\r## .. ..$ V1: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ V2: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r Apliquemos ahora la función parse_number() a la segunda columna de la tabla.\ndebt$V2 \u0026lt;- parse_number(debt$V2)\rhead(debt)\r ## # A tibble: 6 × 2\r## V1 V2\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 9/30/15 1.815062e+13\r## 2 9/30/14 1.782407e+13\r## 3 9/30/13 1.673818e+13\r## 4 9/30/12 1.606624e+13\r## 5 9/30/11 1.479034e+13\r## 6 9/30/10 1.356162e+13\r str(debt)\r ## Classes 'tbl_df', 'tbl' and 'data.frame': 16 obs. of 2 variables:\r## $ V1: chr \u0026quot;9/30/15\u0026quot; \u0026quot;9/30/14\u0026quot; \u0026quot;9/30/13\u0026quot; \u0026quot;9/30/12\u0026quot; ...\r## $ V2: num 1.82e+13 1.78e+13 1.67e+13 1.61e+13 1.48e+13 ...\r## - attr(*, \u0026quot;spec\u0026quot;)=List of 2\r## ..$ cols :List of 2\r## .. ..$ V1: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## .. ..$ V2: list()\r## .. .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_character\u0026quot; \u0026quot;collector\u0026quot;\r## ..$ default: list()\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;collector_guess\u0026quot; \u0026quot;collector\u0026quot;\r## ..- attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;col_spec\u0026quot;\r 2.5. Accediendo a los metadatos de un archivo En ocasiones, puede resultar de utilidad tener una idea previa de cómo las funciones de la librería readr van a interpretar las columnas de un conjunto de datos antes de importarlo. De esta forma, en el caso de que las clases inferidas no sean las adecuadas, podemos optar por declarar el tipo de alguna de ellas con antelación.\nCon tal fin existen las funciones spec_csv() y spec_tsv(), para los archivos separados por comas y por tabulaciones, respectivamente. En el caso de tener que trabajar con otro tipo de ficheros (por ejemplo, .csv en formato europeo), usaremos spec_delim(), especificando el símbolo que hace las veces de separador de columnas en el archivo de datos.\n?spec_csv\r Por ejemplo, retomemos el primer ejemplo de este documento, aquel que trabajaba con el archivo chickwts.csv, que contenía información relativa al peso y tipo de alimentación de ciertos pollos. Veamos cuáles serían las clases que la función read_csv() inferiría para sus columnas a la hora de importarlo.\nspec_csv(\u0026quot;datasets/chickwts.csv\u0026quot;)\r ## Parsed with column specification:\r## cols(\r## weight = col_integer(),\r## feed = col_character()\r## )\r## cols(\r## weight = col_integer(),\r## feed = col_character()\r## )\r ","date":1534219179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"df029a62d774beacc0f0bb5fd3da49f3","permalink":"https://imalexissaez.github.io/2018/08/14/breve-introduccion-a-la-libreria-readr/","publishdate":"2018-08-14T05:59:39+02:00","relpermalink":"/2018/08/14/breve-introduccion-a-la-libreria-readr/","section":"post","summary":"En este artículo exploraremos las posibilidades que nos ofrece una librería de R, readr, integrante del famoso 'tidyverso', de cara a la importación y exportación de nuestros conjuntos de datos.","tags":["R","readr"],"title":"Breve introducción a la librería readr","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 4: Dada una constante real positiva, $a$, y el conjunto\n$$ M_a = \\left{z\\in\\mathbb{C}^* : \\left|z+\\dfrac{1}{z}\\right|=a \\right}, $$\ndonde $\\mathbb{C}^* = \\mathbb{C}\\backslash{(0,0)}$, encuentre los valores mínimo y máximo de $|z|$ cuando $z\\in M_a$.\n Hemos de ser capaces de extraer información sobre el módulo de $z$, $|z|$, a partir de la expresión de la ecuación que define al conjunto $M_a$. Por las propiedades de la conjugación, sabemos que $z\\overline{z} = |z|^2$, de manera que una posible estrategia a seguir sería elevar al cuadrado ambos miembros de la ecuación que define a $M_a$ y desarrollar la expresión resultante mediante las propiedades de la conjugación. Así,\n$$ \\begin{aligned} a^2 \u0026amp;= \\left|z+\\dfrac{1}{z}\\right|^2 = \\left(z+\\dfrac{1}{z}\\right)\\overline{\\left(z+\\dfrac{1}{z}\\right)} = \\left(z+\\dfrac{1}{z}\\right)\\left(\\overline{z}+\\dfrac{1}{\\overline{z}}\\right)\\\n\u0026amp;= z\\overline{z} + \\dfrac{z}{\\overline{z}} + \\dfrac{\\overline{z}}{z} + \\dfrac{1}{z\\overline{z}} = z\\overline{z} + \\dfrac{z^2 + \\overline{z}^2}{\\overline{z}z} + \\dfrac{1}{z\\overline{z}}, \\end{aligned} $$\npero recordemos que $z\\overline{z} = |z|^2$, por lo que la anterior ecuación quedaría\n$$ a^2 = |z|^2 + \\dfrac{z^2+\\overline{z}^2}{|z|^2}+\\dfrac{1}{|z|^2}, $$\ny multiplicando ambos miembros por $|z|^2$, número que sabemos es distinto de cero porque $z\\in\\mathbb{C}^*$, tenemos\n$$ a^2|z|^2 = |z|^4 + z^2 + \\overline{z}^2 + 1. $$\nAhora bien, a primera vista, la anterior expresión parece que quiere conducirnos hacia alguna especie de ecuación bicuadrada en $|z|$. Efectivamente, si reordenamos los términos de manera adecuada, llegamos a\n$$ |z|^4 - a^2|z|^2 + 1 = - (z^2 + \\overline{z}^2) $$\ny si completamos el cuadrado del miembro derecho,\n$$ \\begin{aligned} |z|^4 - a^2|z|^2 + 1 \u0026amp;= - (z^2 + \\overline{z}^2 + 2z\\overline{z} - 2z\\overline{z})\\\n\u0026amp;= - (z + \\overline{z})^2 + 2z\\overline{z}\\\n\u0026amp;= - (z + \\overline{z})^2 + 2|z|^2, \\end{aligned} $$\nes decir,\n$$ |z|^4 - (a^2+2)|z|^2 + 1 = - (z+\\overline{z})^2 \\leq 0. $$\nPor lo tanto, tras realizar operaciones algebraicas sobre la ecuación que define al conjunto $M_a$, hemos llegado a que la expresión de cierta ecuación bicuadrada en $|z|$ debe ser menor o igual que cero. Investiguemos si de ella podemos extraer alguna condición sobre el módulo de $z$ que nos permita dar respuesta al problema planteado.\nResolviendo $|z|^4 - (a^2 + 2)|z|^2 + 1 = 0$ y teniendo en cuenta que es positivo el coeficiente asociado a $|z|^4$, tenemos que $|z|^4 - (a^2 + 2)|z|^2 + 1 \\leq 0$ si, y solo si,\n$$ |z|^2\\in \\left[ \\dfrac{2+a^2 - \\sqrt{a^4+4a^2}}{2}, \\dfrac{2+a^2 + \\sqrt{a^4+4a^2}}{2} \\right], $$\nque es equivalente a decir que\n$$ |z|\\in \\left[ \\dfrac{-a + \\sqrt{a^2+4}}{2}, \\dfrac{a + \\sqrt{a^2+4}}{2} \\right]. $$\nVeamos esta última equivalencia en detalle, pues puede no resultarnos trivial a primera vista. La idea aquí es representar ambos extremos del intervalo que hemos obtenido para $|z|^2$ como cuadrados de ciertas expresiones. Si somos capaces de llevar a cabo tal tarea, únicamente bastará aplicar la raíz cuadrada (que, recordemos, es una transformación monótona creciente) para, de esta manera, llegar a la conclusión obtenida para $|z|$.\nCentrémonos en la expresión del extremo inferior del intervalo definido para $|z|^2$ (el razonamiento a seguir sería análogo para el superior). Por un lado,\n$$ 2+a^2 - \\sqrt{a^4 + 4a^2} = 2+a^2 - a\\sqrt{a^2 + 4}, $$\nexpresión que nos invita a experimentar con el desarrollo de $(-a + \\sqrt{a^2 + 4})^2$. Así,\n$$ \\begin{aligned} (-a + \\sqrt{a^2+4})^2 \u0026amp;= a^2 + a^2 + 4 - 2a\\sqrt{a^2+4}\\\n\u0026amp;= 2a^2+4 - 2a\\sqrt{a^2+4}\\\n\u0026amp;= 2(a^2+2-a\\sqrt{a^2+4})\\\n\u0026amp;= 2(a^2+2-\\sqrt{a^4+4a^2}), \\end{aligned} $$\nde forma que\n$$ \\dfrac{2+a^2 - \\sqrt{a^4+4a^2}}{2} = \\dfrac{(-a + \\sqrt{a^2+4})^2}{2\\cdot 2} = \\left(\\dfrac{-a + \\sqrt{a^2+4}}{2}\\right)^2. $$\nPor tanto, hemos llegado a que\n$$ \\begin{aligned} \\min{|z|} \u0026amp;= \\dfrac{-a+\\sqrt{a^2+4}}{2},\\\\ \\max{|z|} \u0026amp;= \\dfrac{a+\\sqrt{a^2+4}}{2}, \\end{aligned} $$\ny los valores extremos se alcanzarán cuando se dé la igualdad en la inecuación considerada, es decir, cuando $-(z+\\overline{z})^2 = 0$, que equivale a la condición $z=-\\overline{z}$. Así pues, los valores extremos se alcanzarán para los números complejos $z\\in M_a$ tales que $z=-\\overline{z}$.\nReferencia:\n Andreescu, T., \u0026amp; Andrica, D., (2006), Complex Numbers from A to\u0026hellip; Z, Boston: Birkhäuser.  ","date":1533959979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563919201,"objectID":"54eb134678622da105cc421bb8ffbcb5","permalink":"https://imalexissaez.github.io/2018/08/11/jugando-con-las-propiedades-del-conjugado/","publishdate":"2018-08-11T05:59:39+02:00","relpermalink":"/2018/08/11/jugando-con-las-propiedades-del-conjugado/","section":"post","summary":"Problema 4: cómo una buena simplificación te facilita enormemente la vida.","tags":["Números complejos","Problemas"],"title":"Jugando con las propiedades del conjugado","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Nos quedamos, en la anterior entrada del Proyecto Metablog, a falta de revisar la parte final del archivo de configuración config.toml. Terminemos pues de echarle un vistazo a dicho fichero en este artículo.\nAl finalizar la personalización de los parámetros básicos del sitio web, se asomaba ante nosotros el siguiente, y muy extraño, bloque de código:\n#[[Params.bigimg]]\r# src = \u0026quot;img/triangle.jpg\u0026quot;\r# desc = \u0026quot;Triangle\u0026quot;\r#[[Params.bigimg]]\r# src = \u0026quot;img/sphere.jpg\u0026quot;\r# desc = \u0026quot;Sphere\u0026quot;\r# # position: see values of CSS background-position.\r# position = \u0026quot;center top\u0026quot;\r#[[Params.bigimg]]\r# src = \u0026quot;img/hexagon.jpg\u0026quot;\r# desc = \u0026quot;Hexagon\u0026quot;\r Nada intuitivo su contenido y carente por completo de comentarios, hecho nada halagüeño. Sin embargo, basta que experimentemos un poco con la anteriores líneas para comprobar que esta sección del archivo config.toml es la dedicada a gestionar la aparición de un carrusel de imágenes en la página web de acceso, situándolo justo detrás del título.\nConviene que le echemos un vistazo a la entrada que aparece en el propio blog de ejemplo del tema Beautiful Hugo hablando de la gestión de imágenes de cabecera. En el caso de haber varias declaradas, estas rotan cada diez segundos. Por otro lado, tenemos a nuestra disposición los siguientes parámetros de configuración:\n src: ruta que apunta a la ubicación de la imagen de cabecera. desc: parámetro opcional que nos permite incorporar un pequeño texto sobre la imagen, a modo de pie de figura.  En mi caso, tras navegar un rato por Unsplash, descargué fotografías hasta componer un carrusel de cinco imágenes a las que no incorporé pie de figura alguno. Por tanto, el anterior bloque de código me ha quedado como sigue:\n#\r# Configuración del carrusel de imágenes de la página de inicio\r#\r[[Params.bigimg]]\rsrc = \u0026quot;img/homepage-cabecera-01.jpg\u0026quot;\r[[Params.bigimg]]\rsrc = \u0026quot;img/homepage-cabecera-02.jpg\u0026quot;\r[[Params.bigimg]]\rsrc = \u0026quot;img/homepage-cabecera-03.jpg\u0026quot;\r[[Params.bigimg]]\rsrc = \u0026quot;img/homepage-cabecera-04.jpg\u0026quot;\r[[Params.bigimg]]\rsrc = \u0026quot;img/homepage-cabecera-05.jpg\u0026quot;\r Desvelado el anterior misterio, continuemos con la revisión del archivo config.toml. El siguiente bloque de instrucciones hace referencia a los datos sobre el autor del sitio web (nombre, correo electrónico, etc.). Nos permite, además, configurar una amplia gama de enlaces a nuestras cuentas de redes sociales para así facilitar la conexión entre personas. Originalmente, dicho bloque presenta el siguiente aspecto:\n[Author]\rname = \u0026quot;Some Person\u0026quot;\rwebsite = \u0026quot;yourwebsite.com\u0026quot;\remail = \u0026quot;youremail@domain.com\u0026quot;\rfacebook = \u0026quot;username\u0026quot;\rgoogleplus = \u0026quot;+username\u0026quot; # or xxxxxxxxxxxxxxxxxxxxx\rgithub = \u0026quot;username\u0026quot;\rgitlab = \u0026quot;username\u0026quot;\rbitbucket = \u0026quot;username\u0026quot;\rtwitter = \u0026quot;username\u0026quot;\rreddit = \u0026quot;username\u0026quot;\rlinkedin = \u0026quot;username\u0026quot;\rxing = \u0026quot;username\u0026quot;\rstackoverflow = \u0026quot;users/XXXXXXX/username\u0026quot;\rsnapchat = \u0026quot;username\u0026quot;\rinstagram = \u0026quot;username\u0026quot;\ryoutube = \u0026quot;user/username\u0026quot; # or channel/channelname\rsoundcloud = \u0026quot;username\u0026quot;\rspotify = \u0026quot;username\u0026quot;\rbandcamp = \u0026quot;username\u0026quot;\ritchio = \u0026quot;username\u0026quot;\rvk = \u0026quot;username\u0026quot;\rpaypal = \u0026quot;username\u0026quot;\rtelegram = \u0026quot;username\u0026quot;\r Personalmente, no utilizo apenas las redes sociales y confieso que, del anterior listado, ni siquiera conozco algunas de ellas. Así pues, como no podía ser de otra manera, en mi caso el anterior bloque de código ha quedado ciertamente reducido:\n#\r# Configuración del autor\r#\r[Author]\rname = \u0026quot;Alexis Sáez\u0026quot;\rwebsite = \u0026quot;https://imalexissaez.github.io/\u0026quot;\remail = \u0026quot;imalexissaez@gmail.com\u0026quot;\rgithub = \u0026quot;ImAlexisSaez\u0026quot;\rtwitter = \u0026quot;imalexissaez\u0026quot;\r El último bloque de instrucciones que se presenta ante nosotros nos ofrece la posibilidad de configurar el menú que aparece en la parte superior derecha y presenta el siguiente aspecto:\n[[menu.main]]\rname = \u0026quot;Blog\u0026quot;\rurl = \u0026quot;\u0026quot;\rweight = 1\r[[menu.main]]\rname = \u0026quot;About\u0026quot;\rurl = \u0026quot;page/about/\u0026quot;\rweight = 3\r[[menu.main]]\ridentifier = \u0026quot;samples\u0026quot;\rname = \u0026quot;Samples\u0026quot;\rweight = 2\r[[menu.main]]\rparent = \u0026quot;samples\u0026quot;\rname = \u0026quot;Big Image Sample\u0026quot;\rurl = \u0026quot;post/2017-03-07-bigimg-sample\u0026quot;\rweight = 1\r[[menu.main]]\rparent = \u0026quot;samples\u0026quot;\rname = \u0026quot;Math Sample\u0026quot;\rurl = \u0026quot;post/2017-03-05-math-sample\u0026quot;\rweight = 2\r[[menu.main]]\rparent = \u0026quot;samples\u0026quot;\rname = \u0026quot;Code Sample\u0026quot;\rurl = \u0026quot;post/2016-03-08-code-sample\u0026quot;\rweight = 3\r[[menu.main]]\rname = \u0026quot;Tags\u0026quot;\rurl = \u0026quot;tags\u0026quot;\rweight = 3\r No obstante, de momento, dejaremos el anterior bloque tal cual figura arriba y ya procederemos en un futuro a su modificación, cuando incorporemos algunos cambios adicionales al sitio web.\nFin del archivo config.toml, fin de la entrada, ¿verdad? Todavía no. Nos quedan un par de detalles a los que echarles un vistazo.\nPara empezar, a continuación, configuraremos las taxonomías de nuestro sitio web. ¿Qué es una taxonomía? Sin pretender entrar en detalles técnicos aquí, para que nos hagamos una idea, una taxonomía es un instrumento que nos permite agrupar contenido relacionado. Los ejemplos más habituales a los que estamos acostumbrados son categorías y etiquetas (que aquí se llamarán categories y tags), que facilitan al lector encontrar artículos que comparten cierta temática.\nEn mi caso, para Infinitos Contrastes, conservaré ambas, aunque renombrando su versión inglesa al castellano, para facilitar después la configuración de la localización de la plantilla. Así, categories pasará a ser apartados, mientras que tags se convertirá en etiquetas. Además, declararé una nueva taxonomía denominada proyectos, que me facilitará agrupar fácilmente contenido, llegado el caso, de distintos apartados o etiquetas.\nTodo ello se traduce en incluir el siguiente bloque de código en el fichero config.toml:\n#\r# Configuración de taxonomías\r#\r[taxonomies]\rcategory = \u0026quot;categories\u0026quot;\rtag = \u0026quot;tags\u0026quot;\rapartado = \u0026quot;apartados\u0026quot;\rproyecto = \u0026quot;proyectos\u0026quot;\retiqueta = \u0026quot;etiquetas\u0026quot;\r Recomiendo seguir la estructura singular = plural marcada en la guía oficial de taxonomías de Hugo. De hecho, dado que la formación de plurales en inglés y castellano es diferente, afinaría un poco la anterior recomendación señalando que conviene escoger parejas en donde el plural se diferencie del singular únicamente por el carácter s final.\n¿Por qué debemos cuidar tanto el detalle a la hora de declarar taxonomías? Es posible que en un futuro nos adentremos en la personalización de las plantillas del tema y Hugo incorpora útiles funciones para recorrer bucles apoyándose en esta curiosa relación singular-plural. Es por ello que no vamos a pegarnos un tiro en los pies declarando parejas de variables y valores que luego nos impidan aprovecharnos de las mencionadas herramientas.\nPor último, para finalizar este artículo, echaremos un vistazo a la configuración del permalink de las entradas del sitio web. Por defecto, Hugo utiliza el directorio donde se encuentre el contenido (generalmente es \\post\\) y lo concatena con el título de la entrada, para el que sustituye espacios por guiones.\nPara empezar, me gustaría que apareciese el día de publicación del artículo en el permalink, siguiendo el formato /año/mes/día. Por otro lado, como soy consciente de que utilizar caracteres extraños a ojos del alfabeto inglés (tildes, eñes, etc.), en ocasiones, es fuente de problemas, en cada entrada definiré manualmente mi propio slug, para evitar que la traducción automática del título hacia su correspondiente parte del permalink dé lugar a resultados no deseados.\nAsí pues, mi archivo config.toml finaliza con el siguiente bloque código:\n#\r# Configuración del permalink\r#\r[permalinks]\rpost = \u0026quot;/:year/:month/:day/:slug/\u0026quot;\r En el siguiente artículo del Proyecto Metablog dejaremos a un lado, de momento, la configuración de la plantilla para estudiar cómo generar contenido (en forma de artículos) para nuestro sitio web.\n","date":1533787179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563832801,"objectID":"29467682d841977ab44fad352df54195","permalink":"https://imalexissaez.github.io/2018/08/09/configurando-el-tema-beautiful-hugo-ii/","publishdate":"2018-08-09T05:59:39+02:00","relpermalink":"/2018/08/09/configurando-el-tema-beautiful-hugo-ii/","section":"post","summary":"Lección 6: finalizamos la edición del archivo de configuración del tema Beautiful Hugo.","tags":["Hugo","Beautiful Hugo"],"title":"Configurando el tema Beautiful Hugo (II)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Continuemos esta serie de artículos, pertenecientes al Proyecto Metablog, donde examinamos con detalle la creación de sitios web utilizando Hugo. Hoy veremos cómo instalar y configurar el tema Beautiful Hugo.\nEn la anterior entrada vimos el proceso a seguir para el tema Anake. No obstante, como ya comenté entonces, algunos detalles de dicha plantilla no terminaban de convencerme para la idea que tenía en mente para Infinitos Contrastes. Así pues, tras invertir una considerable cantidad de tiempo en navegar por la sección de temas de la web oficial de Hugo, encontré, para mi fortuna, el tema Beautiful Hugo, una adaptación del tema Beautiful Jekyll que ya utilicé en su momento como plantilla para mi sitio web.\nMe encanta este tema por el protagonismo que ofrece al contenido, evitando toda esa miríada de elementos que algunas plantillas incorporan y que distraen enormemente la atención a la hora de consultar la información contenida en los artículos. Además, viene con el interesante añadido para un matemático de incorporar, de serie, la configuración adecuada para escribir fórmulas vía KaTeX (es un detalle con cierta trampa, ya que buenas batallas estoy lidiando, en ocasiones, para que las expresiones matemáticas se visualicen como deberían).\nAsí pues, procedamos a su instalación. Para ello, en la terminal, desde el directorio raíz donde hayamos escogido alojar localmente nuestro sitio web, tecleamos:\ncd themes\r y clonamos, en esta carpeta, el tema Beautiful Hugo escribiendo:\ngit clone https://github.com/halogenica/beautifulhugo.git beautifulhugo\r Al igual que el tema Anake, Beautiful Hugo viene acompañado, para nuestro gozo y disfrute, con un pequeño sitio web de muestra, ubicado en la carpeta exampleSite (siendo la ruta completa \\themes\\beautifulhugo\\exampleSite). A través del Explorador de archivos de Windows podemos comprobar que su contenido es el que se muestra en la siguiente imagen:\n\r\rContenido del sitio web de ejemplo\r\r\rProcedemos entonces a copiar las carpetas contents, layouts y static, así como el archivo config.toml y las pegamos en el directorio raíz de nuestro sitio web. A estas alturas de la película, dependiendo de la intensidad con la que hayamos estado experimentando con diversas plantillas, recomendaría incluso eliminar previamente las mencionadas carpetas y el citado fichero antes de proceder a la acción de pegar, para así evitar la aparición de extraños conflictos en un futuro próximo.\nAhora, editamos el archivo config.toml, utilizando Sublime Text 3 para ello, con el objetivo de empezar a personalizar la configuración de esta plantilla. Algunos de los detalles que a continuación veremos son muy similares a los que discutimos durante el artículo dedicado al tema Anake, por lo que en esta ocasión el ritmo de exposición será más ligero.\nEl primer bloque de código que encontramos es:\nbaseurl = \u0026quot;https://username.github.io\u0026quot;\rDefaultContentLanguage = \u0026quot;en\u0026quot;\r#DefaultContentLanguage = \u0026quot;ja\u0026quot;\rtitle = \u0026quot;Beautiful Hugo\u0026quot;\rtheme = \u0026quot;beautifulhugo\u0026quot;\rmetaDataFormat = \u0026quot;yaml\u0026quot;\rpygmentsStyle = \u0026quot;trac\u0026quot;\rpygmentsUseClasses = true\rpygmentsCodeFences = true\rpygmentsCodefencesGuessSyntax = true\r#pygmentsUseClassic = true\r#pygmentOptions = \u0026quot;linenos=inline\u0026quot;\r#disqusShortname = \u0026quot;XXX\u0026quot;\r#googleAnalytics = \u0026quot;XXX\u0026quot;\r Algunas variables nos resultarán familiares, por lo que seremos capaces inmediatamente de asignarles sus correspondientes valores. Por ejemplo, las primeras líneas, en mi caso, han quedado como sigue:\n#\r# Configuración básica del sitio\r#\rtitle = \u0026quot;Infinitos Contrastes\u0026quot; # Título de la web\rtheme = \u0026quot;beautifulhugo\u0026quot; # Tema baseurl = \u0026quot;https://imalexissaez.github.io/\u0026quot; # URL base\rmetaDataFormat = \u0026quot;yaml\u0026quot; # Formato de las cabeceras de las entradas\rDefaultContentLanguage = \u0026quot;es\u0026quot; # Lenguaje de la web (activa localización)\r Ninguna sorpresa aquí. Entre los descriptivos nombres que poseen las variables y los comentarios que he añadido, no es descabellado suponer que todos configuraremos de manera adecuada el anterior bloque.\nAhora bien, el siguiente apartado sí que merece explicación por mi parte:\n#\r# Configuración de los bloques de código fuente\r# Guía en: https://gohugo.io/content-management/syntax-highlighting/\r#\rpygmentsStyle = \u0026quot;trac\u0026quot;\rpygmentsUseClasses = true\rpygmentsCodeFences = true\rpygmentsCodefencesGuessSyntax = true\r He dejado en los comentarios un enlace a la guía oficial para la configuración del resaltado de código a la que convendría que echásemos un vistazo. Para empezar, existen diferentes estilos CSS que, principalmente, afectan a los colores en los que se resaltan las palabras clave de los lenguajes de programación, así como al fondo en el que el código aparece. Tras revisar las opciones disponibles, el valor \u0026quot;trac\u0026quot;, en mi opinión, es el que más a juego va con Beautiful Hugo. Por otro lado, como este tema utiliza la librería highlight.js (en lugar de la que Hugo incorpora por defecto) para el mencionado resaltado, hemos de asignar true a la variable pygmentsUseClasses.\nA continuación, habilitamos la posibilidad de escribir código fuente en \u0026ldquo;fences\u0026quot;, es decir, delimitándolo entre los caracteres habituales para ello (echa un vistazo a la guía oficial de Kramdown sobre bloques de código para una rápida referencia). Recomiendo actuar así porque, en ocasiones, el shortcode highlight se comporta de manera extraña, sobre todo en lo que respecta al interlineado cuando incluimos comentarios.\nAdemás, aunque hemos activado la opción de adivinar el lenguaje de programación por su sintaxis, recomendaría aquí que ayudásemos en lo posible a la librería y le indicáramos cuál estamos empleando, para que así aplique la configuración adecuada para él. Actuar así es crítico cuando, como en este artículo, compartimos pequeños bloques de código, de forma que es bastante complicado acertar con el lenguaje de programación dada la escasa información que suministramos.\nFinalmente, nos limitaremos a introducir los valores correspondientes a las cuentas que habremos creado para Disqus y para las estadísticas de Google en el siguiente bloque de código:\n#\r# Configuración de los comentarios (Disqus)\r#\rdisqusShortname = \u0026quot;\u0026quot;\r#\r# Configuración de las estadísticas (Google Analytics)\r#\rgoogleAnalytics = \u0026quot;\u0026quot;\r Nuestra siguiente parada será en la sección dedicada a la configuración de los parámetros del sitio web, que originalmente presenta el aspecto que se muestra a continuación:\n[Params]\r# homeTitle = \u0026quot;Beautiful Hugo Theme\u0026quot; # Set a different text for the header on the home page\rsubtitle = \u0026quot;Build a beautiful and simple website in minutes\u0026quot;\rlogo = \u0026quot;img/avatar-icon.png\u0026quot;\rfavicon = \u0026quot;img/favicon.ico\u0026quot;\rdateFormat = \u0026quot;January 2, 2006\u0026quot;\rcommit = false\rrss = true\rcomments = true\rreadingTime = true\ruseHLJS = true\rsocialShare = true\r# gcse = \u0026quot;012345678901234567890:abcdefghijk\u0026quot; # Get your code from google.com/cse. Make sure to go to \u0026quot;Look and Feel\u0026quot; and change Layout to \u0026quot;Full Width\u0026quot; and Theme to \u0026quot;Classic\u0026quot;\r#[[Params.bigimg]]\r# src = \u0026quot;img/triangle.jpg\u0026quot;\r# desc = \u0026quot;Triangle\u0026quot;\r#[[Params.bigimg]]\r# src = \u0026quot;img/sphere.jpg\u0026quot;\r# desc = \u0026quot;Sphere\u0026quot;\r# # position: see values of CSS background-position.\r# position = \u0026quot;center top\u0026quot;\r#[[Params.bigimg]]\r# src = \u0026quot;img/hexagon.jpg\u0026quot;\r# desc = \u0026quot;Hexagon\u0026quot;\r Empecemos analizando la primera parte que, en mi caso, ha quedado como sigue:\n#\r# Configuración de parámetros del sitio web\r#\r[Params]\rsubtitle = \u0026quot;Laboratorio de experimentos de un matemático\u0026quot; # Subtítulo\rlogo = \u0026quot;img/avatar.jpg\u0026quot; # Logo\rfavicon = \u0026quot;img/favicon.ico\u0026quot; # Favicon\rdateFormat = \u0026quot;02-01-2006\u0026quot; # Formato de la fecha\rcommit = false # commit en footer\rrss = true # Sindicación\rcomments = true # Comentarios activados por defecto\rreadingTime = true # Estimación del tiempo de lectura\ruseHLJS = true # Highlight.js para resaltado\rsocialShare = true # Compartir entradas en redes sociales\r ya que:\n No he visto la necesidad de utilizar la variable homeTitle para modificar el texto que aparece al acceder al sitio web. Me parece adecuado que sea el nombre de la página web: Infinitos Contrastes, pero, como siempre, \u0026ldquo;para gustos, los colores\u0026rdquo;. La variable subtitle sí que me resulta interesante para ofrecer una breve descripción o eslogan de nuestra página web. Los valores para las variables logo y favicon deben apuntar a las rutas donde ubiquemos las respectivas imágenes. Por defecto, las hojas de estilo CSS, las librerías escritas con JavaScript y las imágenes las almacenaremos en el interior del directorio static. Como Hugo supone este hecho, no es necesario que antecedamos cada ruta con static, pero debemos ubicar cada recurso adecuadamente. La localización de Hugo a idiomas diferentes al inglés es todavía un aspecto que admite gran margen de mejora. Aunque Beautiful Hugo incorpora la posibilidad de declarar ciertos textos para distintos idiomas, el tratamiento de las fechas no es todavía el adecuado para las opciones disponibles. Con el objeto de evitar entrar en agotadoras batallas, me he decantado finalmente por un formato \u0026ldquo;neutro\u0026rdquo; para expresar la fecha, en el sentido de que únicamente incluye números, evitando así que en la página aparezcan los nombres de los días de la semana o los de los meses en inglés. La variable commit nos permite insertar el código SHA correspondiente al commit que generó la última versión del sitio web. No he considerado que dicha información fuera a proporcionar demasiada utilidad para una página como la mía, así que he declarado su valor como false. El resto de las variables activan, pues su valor es true, respectivamente, la sindicación vía RSS, la posibilidad de realizar comentarios en los distintos artículos de la web (vía Disqus), una estimación del tiempo de lectura para cada entrada (utilizando como referencia 200 palabras por minuto), el uso de la librería highlight.js para resaltar código y el acceso a compartir nuestro contenido en distintas redes sociales.  Como la entrada está empezando a adquirir una extensión considerable. Vamos a poner aquí un punto y seguido, dejando para el próximo artículo del Proyecto Metablog el análisis del resto de la configuración del archivo config.toml.\n","date":1533614379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563832801,"objectID":"6d15e76359adfeaea5c697e58f9202f8","permalink":"https://imalexissaez.github.io/2018/08/07/configurando-el-tema-beautiful-hugo-i/","publishdate":"2018-08-07T05:59:39+02:00","relpermalink":"/2018/08/07/configurando-el-tema-beautiful-hugo-i/","section":"post","summary":"Lección 5: instalamos el tema Beautiful Hugo y editamos en detalle su archivo de configuración.","tags":["Hugo","Beautiful Hugo"],"title":"Configurando el tema Beautiful Hugo (I)","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"El proceso de actualización de la versión del lenguaje de programación R puede resultar un tanto tedioso si lo llevamos a cabo de forma manual. Veamos cómo hacer más liviana esta pesada carga.\nPor fortuna, tenemos a nuestra disposición el paquete installr, que se encarga de todo el anterior procedimiento automáticamente, a través de la llamada a la función updateR().\nDe esta forma, basta con que tengamos a mano un script similar al que se muestra a continuación, y procedamos a ejecutarlo cuando se anuncie una nueva versión de R:\n# Instala el paquete\rinstall.packages(\u0026quot;installr\u0026quot;)\r# Actualiza R\rlibrary(installr)\rupdateR()\r Al utilizar la función updateR():\n Se comprueba cuál es la última versión de R. Si estamos al día, nos mostrará una ventana de confirmación de tal hecho. En caso contrario, nos dará la posibilidad de consultar las novedades de dicha versión y nos permitirá proceder a su descarga e instalación. Una vez completado el proceso, nos preguntará si deseamos mover (y borrar) las librerías desde nuestra antigua versión a la nueva. Además, nos dará la opción de ponerlas al día. Dependiendo del número de librerías que tengamos instaladas, completar estas acciones puede llevarnos un buen rato.  Si usamos RStudio, al principio se nos mostrará un aviso sugiriéndonos que llevemos a cabo todo el proceso desde la propia interfaz de R, en lugar de a través de este IDE. No obstante, en mi experiencia, podemos tranquilamente ignorar la advertencia y realizar el procedimiento utilizando RStudio. Al terminar, bastará con que reiniciemos el programa para que todo funcione con normalidad.\nFinalmente, podemos ahorrarnos la sucesión de ventanas emergentes si sabemos de antemano que queremos actualizar R, mover (no copiar) las librerías y actualizarlas. Para ello, reescribimos el anterior script como sigue:\n# Instala / carga el paquete\rif(!require(installr)) {install.packages(\u0026quot;installr\u0026quot;); require(installr)} # Instala R, mueve y actualiza paquetes\rupdateR(F, T, T, F, T, F, T)\r ","date":1533355179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563832801,"objectID":"0d7496f41db1b2cdf0b43cfef5b41643","permalink":"https://imalexissaez.github.io/2018/08/04/como-actualizar-facilmente-r-en-windows/","publishdate":"2018-08-04T05:59:39+02:00","relpermalink":"/2018/08/04/como-actualizar-facilmente-r-en-windows/","section":"post","summary":"El proceso de actualización de la versión del lenguaje de programación *R* puede resultar un tanto tedioso si lo llevamos a cabo de forma manual. Veamos cómo hacer más liviana esta pesada carga.","tags":["R","Windows"],"title":"¿Cómo actualizar fácilmente R en Windows?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Estadística"],"content":"Hace unos días, completé la lectura del estupendo artículo \u0026ldquo;Degrees of freedom in planning, running, analyzing, and reporting psychological studies. A checklist to avoid p-hacking\u0026rdquo;, cuya lista de autores es casi tan extensa como el propio título, y de acceso abierto a través de este enlace.\nEn la línea de la famosa idea conocida como \u0026ldquo;The Garden of Forking Paths\u0026rdquo;, acuñada por Andrew Gelman, el mencionado documento lista los múltiples grados de libertad existentes en todas y cada una de las fases de un estudio. Ahora bien, ¿a qué nos referimos cuando hablamos de los grados de libertad de un estudio?\nSin entrar aquí en demasiado detalle, se trata de ciertas decisiones arbitrarias (intencionadas o no) que los investigadores toman en sus investigaciones a la hora de diseñarlas, recoger los datos de interés, analizar éstos y posteriormente reportarlos en publicaciones científicas. Es lógico entonces que nos planteemos la siguiente cuestión: ¿qué efecto poseen los grados de libertad de un estudio sobre las conclusiones alcanzadas?\nEntre otras, las dos principales consecuencias son, por un lado, el incremento de la probabilidad de hallar resultados que no son más que falsos positivos, y, por otra parte, la posibilidad de inflar las estimaciones para los tamaños de los efectos observados. Así pues, ¿es posible evitar su aparición en un estudio?\nA día de hoy, el mejor método (aunque dista de ser perfecto) para que un estudio esté libre de grados de libertad es utilizar, de manera precisa y muy detallada, un recurso conocido como pre-registro (preregistration en inglés). La idea es presentar, e incluso someter a revisión de pares, el plan que seguirá cierta investigación antes de realizar la propia recolección de los datos de interés.\nEn el citado artículo se ofrece un listado (no totalmente exhaustivo) de los grados de libertad que puede presentar un estudio, restringiendo este al marco de referencia habitual utilizado para el contraste de hipótesis. De esta forma, los autores advierten que habría que eliminar o añadir ciertos grados de libertad si es otra la metodología empleada.\nAlgunos de los mencionados grados de libertad están relacionados entre sí (recomiendo consultar la tabla que figura en la última página del artículo) o incluso pueden llegar a dar la impresión de aparecer por duplicado. No obstante, se justifica este hecho por la importancia de adoptar cierta decisión en una fase del estudio u otra.\nA modo de resumen, estos son los 34 grados de libertad de un estudio, desglosados en función de las distintas etapas de una investigación:\n Fase de generación de hipótesis:  [T1] Llevar a cabo investigaciones exploratorias. Esto conduce a una práctica conocida como \u0026ldquo;HARKing\u0026rdquo; (\u0026ldquo;Hypothesizing After Results are Known\u0026rdquo;, que vendría a ser generar hipótesis una vez se conocen los resultados). [T2] Declarar hipótesis imprecisas que no indiquen la dirección del posible efecto. Es un tipo especial de \u0026ldquo;HARKing\u0026rdquo;, ya que el investigador puede luego analizar los datos de dos maneras alternativas.   Fase de diseño:  [D1] Crear múltiples condiciones y variables independientes manipuladas. A medida que el diseño de un estudio adquiere complejidad, esta práctica puede conducir a posibles futuras decisiones con respecto a los niveles de las variables que se están considerando o sobre las condiciones en la que centra el foco de atención. [D2] Medir variables adicionales sin decidir de antemano si éstas serán bien covariables, bien variables independientes, bien variables mediadoras, o bien variables moderadoras. [D3] Registrar la misma variable dependiente de diferentes formas alternativas. Esta práctica puede tentar al investigador a adoptar al final la escala que favorezca la aparición de resultados significativos. [D4] Medir variables dependientes (o incluso probar teorías) adicionales, diseñadas en principio como secundarias en el estudio, que luego adopten un rol primario en los resultados del estudio si las variables principales fallan a la hora de mostrar efecto alguno (esto podría considerarse también como una especie de \u0026ldquo;HARKing\u0026rdquo;). [D5] Incorporar variables adicionales que permitan, a posteriori, al investigador, la exclusión del análisis de ciertos (o incluso grupos de) participantes, con el propósito de encontrar así resultados significativos. [D6] No realizar un análisis del poder estadístico del estudio. Es más, el investigador suele adoptar una posición extremadamente optimista al respecto de este asunto cuando trabaja con muestras pequeñas, lo cual se traduce en estudios de bajo poder estadístico. [D7] No informar acerca del plan de muestreo, permitiendo así la posibilidad de realizar, de manera consecutiva, múltiples pequeños estudios hasta dar con el resultado significativo deseado (y sin haber controlado el efecto que esta práctica posee sobre el error de tipo I).   Fase de recolección de datos:  [C1] No asignar los participantes de un estudio a las condiciones de forma aleatoria, lo cual da lugar a la posible aparición de variables de confusión. [C2] No escoger de manera acertada la técnica de enmascaramiento (simple, doble o triple ciego), bien para los participantes, bien para los investigadores, pudiendo sesgar así los resultados del estudio. [C3] Corregir, codificar o descartar datos durante la fase de recolección, de una forma no coherente con la técnica de enmascaramiento asociada al estudio. [C4] Determinar la regla de parada de recolección de datos en función de si se ha obtenido, o no, el resultado deseado.   Fase de análisis: los puntos que se listan a continuación en este apartado son una serie de decisiones con marcado carácter ad hoc por parte del investigador.  [A1] Seleccionar entre diferentes opciones de tratamiento para los datos incompletos o perdidos. [A2] Especificar el pre-procesamiento de los datos (limpieza, normalización, suavizado o correcciones). [A3] Dictaminar cómo lidiar con las violaciones de los supuestos estadísticos. [A4] Decidir cómo tratar con los valores atípicos. [A5] Determinar la variable dependiente de entre las múltiples alternativas existentes asociadas a una misma teoría. [A6] Probar diferentes maneras de anotar o registrar (o emplear distintas escalas para) una variable dependiente. [A7] Optar por una teoría alternativa como principal resultado. [A8] Escoger las variables independientes de entre un conjunto de variables independientes manipuladas. [A9] Usar las variables independientes manipuladas de diversas formas. [A10] Incluir diferentes variables probándolas bien como covariables, bien como variables independientes, bien como variables mediadoras, bien como variables moderadoras. [A11] Utilizar las variables independientes no manipuladas de distintas maneras. [A12] Usar un criterio alternativo de inclusión y exclusión de participantes. [A13] La propia determinación del modelo estadístico. [A14] La elección del método de estimación, el programa informático donde se va a llevar a cabo el análisis de datos, y la forma en la que se calculan los errores estándar. [A15] La elección del criterio de inferencia.   Fase de informe:  [R1] No asegurar la reproducibilidad del estudio. [R2] No habilitar (o facilitar la posibilidad de) la replicación del estudio. [R3] Para los estudios que han sido pre-registrados, no mencionar, falsificar o identificar erróneamente su pre-registro. [R4] No informar de los denominados \u0026ldquo;estudios fallidos\u0026rdquo; que fueron originalmente considerados relevantes para la investigación propuesta. [R5] No informar adecuadamente de los resultados y los p-valores. [R6] Formular hipótesis después de observar los resultados (el ya nombrado \u0026ldquo;HARKing\u0026rdquo;).    Los autores dedican en el artículo, a cada uno de los anteriores 34 puntos, algunos párrafos para contextualizarlos, explicar su influencia sobre los resultados y ofrecer buenas prácticas para evitar que hagan acto de presencia en el estudio.\nEn resumen, una lectura que merece la pena y que recomiendo encarecidamente.\n","date":1533182379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563836401,"objectID":"897c974cbcb61635d157a531f3b35061","permalink":"https://imalexissaez.github.io/2018/08/02/los-34-grados-de-libertad-de-un-estudio/","publishdate":"2018-08-02T05:59:39+02:00","relpermalink":"/2018/08/02/los-34-grados-de-libertad-de-un-estudio/","section":"post","summary":"Breve análisis del artículo 'Degrees of freedom in planning, running, analyzing, and reporting psychological studies. A checklist to avoid p-hacking'.","tags":["Grados de libertad","Papers"],"title":"Los 34 grados de libertad de un estudio","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En este artículo, señalaremos la legislación vigente al respecto de los temarios de oposiciones para el acceso al cuerpo de profesores de Enseñanza Secundaria, listando completamente el asociado a la especialidad de matemáticas.\nPara empezar, podemos acudir, por ejemplo, a la Orden 13 / 2016, de 3 de mayo, de la Conselleria de Educación, Investigación, Cultura y Deporte, por la que se convoca procedimiento selectivo de ingreso, y procedimiento para la adquisición de nuevas especialidades en los cuerpos docentes de profesores de Enseñanza Secundaria, profesores de escuelas oficiales de idiomas, profesores de Música y Artes Escénicas y profesores técnicos de Formación Profesional.\nEn la Comunidad Valenciana, esta es la orden asociada a la última convocatoria de oposiciones para Educación Secundaria. Nos interesa acudir a su capítulo segundo, que recoge las bases específicas para los distintos cuerpos de profesores, y más concretamente al apartado 15.4. Temarios. En él figura:\n De conformidad con lo previsto en la Orden ECD / 191 / 2012, de 6 de febrero, por la que se regulan los temarios que han de regir en los procedimientos de ingreso, accesos y adquisición de nuevas especialidades en los cuerpos docentes establecidos en la Ley Orgánica 2 / 2006, de 3 de mayo, de Educación, serán de aplicación:\n a) Los temarios establecidos en el anexo III de la Orden de 9 de septiembre de 1993 por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, adquisición de nuevas especialidades y movilidad para determinadas especialidades de los Cuerpos de Maestros, Profesores de Enseñanza Secundaria y Profesores de escuelas oficiales de idiomas, regulados por el Real Decreto 850 / 1993, de 4 de junio, en lo que corresponde a las especialidades del Cuerpo de Profesores de Enseñanza Secundaria. b) Los temarios establecidos en los anexos I y II de la Orden de 1 de febrero de 1996, por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, adquisición de nuevas especialidades y movilidad para determinadas especialidades de los Cuerpos de Profesores de Enseñanza Secundaria y Profesores Técnicos de Formación Profesional.   Por lo que respecta a la Orden ECD / 191 / 2012, es importante que destaquemos, además del contenido de los puntos a) y b) listados arriba, que deroga la Orden EDU / 3138 / 2011, de 15 de noviembre, por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, accesos y adquisición de nuevas especialidades de los Cuerpos de Profesores de Enseñanza Secundaria y Profesores Técnicos de Formación Profesional.\nEsta última declaraba, para la especialidad de matemáticas, un temario compuesto por 74 temas y fue modificada por la Orden EDU / 3530 / 2011, de 19 de diciembre, por la que se corrigen errores y omisiones en la Orden EDU / 3138 / 2011, de 15 de noviembre, por la que se aprueban los temarios que han de regir en los procedimientos de ingreso, accesos y adquisición de nuevas especialidades de los Cuerpos de Profesores de Enseñanza Secundaria y Profesores Técnicos de Formación Profesional. En ella, además de corregir algunas erratas del mencionado temario, incluso añadían un tema adicional, elevando la cifra total hasta 75. Este hecho justifica la discrepancia que aparece cuando realizamos una búsqueda, en Internet, sobre temarios de oposiciones para la especialidad de matemáticas y hemos de actuar con cautela, por tanto.\nAsí pues, consultemos el referido anexo III de la Orden de 9 de septiembre de 1993, que para la especialidad de matemáticas lista los siguientes 71 temas:\n Números naturales. Sistemas de numeración. Fundamentos y aplicaciones de la teoría de grafos. Diagramas en árbol. Técnicas de recuento. Combinatoria. Números enteros. Divisibilidad. Números primos. Congruencia. Números racionales. Números reales. Topología de la recta real. Aproximación de números. Errores. Notación científica. Sucesiones. Término general y forma recurrente. Progresiones aritméticas y geométricas. Aplicaciones. Números complejos. Aplicaciones geométricas. Sucesivas ampliaciones del concepto de número. Evolución histórica y problemas que resuelve cada una. Conceptos básicos de la teoría de conjuntos. Estructuras algebraicas. Espacios vectoriales. Variedades lineales. Aplicaciones entre espacios vectoriales. Teorema de isomorfía. Polinomios. Operaciones. Fórmula de Newton. Divisibilidad de polinomios. Fracciones algebraicas. Ecuaciones. Resolución de ecuaciones. Aproximación numérica de raíces. Ecuaciones diofánticas. Discusión y resolución de sistemas de ecuaciones lineales. Teorema de Rouché. Regla de Cramer. Método de Gauss-Jordan. Programación lineal. Aplicaciones. Matrices. Álgebra de matrices. Aplicaciones al campo de las Ciencias Sociales y de la Naturaleza. Determinantes. Propiedades. Aplicación al cálculo del rango de una matriz. El lenguaje algebraico. Símbolos y números. Importancia de su desarrollo y problemas que resuelve. Evolución histórica del álgebra. Funciones reales de variable real. Funciones elementales; situaciones reales en las que aparecen. Composición de funciones. Funciones exponenciales y logarítmicas. Situaciones reales en las que aparecen. Funciones circulares e hiperbólicas y sus recíprocas. Situaciones reales en las que aparecen. Funciones dadas en forma de tabla. Interpolación polinómica. Interpolación y extrapolación de datos. Límites de funciones. Continuidad y discontinuidades. Teorema de Bolzano. Ramas infinitas. Derivada de una función en un punto. Función derivada. Derivadas sucesivas. Aplicaciones. Desarrollo de una función en serie de potencias. Teorema de Taylor. Aplicaciones al estudio local de funciones. Estudio global de funciones. Aplicaciones a la representación gráfica de funciones. El problema del cálculo del área. Integral definida. Primitiva de una función. Cálculo de algunas primitivas. Aplicaciones de la integral al cálculo de magnitudes geométricas. Integración numérica. Métodos y aplicaciones. Aplicación del estudio de funciones a la interpretación y resolución de problemas de la Economía, las Ciencias Sociales y la Naturaleza. Evolución histórica del cálculo diferencial. Análisis y formalización de los conceptos geométricos intuitivos: incidencia, paralelismo, perpendicularidad, ángulo, etc. Las magnitudes y su medida. Fundamentación de los conceptos relacionados con ellas. Proporciones notables. La razón áurea. Aplicaciones. La relación de semejanza en el plano. Consecuencias. Teorema de Thales. Razones trigonométricas. Trigonometría plana. Resolución de triángulos. Aplicaciones. Geometría del triángulo. Geometría de la circunferencia. Ángulos en la circunferencia. Potencia de un punto a una circunferencia. Movimientos en el plano. Composición de movimientos. Aplicación al estudio de las teselaciones del plano. Frisos y mosaicos. Homotecia y semejanza en el plano. Proyecciones en el plano. Mapas. Planisferios terrestres: principales sistemas de representación. Semejanza y movimientos en el espacio. Poliedros. Teorema de Euler. Sólidos platónicos y arquimedianos. Distintas coordenadas para describir el plano o el espacio. Ecuaciones de curvas y superficies. Generación de curvas como envolventes. Espirales y hélices. Presencia en la Naturaleza, en el Arte y en la Técnica. Superficies de revolución. Cuádricas. Superficies regladas. Presencia en la Naturaleza, en el Arte y en la Técnica. Introducción a las geometrías no euclídeas. Geometría esférica. Sistemas de referencia en el plano y en el espacio. Ecuaciones de la recta y del plano. Relaciones afines. Producto escalar de vectores. Producto vectorial y producto mixto. Aplicaciones a la resolución de problemas físicos y geométricos. Relaciones métricas: perpendicularidad, distancias, ángulos, áreas, volúmenes, etc. Las cónicas como secciones planas de una superficie cónica. Estudio analítico. Presencia en la Naturaleza, el Arte y la Técnica. La geometría fractal. Nociones básicas. Evolución histórica de la geometría. Usos de la estadística: estadística descriptiva y estadística inferencial. Métodos básicos y aplicaciones de cada una de ellas. Población y muestra. Condiciones de representatividad de una muestra. Tipos de muestreo. Tamaño de una muestra. Técnicas de obtención y representación de datos. Tablas y gráficas estadísticas. Tendenciosidad y errores más comunes. Parámetros estadísticos. Cálculo, significado y propiedades. Desigualdad de Tchebyschev. Coeficiente de variación. Variable normalizada. Aplicación al análisis, interpretación y comparación de datos estadísticos. Series estadísticas bidimensionales. Regresión y correlación lineal. Coeficiente de correlación. Significado y aplicaciones. Frecuencia y probabilidad. Leyes del azar. Espacio probabilístico. Probabilidad compuesta. Probabilidad condicionada. Probabilidad total. Teorema de Bayes. Distribuciones de probabilidad de variable discreta. Características y tratamiento. Las distribuciones binomial y de Poisson. Aplicaciones. Distribuciones de probabilidad de variable continua. Características y tratamiento. La distribución normal. Aplicaciones. Inferencia estadística. Test de hipótesis. Aplicaciones de la estadística y el cálculo de probabilidades al estudio y toma de decisiones en problemas de las Ciencias Sociales y de la Naturaleza. Evolución histórica. La resolución de problemas en matemáticas. Estrategias. Importancia histórica. Lógica proposicional. Ejemplos y aplicaciones al razonamiento matemático. La controversia sobre los fundamentos de la matemática. Las limitaciones internas de los sistemas formales.  Para elaborar cada uno de los anteriores temas, que deberían destacar por su originalidad, nos pueden resultar interesantes las siguientes referencias:\n Diego, B. y Llerena, A., (1993), Temas de oposiciones a profesores de enseñanza secundaria, Madrid, España: Editorial Deimos. Galván, F., Gamboa, J. M. y Rodríguez, M., (2011), Desarrollo del nuevo temario de las oposiciones de secundaria (Matemáticas), Madrid, España: Sanz y Torres.  ","date":1533009579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1533009579,"objectID":"00d5a9990dc9e25c936028b567c95c63","permalink":"https://imalexissaez.github.io/2018/07/31/sobre-los-temarios-de-oposiciones/","publishdate":"2018-07-31T05:59:39+02:00","relpermalink":"/2018/07/31/sobre-los-temarios-de-oposiciones/","section":"post","summary":"En este artículo señalaremos la legislación vigente al respecto de los temarios de oposiciones para el acceso al cuerpo de profesores de Enseñanza Secundaria, listando completamente el asociado a la especialidad de matemáticas.","tags":["Legislación","Temarios"],"title":"Sobre los temarios de oposiciones","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En el presente artículo abordaremos en detalle un interesante problema propuesto en la convocatoria de oposiciones de Andalucía, de este mismo año 2018, para la especialidad de matemáticas.\n Problema 3: Demuestra que todos los términos de la sucesión $\\{a_n\\}_{n\u0026gt;2}$ son múltiplos de $600$, siendo\n$$ a_n = (n^2-1)(n^2+1)(n^4-16)n^2. $$\n Es más que razonable que, en una primera aproximación a la resolución de este problema, estemos tentados a probar la afirmación dada en el enunciado utilizando el principio de inducción matemática. Esta senda nos llevaría a definir, seguramente, $P(n)$ de forma similar a la siguiente: existe $k\\in\\mathbb{Z}$ tal que si $n\u0026gt;2$, entonces\n$$ a_n = (n^2-1)(n^2+1)(n^4-16)n^2 = 600k. $$\nEl caso base, $P(3)$ en esta ocasión, comprobamos rápidamente que se satisface, ya que\n$$ \\begin{aligned} a_3 \u0026amp;= (3^2-1)(3^2+1)(3^4-16)3^2\\\\ \u0026amp;= 2^3\\cdot (2\\cdot 5)\\cdot (5\\cdot 13)\\cdot 3^2\\\\ \u0026amp;= 2^3\\cdot 3\\cdot 5^2\\cdot (2\\cdot 3\\cdot 13)\\\\ \u0026amp;= 600\\cdot(2\\cdot 3\\cdot 13), \\end{aligned} $$\ny bastaría tomar $k = 2\\cdot 3\\cdot 13 = 78$ para concluir que $a_3$ es un múltiplo de $600$.\nSin embargo, es posible que nuestro barco escore a la hora de abordar el paso inductivo. Recordemos que ahora hemos de mostrar que si $P(n)$ se cumple, para un $n\u0026gt;2$, entonces asimismo se satisface $P(n+1)$, cuya expresión es\n$$ a_{n+1} = ((n+1)^2-1)((n+1)^2+1)((n+1)^4-16)(n+1)^2. $$\nA primera vista, es ciertamente complejo utilizar la información disponible en la hipótesis de inducción, $P(n)$, para verificar $P(n+1)$.\nEn este momento, deberíamos descartar por completo la opción de desarrollar ambas expresiones para compararlas, puesto que entre manos tenemos un producto de cuatro polinomios, donde uno de los cuales es de grado considerable. Es más, no quiero siquiera empezar a imaginar la posible cantidad de errores de cálculo en los que podemos caer desarrollando la expresión de $P(n+1)$. Estos problemas están diseñados para resolverse en un período de tiempo razonable, hecho que nos debe invitar a considerar estrategias de resolución alternativas a la propuesta en primer lugar.\nAsí pues, a continuación, optaremos por llevar a cabo un enfoque diferente. Si estudiamos con detalle la expresión de $a_n$, enseguida apreciaremos que en ella aparecen un par de términos de la forma $a^2 - b^2$, concretamente $n^2 - 1$ y $n^4 - 16$. Esta situación puede hacernos sospechar que la clave pase por factorizar la expresión de $a_n$, utilizando para ello la identidad notable $a^2 - b^2 = (a+b)(a-b)$. Aplicándola, podemos escribir\n$$ \\begin{aligned} n^2-1\u0026amp;=(n+1)(n-1),\\\\ n^4-16\u0026amp;=(n^2+4)(n^2-4)=(n^2+4)(n+2)(n-2), \\end{aligned} $$\nquedando entonces\n$$ a_n = (n+1)(n-1)(n^2+1)(n^2+4)(n+2)(n-2)n^2. $$\nNo parece que estemos avanzando en la buena dirección. Sin embargo, hay cuatro términos que habrán captado nuestra atención seguramente: $(n+1)$, $(n-1)$, $(n+2)$ y $(n-2)$. Quizá ayude reescribir $a_n$ de la siguiente manera:\n$$ a_n = (n-2)(n-1)(n+1)(n+2)(n^2+1)(n^2+4)n^2. $$\nNos faltaría una $n$ entre los términos $(n-1)$ y $(n+1)$ para tener en la primera parte de la expresión de $a_n$ cinco números naturales consecutivos, ya que, por hipótesis, $n\u0026gt;2$. No obstante, en realidad sí que tenemos a nuestro alcance dicha $n$, pues podemos escribir el término $n^2=n\\cdot n$, y nos quedaría entonces que\n$$ a_n = (n-2)(n-1)n(n+1)(n+2)n(n^2+1)(n^2+4). $$\nEsta situación nos invita a escribir $a_n = u\\cdot v$, con\n$$ \\begin{aligned} u\u0026amp;=(n-2)(n-1)n(n+1)(n+2),\\\\ v\u0026amp;=n(n^2+1)(n^2+4), \\end{aligned} $$\ny estudiar cada una de sus partes por separado\nTal y como hemos indicado arriba, como $n\u0026gt;2$, en $u$ observamos el producto de cinco números naturales consecutivos, por lo que siempre seremos capaces de encontrar entre ellos un múltiplo de $2$, uno de $3$, uno de $4$ y uno de $5$. Es decir, sabemos que existe $k\\in\\mathbb{N}$ de manera que podemos escribir la factorización en números primos de $u$ como\n$$ \\begin{aligned} u \u0026amp;= 2\\cdot3\\cdot4\\cdot5\\cdot k \\\\ \u0026amp;= 2^3\\cdot 3\\cdot 5\\cdot k\\\\ \u0026amp;= 120\\cdot k, \\end{aligned} $$\ny, por tanto, $u$ es un múltiplo de $120$.\nBastaría ahora que comprobásemos que\n$$ v=n(n^2+1)(n^2+4) $$\nes múltiplo de $5$ para que el enunciado del ejercicio propuesto se satisfaga. Llevaremos a cabo tal tarea utilizando restos potenciales módulo 5, de manera que analizaremos, acto seguido, todos y cada uno de los casos posibles que puede presentar $n$:\n Si $n\\equiv 0\\pmod{5}$, trivialmente $v$ es múltiplo de $5$, al ser $n$ uno de sus factores. Si $n\\equiv 1\\pmod{5}$, $(n^2+4)\\equiv (1+4)\\pmod{5}\\equiv 0\\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+4)$ uno de sus factores. Si $n\\equiv 2\\pmod{5}$, $(n^2+1)\\equiv (4+1)\\pmod{5}\\equiv 0\\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+1)$ uno de sus factores. Si $n\\equiv 3\\pmod{5}$, $(n^2+1)\\equiv (9+1)\\pmod{5}\\equiv 0\\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+1)$ uno de sus factores. Si $n\\equiv 4\\pmod{4}$, $(n^2+4)\\equiv (16+4)\\pmod{5}\\equiv 0\\pmod{5}$ y, por tanto, $v$ es múltiplo de 5, al ser $(n^2+4)$ uno de sus factores.  Así pues, como $u$ es múltiplo de $120$, $v$ es múltiplo de $5$ y $120\\cdot 5=600$, podemos concluir que $a_n$, cuando $n\u0026gt;2$, es múltiplo de $600$.\n","date":1532836779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532836779,"objectID":"f9054a9f5037b9e71c275f2ab412e7c3","permalink":"https://imalexissaez.github.io/2018/07/29/uno-de-multiplos-de-600/","publishdate":"2018-07-29T05:59:39+02:00","relpermalink":"/2018/07/29/uno-de-multiplos-de-600/","section":"post","summary":"Problema 3: la clave está en los productos notables.","tags":["Inducción","Problemas","Teoría de números"],"title":"Uno de múltiplos... ¡de 600!","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"A través de Facebook, he tenido acceso a un recurso didáctico bastante interesante, que viene en forma de Trabajo de Fin de Máster (TFM) y ha sido elaborado por Rubén Rodríguez Ballesteros para la Universidad de Valladolid.\n\u0026ldquo;Comparativa histórica del examen de problemas en la prueba selectiva al cuerpo de profesores de secundaria en Castilla y León\u0026rdquo; es el título del TFM al que podemos tener acceso a través de este enlace. En la introducción, su autor nos plantea un par de ambiciosos objetivos:\n Nuestro primer propósito será responder a la necesidad por parte de los futuros opositores de prepararse para la prueba oposición de la mejor forma posible. El mayor obstáculo que encuentran estos en su camino es la parte de problemas de la primera prueba.\nEl segundo objetivo es establecer una comparativa de los problemas a lo largo del tiempo para poder responder al tópico de que los exámenes son cada día más fáciles.\n En mi opinión, uno de los puntos fuertes de este documento reside en la asociación, que lleva a cabo el autor, entre los bloques de contenidos a los que pertenecen los problemas de las últimas convocatorias de oposición (números y sucesiones, álgebra, cálculo infinitesimal, geometría y probabilidad) y los temas del temario oficial que les darían soporte teórico.\nCon esta guía podemos sortear, de cierto modo, ese bloqueo que aparece cuando por primera vez tenemos acceso al listado de 71 temas y careceremos de orientación a la hora de escoger cuáles serán los primeros que elaboraremos. Una buena estrategia sería empezar por aquellos que nos aporten herramientas y resultados interesantes de cara a resolver los problemas, ¿verdad?\nAdemás, el texto aporta una serie de referencias a la legislación de cada una de las convocatorias de oposición que han tenido lugar, desde el año 2000, en Castilla y León. Esta información nos será útil para hacernos una idea de cómo funciona el proceso en sí y su evolución a lo largo de estas casi dos décadas, hecho que quizá nos permita entrever la senda que seguirán futuras convocatorias.\nSin embargo, el principal atractivo de este TFM son los capítulos 3 y 5, que recogen los enunciados de los problemas de oposición de las convocatorias analizadas y adjuntan su resolución completa. Si bien es cierto que ya el autor nos advierte que la mayoría de las soluciones proceden de los volúmenes publicados por la editorial Deimos (me refiero a los que figuran en esta página), aporta, en algunos casos, alternativas que nos resultarán de interés.\nTras finalizar la resolución de los problemas correspondientes a cinco convocatorias, en el apartado de conclusiones el autor ofrece su opinión al respecto de la evolución de la dificultad de los enunciados propuestos:\n La tendencia que se percibe es una preferencia por problemas en los que hace falta dominar la comprensión significativa del temario. Hace falta comprender los temas como teoría que estudia cómo se relacionan unos conceptos, en vez de comprenderlos como conjunto de resultados y procedimientos que han de ser aplicados de forma más o menos enrevesada.\nLa conclusión que presentamos es que, efectivamente, el nivel de contenidos de los problemas ha bajado, el examen es menos duro. No obstante, esta visión no describe la realidad de la situación por completo. Los problemas de la última convocatoria cubren estas otras cualidades ya mencionadas: capacidad de interpretación, creatividad y comprensión significativa o global de los temas. Mientras que el opositor de hace 20 años lo que tenía que hacer era memorizar los temas y hacer problemas extensivamente, el opositor del día de hoy tiene que centrarse más en comprender y reflexionar sobre los temas, al menos aquellos que tienen una relación más directa con la resolución de los problemas.\n El tema es, cuanto menos, controvertido y discrepo, en parte, con la conclusión alcanzada por el autor. No considero más complicada una prueba que requiera un importante trabajo de memorización, que una que precise grandes dosis de ingenio y creatividad. La primera de ellas es únicamente cuestión de tiempo y esfuerzo, mientras que el segundo tipo es complicado de preparar y, sobre todo, quizá poco adecuado para una prueba caracterizada por ofrecer un estrecho margen temporal de maniobra.\nAdemás, alcanzar una comprensión significativa de 71 temas, en el que seamos conscientes de las relaciones existentes entre los diversos conceptos que en ellos figuran, es una tarea titánica, posiblemente una empresa para toda una vida de estudio y reflexión. Más si cabe cuando buena parte de los opositores afronta la preparación de cara a las oposiciones de una forma que dista sobremanera del estudio exhaustivo del temario.\nNo obstante, dicho esto, tampoco quiero dejar entrever que me posiciono en contra de las conclusiones alcanzadas. Únicamente opino que los argumentos en los que estas se cimentan no me parecen suficientes para emitir un juicio sobre la evolución de la dificultad de las pruebas. Dado el cambio de filosofía transmitido en las que estas se sustentan, considero que es sumamente complicado llevar a cabo comparación alguna al respecto.\n","date":1532663979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532663979,"objectID":"bc21f624fbf310ba1200ef9280a91644","permalink":"https://imalexissaez.github.io/2018/07/27/comparativa-de-problemas-de-oposicion-en-castilla-y-leon/","publishdate":"2018-07-27T05:59:39+02:00","relpermalink":"/2018/07/27/comparativa-de-problemas-de-oposicion-en-castilla-y-leon/","section":"post","summary":"A través de Facebook he tenido acceso a un recurso didáctico bastante interesante, que viene en forma de Trabajo de Fin de Máster (TFM) y ha sido elaborado por Rubén Rodríguez Ballesteros para la Universidad de Valladolid.","tags":["Problemas","TFM"],"title":"Comparativa de problemas de oposición en Castilla y León","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Abordemos, en este artículo, algunos aspectos fundamentales a tener en cuenta sobre las competencias clave, a las que dedicaremos uno de los apartados de nuestra programación didáctica.\nEl Artículo 2 del Real Decreto 1105 / 2014, de 26 de diciembre, por el que se establece el currículo básico de la Educación Secundaria Obligatoria y del Bachillerato, nos define las competencias como\n c) Competencias: capacidades para aplicar de forma integrada los contenidos propios de cada enseñanza y etapa educativa, con el fin de lograr la realización adecuada de actividades y la resolución eficaz de problemas complejos.\n para, a continuación, el mismo artículo concretar:\n A efectos del presente real decreto, las competencias del currículo serán las siguientes:\n a) Comunicación lingüística. b) Competencia matemática y competencias básicas en ciencia y tecnología. c) Competencia digital. d) Aprender a aprender. e) Competencias sociales y cívicas. f) Sentido de iniciativa y espíritu emprendedor. g) Conciencia y expresiones culturales.    Para una adquisición eficaz de las competencias y su integración efectiva en el currículo, deberán diseñarse actividades de aprendizaje integradas que permitan al alumnado avanzar hacia los resultados de aprendizaje de más de una competencia al mismo tiempo.\n Se potenciará el desarrollo de las competencias Comunicación lingüística, Competencia matemática y competencias básicas en ciencia y tecnología.\nAhora bien, en el real decreto apenas aparecen listadas y poco más. ¿Dónde podemos encontrar información adicional sobre las competencias clave? En mi opinión, una buena primera parada sería la visita a esta página del Ministerio de Educación y Formación Profesional, que, tras una breve introducción, nos ofrece acceso a detalles relevantes para cada una de las competencias clave a través de los siguientes enlaces:\n a) Competencia en comunicación lingüística (CCLI). b) Competencia matemática y competencias básicas en ciencia y tecnología (CMCT). c) Competencia digital (CD). d) Competencia para aprender a aprender (CAA). e) Competencias sociales y cívicas (CSC). f) Sentido de la iniciativa y espíritu emprendedor (SIEE). g) Conciencia y expresiones culturales (CEC).  Son muy interesantes las infografías que acompañan a las anteriores páginas y que recopilo en la siguiente galería de imágenes:\n\r\r\r\r\r\r\r En la mencionada introducción hay un detalle que conviene advirtamos, la referencia a la Orden ECD / 65 / 2015, de 21 de enero, por la que se describen las relaciones entre las competencias, los contenidos y los criterios de evaluación de la educación primaria, la educación secundaria obligatoria y el bachillerato. En este artículo no comentaré nada de ella, ya que me gustaría dedicarle por completo una entrada a dicha orden.\nAhora bien, ¿cómo puedo contribuir con mi materia al desarrollo de las anteriores competencias clave? La legislación autonómica acude a nuestro rescate en esta ocasión. Por ejemplo, para las asignaturas de matemáticas de la modalidad de ciencias del Bachillerato, el Decreto 87 / 2015, de 5 de junio, del Consell, por el que establece el currículo y desarrolla la ordenación general de la Educación Secundaria Obligatoria y del Bachillerato en la Comunitat Valenciana, figura:\n En el marco de las competencias clave, las matemáticas contribuyen a la competencia en comunicación lingüística al ampliar sustancialmente el vocabulario del alumnado, incorporando el específico de las matemáticas, que utilizan todas las ciencias, además de utilizar continuamente la comunicación tanto oral como escrita en la formulación y expresión de las ideas. Las oportunidades para comunicar ideas matemáticas y el proceso de escuchar, exponer, dialogar y redactar, favorecen la expresión y comprensión de los mensajes orales y escritos en situaciones diversas. Es en la resolución de problemas donde adquiere especial importancia la expresión tanto oral como escrita de los procesos realizados y de los razonamientos seguidos.\nEl énfasis en la funcionalidad de los aprendizajes, su utilidad para comprender el mundo que nos rodea o la misma selección de estrategias para la resolución de un problema, determinan la posibilidad real de aplicar las matemáticas a diferentes campos de conocimiento o a distintas situaciones de la vida cotidiana, contribuyendo así con mayor peso a la adquisición de la competencia matemática y competencias básicas en ciencia y tecnología. La competencia matemática, reconocida como clave por la Unión Europea, se desarrolla especialmente gracias a la contribución de la materia de Matemáticas. La activación de la competencia matemática supone que el alumno es capaz de establecer una relación profunda entre el conocimiento conceptual y el conocimiento procedimental, implicados en la resolución de una tarea matemática o científica determinada. Las matemáticas contribuyen de manera especial al desarrollo del pensamiento y razonamiento, en particular, el pensamiento lógico-deductivo.\nLa incorporación de herramientas tecnológicas como recurso didáctico para el aprendizaje y para la resolución de problemas, y la realización de investigaciones, contribuye en gran medida a mejorar la competencia digital. Las matemáticas contribuyen en gran manera a saber analizar e interpretar datos (la información que se obtiene), cotejar y evaluar los contenidos de los medios de comunicación en función de su validez, fiabilidad y adecuación entre las fuentes, tanto online como offline, y a utilizarlos en la resolución de problemas.\nLa materia desarrolla las técnicas heurísticas que constituyen modelos generales de tratamiento de la información y de razonamiento, y consolidan la adquisición de destrezas involucradas en la competencia de aprender a aprender tales como la autonomía, la perseverancia, la sistematización, la reflexión crítica y la habilidad para comunicar con eficacia los resultados del propio trabajo. La verbalización del proceso seguido en el aprendizaje ayuda a la reflexión sobre qué se ha aprendido, qué falta por aprender, cómo y para qué.\nLa contribución de las matemáticas a las competencias sociales y cívicas se realiza a través de todos los contenidos y la metodología de trabajo. El bloque de tratamiento de la información facilita al alumnado el análisis matemático de los datos necesarios para la toma de decisiones en cuanto a su participación social como ciudadanos y consumidores responsables de encuestas, sondeos, escrutinios, reportajes, gráficas, etc. El trabajo cooperativo en matemáticas adquiere una dimensión singular si se aprende a aceptar otros puntos de vista distintos al propio, en particular a la hora de utilizar estrategias personales de resolución de problemas, comparando los posibles resultados y eligiendo como solución aquella que más se adecue a los valores del sistema democrático y al bienestar de la sociedad, de acuerdo con los derechos y deberes de los ciudadanos.\nEn la metodología de la materia están implícitas las estrategias que contribuyen al sentido de iniciativa y espíritu emprendedor del alumnado (actividad creadora, labor investigadora, partir de los conocimientos que sobre un tema determinado, etc.), que le hacen sentirse capaz de aprender, aumentando su autonomía, responsabilidad y compromiso personal. La estructura misma de la materia propicia el desarrollo de estructuras mentales que ayudan a organizar el conocimiento, apoyada en técnicas de estudio, de observación y de registro sistemático de información, planteándose preguntas y manejando diversas estrategias para la toma de decisiones racionales y críticas, y así alcanzar metas a corto y largo plazo, con perseverancia y valoración del esfuerzo realizado.\nLas matemáticas contribuyen a la conciencia y expresión cultural porque el mismo conocimiento matemático es expresión universal de la cultura. En toda conciencia y expresión cultural hay un planteamiento que incluye multitud de aspectos matemáticos, desde la medida hasta la geometría, pasando por la resolución de problemas, que permite al alumnado apreciar la importancia de la expresión creativa de ideas, experiencias y emociones a través de distintos medios, incluida la música, las artes escénicas, la literatura y las artes plásticas. En particular, la geometría es parte integral de la expresión artística de la humanidad y ofrece medios para describir y comprender el mundo que nos rodea, y apreciar la belleza de las estructuras realizadas.\n Únicamente nos resta la labor de redactar un apartado para nuestra programación didáctica que no resulte extremadamente abstracto y que, de alguna forma, permita entrever de una manera práctica cómo procederemos a desarrollar las competencias clave en el aula.\n","date":1532491179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532491179,"objectID":"7c2f2da085ca8c230a564f1e3125613a","permalink":"https://imalexissaez.github.io/2018/07/25/sobre-las-competencias-clave/","publishdate":"2018-07-25T05:59:39+02:00","relpermalink":"/2018/07/25/sobre-las-competencias-clave/","section":"post","summary":"Abordemos, en este artículo, algunos aspectos fundamentales a tener en cuenta sobre las competencias clave, a las que dedicaremos uno de los apartados de nuestra programación didáctica.","tags":["Legislación","Programación didáctica"],"title":"Sobre las competencias clave","type":"post"},{"authors":["Alexis Sáez"],"categories":["Reseñas"],"content":"En este artículo, vamos a echar un vistazo a una interesante novela, con las matemáticas como telón de fondo, que viene de la mano de Jordi Sierra i Fabra. ¿Será un libro adecuado para recomendar como lectura durante el curso académico?\nEn la contraportada encontramos el siguiente texto:\n Un profesor propone a sus alumnos un juego como examen para aprobar las matemáticas. El viernes por la tarde, el profesor muere, pero, antes de fallecer, comenta a sus alumnos que el sobre que hay en su bolsillo les indicará cómo buscar a su asesino. No deben fallarle\u0026hellip;\n La sinopsis del párrafo anterior nos plantea una idea muy atractiva para un libro que encontramos en la colección El Duende Verde, de la editorial Anaya. A través de este enlace podemos acceder a la información completa del título, cuya portada figura a continuación.\n\r\rPortada del libro.\r\r\rA primera vista, parece que ha caído en nuestras manos una especie de novela de intriga, detectivesca de corazón. ¿Y qué decir del título? Seguro que despertará la imaginación de muchas personas, sobre todo de aquellas cuya relación con la materia no fuese (o sea) todo lo satisfactoria que debiera. Ahora bien, ya lo avisa el propio autor, en las primeras páginas:\n Asesinar al profe de mates no sirve de nada. Ponen a otro en su lugar y ya está.\n El texto está recomendado a lectores mayores de 12 años, hecho que nos da una pista sobre el lenguaje utilizado o la predictibilidad de la historia. Es una lectura amena, entretenida, para disfrutar por completo en una de esas tardes de ocio, ya que no es muy extensa.\nNo obstante, un detalle sí que captó rápidamente mi atención: la manera en la que se comunican los tres protagonistas del libro, alumnos del profesor y detectives de una tarde por encargo. Aunque es cierto que la novela tiene unos cuantos años a sus espaldas (se publicó en 2002), enseguida se aprecia un tipo de lenguaje forzado y muy artificial para las conversaciones de los estudiantes. Es difícil que un lector adolescente se identifique con esa forma de expresarse, ni en los tiempos que corren, ni siquiera cuando el libro vio la luz. Esta situación, por desgracia, resta en mi opinión bastante credibilidad a la historia.\nDetalles literarios al margen, pasemos a comentar el contenido matemático del texto. Los alumnos han de resolver una serie de retos, planteados en forma de problemas, adivinanzas o acertijos y para los cuales, más que conocimientos de la materia (el trabajo con ecuaciones lineales es el contenido matemático más avanzado que aparece si mal no recuerdo), necesitarán utilizar toda esa creatividad que rezuma de sus poros en la edad en que se encuentran.\nLos problemas forman parte del folclore matemático y todo profesor de la materia habrá disfrutado de ellos en algún momento de su carrera. No así seguramente los alumnos, más acostumbrados a invertir su tiempo en el aula de matemáticas llevando a cabo ejercicios y no auténticos problemas. Escribiendo de memoria, encontramos, entre otros, el clásico de la mosca que vuela entre bicicletas, el de los espías que viven en cuatro casas del mismo barrio o el que relaciona edades entre distintos miembros de una familia.\nLos protagonistas de la novela logran, empleando mucha creatividad, superar cada uno de los retos, mostrando al lector la solución a través de un diálogo repleto de ideas originales y salpicado de múltiples quejas y frustraciones por la dificultad de alguno de los enunciados planteados. Precisamente aquí sufre la novela otro serio varapalo en lo que a credibilidad respecta. Es bastante improbable que alumnos de los primeros cursos de educación secundaria sean capaces de abordar con éxito los retos planteados y sobre todo teniendo en cuenta el estrecho margen de tiempo del que disponen.\nNo obstante, este hecho presenta la oportunidad de llevar la lectura al aula, y dedicar cierta parte de una las sesiones (aquellas que van tras educación física, las que tienen lugar en las últimas horas de la mañana o las de los viernes, por ejemplo) a desentrañar, con paciencia, los problemas que aparecen en los capítulos del texto. Organizando bien sus contenidos, estimo que sería una actividad que podríamos ofrecer a lo largo de un trimestre completo.\nMuchas de las estrategias de resolución de problemas que figuran en el libro pueden extrapolarse a las actividades que estén desarrollando en la unidad didáctica de turno. Introducirlas como hace la novela, a modo de reto o adivinanza, seguramente provoque que los estudiantes las asimilen más fácilmente y las asocien rápidamente con el texto, quedando así disponibles en su memoria para emplearlas en el aula en futuras ocasiones.\nAsí pues, \u0026lsquo;\u0026lsquo;El asesinato del profesor de matemáticas\u0026rsquo;\u0026rsquo; es un libro de lectura que recomendaría encarecidamente para el aula, en los primeros cursos de educación secundaria, siempre y cuando venga acompañado de su estudio en unas cuantas sesiones del curso.\n","date":1532318379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532318379,"objectID":"8afb7bfb8df606b0980139f92e921edb","permalink":"https://imalexissaez.github.io/2018/07/23/resena-el-asesinato-del-profesor-de-matematicas/","publishdate":"2018-07-23T05:59:39+02:00","relpermalink":"/2018/07/23/resena-el-asesinato-del-profesor-de-matematicas/","section":"post","summary":"En este artículo vamos a echar un vistazo a una interesante novela, con las matemáticas como telón de fondo, que viene de la mano de Jordi Sierra i Fabra. ¿Será un libro adecuado para recomendar como lectura durante el curso académico?","tags":["Divulgación","Lecturas"],"title":"Reseña: 'El asesinato del profesor de matemáticas'","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Es muy útil poder incluir varias imágenes en la misma figura, bien sea porque están relacionadas de alguna manera, bien debido a que resulta mucho más sencillo hacer una comparación si se colocan juntas.\nLidiar con elementos flotantes en LaTeX no siempre es una tarea agradecida, pero, en esta ocasión, y sin que sirva de precedente, crear composiciones de múltiples imágenes dentro de una figura es bastante sencillo.\nA continuación, muestro los pasos que podemos seguir para ello:\n Dentro del entorno figure, crearemos tantos entornos subfigure como imágenes queramos incluir en la composición. El parámetro opcional del entorno subfigure, [b] en el ejemplo que aparece abajo, sigue las clásicas pautas de los elementos flotantes en LaTeX, y será de suma utilidad que lo definamos con precisión si las imágenes poseen diferentes alturas. Con textwidth controlaremos la anchura de las imágenes. Por ejemplo, para que aparezcan dos imágenes, una al lado de otra, y que ocupen la mayor parte del espacio horizontal del documento con el que estemos trabajando, 0.49 será un valor adecuado, pues deja un leve espacio blanco entre ellas. Si no queremos que aparezcan tan juntas, simplemente tendremos que reducir la anterior cantidad. Para tres imágenes, 0.33 es el valor que consigue que éstas aparezcan una a continuación de la otra, dejando leves espacios blancos entre ellas. Una vez declarados tanto el parámetro opcional como el obligatorio, incluiremos la imagen dentro del entorno subfigure utilizando las instrucciones habituales. Como hemos cargado en el preámbulo los paquetes caption y subcaption, podremos incluir los comandos caption y label en cada una de las imágenes, por si luego queremos hacer referencia a alguna de ellas. Utilizar hfill entre los distintos entornos subfigure provoca que las imágenes queden empujadas hacia los márgenes del documento. Este efecto nos puede resultar de interés si no estamos trabajando con esos valores límites (como 0.49) para la anchura de las imágenes.  Con un ejemplo quedará más claro el procedimiento que hemos de seguir:\n\\documentclass{article}\r\\usepackage[utf8]{inputenc}\r\\usepackage[english, spanish]{babel}\r\\usepackage{graphicx}\r\\usepackage{caption}\r\\usepackage{subcaption}\r\\begin{document}\r\\begin{figure}[!tbp]\r\\begin{subfigure}[b]{0.49\\textwidth}\r\\includegraphics[width=\\textwidth, height=\\textwidth]{img1.jpg}\r\\caption{Primera imagen.}\r\\label{fig:f1}\r\\end{subfigure}\r\\hfill\r\\begin{subfigure}[b]{0.49\\textwidth}\r\\includegraphics[width=\\textwidth, height=\\textwidth]{img2.jpg}\r\\caption{Segunda imagen.}\r\\label{fig:f2}\r\\end{subfigure}\r\\caption{Dos imágenes en la misma figura.}\r\\end{figure}\r\\end{document}\r Podemos apreciar el resultado en la siguiente imagen:\n\r\rResultado del bloque de código anterior.\r\r\rNota: no es recomendable que forcemos el parámetro height para que se ajuste al textwidth definido, pues generalmente provocará distorsiones no deseadas en nuestras imágenes. Si aparece en el ejemplo anterior no es más que por descuido, ya que de las distintas configuraciones con las que he estado experimentando, esa ha sido precisamente la última y no he caído en cambiar ese detalle antes de publicar el código.\nReferencia:\n Putting two images beside each other.  ","date":1532231979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532231979,"objectID":"13ef510248f6913bf3933ecbe50785fa","permalink":"https://imalexissaez.github.io/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/","publishdate":"2018-07-22T05:59:39+02:00","relpermalink":"/2018/07/22/como-incluir-varias-imagenes-en-la-misma-figura-con-latex/","section":"post","summary":"Es muy útil poder incluir varias imágenes en la misma figura, bien sea porque están relacionadas de alguna manera, bien debido a que resulta mucho más sencillo hacer una comparación si se colocan juntas.","tags":["LaTeX"],"title":"¿Cómo incluir varias imágenes en la misma figura con LaTeX?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Reconozco que la edición de tablas, junto con la gestión de figuras, a veces se convierte en una pequeña pesadilla para mí cuando estoy generando documentos con LaTeX. Veamos cómo he dado respuesta a la cuestión que aparece en el título de esta entrada.\nEs habitual en estadística que trabajemos con tablas de contingencia, sobre todo en su versión $2\\times 2$. Estas se suelen caracterizar por tener la celda que ocupa la esquina superior izquierda dividida diagonalmente, de manera que el texto inferior de dicha celda hace referencia al contenido de las filas (por ejemplo, si se posee o no cierta enfermedad), mientras que el texto superior hace lo propio para las columnas (por ejemplo, si se está expuesto a un factor de riesgo o no).\nAhora bien, enseguida aparece la pregunta del millón: ¿cómo conseguimos ese efecto con LaTeX? La respuesta viene de la mano del paquete slashbox, cuyo uso es realmente sencillo. Veamos un ejemplo de aplicación:\n\\documentclass{article}\r\\usepackage[utf8]{inputenc}\r\\usepackage[english, spanish]{babel}\r\\usepackage{slashbox}\r\\begin{document}\r\\begin{tabular}{|l|c|c|c|}\r\\hline\r\\backslashbox{Enfermedad}{Factor de riesgo} \u0026amp; SÍ $\\equiv FR$ \u0026amp; NO $\\equiv \\overline{FR}$ \u0026amp; Totales\\\\\r\\hline\rSÍ $\\equiv E$ \u0026amp; $O_{11}$ \u0026amp; $O_{12}$ \u0026amp; $F_1$ \\\\\rNO $\\equiv \\overline{E}$ \u0026amp; $O_{21}$ \u0026amp; $O_{22}$ \u0026amp; $F_2$ \\\\\r\\hline\rTotales \u0026amp; $C_1$ \u0026amp; $C_2$ \u0026amp; $T$ \\\\\r\\hline\r\\end{tabular}\r\\end{document}\r Podemos apreciar el resultado en la siguiente imagen:\n\r\rTabla de contingencia en LaTeX.\r\r\rReferencias:\n LaTeX table cell with a diagonal line and 2 sub cells [duplicate]. Diagonally divided table cell [duplicate].  ","date":1532059179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532059179,"objectID":"343987b30bf60f7fd759bd8ea1e70cec","permalink":"https://imalexissaez.github.io/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/","publishdate":"2018-07-20T05:59:39+02:00","relpermalink":"/2018/07/20/como-dividir-diagonalmente-una-celda-de-una-tabla-con-latex/","section":"post","summary":"Es habitual en estadística que trabajemos con tablas de contingencia, que se caracterizan por tener la celda que ocupa la esquina superior izquierda dividida diagonalmente.","tags":["LaTeX"],"title":"¿Cómo dividir diagonalmente una celda de una tabla con LaTeX?","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"¿Qué es un contenido? ¿Y un criterio de evaluación? ¿Cómo se define un estándar de aprendizaje evaluable? La legislación nos da una respuesta rigurosa a cada una de las anteriores cuestiones.\nEl Real Decreto 1105 / 2014, de 26 de diciembre, por el que se establece el currículo básico de la Educación Secundaria Obligatoria y del Bachillerato, en su Artículo 2, nos ofrece la siguiente serie de definiciones:\n Currículo: regulación de los elementos que determinan los procesos de enseñanza y aprendizaje para cada una de las enseñanzas y etapas educativas. Objetivos: referentes relativos a los logros que el estudiante debe alcanzar al finalizar cada etapa, como resultado de las experiencias de enseñanza-aprendizaje intencionalmente planificadas a tal fin. Competencias: capacidades para aplicar de forma integrada los contenidos propios de cada enseñanza y etapa educativa, con el fin de lograr la realización adecuada de actividades y la resolución eficaz de problemas complejos. Contenidos: conjunto de conocimientos, habilidades, destrezas y actitudes que contribuyen al logro de los objetivos de cada enseñanza y etapa educativa y a la adquisición de competencias. Los contenidos se ordenan en asignaturas, que se clasifican en materias y ámbitos, en función de las etapas educativas o los programas en que participe el alumnado. Estándares de aprendizaje evaluables: especificaciones de los criterios de evaluación que permiten definir los resultados de aprendizaje, y que concretan lo que el estudiante debe saber, comprender y saber hacer en cada asignatura; deben ser observables, medibles y evaluables y permitir graduar el rendimiento o logro alcanzado. Su diseño debe contribuir y facilitar el diseño de pruebas estandarizadas y comparables. Criterios de evaluación: son el referente específico para evaluar el aprendizaje del alumnado. Describen aquello que se quiere valorar y que el alumnado debe lograr, tanto en conocimientos como en competencias; responden a lo que se pretende conseguir en cada asignatura. Metodología didáctica: conjunto de estrategias, procedimientos y acciones organizadas y planificadas por el profesorado, de manera consciente y reflexiva, con la finalidad de posibilitar el aprendizaje del alumnado y el logro de los objetivos planteados.  ","date":1531886379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531886379,"objectID":"af8f9d9737d6b756ebe322f16dabe0f1","permalink":"https://imalexissaez.github.io/2018/07/18/algunas-definiciones-basicas-contenidos-criterios-de-evaluacion-etc/","publishdate":"2018-07-18T05:59:39+02:00","relpermalink":"/2018/07/18/algunas-definiciones-basicas-contenidos-criterios-de-evaluacion-etc/","section":"post","summary":"¿Qué es un contenido? ¿Y un criterio de evaluación? ¿Cómo se define un estándar de aprendizaje evaluable? La legislación nos da una respuesta rigurosa a cada una de las anteriores cuestiones.","tags":["Legislación","Programación didáctica"],"title":"Algunas definiciones básicas: contenidos, criterios de evaluación, etc.","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"En la anterior entrada generamos, ¡solucionando incluso un pequeño bug!, nuestro primer sitio web con Hugo, utilizando para ello el tema Ananke. Veamos qué opciones de configuración nos ofrece dicho tema a continuación.\nAsí pues, dedicaremos única y exclusivamente este cuarto artículo del Proyecto Metablog a examinar con detalle el contenido del archivo config.toml, que se ubica en la raíz del directorio donde hayamos decidido almacenar nuestro sitio web.\nSi en su momento nos decantamos por seguir, al pie de la letra, el contenido de la anterior entrada, dicho fichero debería figurar en el interior de la ruta C:\\Hugo\\Sites\\prueba. Desde el explorador de archivos de Windows, lo seleccionamos con el botón derecho del ratón y escogemos la opción Open with Sublime Text.\nParte de su contenido nos resultará familiar a estas alturas, pues ya tuvimos que editar el mencionado archivo para solventar el bug que nos impedía tener acceso local al sitio web. Empecemos examinando el primer bloque de código, aquel que comprende las siguientes cinco líneas:\ntitle = \u0026quot;Notre-Dame de Paris\u0026quot;\rbaseURL = \u0026quot;https://example.com\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtheme = \u0026quot;gohugo-theme-ananke\u0026quot;\r# themesDir = \u0026quot;../..\u0026quot;\r Estamos ante una serie de pares variable = valor, en donde hemos de personalizar las cadenas de texto para que se ajusten a las opciones que deseamos de cara a nuestro sitio web.\nEn el primero de ellos, la variable title, como bien señala de manera descriptiva su nombre, nos permite indicar el título de la página web. En mi caso, me gustaría que fuese Infinitos Contrastes, por lo que no tengo más que modificar esa primera línea y teclear title = \u0026quot;Infinitos Contrastes\u0026quot;.\nAhora, a baseURL hemos de asignarle el enlace que utilizaremos para acceder a nuestro sitio web a través del navegador web. Dado que la idea es que alojemos la página web en GitHub, dicha dirección será del estilo https://\u0026lt;NOMBRE_DE_TU_CUENTA\u0026gt;.github.io. Para ilustrar esto último de manera más concreta, el nombre de mi cuenta en GitHub es ImAlexisSaez, por lo que el enlace que permitirá el acceso remoto a la página web será https://imalexissaez.github.io/, valor que asignaré a la variable baseURL en su correspondiente línea.\nA continuación, en languageCode reside el código del lenguaje en el que se generará nuestro sitio web, que, por defecto, es inglés estadounidense (en-us). Si vamos a generar contenido un idioma diferente, conviene que modifiquemos el valor de dicha línea. Para el español, el código asociado es es.\nAunque a primera vista no parezca un detalle relevante, es importante asignar el código adecuado a languageCode, puesto que algunos temas de Hugo incorporan la posibilidad de localización a diferentes lenguajes y la clave pasa, precisamente, por el valor indicado para dicha variable. Para muestra, un botón: el tema actual de este sitio web, Beautiful Hugo, es uno de esos ejemplos y en un futuro veremos cómo lidiar con el asunto de la localización en Hugo.\nLa siguiente línea, theme = \u0026quot;gohugo-theme-ananke\u0026quot;, le indica a Hugo en qué ruta ha de buscar para acceder a los archivos correspondientes al tema de la web. Es posible que en la anterior entrada no nos diésemos cuenta, pero cuando instalamos el tema Ananke automáticamente se generó una carpeta en nuestro disco duro llamada gohugo-theme-ananke, en el interior del directorio themes. La variable theme simplemente apunta a esa ruta, de manera que si, por el extraño motivo que sea, nos vemos en la necesidad de modificar el nombre de la mencionada carpeta, también deberíamos cambiar el valor de esta línea en el archivo config.toml.\nPor lo que respecta a la última línea de este bloque de código, para solventar el bug que nos impedía revisar localmente el sitio web, usamos el símbolo de comentario (#) para anularla. De esta forma, directamente podemos suprimirla, quedando definitivamente:\n#\r# Configuración básica del sitio web\r#\rtitle = \u0026quot;Infinitos Contrastes\u0026quot; # Título\rbaseURL = \u0026quot;https://imalexissaez.github.io/\u0026quot; # Enlace de entrada\rlanguageCode = \u0026quot;es\u0026quot; # Idioma\rtheme = \u0026quot;gohugo-theme-ananke\u0026quot; # Ruta al tema\r Recomiendo encarecidamente ir comentando el código fuente, para que en futuras revisiones sea más fácil encontrar aquello que andemos buscando. En cuanto a que todo quede alineado por el símbolo =, es simplemente una manía mía, no es necesario en absoluto.\nPasemos ahora al siguiente bloque de código, el dado por\nMetaDataFormat = \u0026quot;yaml\u0026quot;\rDefaultContentLanguage = \u0026quot;en\u0026quot;\rSectionPagesMenu = \u0026quot;main\u0026quot;\rPaginate = 3 # this is set low for demonstrating with dummy content. Set to a higher number\rgoogleAnalytics = \u0026quot;\u0026quot;\renableRobotsTXT = true\r En mi caso, ha quedado como sigue:\n#\r# Configuración adicional del sitio web\r#\rMetaDataFormat = \u0026quot;yaml\u0026quot; # Formato cabeceras\rDefaultContentLanguage = \u0026quot;es\u0026quot; # Idioma por defecto del contenido\rSectionPagesMenu = \u0026quot;main\u0026quot; #\rPaginate = 3 # Posts por página en main\rgoogleAnalytics = \u0026quot;\u0026quot; # Código para estadísticas web\renableRobotsTXT = true # Buscadores\r ya que:\n En MetaDataFormat tenemos que indicar qué lenguaje emplearemos para escribir los metadatos de las cabeceras para nuestros artículos del sitio web (hablaremos de ello en detalle cuando, por fin, nos animemos a redactar el primer artículo para nuestra página web). Hugo permite trabajar con TOML (por defecto), YAML y JSON. Los dos primeros son muy similares y, en mi caso, dado que estuve un tiempo generando el sitio web con Jekyll, estoy más acostumbrado al estilo YAML que al TOML. Por otro lado, aunque también es factible generar las mencionadas cabeceras con JSON, es un lenguaje un tanto más tedioso a la hora de declarar los metadatos, por lo que recomendaría evitarlo de momento. Para DefaultContentLanguage declaramos el valor del código del idioma en el que tengamos pensado generar el contenido para nuestro sitio web. Para español, recuerdo que dicho código era es. Confieso que desconozco las posibilidades para SectionPagesMenu. Experimenté con el tema Ananke unos minutos y enseguida empecé a buscar, entre los temas disponibles para Hugo, uno que se adaptara mejor a mis necesidades, así que no he profundizado en exceso en este. En Paginate indicaremos el número de artículos que queremos se muestren por página en el índice que aparece al acceder a nuestro sitio web. En los propios comentarios avisan que el valor asignado por defecto, 3, es un tanto escaso y deberíamos incrementarlo un tanto. ¿Cuánto? En mi opinión, debería estar en función de la frecuencia con la que generemos contenido. Si activamos las estadísticas de Google para nuestro sitio web, tendremos acceso a cierto código, que será el que asignemos como valor en la línea de googleAnalytics. Finalmente, con enableRobotsTXT = true damos acceso a la \u0026ldquo;arañas\u0026rdquo; de los buscadores para que exploren todo nuestro sitio web e indexen aquello que estimen conveniente.  El siguiente bloque de código:\n[sitemap]\rchangefreq = \u0026quot;monthly\u0026quot;\rpriority = 0.5\rfilename = \u0026quot;sitemap.xml\u0026quot;\r está dedicado a los parámetros de configuración del mapa del sitio web. Al igual que sucedía con la variable Paginate, configuraremos los valores de estas tres en función de la frecuencia con la que generemos contenido para nuestro sitio web. Seguramente, la única variable que modificaremos será changefreq, cambiando \u0026quot;monthly\u0026quot; por \u0026quot;weekly\u0026quot; o, incluso, \u0026quot;daily\u0026quot;.\nAsí pues, en mi caso, únicamente he colocado un comentario introductorio al bloque y, por supuesto, he continuado alineando valores por el simbolo =:\n#\r# Configuración del mapa de la web\r#\r[sitemap]\rchangefreq = \u0026quot;monthly\u0026quot;\rpriority = 0.5\rfilename = \u0026quot;sitemap.xml\u0026quot;\r Para finalizar, el último bloque de código:\n[params]\rfavicon = \u0026quot;\u0026quot;\rdescription = \u0026quot;The last theme you'll ever need. Maybe.\u0026quot;\rfacebook = \u0026quot;\u0026quot;\rtwitter = \u0026quot;https://twitter.com/GoHugoIO\u0026quot;\rinstagram = \u0026quot;\u0026quot;\ryoutube = \u0026quot;\u0026quot;\rgithub = \u0026quot;\u0026quot;\rlinkedin = \u0026quot;\u0026quot;\r# choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with \u0026quot;bg-\u0026quot;\rbackground_color_class = \u0026quot;bg-black\u0026quot;\rfeatured_image = \u0026quot;/images/gohugo-default-sample-hero-image.jpg\u0026quot;\rrecent_posts_number = 2\r me ha quedado\n#\r# Configuración de parámetros de la web\r#\r[params]\rfavicon = \u0026quot;\u0026quot;\rdescription = \u0026quot;Laboratorio de experimentos de un matemático\u0026quot;\rfacebook = \u0026quot;\u0026quot;\rtwitter = \u0026quot;https://twitter.com/GoHugoIO\u0026quot;\rinstagram = \u0026quot;\u0026quot;\ryoutube = \u0026quot;\u0026quot;\rgithub = \u0026quot;\u0026quot;\rlinkedin = \u0026quot;\u0026quot;\rbackground_color_class = \u0026quot;bg-black\u0026quot;\rfeatured_image = \u0026quot;/images/gohugo-default-sample-hero-image.jpg\u0026quot;\rrecent_posts_number = 2\r Estas líneas facilitan la configuración de algunas características de la web, como pueden ser:\n favicon: es el icono que aparece, en el navegador, en la parte izquierda de la pestaña correspondiente a nuestro sitio web. El valor que hemos de asignar a esta variable será la ruta de acceso a la imagen que contiene el icono. Entraré en más detalles al respecto de este tema cuando aborde cómo configurar el favicon para el tema Beautiful Hugo. description: breve subtítulo o eslogan que podemos añadir a la página web. facebook, twitter, etc.: enlaces a las páginas de nuestras redes sociales, que permiten a los visitantes dar con nuestros perfiles muy fácilmente. featured_image: ruta que apunta a la imagen que deseemos ubicar en la cabecera de nuestra página web. recent_posts_number: cantidad de artículos, de entre los últimos publicados, que aparecerán destacados en la página de entrada a nuestro sitio web.  En esta serie de artículos no entraré en detalle en la modificación de las plantillas del tema Ananke. No obstante, en breve pasaremos a estudiar con profundidad el tema Beautiful Hugo y las ideas que exploremos, de cara a modificar diversos aspectos de un sitio web, se podrán extrapolar a cualquier tema, Ananke incluido.\nAsí pues, seguramente, en la próxima entrada del Proyecto Metablog instalaremos el tema Beautiful Hugo y echaremos un vistazo por encima a su correspondiente archivo de configuración config.toml.\n","date":1531799979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531799979,"objectID":"cd0fa0263940f0124f92ab10e3de365c","permalink":"https://imalexissaez.github.io/2018/07/17/configurando-el-tema-ananke/","publishdate":"2018-07-17T05:59:39+02:00","relpermalink":"/2018/07/17/configurando-el-tema-ananke/","section":"post","summary":"Lección 4: analicemos cómo configurar algunos de los parámetros básicos del tema Ananke para personalizar el sitio web.","tags":["Hugo","Ananke"],"title":"Configurando el tema Ananke","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En esta entrada abordaremos un precioso problema de determinantes, propuesto durante la convocatoria de oposiciones de Aragón de este mismo año 2018, para la especialidad de matemáticas.\n Problema 2: Sea $k$ un número natural no nulo y sea $f$ la función real de variable real dada por:\n$$ f(x) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; x\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; x^2\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; x^3\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; x^k\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; x^{k+1} \\end{vmatrix}. $$\na) Calcular $f(x + 1) - f(x)$.\nb) Expresar la suma $1^k + 2^k + \\cdots + n^k$ mediante esta función.\n En lugar de abordar directamente la resolución del primer apartado, detengámonos por un instante a analizar la expresión del determinante dado por la función $f(x)$. Los números combinatorios que aparecen y, sobre todo, la forma en que lo hacen, seguramente hayan captado nuestra atención. Resulta, cuanto menos, familiar ese patrón, ¿verdad? Parte de él es el que aparece en el famoso triángulo de Pascal, si expresamos sus componentes utilizando números combinatorios.\nAhora bien, de manera automática, y supongo que por deformación matemática, cuando viene a nuestra cabeza el triángulo de Pascal, enseguida pensamos en el teorema del binomio, que recordemos afirma que\n$$ \\begin{aligned} (x+y)^n \u0026amp;= \\sum_{k=0}^{n}{\\binom{n}{k}x^{n-k}y^k}\\\\ \u0026amp;= \\binom{n}{0}x^n + \\binom{n}{1}x^{n-1}y+\\cdots+\\binom{n}{n-1}xy^{n-1}+\\binom{n}{n}y^n. \\end{aligned} $$\nMerece la pena explorar la idea de una posible relación entre el teorema del binomio y la expresión de $f(x)$. Para empezar, en la última columna del determinante encontramos las potencias de $x$, pero no observamos la existencia de más potencias en el resto de los elementos de dicho determinante. Este hecho nos invita a pensar que quizá sea conveniente que particularmente estudiemos el desarrollo del binomio $(1+x)^n$, dado el valor de las potencias de uno. Además, si ahora echamos un vistazo rápido al enunciado del primer apartado, aparece un $(1+x)$, ¡puede que estemos sobre la pista de la senda correcta!\nDesarrollemos $(1+x)^n$, para algunos valores concretos de $n$, utilizando para ello el teorema del binomio:\n$$ \\begin{aligned} (1+x)^1 \u0026amp;= \\dbinom{1}{0} + \\dbinom{1}{1}x,\\\\ (1+x)^2 \u0026amp;= \\dbinom{2}{0} + \\dbinom{2}{1}x + \\dbinom{2}{2}x^2,\\\\ (1+x)^3 \u0026amp;= \\dbinom{3}{0} + \\dbinom{3}{1}x + \\dbinom{3}{2}x^2 + \\dbinom{3}{3}x^3,\\\\ (1+x)^4 \u0026amp;= \\dbinom{4}{0} + \\dbinom{4}{1}x + \\dbinom{4}{2}x^2 + \\dbinom{4}{3}x^3 + \\dbinom{4}{4}x^4. \\end{aligned} $$\nPara empezar, enseguida apreciamos que las potencias de $x$ vienen siempre acompañadas por un número combinatorio. No obstante, como dado $n\\in\\mathbb{N}$, tenemos que\n$$ \\binom{n}{n}=1, $$\npodemos reescribir la última columna del determinante dado por $f(x)$ de la siguiente manera:\n$$ f(x) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; \\binom{1}{1}x^{\\phantom{1}}\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; \\binom{2}{2}x^2\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; \\binom{3}{3}x^3\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; \\binom{k}{k}x^k\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; \\binom{k+1}{k+1}x^{k+1} \\end{vmatrix} $$\nAhora, centremos nuestra atención en la primera fila del determinante. Si sumamos el elemento que figura en la primera columna al que reside en la última, tendríamos\n$$ \\binom{1}{0} + \\binom{1}{1}x = (1+x)^1 = 1+x. $$\nEste hecho nos sugiere que llevemos a cabo la transformación sobre el determinante que consiste en sustituir la última columna por una combinación lineal de esta con la primera columna, que sabemos, por las propiedades de los determinantes, que no altera el valor de $f(x)$. Utilizando la notación habitual de operaciones sobre determinantes, estaríamos proponiendo llevar a cabo la transformación\n$$ C^{\\prime}_{k+1}\\rightarrow C_1 + C_{k+1}. $$\nPasemos, a continuación, a estudiar la segunda fila determinante. Con la idea del párrafo anterior en mente, ¿podemos llegar a conseguir el desarrollo del binomio $(1+x)^2$? En realidad, tenemos casi todos los elementos de dicho desarrollo, a falta de una $x$ que tendría que estar multiplicando al elemento que aparece en la segunda columna. No obstante, recordemos aquí que $x$ no es más que un número real, por lo que podríamos multiplicar toda la segunda columna por $x$ y sumarla, junto con la primera columna, a la última. Es decir, la idea es llevar a cabo la transformación\n$$ C^{\\prime}_{k+1}\\rightarrow C_1 + xC_2 + C_{k+1}, $$\nque permitiría que el elemento de la última columna fuese precisamente $(1+x)^2$.\nEmpezamos a atisbar un patrón aquí, ¿verdad? Analizando la tercera fila, llegaríamos a proponer la transformación\n$$ C^{\\prime}_{k+1}\\rightarrow C_1 + xC_2 + x^2C_3 + C_{k+1}, $$\ny, siguiendo con el razonamiento, la transformación que al final llevaremos a cabo sobre el determinante será la siguiente:\n$$ C^{\\prime}_{k+1}\\rightarrow C_1 + xC_2 + x^2C_3 + \\cdots + x^{k-1}C_k + C_{k+1}, $$\nque hace que los elementos de la última columna sean binomios de la forma $(1+x)^n$, con $0\\leq n\\leq k+1$.\n¡Cuidado! No es cierta la conclusión escrita arriba o, al menos, no lo es para todos los valores indicados de $n$. Si nos fijamos con atención, se cumple para $n=1$, para $n=2$, y así sucesivamente hasta llegar a $n=k$, ¡pero nos faltaría, para $n=k+1$, un término del desarrollo del binomio! Si nos damos cuenta, no aparece en el determinante\n$$ \\binom{k+1}{k}x^k, $$\npero como esa expresión no deja de ser un número, podemos sumarlo y restarlo en esa posición para conseguir así el desarrollo del binomio $(1+x)^{k+1}$, quedando entonces la expresión de $f(x)$ como sigue:\n$$ f(x) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 1+x\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; (1+x)^2\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; (1+x)^3\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; (1+x)^k\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; (1+x)^{k+1} - \\binom{k+1}{k}x^k \\end{vmatrix} $$\nEsa resta que aparece en el último elemento de la diagonal principal nos invita a seguir aplicando propiedades de los determinantes y separar en dos el dado en $f(x)$. Así, podemos escribir\n$$ f(x) = g(x) + h(x), $$\ndonde\n$$ g(x) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 1+x\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; (1+x)^2\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; (1+x)^3\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; (1+x)^k\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; (1+x)^{k+1} \\end{vmatrix}, $$\ny\n$$ h(x) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 0\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 0\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; 0\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; 0\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; - \\binom{k+1}{k}x^k \\end{vmatrix}. $$\nAhora bien, enseguida nos damos cuenta de que la única diferencia entre $f(x)$ y $g(x)$ radica en que allí donde aparece $x$ en $f(x)$, figura ahora $1+x$ en $g(x)$, lo cual nos permite concluir que $g(x) = f(1+x)$.\nPor otro lado, en $h(x)$ tenemos una matriz triangular inferior, cuyo determinante sabemos es igual al producto de los elementos que componen su diagonal principal, es decir,\n$$ \\begin{aligned} h(x) \u0026amp;= -\\binom{1}{0}\\binom{2}{1}\\binom{3}{2}\\binom{4}{3}\\cdots\\binom{k+1}{k}x^k\\\\ \u0026amp;=-2!\\dfrac{3!}{2!}\\dfrac{4!}{3!}\\cdots\\dfrac{(k+1)!}{k!}x^k\\\\ \u0026amp;=-(k+1)!x^k. \\end{aligned} $$\nAsí, como\n$$ f(x) = g(x) + h(x) = f(1+x) - (k+1)!x^k, $$\nla respuesta para el primer apartado de este problema sería:\n$$ f(x+1) - f(x) = (k+1)!x^k. $$\nEn el segundo apartado nos piden calcular el valor de la suma\n$$ 1^k + 2^k + \\cdots + n^k $$\nutilizado $f(x)$. Enseguida nos damos cuenta de que aparece $x^k$ en la expresión final del apartado anterior, hecho que nos invita a asignarle el valor $n$ a la variable $x$, quedando entonces la ecuación\n$$ f(n+1) - f(n) = (k+1)!n^k. $$\nSiguiendo esta idea, para conseguir que aparezca $(n-1)^k$, asignaríamos el valor $n-1$ a la variable $x$, obteniendo así la ecuación\n$$ f(n) - f(n-1) = (k+1)!(n-1)^k. $$\nIteramos sucesivamente esta manera de proceder, de forma que al final tenemos el siguiente conjunto de ecuaciones:\n$$ \\begin{aligned} f(n+1) - f(n) \u0026amp;= (k+1)!n^k,\\\\ f(n) - f(n-1) \u0026amp;= (k+1)!(n-1)^k,\\\\ f(n-1) - f(n-2) \u0026amp;= (k+1)!(n-2)^k,\\\\ \\vdots \u0026amp; \\\\ f(2) - f(1) \u0026amp;= (k+1)!1^k, \\end{aligned} $$\ny sumando todas ellas, llegamos a que\n$$ f(n+1) - f(1) = (k+1)!(1^k+2^k+\\cdots+n^k). $$\nAhora bien, $$ f(1) = \\begin{vmatrix} \\binom{1}{0} \u0026amp; 0 \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 1\\\\ \\binom{2}{0} \u0026amp; \\binom{2}{1} \u0026amp; 0 \u0026amp;\\ldots \u0026amp; 0 \u0026amp; 1\\\\ \\binom{3}{0} \u0026amp; \\binom{3}{1} \u0026amp; \\binom{3}{2} \u0026amp; \\ldots \u0026amp; 0 \u0026amp; 1\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \u0026amp; \\vdots\\\\ \\binom{k}{0} \u0026amp; \\binom{k}{1} \u0026amp; \\binom{k}{2} \u0026amp; \\ldots \u0026amp; \\binom{k}{k-1} \u0026amp; 1\\\\ \\binom{k+1}{0} \u0026amp; \\binom{k+1}{1} \u0026amp; \\binom{k+1}{2} \u0026amp;\\ldots \u0026amp; \\binom{k+1}{k-1} \u0026amp; 1 \\end{vmatrix}, $$\ny si recordamos que, dado $n\\in\\mathbb{N}$,\n$$ \\binom{n}{0} = 1, $$\nresulta que la primera columna es igual a la última, provocando ello que $f(1)=0$ y, finalmente, que\n$$ 1^k + 2^k + \\cdots + n^k = \\dfrac{f(n+1)}{(k+1)!}, $$\nexpresión que da respuesta a la cuestión planteada en el segundo apartado del problema.\n","date":1531713579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531713579,"objectID":"a172f8792237f8c8d5caabe2a284a686","permalink":"https://imalexissaez.github.io/2018/07/16/mezclando-determinantes-y-numeros-combinatorios/","publishdate":"2018-07-16T05:59:39+02:00","relpermalink":"/2018/07/16/mezclando-determinantes-y-numeros-combinatorios/","section":"post","summary":"Problema 2: una combinación peligrosa.","tags":["Combinatoria","Determinantes","Problemas","Teorema del binomio"],"title":"Mezclando determinantes y números combinatorios","type":"post"},{"authors":["Alexis Sáez"],"categories":["Recursos"],"content":"A estas alturas, estimo que nadie pondrá en duda que la plataforma audiovisual YouTube es una colosal mina de recursos de aprendizaje, con auténticos diamantes por descubrir y al alcance de cualquier estudiante.\nComo iré publicando los artículos del Proyecto Metablog a un ritmo pausado, que seguramente no convenza a quien descubra la serie de entradas en este instante, me he animado a compartir un excelente recurso que he encontrado en YouTube.\nSe trata de una lista de reproducción, compuesta por la nada desdeñable cifra de 23 vídeos, que viene de la mano de Giraffe Academy. Me gustaría destacar que, además de este curso de Hugo, ponen a nuestra disposición toda una serie de tutoriales sobre bases de datos, distintos lenguajes de programación, desarrollo web y generadores de páginas web estáticas. Es más que recomendable que le echemos un vistazo a su sección Courses.\nVolviendo al recurso concreto que nos ocupa en esta entrada, la lista de reproducción parte de una breve introducción teórica a los generadores de páginas web estáticas, para centrarse enseguida en las principales características de Hugo. A continuación, detalla su instalación en distintos sistemas operativos y pasa a generar acto seguido un sitio web, que servirá de base para explicar distintos conceptos, de una forma muy práctica, a lo largo del resto de la serie de vídeos.\nLa mencionada lista de reproducción la podemos encontrar en este enlace, siendo su índice:\n Introduction to Hugo Installing Hugo on Windows Installing Hugo on Mac Creating a New Site Installing \u0026amp; Using Themes Creating \u0026amp; Organizing Content Front Matter Archetypes Shortcodes Taxonomies Template Basics List Page Templates Single Page Templates Home Page Templates Section Templates Base Templates \u0026amp; Blocks Variables Functions If Statements Data Files Partial Templates Shortcode Templates Building Your Site  Para muestra, un botón:\n  ","date":1531627179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531627179,"objectID":"155343af2a1803a83470c1d28b856959","permalink":"https://imalexissaez.github.io/2018/07/15/curso-de-hugo-en-youtube/","publishdate":"2018-07-15T05:59:39+02:00","relpermalink":"/2018/07/15/curso-de-hugo-en-youtube/","section":"post","summary":"Presentación de la lista de reproducción, compuesta por la nada desdeñable cifra de 23 vídeos, que viene de la mano de Giraffe Academy.","tags":["Hugo"],"title":"Curso de Hugo en YouTube","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"En esta entrada, echaremos un vistazo al artículo \u0026ldquo;Guía para la elaboración de una programación didáctica en las etapas de Educación Primaria y Secundaria\u0026quot;, que viene de la mano de Ignacio Polo y Gemma Puertas.\nEmpecemos ofreciendo la referencia completa del mencionado artículo, para el que me gustaría destacar que su acceso es libre, hecho que siempre agradezco y opino que debería ser la norma que seguir en cuanto a investigación respecta:\n Polo Martínez, I., \u0026amp; Puertas Bescós, G. (2017). Guía para la elaboración de una programación didáctica en las etapas de Educación Primaria y Secundaria. Avances en Supervisión Educativa, (27). https://doi.org/10.23824/ase.v0i27.593  El texto posee un objetivo, cuanto menos, ambicioso, tal y como nos deja entrever en el siguiente párrafo:\n El objetivo esencial de este artículo es facilitar la elaboración de programaciones didácticas (ateniendo al marco normativo vigente en Educación Primaria y Educación Secundaria Obligatoria), reales (en cuanto a su reflejo con la docencia que se está practicando en las aulas), contextualizadas (al grupo de alumnado, nivel educativo y materia curricular del presente curso escolar), eficientes (en equilibrio entre la cantidad de información que aportamos y la calidad de la misma), actualizadas (en función de las posibles variaciones que se produzcan en el grupo clase a lo largo del curso) y evaluables (desde un planteamiento procesual dirigido al análisis de los logros que se van alcanzando tras el proceso de planificación inicial).\n A la hora de elaborar una programación didáctica (PD), de cara a unas futuras oposiciones, tener a nuestra disposición un documento que recopila errores frecuentes y, además, aconseja cómo solventarlos, es poco menos que un tesoro.\nSin pretender llevar a cabo un resumen del artículo en las siguientes líneas, sí que me gustaría compartir algunas ideas que me han resultado interesantes, sobre todo por lo que respecta a la elaboración de programaciones didácticas para las etapas de Secundaria y de Bachillerato:\n Nuestra PD ha de partir del posicionamiento planteado en el Poyecto Curricular de Etapa (PCE) del centro, que es elaborado y revisado por la Comisión de Coordinación Pedagógica y en él se establecen directrices y propuestas globales de intervención educativa que facilitan la aplicación del currículo a la realidad educativa y específica de cada centro. Hemos de evitar concretar objetivos para un nivel o curso, pues la concreción de estos viene dada por los criterios de evaluación (CE) y los estándares de aprendizaje evaluables (EAE) de cada nivel. No debemos crear o modificar CE ni EAE, aunque sí concretar estos últimos cuando la Administración no lo haya hecho. Por otro lado, ambos precisan la creación de instrumentos de evaluación. Es un error que vinculemos la calificación del alumnado a los propios instrumentos de evaluación, sin considerar la evaluación continua de los referentes de evaluación (CE y EAE). Debemos tener cuidado a la hora de asignar calificación a aspectos que no están recogidos en los referentes de evaluación. El ejemplo más claro que a todos nos vendría a la cabeza sería el clásico \u0026lsquo;\u0026lsquo;Comportamiento: 10%''. En la ponderación de la materia hemos de incluir todos los EAE, evitando dejar caer la mayoría del peso únicamente en unos pocos. No estaría de más considerar unos EAE imprescindibles (al menos uno por cada CE) en la ponderación que establezcamos, de forma que su adquisición suponga alcanzar la calificación de suficiente. Al hilo del punto anterior, hemos de tener cuidado a la hora de vincular algún EAE imprescindible a un solo instrumento y en un único momento del curso, pues nos plantearía problemas a la hora de plantear mecanismos de recuperación para el alumnado que no superase dicha situación. La información del curso anterior y los resultados de la sesión de evaluación inicial (que deberíamos realizar sin que esta posea efectos sobre la calificación del alumnado) han de tener un adecuado reflejo en nuestra PD. A la hora de señalar medidas de atención a la diversidad es importante que llevemos a cabo concreciones para el grupo de referencia. En la medida de lo posible, debemos evitar redactar un apartado excesivamente teórico y fuera de contexto. A la hora de decidir la metodología hemos de tener en cuenta las características del grupo, así como indicar explícitamente en qué unidad didáctica (UD) se aplicarán determinados principios metodológicos, sin olvidar listar los recursos didácticos necesarios. Debemos analizar los elementos transversales planteados en el PCE e identificar claramente en nuestra PD durante qué UD los desarrollaremos. Hemos de incluir actividades complementarias y extraescolares en nuestra PD, indicando qué actividades ordinarias complementan y, a ser posible, cuyo diseño sea interdisciplinar. Por otro lado, no olvidemos que son de carácter voluntario y, por tanto, no pueden tener efecto alguno sobre la calificación del alumnado. Es necesario que evaluemos nuestra PD en distintos momentos, a saber, al inicio del curso, a lo largo del curso y al final del curso. Para cada uno de estos momentos, incluiremos un proceso de evaluación y revisión.  Me dejo bastantes aspectos relevantes en el tintero, por lo que recomiendo encarecidamente la lectura completa del artículo. Además, las distintas tablas que aparecen en el documento pueden inspirarnos a la hora de relacionar elementos y resumir información relevante contenida en nuestra PD.\n","date":1531540779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531540779,"objectID":"6102b8ddfbfe9830ee6e5c75261e93b0","permalink":"https://imalexissaez.github.io/2018/07/14/errores-frecuentes-a-la-hora-de-elaborar-programaciones-didacticas/","publishdate":"2018-07-14T05:59:39+02:00","relpermalink":"/2018/07/14/errores-frecuentes-a-la-hora-de-elaborar-programaciones-didacticas/","section":"post","summary":"Breve análisis del artículo 'Guía para la elaboración de una programación didáctica en las etapas de Educación Primaria y Secundaria'.","tags":["Legislación","Programación didáctica"],"title":"Errores frecuentes a la hora de elaborar programaciones didácticas","type":"post"},{"authors":null,"categories":null,"content":"A nivel personal, de las cuatro partes en que se divide el procedimiento de selección de oposiciones, la asociada al supuesto práctico es aquella que encuentro más interesante. Cierto es que con un temario tan extenso como variado, esta parte precisa una buena dedicación de tiempo para preparala con garantías.\nEn este proyecto, por tanto, recogeré diversos problemas matemáticos enfocados a la preparación de oposiciones. Por comodidad, los agruparé por temática en la siguiente tabla:\n   Temática Problema     Combinatoria 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81   Complejos 4   Determinantes 2   Ecuaciones 57   Ecuaciones diofánticas [11] (/2018/09/22/una-historia-de-cheques-de-viaje/), 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58   Ecuaciones en diferencias 12, 13, 14, 15, 16   Inducción 1, 5, 6, 7, 8, 9   Teoría de números 3, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44    ","date":1531407448,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563753448,"objectID":"58baf0c5beeb80c6ebf7efd8f93b1490","permalink":"https://imalexissaez.github.io/proyecto/problemas/","publishdate":"2018-07-12T15:57:28+01:00","relpermalink":"/proyecto/problemas/","section":"project","summary":"Problemas matemáticos resueltos enfocados para la preparación de oposiciones.","tags":["Matemáticas"],"title":"Problemas (Oposición)","type":"project"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Problema 1: Demuestra que, para cada $n\\in\\mathbb{N}$, con $n\\geq 1$,\n$$ 1 + 2 + \\cdots + n = \\dfrac{n(n+1)}{2}. $$\n Generalmente, cuando abordamos problemas en los que tenemos que demostrar que cierta fórmula o afirmación se satisface, para un conjunto de índices de cardinal infinito (en esta ocasión hablaríamos del conjunto $n\\geq1$, con $n\\in\\mathbb{N}$), es recomendable que llevemos a cabo una primera aproximación a su resolución empleando el principio de inducción matemática.\nAsí pues, vamos a considerar la propiedad, que denotaremos por $P(n)$, dada en el enunciado del problema,\n$$ 1+2+\\cdots+n = \\dfrac{n(n+1)}{2}. $$\nPor lo que respecta al caso base, $P(1)$, rápidamente comprobamos que se verifica de manera trivial, ya que\n$$ 1 = \\dfrac{1\\cdot2}{2} = 1. $$\nAbordemos ahora el paso inductivo, para lo cual hemos de mostrar que si $P(n)$ se cumple, para un $n\\geq1$, entonces asimismo se satisface $P(n+1)$, cuya expresión es\n$$ 1+2+\\cdots+n+(n+1)=\\dfrac{(n+1)(n+2)}{2}. $$\nLa clave en este tipo de situaciones consiste en encontrar una manera acertada de manipular la conocida como hipótesis de inducción, $P(n)$, que nos ayude a verificar el resultado que estamos buscando comprobar.\nPor fortuna para nosotros, si nos fijamos en el miembro izquierdo de la ecuación de $P(n+1)$, apreciamos que directamente aparece la suma de los $n$ primeros números naturales, cuyo valor, por la hipótesis de inducción, es\n$$ \\dfrac{n(n+1)}{2}. $$\nEste hecho nos permite afirmar que\n$$ 1+2+\\cdots+n+(n+1) = \\dfrac{n(n+1)}{2} + (n+1). $$\nAhora, sumando algebraicamente ambos términos,\n$$ \\dfrac{n(n+1)}{2} + (n+1)= \\dfrac{n(n+1) + 2(n+1)}{2}= \\dfrac{(n+1)(n+2)}{2}, $$\nes decir, hemos llegado a mostrar que\n$$ 1+2+\\cdots+n+(n+1)=\\dfrac{(n+1)(n+2)}{2}, $$\ncompletando así el paso inductivo.\nAsí pues, por el principio de inducción matemática, podemos concluir que $P(n)$ se verifica para cada $n\\in\\mathbb{N}$, con $n\\geq 1$.\n Podría decir que la experiencia de usar KaTeX ha sido un tanto agridulce. La mayor parte del artículo procede de código fuente escrito en TeX y apenas he tenido que llevar cambio alguno en el código para que fuera interpretado correctamente por KaTeX, hecho ciertamente positivo. No obstante, no he sido capaz de trabajar con los entornos que, según la web oficial, están disponibles, como por ejemplo aligned o pmatrix. Esto, en ocasiones, temo que vaya a dificultar la narrativa o incluso a impedir la publicación de ejemplos que requieran estructuras matriciales.\nSeguiré investigando, ya que me gustaría ir publicando habitualmente problemas matemáticos sin tener que recurrir a la clásica solución de compartirlos en formato PDF vía algún servicio de alojamiento de ficheros.\nActualización: tras un descanso para aclarar ideas, ¡por fin he dado con la solución al problema de los entornos! Si escribimos\n$$\rx = \\begin{cases}\ra \u0026amp;\\text{if } b\\\\\rc \u0026amp;\\text{if } d\r\\end{cases}\r$$\r el resultado no se visualiza correctamente, y así sucede para cualquier entorno que requiera cambios de línea, como aligned, pmatrix, etc. La clave reside en el tratamiento que recibe en Markdown el carácter \\, que interfiere con el funcionamiento adecuado de KaTeX.\nLa solución pasa por \u0026ldquo;escapar\u0026rdquo; el mencionado carácter, de manera que, si habitualmente necesitamos dos para comenzar una nueva línea, ahora tendríamos que teclear cuatro. Además, en ocasiones, según el entorno que vayamos a emplear, es posible que debamos sacrificar las sangrías y escribir todo medianamente seguido.\nEs decir, el siguiente bloque de código\n$$\rx = \\begin{cases}\ra \u0026amp;\\text{if } b\\\\\\\\ c \u0026amp;\\text{if } d\r\\end{cases}\r$$\r funciona a la perfección, como podemos comprobar a continuación\n$$ x = \\begin{cases} a \u0026amp;\\text{if } b\\\\ c \u0026amp;\\text{if } d \\end{cases} $$\nEsto va a requerir cierto tiempo adicional para que edite algunas de las expresiones escritas con TeX, pero me alegro de poder tener a mi disposición la posibilidad de utilizar algunos entornos matemáticos básicos.\n","date":1531367979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531367979,"objectID":"befae3fe9614fa1d0b793962f77d44af","permalink":"https://imalexissaez.github.io/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/","publishdate":"2018-07-12T05:59:39+02:00","relpermalink":"/2018/07/12/probando-katex-con-un-problema-de-induccion-clasico/","section":"post","summary":"Problema 1: sumando números naturales.","tags":["Inducción","KaTeX","Problemas"],"title":"Probando KaTeX con un problema de inducción clásico","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"¡Ha llegado el momento que todos estábamos esperando! Tras un par de artículos en los que hemos preparado nuestros equipos instalando las herramientas necesarias, hoy veremos cómo generar nuestro primer sitio web con Hugo.\nEsta tercera entrada del Proyecto Metablog se va a apoyar en la guía de inicio recogida en la documentación oficial de Hugo, a la que podemos acceder a través de este enlace.\nEn primer lugar, abrimos la terminal Git Bash y nos dirigimos al directorio de nuestro disco duro donde tengamos pensado almacenar localmente el sitio web. En la mencionada guía recomiendan ubicar las páginas en la ruta C:\\Hugo\\Sites\\, aunque ya comenté en la anterior entrada que no era estrictamente necesario proceder de tal forma.\nDicho esto, en este artículo seguiremos al dedillo las indicaciones dadas en la guía, de manera que en la terminal tecleamos:\ncd c:/Hugo/Sites/\r El comando para generar un nuevo sitio web es hugo new site [path] [flags], donde sustituiremos [path] por la ruta al directorio donde almacenaremos nuestra página web. Por lo que respecta a las [flags], en el apartado de la documentación oficial dedicado a hugo new site tenemos el listado de las disponibles. No obstante, para una primera toma de contacto, no añadiremos ninguna de ellas.\nAsí pues, generemos un primer sitio de prueba y, en un alarde de extrema originalidad, ubiquémoslo en el directorio \\prueba\\. Para ello, escribimos en la terminal:\nhugo new site prueba\r Recibimos entonces un mensaje de felicitación (en caso contrario, convendría que revisáramos la instalación de Hugo siguiendo las indicaciones de esta entrada) y algunas instrucciones relacionadas con el uso de temas, la creación de contenidos y el acceso local al sitio web.\nHugo ha creado el directorio \\prueba\\ en el interior de la ruta donde hemos ejecutado el comando hugo new site. Además, ha poblado el mismo con algunas carpetas (vacías en su mayor parte), quedando una estructura como la que figura en la siguiente imagen:\n\r\rEstructura del sitio web.\r\r\rEn un futuro exploraremos con detalle el cometido de algunos de esos directorios que aparecen en la imagen (\\content\\ y \\layouts\\ son de extrema importancia, así como ese curioso archivo denominado config.toml). No obstante, por el momento, evitemos distraernos en exceso y sigamos las indicaciones de la guía.\nVolvemos a la terminal, nos movemos hacia el directorio \\prueba\\ e iniciamos un repositorio Git, acciones que requieren teclear los dos siguientes comandos:\ncd prueba\r git init\r En el siguiente paso de la guía nos invitan a instalar un tema para la web, Ananke, utilizando submodule (un comando de Git). No obstante, en este momento, me voy a desviar de las indicaciones dadas y optar por un método diferente de instalación de temas. A continuación, nos moveremos a la carpeta \\themes\\ y clonaremos en nuestro disco duro el propio repositorio del tema. Para ello, escribimos en la terminal:\ncd themes\r git clone https://github.com/budparr/gohugo-theme-ananke.git\r De esta manera, tenemos acceso localmente a un sitio web de prueba, con un poco de contenido ya generado, que nos permitirá hacernos una idea del aspecto final de nuestro sitio web utilizando el tema Ananke. Aunque soy consciente de que me estoy desviando \u0026lsquo;\u0026lsquo;ligeramente\u0026rsquo;\u0026rsquo; de la guía oficial, vamos a tomar esta senda para ver cómo luce nuestro sitio web.\nAbrimos el explorador de archivos de Windows y en el directorio donde hemos ubicado la página web (C:\\Hugo\\Sites\\prueba\\) accedemos a la carpeta themes. Una vez dentro de ella, hacemos doble clic sobre el directorio gohugo-theme-ananke y repetimos luego la acción con la carpeta denomiada exampleSite, cuyos contenidos son:\n\r\rContenido de la carpeta del sitio web de ejemplo.\r\r\rCopiamos tanto las dos carpetas, como el archivo config.toml, y pegamos todo en el directorio C:\\Hugo\\Sites\\prueba\\, reemplazando los ficheros existentes con el mismo nombre que en él se encuentran.\nAhora volvemos a la terminal, que todavía está apuntando a la carpeta \\themes\\ y tecleamos\ncd ...\r para volver al directorio raíz de nuestro sitio web. A continuación, para revisar el sitio web localmente escribimos\nhugo server\r y, para mi sorpresa, recibimos el siguiente mensaje de error Error: Unable to find theme Directory: C:\\Hugo\\gohugo-theme-ananke, hecho que debe ser el karma haciendo acto de presencia por haberme desviado de las indicaciones de la guía oficial.\nAunque no quería meterme en este artículo en el contenido del archivo config.toml, para evitar ofrecer mucha información de golpe, solucionemos rápidamente este pequeño bug para así poder revisar localmente el sitio web.\nHacemos clic derecho sobre el mencionado fichero y lo abrimos con Sublime Text. Modificamos la quinta línea que aparece, de\nthemesDir = \u0026quot;../..\u0026quot;\r a\n# themesDir = \u0026quot;../..\u0026quot;\r y guardamos los cambios.\nVolvemos ahora a la terminal y tecleamos de nuevo\nhugo server\r Tras recibir cierta información sobre el sitio, únicamente nos resta abrir nuestro navegador web favorito y en la barra de direcciones escribir http://localhost:1313/, accediendo así a la página de bienvenida de nuestro sitio web, que luce así de bien:\n\r\rSitio web con el tema Ananke\r\r\rEs el momento de navegar por la página, estudiar si nos complace estéticamente y comprobar si la manera en la que se organizan los contenidos es la apropiada para el sitio web que teníamos en mente. Cuando hayamos terminado el paseo, volvemos a la terminal y cerramos el servidor local utilizando la combinación de teclas Ctrl + C.\nEn el próximo artículo del Proyecto Metablog exploraremos, ahora sí y con mucho más detalle, la configuración básica del sitio web, que reside en el fichero config.toml.\n","date":1531281579,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531281579,"objectID":"2597b4382f756ec40f1e618c75037208","permalink":"https://imalexissaez.github.io/2018/07/11/creando-un-sitio-web-con-hugo/","publishdate":"2018-07-11T05:59:39+02:00","relpermalink":"/2018/07/11/creando-un-sitio-web-con-hugo/","section":"post","summary":"Lección 3: damos a luz un sitio web de prueba y lo revisamos localmente.","tags":["Hugo","Ananke"],"title":"Creando un sitio web con Hugo","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"En una entrada publicada hace unos días, comenté que utilizo el editor de texto plano Sublime Text 3 como herramienta predeterminada para escribir documentos con Markdown. Veamos cómo configurarlo para abordar tal empresa.\nSinceramente, tal y como por defecto instalamos el mencionado programa, podríamos trabajar sin problema alguno con este lenguaje de marcado ligero, ya que únicamente requiere un editor de texto plano para su elaboración y posteriores modificaciones.\nNo obstante, existe un paquete que mejora la experiencia de edición de manera considerable: Markdown Editing. Al abrir cualquier fichero redactado utilizando el mencionado lenguaje de marcado, su contenido se centra en pantalla, facilitando así enormemente su lectura. Además, elementos como títulos, cursivas, negritas, enlaces o código quedan resaltados de forma muy agradable.\nPara muestra, un botón:\n\r\rSublime Text 3 y Markdown Editing juntos.\r\r\rSi a todo ello le añadimos el modo sin distracciones que incorpora Sublime Text 3, al que se accede mediante la combinación de teclas Shift + F11, el resultado es una cómoda herramienta que permite generar documentos con Markdown eficientemente.\nEl procedimiento a seguir es el habitual a la hora de incorporar un nuevo paquete a Sublime Text 3:\n Si todavía no tenemos el complemento que permite instalar paquetes fácilmente, abrimos este enlace y copiamos el bloque de instrucciones que figura en el cuadro asociado a la versión de Sublime Text que utilicemos (a día de hoy, seguramente, será la 3). Abrimos la consola de Sublime Text 3, haciendo clic en el apartado Show Console del menú View (o utilizando su atajo de teclado asociado). En la ventana que aparece dentro del editor, pegamos el texto copiado durante el primer paso y pulsamos enter. Hacemos uso ahora del atajo de teclado Ctrl + Shift + P y empezamos a escribir install, hasta que quede resaltada la opción Package Control: Install Package y después pulsamos enter. A continuación, comenzamos a escribir markdown y utilizamos los cursores para seleccionar el paquete MarkdownEditing, pulsando de nuevo enter una vez lo hayamos conseguido.  De esta forma, basta ahora con que abramos en Sublime Text 3 cualquier archivo escrito con Markdown y experimentaremos los cambios estéticos que comentaba al principio de este artículo.\nPersonalmente, el esquema de colores que este paquete incorpora por defecto no me hace excesiva ilusión, acostumbrado como estoy a Monokai. Sin embargo, podemos seleccionar un tema oscuro desde el menú Preferences, apartado Package Settings, subapartado Markdown Editing, accediendo a Change color scheme... y escogiendo la opción Dark.\nFinalmente, por si fuera de interés, me gustaría destacar que también existen diversos paquetes que ofrecen la opción de previsualizar el documento que estamos redactando y refrescar el resultado cuando llevamos a cabo cualquier tipo de edición en él. No he entrado en detalles sobre ellos en este artículo simplemente porque utilizo un método diferente para llevar a cabo las mencionadas acciones.\n","date":1531195179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531195179,"objectID":"6c7321b74f34c40e9810cb93365831d5","permalink":"https://imalexissaez.github.io/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/","publishdate":"2018-07-10T05:59:39+02:00","relpermalink":"/2018/07/10/configurando-sublime-text-para-escribir-en-markdown/","section":"post","summary":"Analicemos cómo configurar un interesante complemento de Sublime Text 3 para trabajar con Markdown.","tags":["Markdown","Sublime Text 3"],"title":"Configurando Sublime Text para escribir en Markdown","type":"post"},{"authors":["Alexis Sáez"],"categories":["Oposiciones"],"content":"Echemos un vistazo en este artículo a la Ley 4 / 2018, de 21 de febrero, de la Generalitat, por la que se regula y promueve el plurilingüismo en el sistema educativo valenciano. Nos centraremos en la acreditación, capacitación y formación del profesorado.\nLa mencionada ley, disponible para su consulta en este enlace, fue publicada en el DOCV número 8240, de 22 de febrero de 2018, y en el BOE número 63, de 13 de marzo de 2018, estando vigente desde el 23 de Febrero de 2018.\nMe gustaría rescatar un dato que figura en el Preámbulo:\n los datos demolingüísticos y el conocimiento de la realidad sociolingüística de la Comunitat Valenciana, finalidad de las investigaciones sociológicas realizadas desde 1984 hasta la actualidad, nos confirman que solo alrededor de un 30% es plenamente competente en valenciano y solo un 6% lo es en inglés.\n Esta situación conlleva, como no podía ser de otra manera, a la que podríamos calificar como justificación de la mencionada ley:\n Se convierte, por tanto, en un deber social y educativo la necesidad de corregir los desequilibrios de competencia y uso del valenciano en el conjunto de la población actual, así como la falta de dominio efectivo del inglés como lengua de comunicación internacional.\n El Artículo 6 nos determina los tiempos mínimos destinados a los contenidos curriculares en cada una de las lenguas oficiales (al menos un 25% de las horas lectivas), así como en lengua extranjera (oscilando entre un 15% y un 25% de las horas lectivas). No obstante, me gustaría destacar que en el Artículo 11 figura que se promoverá que los centros educativos sostenidos con fondos públicos vehiculen el 50% del tiempo curricular en valenciano y el 25% de dicho tiempo en inglés.\nEl Capítulo V recoge La acreditación, capacitación y formación del profesorado, cuyo Artículo 25 dice:\n Artículo 25. Acreditación del conocimiento de lenguas: requisitos específicos del profesorado para los puestos docentes\n  Se considerará que dispone de la competencia suficiente para vehicular áreas no lingüísticas en castellano y en valenciano el profesorado que acredite nivel de conocimiento C1 de valenciano y C1 de castellano, respectivamente, de acuerdo con el Marco europeo común de referencia para las lenguas.\n  Sin perjuicio de lo establecido en la disposición transitoria segunda de esta ley, se considerará que dispone de la competencia suficiente para vehicular áreas en inglés el profesorado que acredite el nivel de conocimiento C1 de inglés, de acuerdo con el Marco europeo común de referencia para las lenguas.\n   Encontramos el calendario de implantación en la primera disposición transitoria, siendo:\n Curso 2018-2019. Educación infantil y primer ciclo de educación primaria. Curso 2019-2020. Segundo y tercer ciclo de educación primaria y centros de educación especial. Curso 2020-2021. Educación secundaria obligatoria, bachillerato, formación profesional y formación de personas adultas.  Finalmente, la segunda disposición transitoria dice:\n Segunda. Acreditación transitoria de la competencia lingüística en inglés\nCon carácter transitorio y hasta el curso académico 2026-2027, se considerará que dispone de la competencia suficiente para vehicular áreas en inglés el profesorado que acredite el nivel de conocimiento B2 de inglés, de acuerdo con el Marco europeo común de referencia para las lenguas.\n ","date":1531108779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531108779,"objectID":"3b47ea1d1120019c4269c62dcf60fc36","permalink":"https://imalexissaez.github.io/2018/07/09/ley-4-2018-sobre-el-plurilinguismo-en-el-sistema-educativo-valenciano/","publishdate":"2018-07-09T05:59:39+02:00","relpermalink":"/2018/07/09/ley-4-2018-sobre-el-plurilinguismo-en-el-sistema-educativo-valenciano/","section":"post","summary":"Breve análisis de una ley que pretende normalizar el uso del valenciano y potenciar el del inglés.","tags":["Legislación","Plurilingüismo"],"title":"Ley 4 / 2018, sobre el plurilingüismo en el sistema educativo valenciano","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Llevar a cabo la instalación de Hugo en Windows es extremadamente fácil, hecho que nos permite empezar a experimentar con esta tecnología en apenas unos minutos. Veamos, sin más dilación, todo el proceso en detalle.\nAsí pues, en este segundo artículo del Proyecto Metablog, retomaremos la senda en el lugar que nos quedamos al finalizar la primera entrada. Recuerdo que, en ella, instalamos un par de útiles herramientas en nuestro equipo (git y Sublime Text 3) y nos creamos una cuenta en el portal GitHub, que será donde alojemos tanto el código fuente de nuestros futuros sitios web, como los propios sitios web en sí.\nEn la documentación oficial de Hugo, existe una extensa página dedicada a su instalación, con una sección que orienta específicamente a los usuarios de Windows y a la que podemos acceder directamente a través de este enlace.\nLos desarrolladores han intentado que la experiencia de instalación sea muy intuitiva, pero, en mi opinión, alguna de las indicaciones puede no ser coherente con la estructura de archivos y carpetas que hayamos decidido implementar en nuestros equipos. ¿A qué se debe esta afirmación? Por ejemplo:\n Hugo no deja de ser simplemente un programa, por lo que en lugar de instalarlo donde indica la guía, quizá sería mejor opción ubicarlo en la carpeta Archivos de programa. Nos señalan, en la menciona guía, un directorio muy específico donde almacenar nuestros sitios web. No obstante, aunque vayamos a utilizar la pareja git + GitHub, es posible que nos interese, además, utilizar un servicio de alojamiento de archivos y, por tanto, ubicar las páginas en otra ruta diferente.  Simplemente lo comento para que quede claro que las instrucciones que, a continuación, compartiré admiten cierta flexibilidad a la hora de llevarlas a cabo. Dicho esto, sin más preámbulos, veamos cómo instalar Hugo en Windows.\nEn primer lugar, bien desde la terminal, bien desde el explorador de archivos de Windows, creamos en el directorio raíz de nuestro disco duro (generalmente C:\\) una carpeta denominada Hugo. En su interior engendramos otras dos carpetas: bin, donde almacenaremos la aplicación, y Sites, donde ubicaremos nuestros futuros sitios web. Al final, debemos tener disponibles las siguientes dos rutas:\n C:\\Hugo\\bin\\, y C:\\Hugo\\Sites\\.  Para ir acostumbrándonos al uso de la terminal Git Bash, todo el anterior proceso lo podíamos haber conseguido escribiendo en ella la siguiente serie de comandos:\ncd c:\r mkdir Hugo\r cd Hugo\r mkdir bin Sites\r A continuación, abrimos la página de descarga de Hugo siguiendo este enlace. A la hora de escribir estas líneas, la versión más reciente es la etiquetada como v0.42.2. Ahora, desplazamos con cuidado hacia abajo el extenso listado de ficheros, hasta dar con el adecuado para nuestro sistema operativo (en mi caso es hugo_0.42.2_Windows-64bit.zip). Hacemos clic sobre él e inmediatamente comenzará la descarga a nuestro disco duro de un archivo comprimido.\nActo seguido, descomprimimos el contenido de dicho archivo en la ruta C:\\Hugo\\bin\\ (o donde hayamos decidido que sería un buen sitio para almacenar la aplicación) y borramos el fichero que hemos descargado, pues no vamos a necesitarlo en un futuro próximo.\nDe esta manera, si desde la terminal nos desplazamos hasta la anterior ruta y escribimos hugo version, recibiremos el siguiente mensaje Hugo Static Site Generator v0.42.2 windows/amd64 BuildDate: 2018-06-28T12:36:53Z, que indica que hemos llevado a cabo la instalación con éxito.\nNo obstante, rápidamente vamos a encontrar un pequeño inconveniente a la hora de empezar a experimentar con Hugo. Si escribimos hugo version en cualquier otra ruta distinta a la indicada arriba, recibiremos en la terminal un mensaje de error como este: bash: hugo: command not found. Dado que nuestra intención es poder utilizar la aplicación en cualquier ruta de nuestro disco duro, tenemos que añadir la ubicación de Hugo al PATH de Windows.\nCada versión de Windows tiene una manera más o menos distinta y, en ocasiones, ciertamente enrevesada, de editar el PATH. Para ello, en Windows 10, comenzamos pulsando el botón de inicio y seleccionamos Configuración, accediendo así a la siguiente ventana:\n\r\rConfiguración de Windows.\r\r\rEn el cuadro de búsqueda escribimos \u0026ldquo;configuración avanzada\u0026rdquo; y seleccionamos la opción Ver la configuración avanzada del sistema, tal y como figura en la siguiente imagen:\n\r\rIlustración del cuadro de búsqueda.\r\r\rApareciendo así esta ventana:\n\r\rVentana de configuración avanzada del sistema.\r\r\rHacemos clic en el botón Variables de entorno\u0026hellip;, surgiendo entonces una nueva ventana. En ella seleccionamos la fila del primer cuadro denominada Path y pulsamos el botón Editar\u0026hellip;, que aparece justo debajo de dicho cuadro.\n\r\rVentana de variables de entorno.\r\r\rSurge, cual capricho de un diabólico destino que parece que quiere poner nuestro temple a prueba, otra nueva ventana (ya por fin la última), donde tenemos que hacer clic sobre el botón Nuevo y escribir C:\\Hugo\\bin\\. Finalmente, solo nos resta ir pulsando sobre el botón Aceptar sucesivas veces, hasta cerrar por completo la ristra de ventanas precedentes que en unos segundos hemos acumulado.\nAsí, si en cualquier ruta del sistema ahora tecleamos en la terminal hugo version, no aparecerá el anterior mensaje de comando desconocido, sino la versión de la aplicación instalada, tal y como pretendíamos.\nEn el próximo artículo del Proyecto Metablog exploraremos el proceso de creación de un sitio web utilizando Hugo.\n","date":1531022379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531022379,"objectID":"fbe580235af3d8c9e720df3a82555f59","permalink":"https://imalexissaez.github.io/2018/07/08/instalando-hugo-en-windows/","publishdate":"2018-07-08T05:59:39+02:00","relpermalink":"/2018/07/08/instalando-hugo-en-windows/","section":"post","summary":"Lección 2: cómo instalar Hugo en Windows sin morir en el intento.","tags":["Hugo","Windows"],"title":"Instalando Hugo en Windows","type":"post"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Si nos decidimos a utilizar este editor de texto plano para escribir en español, ¿tenemos entonces que prescindir sin remedio del uso del corrector ortográfico? ¡En absoluto! Veamos cómo configurar esta característica fácilmente.\nEn la instalación por defecto de Sublime Text 3, el mencionado corrector ortográfico únicamente tiene a su disposición dos listados de palabras, asociados estos a los idiomas:\n inglés británico, e inglés estadounidense (o \u0026lsquo;\u0026lsquo;americano\u0026rsquo;').  Comúnmente conocidos también como diccionarios (aunque no se incluyan los significados para las palabras contenidas en este tipo de listados nombrado), podemos seleccionar cualquiera de ellos a través del menú View, dentro del apartado Dictionary, y luego activar el modo de corrección ortográfica sin más que pulsar la tecla F6.\nEn apenas unos minutos podemos ampliar el número de listado de palabras siguiendo esta serie de pasos:\n Desde nuestro navegador habitual, acudimos a este repositorio de GitHub, donde encontraremos un extenso listado de diccionarios disponibles. Cada idioma tiene tres archivos asociados, con las extensiones .aff, .dic y .txt. Por ejemplo, si nos interesa que el corrector ortográfico de Sublime Text 3 sea capaz de utilizar un listado de palabras en español, los correspondientes ficheros que hemos de descargar serán: Spanish.aff, Spanish.dic y Spanish.txt. Si no vamos a clonar el repositorio a nuestro equipo y pretendemos bajar directamente los archivos desde GitHub, debemos tener cierto cuidado a la hora de hacerlo. No hay que utilizar la cásica estrategia de clic derecho y \u0026ldquo;Guardar enlace como\u0026hellip;\u0026rdquo; sobre los enlaces que aparecen en el listado del repositorio, puesto que descargaríamos tres archivos en formato .html. Una posible manera de proceder sería abrir cada uno de los enlaces de interés en una nueva pestaña y emplear entonces la estrategia de clic derecho y \u0026ldquo;Guardar enlace como\u0026hellip;\u0026rdquo; sobre el botón Raw que aparece en la parte superior derecha. Una vez tenemos en nuestro haber los tres archivos asociados al idioma que nos interesa, acudiremos a la carpeta Packages de Sublime Text 3, cuya ruta podemos encontrar a través del menú Preferences, pulsando sobre el apartado Browse Packages.... En tal localización crearemos un directorio llamado Language - Spanish y ubicaremos ahí los mencionados tres ficheros. Si ahora volvemos al apartado Dictionary del menú View, comprobaremos que podemos navegar por dos subapartados: uno asociado a los diccionarios para la lengua inglesa y otro para el correspondiente al idioma español. Seleccionamos este último y pulsamos la tecla F6, activando así el corrector ortográfico de Sublime Text 3 en dicho idioma. Los pasos 3 y 4 podemos repetirlos tantas veces como necesitemos en función del distinto número de diccionarios que estimemos que vayamos a emplear. El proceso que seguir es siempre el indicado, con los correspondientes cambios lógicos que cada nuevo idioma incorpora al procedimiento.  Dejo pendiente para una futura entrada explicar cómo he configurado Sublime Text 3 para convertirlo en un más que agradable editor de texto plano orientado a trabajar con documentos de tipo markdown.\n","date":1530856779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530856779,"objectID":"4f7c0f865dac039be6add7f112c7687e","permalink":"https://imalexissaez.github.io/2018/07/06/sobre-el-corrector-de-sublime-text/","publishdate":"2018-07-06T07:59:39+02:00","relpermalink":"/2018/07/06/sobre-el-corrector-de-sublime-text/","section":"post","summary":"Trabajar con Sublime Text 3 no implica renunciar al uso de un buen corrector ortográfico.","tags":["Sublime Text 3"],"title":"Sobre el corrector de Sublime Text","type":"post"},{"authors":null,"categories":null,"content":"Personalmente, me encanta experimentar con nuevas tecnologías y el campo del desarrollo web es cierto que posee una miríada de ellas con las que, literalmente, pasar cientos de horas de entretenimiento. La cifra incluso se incrementa si a ello le añadimos que, en algunas ocasiones, es necesario aprender algún lenguaje de programación (más allá de la combinación HTML con CSS) para poder llevar a cabo modificaciones personales en los sitios web.\nTras pasar por plataformas clásicas como Blogger o Wordpress, la construcción de sitios webs estáticos ha captado poderosamente mi atención, pues de momento se ajusta perfectamente a mis necesidades. Una breve idilio con la combinación Jekyll y Ruby (tristemente finalizado al encontrar ciertos problemas de velocidad a la hora de generar localmente las páginas web), me ha llevado en la actualidad a lidiar con Hugo. De momento, aunque todavía no he iniciado el aprendizaje de su lenguaje de programación asociado, Go, he de confesar que el resultado a la hora de trabajar con el sitio web es más que satisfactorio.\nEs por ello que, en este proyecto, recogeré a continuación diversas entradas del blog que ilustran detalladamente cómo generar una página web como Infinitos Contrastes, utilizando principalmente el tema Beautiful Hugo.\n   Lección Título     1 Preparando el equipo para Hugo   2 Instalando Hugo en Windows   3 Creando un sitio web con Hugo   4 Configurando el tema Ananke   5 Configurando el tema Beautiful Hugo (I)   6 Configurando el tema Beautiful Hugo (II)   7 Publicando la primera entrada en nuestro sitio web   8 Alojando nuestro sitio web en GitHub   9 Configurando el comportamiento de KaTeX   10 Mejorando la estética de los bloques de código   11 Unos cambios rápidos a las plantillas    ","date":1530802648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563807448,"objectID":"3a7fac17a9e0af99992ada027726b94c","permalink":"https://imalexissaez.github.io/proyecto/metablog/","publishdate":"2018-07-05T15:57:28+01:00","relpermalink":"/proyecto/metablog/","section":"project","summary":"Entradas del blog que ilustran cómo generar una página web como Infinitos Contrastes.","tags":["Desarrollo web"],"title":"Metablog (Hugo)","type":"project"},{"authors":["Alexis Sáez"],"categories":["Tutoriales"],"content":"Antes de lanzarnos, sin más, a generar sitios web con Hugo, conviene que instalemos una serie de herramientas que nos facilitarán la vida: un sistema de control de versiones (Git + GitHub) y un editor de texto plano (Sublime Text 3).\nTal es el propósito de esta primera entrada del Proyecto Metablog, que consistirá en una serie de artículos que documentarán todo el proceso de instalación de Hugo, el de la creación del propio sitio web empleando dicho generador y el de la personalización de la plantilla que actualmente estoy utilizando: Beautiful Hugo.\n1. Git El sistema de control de versiones al que personalmente estoy acostumbrado es Git, en cuya web oficial podemos encontrar una impresionante cantidad de información de interés. Si es la primera vez que escuchas hablar de Git o, en general, de los sistemas de control de versiones, quizá te resulte útil echar un vistazo a su tutorial.\n\r\rPágina oficial de Git.\r\r\rLa instalación de Git en Windows no podría ser más sencilla. Hacemos clic en este enlace y automáticamente se descargará la versión más reciente de Git (2.18.0 a la hora de escribir estas líneas).\n\r\rPágina de descarga de Git.\r\r\rUna vez se haya completado la descarga, ejecutamos el archivo e instalamos el programa. Durante el proceso de instalación tenemos que escoger en varios momentos entre distintas opciones. A este respecto, he de comentar que las que vienen marcadas por defecto me parecen adecuadas para una primera toma de contacto con Git.\nAl completar la instalación tenemos, además, acceso a una terminal de sistema, Git Bash, que personalmente es la que utilizo. Si bien es cierto que tenemos que emplear algunos comandos distintos a los podemos encontrar en la que por defecto acompaña a Windows, es fácil llevar a cabo la transición de una terminal a otra (puede resultar de ayuda este listado de comandos).\n\r\rLa terminal Git Bash en acción.\r\r\r2. GitHub GitHub es una plataforma de desarrollo colaborativo utilizada para almacenar proyectos empleando el sistema de control de versiones Git. Podemos encontrar más información en su web oficial. Al igual que antes, si es la primera vez que accedes a esta plataforma, convendría que le dedicases unos minutos al tutorial Hello World, disponible en esta página.\nUtilizaremos este portal para subir los archivos fuente que permitirán generar el sitio web, así como para alojar el propio sitio web en sí. Únicamente necesitaremos crear una cuenta de usuario para ello.\n\r\rPágina oficial de GitHub.\r\r\r3. Sublime Text 3 El dicho \u0026ldquo;Para gustos los colores\u0026rdquo; tendría en este apartado la versión \u0026ldquo;Para gustos los editores de texto plano\u0026rdquo;. En mi caso, los proyectos de programación que he realizado y todo el trabajo con generadores de web estáticas los he llevado a cabo, tanto con el antiguo Sublime Text 2, como con su más reciente versión: Sublime Text 3.\nEste editor de texto plano es bastante potente, rápido y la comunidad puede extender sus funcionalidades a través de paquetes. Además, su versión \u0026lsquo;\u0026lsquo;de prueba\u0026rsquo;\u0026rsquo; te permite utilizar la herramienta sin restricción alguna durante un período de tiempo ilimitado, con la única pega de aparecer un mensaje cada 20 o 30 veces que salvemos cualquier archivo y que te invita a comprar una licencia.\nNos podemos hacer con él a través de este enlace. Su proceso de instalación es similar\n\r\rPágina de descarga de Sublime Text 3.\r\r\rAdemás de cumplir de manera excelente sus labores a la hora de editar cualquier archivo de texto plano, Sublime Text 3 me encanta como herramienta para trabajar con archivos de tipo markdown, que será el formato que vamos a emplear para redactar el contenido de nuestro sitio web. En un futuro no muy lejano tengo pensado escribir un artículo explicando cómo llevar a cabo la configuración de este programa para lidiar de forma agradable con dicho tipo de ficheros.\nY hasta aquí el primer artículo del Proyecto Metablog, que deja nuestros equipos a punto para proceder a la instalación de Hugo y generar un sitio web.\n","date":1530763179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530763179,"objectID":"ed0b761fbabd060bf5bbbf36e817c5f8","permalink":"https://imalexissaez.github.io/2018/07/05/preparando-el-equipo-para-hugo/","publishdate":"2018-07-05T05:59:39+02:00","relpermalink":"/2018/07/05/preparando-el-equipo-para-hugo/","section":"post","summary":"Lección 1: cómo instalar un buen sistema de control de versiones y un excelente editor de texto plano.","tags":["Git","GitHub","Sublime Text 3"],"title":"Preparando el equipo para Hugo","type":"post"},{"authors":["Alexis Sáez"],"categories":["Reflexiones"],"content":"La llegada del verano viene acompañada, al menos en mi caso, por un período de experimentación, en el que suelo abordar nuevos intereses o explorar alguna tecnología que haya captado mi atención en los últimos meses.\nComo desvela el título de esta entrada, Hugo ha sido la primera candidata escogida. Ahora bien, ¿qué es Hugo? En pocas palabras, es una tecnología que permite fácilmente generar páginas web estáticas y de la que podemos encontrar abundante información en su sitio oficial.\nHasta hace apenas unos días, usaba Jekyll para elaborar Infinitos Contrastes, hecho que conduce lógica e irremediablemente a la siguiente cuestión: ¿por qué migrar a Hugo? ¿Acaso se debe a su impresionante velocidad a la hora de generar sitios webs?\nAunque atribuirle dicha causa al cambio estimo que me haría parecer más entendido de lo que verdaderamente soy, mentiría si afirmase que esa ha sido la auténtica razón. Dicho esto, confieso que tampoco me hacía excesiva ilusión el tiempo que le llevaba a la pareja Jekyll + Minimal Mistakes reflejar las modificaciones que iba realizando en el sitio web y que, generalmente, superaba con generosidad el minuto.\nAhora mismo, con Hugo, Infinitos Contrastes se genera completamente en menos de 400 milisegundos. Además, cada modificación que llevo a cabo en esta entrada requiere unos 75 milisegundos de espera para poder visualizar en el servidor local el resultado. Cuanto menos, se agradece el cambio en este sentido.\nAsí pues, si la velocidad no ha sido un factor determinante a la hora de explicar el cambio de tecnología, ¿por qué migrar a Hugo? Históricamente, Ruby y sus gemas (entre las que se encuentra Jekyll) me han dado bastantes más quebraderos de cabeza de los recomendables por utilizar Windows. El soporte oficial para este sistema operativo es más bien escaso y cualquier problema se convertía en una pequeña odisea en ocasiones ciertamente desquiciante.\nMe apetecía simplemente un cambio, con la esperanza de pasar página y olvidar esas batallas pasadas. Hugo es la alternativa a Jekyll más popular y las primeras impresiones que me he llevado son muy buenas. No dudo que en un futuro próximo tenga que librar alguna que otra encarnizada pelea, pero espero que el hecho de estar aprendiendo una nueva tecnología compense con creces las penurias que este proceso tiene aparejadas.\n","date":1530683979,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530683979,"objectID":"953f6ed353e0b55f73525fc1b3b0c4af","permalink":"https://imalexissaez.github.io/2018/07/04/migrando-a-hugo/","publishdate":"2018-07-04T07:59:39+02:00","relpermalink":"/2018/07/04/migrando-a-hugo/","section":"post","summary":"La falta de agilidad de Jekyll, a la hora de experimentar con la página web, me ha obligado a explorar alternativas.","tags":["Hugo","Jekyll","Minimal Mistakes"],"title":"Migrando a Hugo","type":"post"}]